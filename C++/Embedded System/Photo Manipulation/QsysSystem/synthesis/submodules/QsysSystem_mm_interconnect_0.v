// QsysSystem_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module QsysSystem_mm_interconnect_0 (
		input  wire        CLK_sys_clk_clk,                                                      //                                              CLK_sys_clk.clk
		input  wire        Processor_reset_n_reset_bridge_in_reset_reset,                        //                  Processor_reset_n_reset_bridge_in_reset.reset
		input  wire        video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset,           //     video_pixel_buffer_dma_0_reset_reset_bridge_in_reset.reset
		input  wire [28:0] Processor_data_master_address,                                        //                                    Processor_data_master.address
		output wire        Processor_data_master_waitrequest,                                    //                                                         .waitrequest
		input  wire [3:0]  Processor_data_master_byteenable,                                     //                                                         .byteenable
		input  wire        Processor_data_master_read,                                           //                                                         .read
		output wire [31:0] Processor_data_master_readdata,                                       //                                                         .readdata
		output wire        Processor_data_master_readdatavalid,                                  //                                                         .readdatavalid
		input  wire        Processor_data_master_write,                                          //                                                         .write
		input  wire [31:0] Processor_data_master_writedata,                                      //                                                         .writedata
		input  wire        Processor_data_master_debugaccess,                                    //                                                         .debugaccess
		input  wire [28:0] Processor_instruction_master_address,                                 //                             Processor_instruction_master.address
		output wire        Processor_instruction_master_waitrequest,                             //                                                         .waitrequest
		input  wire        Processor_instruction_master_read,                                    //                                                         .read
		output wire [31:0] Processor_instruction_master_readdata,                                //                                                         .readdata
		output wire        Processor_instruction_master_readdatavalid,                           //                                                         .readdatavalid
		input  wire [31:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_address,             //         video_pixel_buffer_dma_0_avalon_pixel_dma_master.address
		output wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_waitrequest,         //                                                         .waitrequest
		input  wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_read,                //                                                         .read
		output wire [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdata,            //                                                         .readdata
		output wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdatavalid,       //                                                         .readdatavalid
		input  wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_lock,                //                                                         .lock
		output wire [7:0]  Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_address,     // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave.address
		output wire        Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_write,       //                                                         .write
		output wire        Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_read,        //                                                         .read
		input  wire [31:0] Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_readdata,    //                                                         .readdata
		output wire [31:0] Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_writedata,   //                                                         .writedata
		output wire [3:0]  Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_byteenable,  //                                                         .byteenable
		input  wire        Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_waitrequest, //                                                         .waitrequest
		output wire        Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_chipselect,  //                                                         .chipselect
		output wire [1:0]  GREEN_LEDs_s1_address,                                                //                                            GREEN_LEDs_s1.address
		output wire        GREEN_LEDs_s1_write,                                                  //                                                         .write
		input  wire [31:0] GREEN_LEDs_s1_readdata,                                               //                                                         .readdata
		output wire [31:0] GREEN_LEDs_s1_writedata,                                              //                                                         .writedata
		output wire        GREEN_LEDs_s1_chipselect,                                             //                                                         .chipselect
		output wire [0:0]  JTAG_UART_avalon_jtag_slave_address,                                  //                              JTAG_UART_avalon_jtag_slave.address
		output wire        JTAG_UART_avalon_jtag_slave_write,                                    //                                                         .write
		output wire        JTAG_UART_avalon_jtag_slave_read,                                     //                                                         .read
		input  wire [31:0] JTAG_UART_avalon_jtag_slave_readdata,                                 //                                                         .readdata
		output wire [31:0] JTAG_UART_avalon_jtag_slave_writedata,                                //                                                         .writedata
		input  wire        JTAG_UART_avalon_jtag_slave_waitrequest,                              //                                                         .waitrequest
		output wire        JTAG_UART_avalon_jtag_slave_chipselect,                               //                                                         .chipselect
		output wire [1:0]  KEYS_s1_address,                                                      //                                                  KEYS_s1.address
		output wire        KEYS_s1_write,                                                        //                                                         .write
		input  wire [31:0] KEYS_s1_readdata,                                                     //                                                         .readdata
		output wire [31:0] KEYS_s1_writedata,                                                    //                                                         .writedata
		output wire        KEYS_s1_chipselect,                                                   //                                                         .chipselect
		output wire [9:0]  On_Chip_Mem_s1_address,                                               //                                           On_Chip_Mem_s1.address
		output wire        On_Chip_Mem_s1_write,                                                 //                                                         .write
		input  wire [31:0] On_Chip_Mem_s1_readdata,                                              //                                                         .readdata
		output wire [31:0] On_Chip_Mem_s1_writedata,                                             //                                                         .writedata
		output wire [3:0]  On_Chip_Mem_s1_byteenable,                                            //                                                         .byteenable
		output wire        On_Chip_Mem_s1_chipselect,                                            //                                                         .chipselect
		output wire        On_Chip_Mem_s1_clken,                                                 //                                                         .clken
		output wire [8:0]  Processor_jtag_debug_module_address,                                  //                              Processor_jtag_debug_module.address
		output wire        Processor_jtag_debug_module_write,                                    //                                                         .write
		output wire        Processor_jtag_debug_module_read,                                     //                                                         .read
		input  wire [31:0] Processor_jtag_debug_module_readdata,                                 //                                                         .readdata
		output wire [31:0] Processor_jtag_debug_module_writedata,                                //                                                         .writedata
		output wire [3:0]  Processor_jtag_debug_module_byteenable,                               //                                                         .byteenable
		input  wire        Processor_jtag_debug_module_waitrequest,                              //                                                         .waitrequest
		output wire        Processor_jtag_debug_module_debugaccess,                              //                                                         .debugaccess
		output wire [1:0]  RED_LEDs_s1_address,                                                  //                                              RED_LEDs_s1.address
		output wire        RED_LEDs_s1_write,                                                    //                                                         .write
		input  wire [31:0] RED_LEDs_s1_readdata,                                                 //                                                         .readdata
		output wire [31:0] RED_LEDs_s1_writedata,                                                //                                                         .writedata
		output wire        RED_LEDs_s1_chipselect,                                               //                                                         .chipselect
		output wire [24:0] SDRAM_s1_address,                                                     //                                                 SDRAM_s1.address
		output wire        SDRAM_s1_write,                                                       //                                                         .write
		output wire        SDRAM_s1_read,                                                        //                                                         .read
		input  wire [31:0] SDRAM_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] SDRAM_s1_writedata,                                                   //                                                         .writedata
		output wire [3:0]  SDRAM_s1_byteenable,                                                  //                                                         .byteenable
		input  wire        SDRAM_s1_readdatavalid,                                               //                                                         .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                                                 //                                                         .waitrequest
		output wire        SDRAM_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  SevSeg4MSB_s1_address,                                                //                                            SevSeg4MSB_s1.address
		output wire        SevSeg4MSB_s1_write,                                                  //                                                         .write
		input  wire [31:0] SevSeg4MSB_s1_readdata,                                               //                                                         .readdata
		output wire [31:0] SevSeg4MSB_s1_writedata,                                              //                                                         .writedata
		output wire        SevSeg4MSB_s1_chipselect,                                             //                                                         .chipselect
		output wire [1:0]  SevSegment_4LSB_s1_address,                                           //                                       SevSegment_4LSB_s1.address
		output wire        SevSegment_4LSB_s1_write,                                             //                                                         .write
		input  wire [31:0] SevSegment_4LSB_s1_readdata,                                          //                                                         .readdata
		output wire [31:0] SevSegment_4LSB_s1_writedata,                                         //                                                         .writedata
		output wire        SevSegment_4LSB_s1_chipselect,                                        //                                                         .chipselect
		output wire [19:0] sram_0_avalon_sram_slave_address,                                     //                                 sram_0_avalon_sram_slave.address
		output wire        sram_0_avalon_sram_slave_write,                                       //                                                         .write
		output wire        sram_0_avalon_sram_slave_read,                                        //                                                         .read
		input  wire [15:0] sram_0_avalon_sram_slave_readdata,                                    //                                                         .readdata
		output wire [15:0] sram_0_avalon_sram_slave_writedata,                                   //                                                         .writedata
		output wire [1:0]  sram_0_avalon_sram_slave_byteenable,                                  //                                                         .byteenable
		input  wire        sram_0_avalon_sram_slave_readdatavalid,                               //                                                         .readdatavalid
		output wire [1:0]  Switches_s1_address,                                                  //                                              Switches_s1.address
		input  wire [31:0] Switches_s1_readdata,                                                 //                                                         .readdata
		output wire [0:0]  SYSID_control_slave_address,                                          //                                      SYSID_control_slave.address
		input  wire [31:0] SYSID_control_slave_readdata,                                         //                                                         .readdata
		output wire [2:0]  timer_0_s1_address,                                                   //                                               timer_0_s1.address
		output wire        timer_0_s1_write,                                                     //                                                         .write
		input  wire [15:0] timer_0_s1_readdata,                                                  //                                                         .readdata
		output wire [15:0] timer_0_s1_writedata,                                                 //                                                         .writedata
		output wire        timer_0_s1_chipselect,                                                //                                                         .chipselect
		output wire [2:0]  timer_1_s1_address,                                                   //                                               timer_1_s1.address
		output wire        timer_1_s1_write,                                                     //                                                         .write
		input  wire [15:0] timer_1_s1_readdata,                                                  //                                                         .readdata
		output wire [15:0] timer_1_s1_writedata,                                                 //                                                         .writedata
		output wire        timer_1_s1_chipselect,                                                //                                                         .chipselect
		output wire [1:0]  video_pixel_buffer_dma_0_avalon_control_slave_address,                //            video_pixel_buffer_dma_0_avalon_control_slave.address
		output wire        video_pixel_buffer_dma_0_avalon_control_slave_write,                  //                                                         .write
		output wire        video_pixel_buffer_dma_0_avalon_control_slave_read,                   //                                                         .read
		input  wire [31:0] video_pixel_buffer_dma_0_avalon_control_slave_readdata,               //                                                         .readdata
		output wire [31:0] video_pixel_buffer_dma_0_avalon_control_slave_writedata,              //                                                         .writedata
		output wire [3:0]  video_pixel_buffer_dma_0_avalon_control_slave_byteenable              //                                                         .byteenable
	);

	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;                                     // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_waitrequest -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_waitrequest
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata;                                        // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_readdata -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_readdata
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;                                     // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_debugaccess -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_debugaccess
	wire   [31:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address;                                         // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_address -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_address
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read;                                            // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_read -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_read
	wire    [1:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable;                                      // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_byteenable -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_byteenable
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid;                                   // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_readdatavalid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_readdatavalid
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock;                                            // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_lock -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_lock
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write;                                           // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_write -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_write
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata;                                       // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_writedata -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_writedata
	wire    [1:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount;                                      // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_burstcount -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_burstcount
	wire          processor_data_master_translator_avalon_universal_master_0_waitrequest;                                                                // Processor_data_master_agent:av_waitrequest -> Processor_data_master_translator:uav_waitrequest
	wire   [31:0] processor_data_master_translator_avalon_universal_master_0_readdata;                                                                   // Processor_data_master_agent:av_readdata -> Processor_data_master_translator:uav_readdata
	wire          processor_data_master_translator_avalon_universal_master_0_debugaccess;                                                                // Processor_data_master_translator:uav_debugaccess -> Processor_data_master_agent:av_debugaccess
	wire   [31:0] processor_data_master_translator_avalon_universal_master_0_address;                                                                    // Processor_data_master_translator:uav_address -> Processor_data_master_agent:av_address
	wire          processor_data_master_translator_avalon_universal_master_0_read;                                                                       // Processor_data_master_translator:uav_read -> Processor_data_master_agent:av_read
	wire    [3:0] processor_data_master_translator_avalon_universal_master_0_byteenable;                                                                 // Processor_data_master_translator:uav_byteenable -> Processor_data_master_agent:av_byteenable
	wire          processor_data_master_translator_avalon_universal_master_0_readdatavalid;                                                              // Processor_data_master_agent:av_readdatavalid -> Processor_data_master_translator:uav_readdatavalid
	wire          processor_data_master_translator_avalon_universal_master_0_lock;                                                                       // Processor_data_master_translator:uav_lock -> Processor_data_master_agent:av_lock
	wire          processor_data_master_translator_avalon_universal_master_0_write;                                                                      // Processor_data_master_translator:uav_write -> Processor_data_master_agent:av_write
	wire   [31:0] processor_data_master_translator_avalon_universal_master_0_writedata;                                                                  // Processor_data_master_translator:uav_writedata -> Processor_data_master_agent:av_writedata
	wire    [2:0] processor_data_master_translator_avalon_universal_master_0_burstcount;                                                                 // Processor_data_master_translator:uav_burstcount -> Processor_data_master_agent:av_burstcount
	wire          processor_instruction_master_translator_avalon_universal_master_0_waitrequest;                                                         // Processor_instruction_master_agent:av_waitrequest -> Processor_instruction_master_translator:uav_waitrequest
	wire   [31:0] processor_instruction_master_translator_avalon_universal_master_0_readdata;                                                            // Processor_instruction_master_agent:av_readdata -> Processor_instruction_master_translator:uav_readdata
	wire          processor_instruction_master_translator_avalon_universal_master_0_debugaccess;                                                         // Processor_instruction_master_translator:uav_debugaccess -> Processor_instruction_master_agent:av_debugaccess
	wire   [31:0] processor_instruction_master_translator_avalon_universal_master_0_address;                                                             // Processor_instruction_master_translator:uav_address -> Processor_instruction_master_agent:av_address
	wire          processor_instruction_master_translator_avalon_universal_master_0_read;                                                                // Processor_instruction_master_translator:uav_read -> Processor_instruction_master_agent:av_read
	wire    [3:0] processor_instruction_master_translator_avalon_universal_master_0_byteenable;                                                          // Processor_instruction_master_translator:uav_byteenable -> Processor_instruction_master_agent:av_byteenable
	wire          processor_instruction_master_translator_avalon_universal_master_0_readdatavalid;                                                       // Processor_instruction_master_agent:av_readdatavalid -> Processor_instruction_master_translator:uav_readdatavalid
	wire          processor_instruction_master_translator_avalon_universal_master_0_lock;                                                                // Processor_instruction_master_translator:uav_lock -> Processor_instruction_master_agent:av_lock
	wire          processor_instruction_master_translator_avalon_universal_master_0_write;                                                               // Processor_instruction_master_translator:uav_write -> Processor_instruction_master_agent:av_write
	wire   [31:0] processor_instruction_master_translator_avalon_universal_master_0_writedata;                                                           // Processor_instruction_master_translator:uav_writedata -> Processor_instruction_master_agent:av_writedata
	wire    [2:0] processor_instruction_master_translator_avalon_universal_master_0_burstcount;                                                          // Processor_instruction_master_translator:uav_burstcount -> Processor_instruction_master_agent:av_burstcount
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata;                                                                       // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_readdata -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_readdata
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest;                                                                    // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_waitrequest -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_waitrequest
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess;                                                                    // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_debugaccess -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_debugaccess
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address;                                                                        // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_address -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_address
	wire    [3:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable;                                                                     // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_byteenable -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_byteenable
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read;                                                                           // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_read -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_read
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid;                                                                  // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_readdatavalid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_readdatavalid
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock;                                                                           // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_lock -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_lock
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata;                                                                      // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_writedata -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_writedata
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write;                                                                          // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_write -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_write
	wire    [2:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount;                                                                     // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_burstcount -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_burstcount
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid;                                                                   // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data;                                                                    // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready;                                                                   // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket;                                                           // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket;                                                             // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid;                                                                // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_valid
	wire  [110:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data;                                                                 // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready;                                                                // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket;                                                        // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket;                                                          // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                                                                     // cmd_mux:src_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_src_data;                                                                                                                      // cmd_mux:src_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                                                                     // video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [15:0] cmd_mux_src_channel;                                                                                                                   // cmd_mux:src_channel -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                                                             // cmd_mux:src_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                                               // cmd_mux:src_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_endofpacket
	wire   [15:0] sram_0_avalon_sram_slave_agent_m0_readdata;                                                                                            // sram_0_avalon_sram_slave_translator:uav_readdata -> sram_0_avalon_sram_slave_agent:m0_readdata
	wire          sram_0_avalon_sram_slave_agent_m0_waitrequest;                                                                                         // sram_0_avalon_sram_slave_translator:uav_waitrequest -> sram_0_avalon_sram_slave_agent:m0_waitrequest
	wire          sram_0_avalon_sram_slave_agent_m0_debugaccess;                                                                                         // sram_0_avalon_sram_slave_agent:m0_debugaccess -> sram_0_avalon_sram_slave_translator:uav_debugaccess
	wire   [31:0] sram_0_avalon_sram_slave_agent_m0_address;                                                                                             // sram_0_avalon_sram_slave_agent:m0_address -> sram_0_avalon_sram_slave_translator:uav_address
	wire    [1:0] sram_0_avalon_sram_slave_agent_m0_byteenable;                                                                                          // sram_0_avalon_sram_slave_agent:m0_byteenable -> sram_0_avalon_sram_slave_translator:uav_byteenable
	wire          sram_0_avalon_sram_slave_agent_m0_read;                                                                                                // sram_0_avalon_sram_slave_agent:m0_read -> sram_0_avalon_sram_slave_translator:uav_read
	wire          sram_0_avalon_sram_slave_agent_m0_readdatavalid;                                                                                       // sram_0_avalon_sram_slave_translator:uav_readdatavalid -> sram_0_avalon_sram_slave_agent:m0_readdatavalid
	wire          sram_0_avalon_sram_slave_agent_m0_lock;                                                                                                // sram_0_avalon_sram_slave_agent:m0_lock -> sram_0_avalon_sram_slave_translator:uav_lock
	wire   [15:0] sram_0_avalon_sram_slave_agent_m0_writedata;                                                                                           // sram_0_avalon_sram_slave_agent:m0_writedata -> sram_0_avalon_sram_slave_translator:uav_writedata
	wire          sram_0_avalon_sram_slave_agent_m0_write;                                                                                               // sram_0_avalon_sram_slave_agent:m0_write -> sram_0_avalon_sram_slave_translator:uav_write
	wire    [1:0] sram_0_avalon_sram_slave_agent_m0_burstcount;                                                                                          // sram_0_avalon_sram_slave_agent:m0_burstcount -> sram_0_avalon_sram_slave_translator:uav_burstcount
	wire          sram_0_avalon_sram_slave_agent_rf_source_valid;                                                                                        // sram_0_avalon_sram_slave_agent:rf_source_valid -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_valid
	wire   [92:0] sram_0_avalon_sram_slave_agent_rf_source_data;                                                                                         // sram_0_avalon_sram_slave_agent:rf_source_data -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_data
	wire          sram_0_avalon_sram_slave_agent_rf_source_ready;                                                                                        // sram_0_avalon_sram_slave_agent_rsp_fifo:in_ready -> sram_0_avalon_sram_slave_agent:rf_source_ready
	wire          sram_0_avalon_sram_slave_agent_rf_source_startofpacket;                                                                                // sram_0_avalon_sram_slave_agent:rf_source_startofpacket -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rf_source_endofpacket;                                                                                  // sram_0_avalon_sram_slave_agent:rf_source_endofpacket -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid;                                                                                     // sram_0_avalon_sram_slave_agent_rsp_fifo:out_valid -> sram_0_avalon_sram_slave_agent:rf_sink_valid
	wire   [92:0] sram_0_avalon_sram_slave_agent_rsp_fifo_out_data;                                                                                      // sram_0_avalon_sram_slave_agent_rsp_fifo:out_data -> sram_0_avalon_sram_slave_agent:rf_sink_data
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready;                                                                                     // sram_0_avalon_sram_slave_agent:rf_sink_ready -> sram_0_avalon_sram_slave_agent_rsp_fifo:out_ready
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket;                                                                             // sram_0_avalon_sram_slave_agent_rsp_fifo:out_startofpacket -> sram_0_avalon_sram_slave_agent:rf_sink_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket;                                                                               // sram_0_avalon_sram_slave_agent_rsp_fifo:out_endofpacket -> sram_0_avalon_sram_slave_agent:rf_sink_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid;                                                                                   // sram_0_avalon_sram_slave_agent:rdata_fifo_src_valid -> sram_0_avalon_sram_slave_agent_rdata_fifo:in_valid
	wire   [17:0] sram_0_avalon_sram_slave_agent_rdata_fifo_src_data;                                                                                    // sram_0_avalon_sram_slave_agent:rdata_fifo_src_data -> sram_0_avalon_sram_slave_agent_rdata_fifo:in_data
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready;                                                                                   // sram_0_avalon_sram_slave_agent_rdata_fifo:in_ready -> sram_0_avalon_sram_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                                                                 // SYSID_control_slave_translator:uav_readdata -> SYSID_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                                                                              // SYSID_control_slave_translator:uav_waitrequest -> SYSID_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                                                                              // SYSID_control_slave_agent:m0_debugaccess -> SYSID_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                                                                                  // SYSID_control_slave_agent:m0_address -> SYSID_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                                                                               // SYSID_control_slave_agent:m0_byteenable -> SYSID_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                                                                     // SYSID_control_slave_agent:m0_read -> SYSID_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                                                                            // SYSID_control_slave_translator:uav_readdatavalid -> SYSID_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                                                                     // SYSID_control_slave_agent:m0_lock -> SYSID_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                                                                                // SYSID_control_slave_agent:m0_writedata -> SYSID_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                                                                    // SYSID_control_slave_agent:m0_write -> SYSID_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                                                                               // SYSID_control_slave_agent:m0_burstcount -> SYSID_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                                                                             // SYSID_control_slave_agent:rf_source_valid -> SYSID_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] sysid_control_slave_agent_rf_source_data;                                                                                              // SYSID_control_slave_agent:rf_source_data -> SYSID_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                                                                             // SYSID_control_slave_agent_rsp_fifo:in_ready -> SYSID_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                                                                     // SYSID_control_slave_agent:rf_source_startofpacket -> SYSID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                                                                       // SYSID_control_slave_agent:rf_source_endofpacket -> SYSID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                                                                          // SYSID_control_slave_agent_rsp_fifo:out_valid -> SYSID_control_slave_agent:rf_sink_valid
	wire  [110:0] sysid_control_slave_agent_rsp_fifo_out_data;                                                                                           // SYSID_control_slave_agent_rsp_fifo:out_data -> SYSID_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                                                                          // SYSID_control_slave_agent:rf_sink_ready -> SYSID_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                                                                  // SYSID_control_slave_agent_rsp_fifo:out_startofpacket -> SYSID_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                                                                    // SYSID_control_slave_agent_rsp_fifo:out_endofpacket -> SYSID_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                                                 // cmd_mux_002:src_valid -> SYSID_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_002_src_data;                                                                                                                  // cmd_mux_002:src_data -> SYSID_control_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                                                                 // SYSID_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [15:0] cmd_mux_002_src_channel;                                                                                                               // cmd_mux_002:src_channel -> SYSID_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                                                         // cmd_mux_002:src_startofpacket -> SYSID_control_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                                                           // cmd_mux_002:src_endofpacket -> SYSID_control_slave_agent:cp_endofpacket
	wire   [31:0] processor_jtag_debug_module_agent_m0_readdata;                                                                                         // Processor_jtag_debug_module_translator:uav_readdata -> Processor_jtag_debug_module_agent:m0_readdata
	wire          processor_jtag_debug_module_agent_m0_waitrequest;                                                                                      // Processor_jtag_debug_module_translator:uav_waitrequest -> Processor_jtag_debug_module_agent:m0_waitrequest
	wire          processor_jtag_debug_module_agent_m0_debugaccess;                                                                                      // Processor_jtag_debug_module_agent:m0_debugaccess -> Processor_jtag_debug_module_translator:uav_debugaccess
	wire   [31:0] processor_jtag_debug_module_agent_m0_address;                                                                                          // Processor_jtag_debug_module_agent:m0_address -> Processor_jtag_debug_module_translator:uav_address
	wire    [3:0] processor_jtag_debug_module_agent_m0_byteenable;                                                                                       // Processor_jtag_debug_module_agent:m0_byteenable -> Processor_jtag_debug_module_translator:uav_byteenable
	wire          processor_jtag_debug_module_agent_m0_read;                                                                                             // Processor_jtag_debug_module_agent:m0_read -> Processor_jtag_debug_module_translator:uav_read
	wire          processor_jtag_debug_module_agent_m0_readdatavalid;                                                                                    // Processor_jtag_debug_module_translator:uav_readdatavalid -> Processor_jtag_debug_module_agent:m0_readdatavalid
	wire          processor_jtag_debug_module_agent_m0_lock;                                                                                             // Processor_jtag_debug_module_agent:m0_lock -> Processor_jtag_debug_module_translator:uav_lock
	wire   [31:0] processor_jtag_debug_module_agent_m0_writedata;                                                                                        // Processor_jtag_debug_module_agent:m0_writedata -> Processor_jtag_debug_module_translator:uav_writedata
	wire          processor_jtag_debug_module_agent_m0_write;                                                                                            // Processor_jtag_debug_module_agent:m0_write -> Processor_jtag_debug_module_translator:uav_write
	wire    [2:0] processor_jtag_debug_module_agent_m0_burstcount;                                                                                       // Processor_jtag_debug_module_agent:m0_burstcount -> Processor_jtag_debug_module_translator:uav_burstcount
	wire          processor_jtag_debug_module_agent_rf_source_valid;                                                                                     // Processor_jtag_debug_module_agent:rf_source_valid -> Processor_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [110:0] processor_jtag_debug_module_agent_rf_source_data;                                                                                      // Processor_jtag_debug_module_agent:rf_source_data -> Processor_jtag_debug_module_agent_rsp_fifo:in_data
	wire          processor_jtag_debug_module_agent_rf_source_ready;                                                                                     // Processor_jtag_debug_module_agent_rsp_fifo:in_ready -> Processor_jtag_debug_module_agent:rf_source_ready
	wire          processor_jtag_debug_module_agent_rf_source_startofpacket;                                                                             // Processor_jtag_debug_module_agent:rf_source_startofpacket -> Processor_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire          processor_jtag_debug_module_agent_rf_source_endofpacket;                                                                               // Processor_jtag_debug_module_agent:rf_source_endofpacket -> Processor_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          processor_jtag_debug_module_agent_rsp_fifo_out_valid;                                                                                  // Processor_jtag_debug_module_agent_rsp_fifo:out_valid -> Processor_jtag_debug_module_agent:rf_sink_valid
	wire  [110:0] processor_jtag_debug_module_agent_rsp_fifo_out_data;                                                                                   // Processor_jtag_debug_module_agent_rsp_fifo:out_data -> Processor_jtag_debug_module_agent:rf_sink_data
	wire          processor_jtag_debug_module_agent_rsp_fifo_out_ready;                                                                                  // Processor_jtag_debug_module_agent:rf_sink_ready -> Processor_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                                                                          // Processor_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> Processor_jtag_debug_module_agent:rf_sink_startofpacket
	wire          processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                                                                            // Processor_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> Processor_jtag_debug_module_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                                                 // cmd_mux_003:src_valid -> Processor_jtag_debug_module_agent:cp_valid
	wire  [109:0] cmd_mux_003_src_data;                                                                                                                  // cmd_mux_003:src_data -> Processor_jtag_debug_module_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                                                                 // Processor_jtag_debug_module_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [15:0] cmd_mux_003_src_channel;                                                                                                               // cmd_mux_003:src_channel -> Processor_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                                                         // cmd_mux_003:src_startofpacket -> Processor_jtag_debug_module_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                                                           // cmd_mux_003:src_endofpacket -> Processor_jtag_debug_module_agent:cp_endofpacket
	wire   [31:0] on_chip_mem_s1_agent_m0_readdata;                                                                                                      // On_Chip_Mem_s1_translator:uav_readdata -> On_Chip_Mem_s1_agent:m0_readdata
	wire          on_chip_mem_s1_agent_m0_waitrequest;                                                                                                   // On_Chip_Mem_s1_translator:uav_waitrequest -> On_Chip_Mem_s1_agent:m0_waitrequest
	wire          on_chip_mem_s1_agent_m0_debugaccess;                                                                                                   // On_Chip_Mem_s1_agent:m0_debugaccess -> On_Chip_Mem_s1_translator:uav_debugaccess
	wire   [31:0] on_chip_mem_s1_agent_m0_address;                                                                                                       // On_Chip_Mem_s1_agent:m0_address -> On_Chip_Mem_s1_translator:uav_address
	wire    [3:0] on_chip_mem_s1_agent_m0_byteenable;                                                                                                    // On_Chip_Mem_s1_agent:m0_byteenable -> On_Chip_Mem_s1_translator:uav_byteenable
	wire          on_chip_mem_s1_agent_m0_read;                                                                                                          // On_Chip_Mem_s1_agent:m0_read -> On_Chip_Mem_s1_translator:uav_read
	wire          on_chip_mem_s1_agent_m0_readdatavalid;                                                                                                 // On_Chip_Mem_s1_translator:uav_readdatavalid -> On_Chip_Mem_s1_agent:m0_readdatavalid
	wire          on_chip_mem_s1_agent_m0_lock;                                                                                                          // On_Chip_Mem_s1_agent:m0_lock -> On_Chip_Mem_s1_translator:uav_lock
	wire   [31:0] on_chip_mem_s1_agent_m0_writedata;                                                                                                     // On_Chip_Mem_s1_agent:m0_writedata -> On_Chip_Mem_s1_translator:uav_writedata
	wire          on_chip_mem_s1_agent_m0_write;                                                                                                         // On_Chip_Mem_s1_agent:m0_write -> On_Chip_Mem_s1_translator:uav_write
	wire    [2:0] on_chip_mem_s1_agent_m0_burstcount;                                                                                                    // On_Chip_Mem_s1_agent:m0_burstcount -> On_Chip_Mem_s1_translator:uav_burstcount
	wire          on_chip_mem_s1_agent_rf_source_valid;                                                                                                  // On_Chip_Mem_s1_agent:rf_source_valid -> On_Chip_Mem_s1_agent_rsp_fifo:in_valid
	wire  [110:0] on_chip_mem_s1_agent_rf_source_data;                                                                                                   // On_Chip_Mem_s1_agent:rf_source_data -> On_Chip_Mem_s1_agent_rsp_fifo:in_data
	wire          on_chip_mem_s1_agent_rf_source_ready;                                                                                                  // On_Chip_Mem_s1_agent_rsp_fifo:in_ready -> On_Chip_Mem_s1_agent:rf_source_ready
	wire          on_chip_mem_s1_agent_rf_source_startofpacket;                                                                                          // On_Chip_Mem_s1_agent:rf_source_startofpacket -> On_Chip_Mem_s1_agent_rsp_fifo:in_startofpacket
	wire          on_chip_mem_s1_agent_rf_source_endofpacket;                                                                                            // On_Chip_Mem_s1_agent:rf_source_endofpacket -> On_Chip_Mem_s1_agent_rsp_fifo:in_endofpacket
	wire          on_chip_mem_s1_agent_rsp_fifo_out_valid;                                                                                               // On_Chip_Mem_s1_agent_rsp_fifo:out_valid -> On_Chip_Mem_s1_agent:rf_sink_valid
	wire  [110:0] on_chip_mem_s1_agent_rsp_fifo_out_data;                                                                                                // On_Chip_Mem_s1_agent_rsp_fifo:out_data -> On_Chip_Mem_s1_agent:rf_sink_data
	wire          on_chip_mem_s1_agent_rsp_fifo_out_ready;                                                                                               // On_Chip_Mem_s1_agent:rf_sink_ready -> On_Chip_Mem_s1_agent_rsp_fifo:out_ready
	wire          on_chip_mem_s1_agent_rsp_fifo_out_startofpacket;                                                                                       // On_Chip_Mem_s1_agent_rsp_fifo:out_startofpacket -> On_Chip_Mem_s1_agent:rf_sink_startofpacket
	wire          on_chip_mem_s1_agent_rsp_fifo_out_endofpacket;                                                                                         // On_Chip_Mem_s1_agent_rsp_fifo:out_endofpacket -> On_Chip_Mem_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                                                 // cmd_mux_004:src_valid -> On_Chip_Mem_s1_agent:cp_valid
	wire  [109:0] cmd_mux_004_src_data;                                                                                                                  // cmd_mux_004:src_data -> On_Chip_Mem_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                                                                 // On_Chip_Mem_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [15:0] cmd_mux_004_src_channel;                                                                                                               // cmd_mux_004:src_channel -> On_Chip_Mem_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                                                         // cmd_mux_004:src_startofpacket -> On_Chip_Mem_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                                                           // cmd_mux_004:src_endofpacket -> On_Chip_Mem_s1_agent:cp_endofpacket
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                                                                            // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                                                                         // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                                                                         // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                                                                             // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                                                                          // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                                                                // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                                                                       // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                                                                // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                                                                           // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                                                               // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                                                                          // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                                                                        // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire  [110:0] sdram_s1_agent_rf_source_data;                                                                                                         // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                                                                        // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                                                                // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                                                                  // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                                                                     // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire  [110:0] sdram_s1_agent_rsp_fifo_out_data;                                                                                                      // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                                                                     // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                                                             // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                                                               // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                                                 // cmd_mux_005:src_valid -> SDRAM_s1_agent:cp_valid
	wire  [109:0] cmd_mux_005_src_data;                                                                                                                  // cmd_mux_005:src_data -> SDRAM_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                                                                 // SDRAM_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [15:0] cmd_mux_005_src_channel;                                                                                                               // cmd_mux_005:src_channel -> SDRAM_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                                                         // cmd_mux_005:src_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                                                           // cmd_mux_005:src_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                                                                         // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                                                                      // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                                                                      // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                                                                          // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                                                                       // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                                                             // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                                                                    // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                                                             // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                                                                        // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                                                            // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                                                                       // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                                                                     // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [110:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                                                                      // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                                                                     // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                                                             // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                                                               // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                                                                  // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [110:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                                                                   // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                                                                  // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                                                          // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                                                            // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                                                                 // cmd_mux_006:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [109:0] cmd_mux_006_src_data;                                                                                                                  // cmd_mux_006:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                                                                 // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [15:0] cmd_mux_006_src_channel;                                                                                                               // cmd_mux_006:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                                                         // cmd_mux_006:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                                                           // cmd_mux_006:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdata;                                                            // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_readdata -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_readdata
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_waitrequest;                                                         // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_waitrequest -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_waitrequest
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_debugaccess;                                                         // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_debugaccess -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_debugaccess
	wire   [31:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_address;                                                             // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_address -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_address
	wire    [3:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_byteenable;                                                          // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_byteenable -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_byteenable
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_read;                                                                // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_read -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_read
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdatavalid;                                                       // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_readdatavalid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_readdatavalid
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_lock;                                                                // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_lock -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_lock
	wire   [31:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_writedata;                                                           // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_writedata -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_writedata
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_write;                                                               // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_write -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_write
	wire    [2:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_burstcount;                                                          // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_burstcount -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_burstcount
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_valid;                                                        // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_valid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_valid
	wire  [110:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_data;                                                         // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_data -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_data
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_ready;                                                        // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_ready -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_ready
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_startofpacket;                                                // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_startofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_startofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_endofpacket;                                                  // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_endofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_endofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_valid;                                                     // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_valid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_valid
	wire  [110:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_data;                                                      // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_data -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_data
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_ready;                                                     // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_ready -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_ready
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket;                                             // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_startofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_startofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket;                                               // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_endofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                                                                 // cmd_mux_007:src_valid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_valid
	wire  [109:0] cmd_mux_007_src_data;                                                                                                                  // cmd_mux_007:src_data -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                                                                 // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [15:0] cmd_mux_007_src_channel;                                                                                                               // cmd_mux_007:src_channel -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                                                         // cmd_mux_007:src_startofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                                                           // cmd_mux_007:src_endofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_endofpacket
	wire   [31:0] red_leds_s1_agent_m0_readdata;                                                                                                         // RED_LEDs_s1_translator:uav_readdata -> RED_LEDs_s1_agent:m0_readdata
	wire          red_leds_s1_agent_m0_waitrequest;                                                                                                      // RED_LEDs_s1_translator:uav_waitrequest -> RED_LEDs_s1_agent:m0_waitrequest
	wire          red_leds_s1_agent_m0_debugaccess;                                                                                                      // RED_LEDs_s1_agent:m0_debugaccess -> RED_LEDs_s1_translator:uav_debugaccess
	wire   [31:0] red_leds_s1_agent_m0_address;                                                                                                          // RED_LEDs_s1_agent:m0_address -> RED_LEDs_s1_translator:uav_address
	wire    [3:0] red_leds_s1_agent_m0_byteenable;                                                                                                       // RED_LEDs_s1_agent:m0_byteenable -> RED_LEDs_s1_translator:uav_byteenable
	wire          red_leds_s1_agent_m0_read;                                                                                                             // RED_LEDs_s1_agent:m0_read -> RED_LEDs_s1_translator:uav_read
	wire          red_leds_s1_agent_m0_readdatavalid;                                                                                                    // RED_LEDs_s1_translator:uav_readdatavalid -> RED_LEDs_s1_agent:m0_readdatavalid
	wire          red_leds_s1_agent_m0_lock;                                                                                                             // RED_LEDs_s1_agent:m0_lock -> RED_LEDs_s1_translator:uav_lock
	wire   [31:0] red_leds_s1_agent_m0_writedata;                                                                                                        // RED_LEDs_s1_agent:m0_writedata -> RED_LEDs_s1_translator:uav_writedata
	wire          red_leds_s1_agent_m0_write;                                                                                                            // RED_LEDs_s1_agent:m0_write -> RED_LEDs_s1_translator:uav_write
	wire    [2:0] red_leds_s1_agent_m0_burstcount;                                                                                                       // RED_LEDs_s1_agent:m0_burstcount -> RED_LEDs_s1_translator:uav_burstcount
	wire          red_leds_s1_agent_rf_source_valid;                                                                                                     // RED_LEDs_s1_agent:rf_source_valid -> RED_LEDs_s1_agent_rsp_fifo:in_valid
	wire  [110:0] red_leds_s1_agent_rf_source_data;                                                                                                      // RED_LEDs_s1_agent:rf_source_data -> RED_LEDs_s1_agent_rsp_fifo:in_data
	wire          red_leds_s1_agent_rf_source_ready;                                                                                                     // RED_LEDs_s1_agent_rsp_fifo:in_ready -> RED_LEDs_s1_agent:rf_source_ready
	wire          red_leds_s1_agent_rf_source_startofpacket;                                                                                             // RED_LEDs_s1_agent:rf_source_startofpacket -> RED_LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          red_leds_s1_agent_rf_source_endofpacket;                                                                                               // RED_LEDs_s1_agent:rf_source_endofpacket -> RED_LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          red_leds_s1_agent_rsp_fifo_out_valid;                                                                                                  // RED_LEDs_s1_agent_rsp_fifo:out_valid -> RED_LEDs_s1_agent:rf_sink_valid
	wire  [110:0] red_leds_s1_agent_rsp_fifo_out_data;                                                                                                   // RED_LEDs_s1_agent_rsp_fifo:out_data -> RED_LEDs_s1_agent:rf_sink_data
	wire          red_leds_s1_agent_rsp_fifo_out_ready;                                                                                                  // RED_LEDs_s1_agent:rf_sink_ready -> RED_LEDs_s1_agent_rsp_fifo:out_ready
	wire          red_leds_s1_agent_rsp_fifo_out_startofpacket;                                                                                          // RED_LEDs_s1_agent_rsp_fifo:out_startofpacket -> RED_LEDs_s1_agent:rf_sink_startofpacket
	wire          red_leds_s1_agent_rsp_fifo_out_endofpacket;                                                                                            // RED_LEDs_s1_agent_rsp_fifo:out_endofpacket -> RED_LEDs_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                                                                 // cmd_mux_008:src_valid -> RED_LEDs_s1_agent:cp_valid
	wire  [109:0] cmd_mux_008_src_data;                                                                                                                  // cmd_mux_008:src_data -> RED_LEDs_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                                                                 // RED_LEDs_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [15:0] cmd_mux_008_src_channel;                                                                                                               // cmd_mux_008:src_channel -> RED_LEDs_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                                                         // cmd_mux_008:src_startofpacket -> RED_LEDs_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                                                           // cmd_mux_008:src_endofpacket -> RED_LEDs_s1_agent:cp_endofpacket
	wire   [31:0] green_leds_s1_agent_m0_readdata;                                                                                                       // GREEN_LEDs_s1_translator:uav_readdata -> GREEN_LEDs_s1_agent:m0_readdata
	wire          green_leds_s1_agent_m0_waitrequest;                                                                                                    // GREEN_LEDs_s1_translator:uav_waitrequest -> GREEN_LEDs_s1_agent:m0_waitrequest
	wire          green_leds_s1_agent_m0_debugaccess;                                                                                                    // GREEN_LEDs_s1_agent:m0_debugaccess -> GREEN_LEDs_s1_translator:uav_debugaccess
	wire   [31:0] green_leds_s1_agent_m0_address;                                                                                                        // GREEN_LEDs_s1_agent:m0_address -> GREEN_LEDs_s1_translator:uav_address
	wire    [3:0] green_leds_s1_agent_m0_byteenable;                                                                                                     // GREEN_LEDs_s1_agent:m0_byteenable -> GREEN_LEDs_s1_translator:uav_byteenable
	wire          green_leds_s1_agent_m0_read;                                                                                                           // GREEN_LEDs_s1_agent:m0_read -> GREEN_LEDs_s1_translator:uav_read
	wire          green_leds_s1_agent_m0_readdatavalid;                                                                                                  // GREEN_LEDs_s1_translator:uav_readdatavalid -> GREEN_LEDs_s1_agent:m0_readdatavalid
	wire          green_leds_s1_agent_m0_lock;                                                                                                           // GREEN_LEDs_s1_agent:m0_lock -> GREEN_LEDs_s1_translator:uav_lock
	wire   [31:0] green_leds_s1_agent_m0_writedata;                                                                                                      // GREEN_LEDs_s1_agent:m0_writedata -> GREEN_LEDs_s1_translator:uav_writedata
	wire          green_leds_s1_agent_m0_write;                                                                                                          // GREEN_LEDs_s1_agent:m0_write -> GREEN_LEDs_s1_translator:uav_write
	wire    [2:0] green_leds_s1_agent_m0_burstcount;                                                                                                     // GREEN_LEDs_s1_agent:m0_burstcount -> GREEN_LEDs_s1_translator:uav_burstcount
	wire          green_leds_s1_agent_rf_source_valid;                                                                                                   // GREEN_LEDs_s1_agent:rf_source_valid -> GREEN_LEDs_s1_agent_rsp_fifo:in_valid
	wire  [110:0] green_leds_s1_agent_rf_source_data;                                                                                                    // GREEN_LEDs_s1_agent:rf_source_data -> GREEN_LEDs_s1_agent_rsp_fifo:in_data
	wire          green_leds_s1_agent_rf_source_ready;                                                                                                   // GREEN_LEDs_s1_agent_rsp_fifo:in_ready -> GREEN_LEDs_s1_agent:rf_source_ready
	wire          green_leds_s1_agent_rf_source_startofpacket;                                                                                           // GREEN_LEDs_s1_agent:rf_source_startofpacket -> GREEN_LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          green_leds_s1_agent_rf_source_endofpacket;                                                                                             // GREEN_LEDs_s1_agent:rf_source_endofpacket -> GREEN_LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          green_leds_s1_agent_rsp_fifo_out_valid;                                                                                                // GREEN_LEDs_s1_agent_rsp_fifo:out_valid -> GREEN_LEDs_s1_agent:rf_sink_valid
	wire  [110:0] green_leds_s1_agent_rsp_fifo_out_data;                                                                                                 // GREEN_LEDs_s1_agent_rsp_fifo:out_data -> GREEN_LEDs_s1_agent:rf_sink_data
	wire          green_leds_s1_agent_rsp_fifo_out_ready;                                                                                                // GREEN_LEDs_s1_agent:rf_sink_ready -> GREEN_LEDs_s1_agent_rsp_fifo:out_ready
	wire          green_leds_s1_agent_rsp_fifo_out_startofpacket;                                                                                        // GREEN_LEDs_s1_agent_rsp_fifo:out_startofpacket -> GREEN_LEDs_s1_agent:rf_sink_startofpacket
	wire          green_leds_s1_agent_rsp_fifo_out_endofpacket;                                                                                          // GREEN_LEDs_s1_agent_rsp_fifo:out_endofpacket -> GREEN_LEDs_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                                                                 // cmd_mux_009:src_valid -> GREEN_LEDs_s1_agent:cp_valid
	wire  [109:0] cmd_mux_009_src_data;                                                                                                                  // cmd_mux_009:src_data -> GREEN_LEDs_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                                                                 // GREEN_LEDs_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [15:0] cmd_mux_009_src_channel;                                                                                                               // cmd_mux_009:src_channel -> GREEN_LEDs_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                                                         // cmd_mux_009:src_startofpacket -> GREEN_LEDs_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                                                           // cmd_mux_009:src_endofpacket -> GREEN_LEDs_s1_agent:cp_endofpacket
	wire   [31:0] sevsegment_4lsb_s1_agent_m0_readdata;                                                                                                  // SevSegment_4LSB_s1_translator:uav_readdata -> SevSegment_4LSB_s1_agent:m0_readdata
	wire          sevsegment_4lsb_s1_agent_m0_waitrequest;                                                                                               // SevSegment_4LSB_s1_translator:uav_waitrequest -> SevSegment_4LSB_s1_agent:m0_waitrequest
	wire          sevsegment_4lsb_s1_agent_m0_debugaccess;                                                                                               // SevSegment_4LSB_s1_agent:m0_debugaccess -> SevSegment_4LSB_s1_translator:uav_debugaccess
	wire   [31:0] sevsegment_4lsb_s1_agent_m0_address;                                                                                                   // SevSegment_4LSB_s1_agent:m0_address -> SevSegment_4LSB_s1_translator:uav_address
	wire    [3:0] sevsegment_4lsb_s1_agent_m0_byteenable;                                                                                                // SevSegment_4LSB_s1_agent:m0_byteenable -> SevSegment_4LSB_s1_translator:uav_byteenable
	wire          sevsegment_4lsb_s1_agent_m0_read;                                                                                                      // SevSegment_4LSB_s1_agent:m0_read -> SevSegment_4LSB_s1_translator:uav_read
	wire          sevsegment_4lsb_s1_agent_m0_readdatavalid;                                                                                             // SevSegment_4LSB_s1_translator:uav_readdatavalid -> SevSegment_4LSB_s1_agent:m0_readdatavalid
	wire          sevsegment_4lsb_s1_agent_m0_lock;                                                                                                      // SevSegment_4LSB_s1_agent:m0_lock -> SevSegment_4LSB_s1_translator:uav_lock
	wire   [31:0] sevsegment_4lsb_s1_agent_m0_writedata;                                                                                                 // SevSegment_4LSB_s1_agent:m0_writedata -> SevSegment_4LSB_s1_translator:uav_writedata
	wire          sevsegment_4lsb_s1_agent_m0_write;                                                                                                     // SevSegment_4LSB_s1_agent:m0_write -> SevSegment_4LSB_s1_translator:uav_write
	wire    [2:0] sevsegment_4lsb_s1_agent_m0_burstcount;                                                                                                // SevSegment_4LSB_s1_agent:m0_burstcount -> SevSegment_4LSB_s1_translator:uav_burstcount
	wire          sevsegment_4lsb_s1_agent_rf_source_valid;                                                                                              // SevSegment_4LSB_s1_agent:rf_source_valid -> SevSegment_4LSB_s1_agent_rsp_fifo:in_valid
	wire  [110:0] sevsegment_4lsb_s1_agent_rf_source_data;                                                                                               // SevSegment_4LSB_s1_agent:rf_source_data -> SevSegment_4LSB_s1_agent_rsp_fifo:in_data
	wire          sevsegment_4lsb_s1_agent_rf_source_ready;                                                                                              // SevSegment_4LSB_s1_agent_rsp_fifo:in_ready -> SevSegment_4LSB_s1_agent:rf_source_ready
	wire          sevsegment_4lsb_s1_agent_rf_source_startofpacket;                                                                                      // SevSegment_4LSB_s1_agent:rf_source_startofpacket -> SevSegment_4LSB_s1_agent_rsp_fifo:in_startofpacket
	wire          sevsegment_4lsb_s1_agent_rf_source_endofpacket;                                                                                        // SevSegment_4LSB_s1_agent:rf_source_endofpacket -> SevSegment_4LSB_s1_agent_rsp_fifo:in_endofpacket
	wire          sevsegment_4lsb_s1_agent_rsp_fifo_out_valid;                                                                                           // SevSegment_4LSB_s1_agent_rsp_fifo:out_valid -> SevSegment_4LSB_s1_agent:rf_sink_valid
	wire  [110:0] sevsegment_4lsb_s1_agent_rsp_fifo_out_data;                                                                                            // SevSegment_4LSB_s1_agent_rsp_fifo:out_data -> SevSegment_4LSB_s1_agent:rf_sink_data
	wire          sevsegment_4lsb_s1_agent_rsp_fifo_out_ready;                                                                                           // SevSegment_4LSB_s1_agent:rf_sink_ready -> SevSegment_4LSB_s1_agent_rsp_fifo:out_ready
	wire          sevsegment_4lsb_s1_agent_rsp_fifo_out_startofpacket;                                                                                   // SevSegment_4LSB_s1_agent_rsp_fifo:out_startofpacket -> SevSegment_4LSB_s1_agent:rf_sink_startofpacket
	wire          sevsegment_4lsb_s1_agent_rsp_fifo_out_endofpacket;                                                                                     // SevSegment_4LSB_s1_agent_rsp_fifo:out_endofpacket -> SevSegment_4LSB_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                                                                 // cmd_mux_010:src_valid -> SevSegment_4LSB_s1_agent:cp_valid
	wire  [109:0] cmd_mux_010_src_data;                                                                                                                  // cmd_mux_010:src_data -> SevSegment_4LSB_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                                                                 // SevSegment_4LSB_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [15:0] cmd_mux_010_src_channel;                                                                                                               // cmd_mux_010:src_channel -> SevSegment_4LSB_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                                                         // cmd_mux_010:src_startofpacket -> SevSegment_4LSB_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                                                           // cmd_mux_010:src_endofpacket -> SevSegment_4LSB_s1_agent:cp_endofpacket
	wire   [31:0] switches_s1_agent_m0_readdata;                                                                                                         // Switches_s1_translator:uav_readdata -> Switches_s1_agent:m0_readdata
	wire          switches_s1_agent_m0_waitrequest;                                                                                                      // Switches_s1_translator:uav_waitrequest -> Switches_s1_agent:m0_waitrequest
	wire          switches_s1_agent_m0_debugaccess;                                                                                                      // Switches_s1_agent:m0_debugaccess -> Switches_s1_translator:uav_debugaccess
	wire   [31:0] switches_s1_agent_m0_address;                                                                                                          // Switches_s1_agent:m0_address -> Switches_s1_translator:uav_address
	wire    [3:0] switches_s1_agent_m0_byteenable;                                                                                                       // Switches_s1_agent:m0_byteenable -> Switches_s1_translator:uav_byteenable
	wire          switches_s1_agent_m0_read;                                                                                                             // Switches_s1_agent:m0_read -> Switches_s1_translator:uav_read
	wire          switches_s1_agent_m0_readdatavalid;                                                                                                    // Switches_s1_translator:uav_readdatavalid -> Switches_s1_agent:m0_readdatavalid
	wire          switches_s1_agent_m0_lock;                                                                                                             // Switches_s1_agent:m0_lock -> Switches_s1_translator:uav_lock
	wire   [31:0] switches_s1_agent_m0_writedata;                                                                                                        // Switches_s1_agent:m0_writedata -> Switches_s1_translator:uav_writedata
	wire          switches_s1_agent_m0_write;                                                                                                            // Switches_s1_agent:m0_write -> Switches_s1_translator:uav_write
	wire    [2:0] switches_s1_agent_m0_burstcount;                                                                                                       // Switches_s1_agent:m0_burstcount -> Switches_s1_translator:uav_burstcount
	wire          switches_s1_agent_rf_source_valid;                                                                                                     // Switches_s1_agent:rf_source_valid -> Switches_s1_agent_rsp_fifo:in_valid
	wire  [110:0] switches_s1_agent_rf_source_data;                                                                                                      // Switches_s1_agent:rf_source_data -> Switches_s1_agent_rsp_fifo:in_data
	wire          switches_s1_agent_rf_source_ready;                                                                                                     // Switches_s1_agent_rsp_fifo:in_ready -> Switches_s1_agent:rf_source_ready
	wire          switches_s1_agent_rf_source_startofpacket;                                                                                             // Switches_s1_agent:rf_source_startofpacket -> Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          switches_s1_agent_rf_source_endofpacket;                                                                                               // Switches_s1_agent:rf_source_endofpacket -> Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          switches_s1_agent_rsp_fifo_out_valid;                                                                                                  // Switches_s1_agent_rsp_fifo:out_valid -> Switches_s1_agent:rf_sink_valid
	wire  [110:0] switches_s1_agent_rsp_fifo_out_data;                                                                                                   // Switches_s1_agent_rsp_fifo:out_data -> Switches_s1_agent:rf_sink_data
	wire          switches_s1_agent_rsp_fifo_out_ready;                                                                                                  // Switches_s1_agent:rf_sink_ready -> Switches_s1_agent_rsp_fifo:out_ready
	wire          switches_s1_agent_rsp_fifo_out_startofpacket;                                                                                          // Switches_s1_agent_rsp_fifo:out_startofpacket -> Switches_s1_agent:rf_sink_startofpacket
	wire          switches_s1_agent_rsp_fifo_out_endofpacket;                                                                                            // Switches_s1_agent_rsp_fifo:out_endofpacket -> Switches_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                                                                 // cmd_mux_011:src_valid -> Switches_s1_agent:cp_valid
	wire  [109:0] cmd_mux_011_src_data;                                                                                                                  // cmd_mux_011:src_data -> Switches_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                                                                 // Switches_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [15:0] cmd_mux_011_src_channel;                                                                                                               // cmd_mux_011:src_channel -> Switches_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                                                                         // cmd_mux_011:src_startofpacket -> Switches_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                                                           // cmd_mux_011:src_endofpacket -> Switches_s1_agent:cp_endofpacket
	wire   [31:0] sevseg4msb_s1_agent_m0_readdata;                                                                                                       // SevSeg4MSB_s1_translator:uav_readdata -> SevSeg4MSB_s1_agent:m0_readdata
	wire          sevseg4msb_s1_agent_m0_waitrequest;                                                                                                    // SevSeg4MSB_s1_translator:uav_waitrequest -> SevSeg4MSB_s1_agent:m0_waitrequest
	wire          sevseg4msb_s1_agent_m0_debugaccess;                                                                                                    // SevSeg4MSB_s1_agent:m0_debugaccess -> SevSeg4MSB_s1_translator:uav_debugaccess
	wire   [31:0] sevseg4msb_s1_agent_m0_address;                                                                                                        // SevSeg4MSB_s1_agent:m0_address -> SevSeg4MSB_s1_translator:uav_address
	wire    [3:0] sevseg4msb_s1_agent_m0_byteenable;                                                                                                     // SevSeg4MSB_s1_agent:m0_byteenable -> SevSeg4MSB_s1_translator:uav_byteenable
	wire          sevseg4msb_s1_agent_m0_read;                                                                                                           // SevSeg4MSB_s1_agent:m0_read -> SevSeg4MSB_s1_translator:uav_read
	wire          sevseg4msb_s1_agent_m0_readdatavalid;                                                                                                  // SevSeg4MSB_s1_translator:uav_readdatavalid -> SevSeg4MSB_s1_agent:m0_readdatavalid
	wire          sevseg4msb_s1_agent_m0_lock;                                                                                                           // SevSeg4MSB_s1_agent:m0_lock -> SevSeg4MSB_s1_translator:uav_lock
	wire   [31:0] sevseg4msb_s1_agent_m0_writedata;                                                                                                      // SevSeg4MSB_s1_agent:m0_writedata -> SevSeg4MSB_s1_translator:uav_writedata
	wire          sevseg4msb_s1_agent_m0_write;                                                                                                          // SevSeg4MSB_s1_agent:m0_write -> SevSeg4MSB_s1_translator:uav_write
	wire    [2:0] sevseg4msb_s1_agent_m0_burstcount;                                                                                                     // SevSeg4MSB_s1_agent:m0_burstcount -> SevSeg4MSB_s1_translator:uav_burstcount
	wire          sevseg4msb_s1_agent_rf_source_valid;                                                                                                   // SevSeg4MSB_s1_agent:rf_source_valid -> SevSeg4MSB_s1_agent_rsp_fifo:in_valid
	wire  [110:0] sevseg4msb_s1_agent_rf_source_data;                                                                                                    // SevSeg4MSB_s1_agent:rf_source_data -> SevSeg4MSB_s1_agent_rsp_fifo:in_data
	wire          sevseg4msb_s1_agent_rf_source_ready;                                                                                                   // SevSeg4MSB_s1_agent_rsp_fifo:in_ready -> SevSeg4MSB_s1_agent:rf_source_ready
	wire          sevseg4msb_s1_agent_rf_source_startofpacket;                                                                                           // SevSeg4MSB_s1_agent:rf_source_startofpacket -> SevSeg4MSB_s1_agent_rsp_fifo:in_startofpacket
	wire          sevseg4msb_s1_agent_rf_source_endofpacket;                                                                                             // SevSeg4MSB_s1_agent:rf_source_endofpacket -> SevSeg4MSB_s1_agent_rsp_fifo:in_endofpacket
	wire          sevseg4msb_s1_agent_rsp_fifo_out_valid;                                                                                                // SevSeg4MSB_s1_agent_rsp_fifo:out_valid -> SevSeg4MSB_s1_agent:rf_sink_valid
	wire  [110:0] sevseg4msb_s1_agent_rsp_fifo_out_data;                                                                                                 // SevSeg4MSB_s1_agent_rsp_fifo:out_data -> SevSeg4MSB_s1_agent:rf_sink_data
	wire          sevseg4msb_s1_agent_rsp_fifo_out_ready;                                                                                                // SevSeg4MSB_s1_agent:rf_sink_ready -> SevSeg4MSB_s1_agent_rsp_fifo:out_ready
	wire          sevseg4msb_s1_agent_rsp_fifo_out_startofpacket;                                                                                        // SevSeg4MSB_s1_agent_rsp_fifo:out_startofpacket -> SevSeg4MSB_s1_agent:rf_sink_startofpacket
	wire          sevseg4msb_s1_agent_rsp_fifo_out_endofpacket;                                                                                          // SevSeg4MSB_s1_agent_rsp_fifo:out_endofpacket -> SevSeg4MSB_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                                                                 // cmd_mux_012:src_valid -> SevSeg4MSB_s1_agent:cp_valid
	wire  [109:0] cmd_mux_012_src_data;                                                                                                                  // cmd_mux_012:src_data -> SevSeg4MSB_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                                                                 // SevSeg4MSB_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [15:0] cmd_mux_012_src_channel;                                                                                                               // cmd_mux_012:src_channel -> SevSeg4MSB_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                                                                         // cmd_mux_012:src_startofpacket -> SevSeg4MSB_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                                                           // cmd_mux_012:src_endofpacket -> SevSeg4MSB_s1_agent:cp_endofpacket
	wire   [31:0] keys_s1_agent_m0_readdata;                                                                                                             // KEYS_s1_translator:uav_readdata -> KEYS_s1_agent:m0_readdata
	wire          keys_s1_agent_m0_waitrequest;                                                                                                          // KEYS_s1_translator:uav_waitrequest -> KEYS_s1_agent:m0_waitrequest
	wire          keys_s1_agent_m0_debugaccess;                                                                                                          // KEYS_s1_agent:m0_debugaccess -> KEYS_s1_translator:uav_debugaccess
	wire   [31:0] keys_s1_agent_m0_address;                                                                                                              // KEYS_s1_agent:m0_address -> KEYS_s1_translator:uav_address
	wire    [3:0] keys_s1_agent_m0_byteenable;                                                                                                           // KEYS_s1_agent:m0_byteenable -> KEYS_s1_translator:uav_byteenable
	wire          keys_s1_agent_m0_read;                                                                                                                 // KEYS_s1_agent:m0_read -> KEYS_s1_translator:uav_read
	wire          keys_s1_agent_m0_readdatavalid;                                                                                                        // KEYS_s1_translator:uav_readdatavalid -> KEYS_s1_agent:m0_readdatavalid
	wire          keys_s1_agent_m0_lock;                                                                                                                 // KEYS_s1_agent:m0_lock -> KEYS_s1_translator:uav_lock
	wire   [31:0] keys_s1_agent_m0_writedata;                                                                                                            // KEYS_s1_agent:m0_writedata -> KEYS_s1_translator:uav_writedata
	wire          keys_s1_agent_m0_write;                                                                                                                // KEYS_s1_agent:m0_write -> KEYS_s1_translator:uav_write
	wire    [2:0] keys_s1_agent_m0_burstcount;                                                                                                           // KEYS_s1_agent:m0_burstcount -> KEYS_s1_translator:uav_burstcount
	wire          keys_s1_agent_rf_source_valid;                                                                                                         // KEYS_s1_agent:rf_source_valid -> KEYS_s1_agent_rsp_fifo:in_valid
	wire  [110:0] keys_s1_agent_rf_source_data;                                                                                                          // KEYS_s1_agent:rf_source_data -> KEYS_s1_agent_rsp_fifo:in_data
	wire          keys_s1_agent_rf_source_ready;                                                                                                         // KEYS_s1_agent_rsp_fifo:in_ready -> KEYS_s1_agent:rf_source_ready
	wire          keys_s1_agent_rf_source_startofpacket;                                                                                                 // KEYS_s1_agent:rf_source_startofpacket -> KEYS_s1_agent_rsp_fifo:in_startofpacket
	wire          keys_s1_agent_rf_source_endofpacket;                                                                                                   // KEYS_s1_agent:rf_source_endofpacket -> KEYS_s1_agent_rsp_fifo:in_endofpacket
	wire          keys_s1_agent_rsp_fifo_out_valid;                                                                                                      // KEYS_s1_agent_rsp_fifo:out_valid -> KEYS_s1_agent:rf_sink_valid
	wire  [110:0] keys_s1_agent_rsp_fifo_out_data;                                                                                                       // KEYS_s1_agent_rsp_fifo:out_data -> KEYS_s1_agent:rf_sink_data
	wire          keys_s1_agent_rsp_fifo_out_ready;                                                                                                      // KEYS_s1_agent:rf_sink_ready -> KEYS_s1_agent_rsp_fifo:out_ready
	wire          keys_s1_agent_rsp_fifo_out_startofpacket;                                                                                              // KEYS_s1_agent_rsp_fifo:out_startofpacket -> KEYS_s1_agent:rf_sink_startofpacket
	wire          keys_s1_agent_rsp_fifo_out_endofpacket;                                                                                                // KEYS_s1_agent_rsp_fifo:out_endofpacket -> KEYS_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                                                                 // cmd_mux_013:src_valid -> KEYS_s1_agent:cp_valid
	wire  [109:0] cmd_mux_013_src_data;                                                                                                                  // cmd_mux_013:src_data -> KEYS_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                                                                 // KEYS_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [15:0] cmd_mux_013_src_channel;                                                                                                               // cmd_mux_013:src_channel -> KEYS_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                                                                         // cmd_mux_013:src_startofpacket -> KEYS_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                                                           // cmd_mux_013:src_endofpacket -> KEYS_s1_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                                                                          // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                                                                       // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                                                                       // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [31:0] timer_0_s1_agent_m0_address;                                                                                                           // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                                                                        // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                                                                              // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                                                                     // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                                                                              // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                                                                         // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                                                                             // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                                                                        // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                                                                      // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [110:0] timer_0_s1_agent_rf_source_data;                                                                                                       // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                                                                      // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                                                                              // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                                                                                // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                                                                   // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [110:0] timer_0_s1_agent_rsp_fifo_out_data;                                                                                                    // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                                                                   // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                                                                           // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                                                                             // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                                                                 // cmd_mux_014:src_valid -> timer_0_s1_agent:cp_valid
	wire  [109:0] cmd_mux_014_src_data;                                                                                                                  // cmd_mux_014:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                                                                 // timer_0_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [15:0] cmd_mux_014_src_channel;                                                                                                               // cmd_mux_014:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                                                                         // cmd_mux_014:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                                                           // cmd_mux_014:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire   [31:0] timer_1_s1_agent_m0_readdata;                                                                                                          // timer_1_s1_translator:uav_readdata -> timer_1_s1_agent:m0_readdata
	wire          timer_1_s1_agent_m0_waitrequest;                                                                                                       // timer_1_s1_translator:uav_waitrequest -> timer_1_s1_agent:m0_waitrequest
	wire          timer_1_s1_agent_m0_debugaccess;                                                                                                       // timer_1_s1_agent:m0_debugaccess -> timer_1_s1_translator:uav_debugaccess
	wire   [31:0] timer_1_s1_agent_m0_address;                                                                                                           // timer_1_s1_agent:m0_address -> timer_1_s1_translator:uav_address
	wire    [3:0] timer_1_s1_agent_m0_byteenable;                                                                                                        // timer_1_s1_agent:m0_byteenable -> timer_1_s1_translator:uav_byteenable
	wire          timer_1_s1_agent_m0_read;                                                                                                              // timer_1_s1_agent:m0_read -> timer_1_s1_translator:uav_read
	wire          timer_1_s1_agent_m0_readdatavalid;                                                                                                     // timer_1_s1_translator:uav_readdatavalid -> timer_1_s1_agent:m0_readdatavalid
	wire          timer_1_s1_agent_m0_lock;                                                                                                              // timer_1_s1_agent:m0_lock -> timer_1_s1_translator:uav_lock
	wire   [31:0] timer_1_s1_agent_m0_writedata;                                                                                                         // timer_1_s1_agent:m0_writedata -> timer_1_s1_translator:uav_writedata
	wire          timer_1_s1_agent_m0_write;                                                                                                             // timer_1_s1_agent:m0_write -> timer_1_s1_translator:uav_write
	wire    [2:0] timer_1_s1_agent_m0_burstcount;                                                                                                        // timer_1_s1_agent:m0_burstcount -> timer_1_s1_translator:uav_burstcount
	wire          timer_1_s1_agent_rf_source_valid;                                                                                                      // timer_1_s1_agent:rf_source_valid -> timer_1_s1_agent_rsp_fifo:in_valid
	wire  [110:0] timer_1_s1_agent_rf_source_data;                                                                                                       // timer_1_s1_agent:rf_source_data -> timer_1_s1_agent_rsp_fifo:in_data
	wire          timer_1_s1_agent_rf_source_ready;                                                                                                      // timer_1_s1_agent_rsp_fifo:in_ready -> timer_1_s1_agent:rf_source_ready
	wire          timer_1_s1_agent_rf_source_startofpacket;                                                                                              // timer_1_s1_agent:rf_source_startofpacket -> timer_1_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_1_s1_agent_rf_source_endofpacket;                                                                                                // timer_1_s1_agent:rf_source_endofpacket -> timer_1_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_valid;                                                                                                   // timer_1_s1_agent_rsp_fifo:out_valid -> timer_1_s1_agent:rf_sink_valid
	wire  [110:0] timer_1_s1_agent_rsp_fifo_out_data;                                                                                                    // timer_1_s1_agent_rsp_fifo:out_data -> timer_1_s1_agent:rf_sink_data
	wire          timer_1_s1_agent_rsp_fifo_out_ready;                                                                                                   // timer_1_s1_agent:rf_sink_ready -> timer_1_s1_agent_rsp_fifo:out_ready
	wire          timer_1_s1_agent_rsp_fifo_out_startofpacket;                                                                                           // timer_1_s1_agent_rsp_fifo:out_startofpacket -> timer_1_s1_agent:rf_sink_startofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_endofpacket;                                                                                             // timer_1_s1_agent_rsp_fifo:out_endofpacket -> timer_1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                                                                 // cmd_mux_015:src_valid -> timer_1_s1_agent:cp_valid
	wire  [109:0] cmd_mux_015_src_data;                                                                                                                  // cmd_mux_015:src_data -> timer_1_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                                                                 // timer_1_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [15:0] cmd_mux_015_src_channel;                                                                                                               // cmd_mux_015:src_channel -> timer_1_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                                                                         // cmd_mux_015:src_startofpacket -> timer_1_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                                                           // cmd_mux_015:src_endofpacket -> timer_1_s1_agent:cp_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid;                                                                       // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_valid -> router:sink_valid
	wire   [91:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data;                                                                        // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_data -> router:sink_data
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready;                                                                       // router:sink_ready -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_ready
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket;                                                               // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket;                                                                 // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          processor_data_master_agent_cp_valid;                                                                                                  // Processor_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [109:0] processor_data_master_agent_cp_data;                                                                                                   // Processor_data_master_agent:cp_data -> router_001:sink_data
	wire          processor_data_master_agent_cp_ready;                                                                                                  // router_001:sink_ready -> Processor_data_master_agent:cp_ready
	wire          processor_data_master_agent_cp_startofpacket;                                                                                          // Processor_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          processor_data_master_agent_cp_endofpacket;                                                                                            // Processor_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          processor_instruction_master_agent_cp_valid;                                                                                           // Processor_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [109:0] processor_instruction_master_agent_cp_data;                                                                                            // Processor_instruction_master_agent:cp_data -> router_002:sink_data
	wire          processor_instruction_master_agent_cp_ready;                                                                                           // router_002:sink_ready -> Processor_instruction_master_agent:cp_ready
	wire          processor_instruction_master_agent_cp_startofpacket;                                                                                   // Processor_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          processor_instruction_master_agent_cp_endofpacket;                                                                                     // Processor_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid;                                                                          // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [109:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data;                                                                           // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_data -> router_003:sink_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready;                                                                          // router_003:sink_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket;                                                                  // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket;                                                                    // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                                                  // router_003:src_valid -> rsp_demux:sink_valid
	wire  [109:0] router_003_src_data;                                                                                                                   // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                                                                                  // rsp_demux:sink_ready -> router_003:src_ready
	wire   [15:0] router_003_src_channel;                                                                                                                // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                                                                          // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                                                            // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rp_valid;                                                                                               // sram_0_avalon_sram_slave_agent:rp_valid -> router_004:sink_valid
	wire   [91:0] sram_0_avalon_sram_slave_agent_rp_data;                                                                                                // sram_0_avalon_sram_slave_agent:rp_data -> router_004:sink_data
	wire          sram_0_avalon_sram_slave_agent_rp_ready;                                                                                               // router_004:sink_ready -> sram_0_avalon_sram_slave_agent:rp_ready
	wire          sram_0_avalon_sram_slave_agent_rp_startofpacket;                                                                                       // sram_0_avalon_sram_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rp_endofpacket;                                                                                         // sram_0_avalon_sram_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                                                  // router_004:src_valid -> rsp_demux_001:sink_valid
	wire   [91:0] router_004_src_data;                                                                                                                   // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                                                                  // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [15:0] router_004_src_channel;                                                                                                                // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                                                                          // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                                                            // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                                                                    // SYSID_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [109:0] sysid_control_slave_agent_rp_data;                                                                                                     // SYSID_control_slave_agent:rp_data -> router_005:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                                                                    // router_005:sink_ready -> SYSID_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                                                                            // SYSID_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                                                                              // SYSID_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                                                  // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [109:0] router_005_src_data;                                                                                                                   // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                                                                  // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [15:0] router_005_src_channel;                                                                                                                // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                                                                          // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                                                            // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          processor_jtag_debug_module_agent_rp_valid;                                                                                            // Processor_jtag_debug_module_agent:rp_valid -> router_006:sink_valid
	wire  [109:0] processor_jtag_debug_module_agent_rp_data;                                                                                             // Processor_jtag_debug_module_agent:rp_data -> router_006:sink_data
	wire          processor_jtag_debug_module_agent_rp_ready;                                                                                            // router_006:sink_ready -> Processor_jtag_debug_module_agent:rp_ready
	wire          processor_jtag_debug_module_agent_rp_startofpacket;                                                                                    // Processor_jtag_debug_module_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          processor_jtag_debug_module_agent_rp_endofpacket;                                                                                      // Processor_jtag_debug_module_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                                                  // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [109:0] router_006_src_data;                                                                                                                   // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                                                                  // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [15:0] router_006_src_channel;                                                                                                                // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                                                                          // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                                                            // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          on_chip_mem_s1_agent_rp_valid;                                                                                                         // On_Chip_Mem_s1_agent:rp_valid -> router_007:sink_valid
	wire  [109:0] on_chip_mem_s1_agent_rp_data;                                                                                                          // On_Chip_Mem_s1_agent:rp_data -> router_007:sink_data
	wire          on_chip_mem_s1_agent_rp_ready;                                                                                                         // router_007:sink_ready -> On_Chip_Mem_s1_agent:rp_ready
	wire          on_chip_mem_s1_agent_rp_startofpacket;                                                                                                 // On_Chip_Mem_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          on_chip_mem_s1_agent_rp_endofpacket;                                                                                                   // On_Chip_Mem_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                                                  // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [109:0] router_007_src_data;                                                                                                                   // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                                                                                  // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [15:0] router_007_src_channel;                                                                                                                // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                                                                          // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                                                            // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                                                               // SDRAM_s1_agent:rp_valid -> router_008:sink_valid
	wire  [109:0] sdram_s1_agent_rp_data;                                                                                                                // SDRAM_s1_agent:rp_data -> router_008:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                                                               // router_008:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                                                                       // SDRAM_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                                                                         // SDRAM_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                                                  // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [109:0] router_008_src_data;                                                                                                                   // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                                                                                  // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [15:0] router_008_src_channel;                                                                                                                // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                                                                          // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                                                            // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                                                            // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_009:sink_valid
	wire  [109:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                                                             // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_009:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                                                            // router_009:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                                                                    // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                                                                      // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                                                  // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [109:0] router_009_src_data;                                                                                                                   // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                                                                                  // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [15:0] router_009_src_channel;                                                                                                                // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                                                                          // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                                                            // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_valid;                                                               // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_valid -> router_010:sink_valid
	wire  [109:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_data;                                                                // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_data -> router_010:sink_data
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_ready;                                                               // router_010:sink_ready -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_ready
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_startofpacket;                                                       // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_endofpacket;                                                         // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                                                  // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [109:0] router_010_src_data;                                                                                                                   // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                                                                                  // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [15:0] router_010_src_channel;                                                                                                                // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                                                                          // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                                                            // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          red_leds_s1_agent_rp_valid;                                                                                                            // RED_LEDs_s1_agent:rp_valid -> router_011:sink_valid
	wire  [109:0] red_leds_s1_agent_rp_data;                                                                                                             // RED_LEDs_s1_agent:rp_data -> router_011:sink_data
	wire          red_leds_s1_agent_rp_ready;                                                                                                            // router_011:sink_ready -> RED_LEDs_s1_agent:rp_ready
	wire          red_leds_s1_agent_rp_startofpacket;                                                                                                    // RED_LEDs_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          red_leds_s1_agent_rp_endofpacket;                                                                                                      // RED_LEDs_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                                                  // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [109:0] router_011_src_data;                                                                                                                   // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                                                                                  // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [15:0] router_011_src_channel;                                                                                                                // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                                                                          // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                                                            // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          green_leds_s1_agent_rp_valid;                                                                                                          // GREEN_LEDs_s1_agent:rp_valid -> router_012:sink_valid
	wire  [109:0] green_leds_s1_agent_rp_data;                                                                                                           // GREEN_LEDs_s1_agent:rp_data -> router_012:sink_data
	wire          green_leds_s1_agent_rp_ready;                                                                                                          // router_012:sink_ready -> GREEN_LEDs_s1_agent:rp_ready
	wire          green_leds_s1_agent_rp_startofpacket;                                                                                                  // GREEN_LEDs_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          green_leds_s1_agent_rp_endofpacket;                                                                                                    // GREEN_LEDs_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                                                                  // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [109:0] router_012_src_data;                                                                                                                   // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                                                                                  // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [15:0] router_012_src_channel;                                                                                                                // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                                                                                          // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                                                            // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          sevsegment_4lsb_s1_agent_rp_valid;                                                                                                     // SevSegment_4LSB_s1_agent:rp_valid -> router_013:sink_valid
	wire  [109:0] sevsegment_4lsb_s1_agent_rp_data;                                                                                                      // SevSegment_4LSB_s1_agent:rp_data -> router_013:sink_data
	wire          sevsegment_4lsb_s1_agent_rp_ready;                                                                                                     // router_013:sink_ready -> SevSegment_4LSB_s1_agent:rp_ready
	wire          sevsegment_4lsb_s1_agent_rp_startofpacket;                                                                                             // SevSegment_4LSB_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sevsegment_4lsb_s1_agent_rp_endofpacket;                                                                                               // SevSegment_4LSB_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                                                  // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [109:0] router_013_src_data;                                                                                                                   // router_013:src_data -> rsp_demux_010:sink_data
	wire          router_013_src_ready;                                                                                                                  // rsp_demux_010:sink_ready -> router_013:src_ready
	wire   [15:0] router_013_src_channel;                                                                                                                // router_013:src_channel -> rsp_demux_010:sink_channel
	wire          router_013_src_startofpacket;                                                                                                          // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                                                            // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          switches_s1_agent_rp_valid;                                                                                                            // Switches_s1_agent:rp_valid -> router_014:sink_valid
	wire  [109:0] switches_s1_agent_rp_data;                                                                                                             // Switches_s1_agent:rp_data -> router_014:sink_data
	wire          switches_s1_agent_rp_ready;                                                                                                            // router_014:sink_ready -> Switches_s1_agent:rp_ready
	wire          switches_s1_agent_rp_startofpacket;                                                                                                    // Switches_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          switches_s1_agent_rp_endofpacket;                                                                                                      // Switches_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                                                  // router_014:src_valid -> rsp_demux_011:sink_valid
	wire  [109:0] router_014_src_data;                                                                                                                   // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                                                                                  // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [15:0] router_014_src_channel;                                                                                                                // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                                                                                          // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                                                            // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          sevseg4msb_s1_agent_rp_valid;                                                                                                          // SevSeg4MSB_s1_agent:rp_valid -> router_015:sink_valid
	wire  [109:0] sevseg4msb_s1_agent_rp_data;                                                                                                           // SevSeg4MSB_s1_agent:rp_data -> router_015:sink_data
	wire          sevseg4msb_s1_agent_rp_ready;                                                                                                          // router_015:sink_ready -> SevSeg4MSB_s1_agent:rp_ready
	wire          sevseg4msb_s1_agent_rp_startofpacket;                                                                                                  // SevSeg4MSB_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          sevseg4msb_s1_agent_rp_endofpacket;                                                                                                    // SevSeg4MSB_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                                                                  // router_015:src_valid -> rsp_demux_012:sink_valid
	wire  [109:0] router_015_src_data;                                                                                                                   // router_015:src_data -> rsp_demux_012:sink_data
	wire          router_015_src_ready;                                                                                                                  // rsp_demux_012:sink_ready -> router_015:src_ready
	wire   [15:0] router_015_src_channel;                                                                                                                // router_015:src_channel -> rsp_demux_012:sink_channel
	wire          router_015_src_startofpacket;                                                                                                          // router_015:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                                                            // router_015:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          keys_s1_agent_rp_valid;                                                                                                                // KEYS_s1_agent:rp_valid -> router_016:sink_valid
	wire  [109:0] keys_s1_agent_rp_data;                                                                                                                 // KEYS_s1_agent:rp_data -> router_016:sink_data
	wire          keys_s1_agent_rp_ready;                                                                                                                // router_016:sink_ready -> KEYS_s1_agent:rp_ready
	wire          keys_s1_agent_rp_startofpacket;                                                                                                        // KEYS_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          keys_s1_agent_rp_endofpacket;                                                                                                          // KEYS_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                                                                  // router_016:src_valid -> rsp_demux_013:sink_valid
	wire  [109:0] router_016_src_data;                                                                                                                   // router_016:src_data -> rsp_demux_013:sink_data
	wire          router_016_src_ready;                                                                                                                  // rsp_demux_013:sink_ready -> router_016:src_ready
	wire   [15:0] router_016_src_channel;                                                                                                                // router_016:src_channel -> rsp_demux_013:sink_channel
	wire          router_016_src_startofpacket;                                                                                                          // router_016:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                                                            // router_016:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                                                                             // timer_0_s1_agent:rp_valid -> router_017:sink_valid
	wire  [109:0] timer_0_s1_agent_rp_data;                                                                                                              // timer_0_s1_agent:rp_data -> router_017:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                                                                             // router_017:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                                                                     // timer_0_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                                                                       // timer_0_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                                                                  // router_017:src_valid -> rsp_demux_014:sink_valid
	wire  [109:0] router_017_src_data;                                                                                                                   // router_017:src_data -> rsp_demux_014:sink_data
	wire          router_017_src_ready;                                                                                                                  // rsp_demux_014:sink_ready -> router_017:src_ready
	wire   [15:0] router_017_src_channel;                                                                                                                // router_017:src_channel -> rsp_demux_014:sink_channel
	wire          router_017_src_startofpacket;                                                                                                          // router_017:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                                                            // router_017:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          timer_1_s1_agent_rp_valid;                                                                                                             // timer_1_s1_agent:rp_valid -> router_018:sink_valid
	wire  [109:0] timer_1_s1_agent_rp_data;                                                                                                              // timer_1_s1_agent:rp_data -> router_018:sink_data
	wire          timer_1_s1_agent_rp_ready;                                                                                                             // router_018:sink_ready -> timer_1_s1_agent:rp_ready
	wire          timer_1_s1_agent_rp_startofpacket;                                                                                                     // timer_1_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          timer_1_s1_agent_rp_endofpacket;                                                                                                       // timer_1_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                                                                  // router_018:src_valid -> rsp_demux_015:sink_valid
	wire  [109:0] router_018_src_data;                                                                                                                   // router_018:src_data -> rsp_demux_015:sink_data
	wire          router_018_src_ready;                                                                                                                  // rsp_demux_015:sink_ready -> router_018:src_ready
	wire   [15:0] router_018_src_channel;                                                                                                                // router_018:src_channel -> rsp_demux_015:sink_channel
	wire          router_018_src_startofpacket;                                                                                                          // router_018:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                                                            // router_018:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_src_valid;                                                                                                                      // router:src_valid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_sink_valid
	wire   [91:0] router_src_data;                                                                                                                       // router:src_data -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                                                                      // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [15:0] router_src_channel;                                                                                                                    // router:src_channel -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                                                              // router:src_startofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                                                                // router:src_endofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_sink_endofpacket
	wire   [91:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_data;                                                                 // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_ready;                                                                // cmd_demux:sink_ready -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_src_ready
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_channel;                                                              // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_startofpacket;                                                        // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_endofpacket;                                                          // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                                                     // rsp_mux:src_valid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_sink_valid
	wire   [91:0] rsp_mux_src_data;                                                                                                                      // rsp_mux:src_data -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                                                                     // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [15:0] rsp_mux_src_channel;                                                                                                                   // rsp_mux:src_channel -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                                                             // rsp_mux:src_startofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                                               // rsp_mux:src_endofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_sink_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_valid;                                                                // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_src_valid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_valid
	wire   [91:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_data;                                                                 // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_src_data -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_data
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_ready;                                                                // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_ready -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_src_ready
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_channel;                                                              // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_src_channel -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_channel
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_startofpacket;                                                        // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_src_startofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_endofpacket;                                                          // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:rsp_src_endofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                                                                  // router_001:src_valid -> Processor_data_master_limiter:cmd_sink_valid
	wire  [109:0] router_001_src_data;                                                                                                                   // router_001:src_data -> Processor_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                                                                  // Processor_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [15:0] router_001_src_channel;                                                                                                                // router_001:src_channel -> Processor_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                                                          // router_001:src_startofpacket -> Processor_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                                                            // router_001:src_endofpacket -> Processor_data_master_limiter:cmd_sink_endofpacket
	wire  [109:0] processor_data_master_limiter_cmd_src_data;                                                                                            // Processor_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          processor_data_master_limiter_cmd_src_ready;                                                                                           // cmd_demux_001:sink_ready -> Processor_data_master_limiter:cmd_src_ready
	wire   [15:0] processor_data_master_limiter_cmd_src_channel;                                                                                         // Processor_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          processor_data_master_limiter_cmd_src_startofpacket;                                                                                   // Processor_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          processor_data_master_limiter_cmd_src_endofpacket;                                                                                     // Processor_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                                                                 // rsp_mux_001:src_valid -> Processor_data_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_001_src_data;                                                                                                                  // rsp_mux_001:src_data -> Processor_data_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                                                                 // Processor_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [15:0] rsp_mux_001_src_channel;                                                                                                               // rsp_mux_001:src_channel -> Processor_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                                                         // rsp_mux_001:src_startofpacket -> Processor_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                                                           // rsp_mux_001:src_endofpacket -> Processor_data_master_limiter:rsp_sink_endofpacket
	wire          processor_data_master_limiter_rsp_src_valid;                                                                                           // Processor_data_master_limiter:rsp_src_valid -> Processor_data_master_agent:rp_valid
	wire  [109:0] processor_data_master_limiter_rsp_src_data;                                                                                            // Processor_data_master_limiter:rsp_src_data -> Processor_data_master_agent:rp_data
	wire          processor_data_master_limiter_rsp_src_ready;                                                                                           // Processor_data_master_agent:rp_ready -> Processor_data_master_limiter:rsp_src_ready
	wire   [15:0] processor_data_master_limiter_rsp_src_channel;                                                                                         // Processor_data_master_limiter:rsp_src_channel -> Processor_data_master_agent:rp_channel
	wire          processor_data_master_limiter_rsp_src_startofpacket;                                                                                   // Processor_data_master_limiter:rsp_src_startofpacket -> Processor_data_master_agent:rp_startofpacket
	wire          processor_data_master_limiter_rsp_src_endofpacket;                                                                                     // Processor_data_master_limiter:rsp_src_endofpacket -> Processor_data_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                                                                                  // router_002:src_valid -> Processor_instruction_master_limiter:cmd_sink_valid
	wire  [109:0] router_002_src_data;                                                                                                                   // router_002:src_data -> Processor_instruction_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                                                                  // Processor_instruction_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [15:0] router_002_src_channel;                                                                                                                // router_002:src_channel -> Processor_instruction_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                                                          // router_002:src_startofpacket -> Processor_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                                                            // router_002:src_endofpacket -> Processor_instruction_master_limiter:cmd_sink_endofpacket
	wire  [109:0] processor_instruction_master_limiter_cmd_src_data;                                                                                     // Processor_instruction_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          processor_instruction_master_limiter_cmd_src_ready;                                                                                    // cmd_demux_002:sink_ready -> Processor_instruction_master_limiter:cmd_src_ready
	wire   [15:0] processor_instruction_master_limiter_cmd_src_channel;                                                                                  // Processor_instruction_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          processor_instruction_master_limiter_cmd_src_startofpacket;                                                                            // Processor_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          processor_instruction_master_limiter_cmd_src_endofpacket;                                                                              // Processor_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                                                                 // rsp_mux_002:src_valid -> Processor_instruction_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_002_src_data;                                                                                                                  // rsp_mux_002:src_data -> Processor_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                                                                 // Processor_instruction_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [15:0] rsp_mux_002_src_channel;                                                                                                               // rsp_mux_002:src_channel -> Processor_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                                                                         // rsp_mux_002:src_startofpacket -> Processor_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                                                           // rsp_mux_002:src_endofpacket -> Processor_instruction_master_limiter:rsp_sink_endofpacket
	wire          processor_instruction_master_limiter_rsp_src_valid;                                                                                    // Processor_instruction_master_limiter:rsp_src_valid -> Processor_instruction_master_agent:rp_valid
	wire  [109:0] processor_instruction_master_limiter_rsp_src_data;                                                                                     // Processor_instruction_master_limiter:rsp_src_data -> Processor_instruction_master_agent:rp_data
	wire          processor_instruction_master_limiter_rsp_src_ready;                                                                                    // Processor_instruction_master_agent:rp_ready -> Processor_instruction_master_limiter:rsp_src_ready
	wire   [15:0] processor_instruction_master_limiter_rsp_src_channel;                                                                                  // Processor_instruction_master_limiter:rsp_src_channel -> Processor_instruction_master_agent:rp_channel
	wire          processor_instruction_master_limiter_rsp_src_startofpacket;                                                                            // Processor_instruction_master_limiter:rsp_src_startofpacket -> Processor_instruction_master_agent:rp_startofpacket
	wire          processor_instruction_master_limiter_rsp_src_endofpacket;                                                                              // Processor_instruction_master_limiter:rsp_src_endofpacket -> Processor_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                                                 // cmd_mux_001:src_valid -> sram_0_avalon_sram_slave_burst_adapter:sink0_valid
	wire   [91:0] cmd_mux_001_src_data;                                                                                                                  // cmd_mux_001:src_data -> sram_0_avalon_sram_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                                                                 // sram_0_avalon_sram_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [15:0] cmd_mux_001_src_channel;                                                                                                               // cmd_mux_001:src_channel -> sram_0_avalon_sram_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                                                         // cmd_mux_001:src_startofpacket -> sram_0_avalon_sram_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                                                           // cmd_mux_001:src_endofpacket -> sram_0_avalon_sram_slave_burst_adapter:sink0_endofpacket
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_valid;                                                                                  // sram_0_avalon_sram_slave_burst_adapter:source0_valid -> sram_0_avalon_sram_slave_agent:cp_valid
	wire   [91:0] sram_0_avalon_sram_slave_burst_adapter_source0_data;                                                                                   // sram_0_avalon_sram_slave_burst_adapter:source0_data -> sram_0_avalon_sram_slave_agent:cp_data
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_ready;                                                                                  // sram_0_avalon_sram_slave_agent:cp_ready -> sram_0_avalon_sram_slave_burst_adapter:source0_ready
	wire   [15:0] sram_0_avalon_sram_slave_burst_adapter_source0_channel;                                                                                // sram_0_avalon_sram_slave_burst_adapter:source0_channel -> sram_0_avalon_sram_slave_agent:cp_channel
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket;                                                                          // sram_0_avalon_sram_slave_burst_adapter:source0_startofpacket -> sram_0_avalon_sram_slave_agent:cp_startofpacket
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket;                                                                            // sram_0_avalon_sram_slave_burst_adapter:source0_endofpacket -> sram_0_avalon_sram_slave_agent:cp_endofpacket
	wire          cmd_demux_src1_valid;                                                                                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire   [91:0] cmd_demux_src1_data;                                                                                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [15:0] cmd_demux_src1_channel;                                                                                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                                                              // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [109:0] cmd_demux_001_src0_data;                                                                                                               // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                                                              // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [15:0] cmd_demux_001_src0_channel;                                                                                                            // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                                                      // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                                                        // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                                                              // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire  [109:0] cmd_demux_001_src2_data;                                                                                                               // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_001_src2_ready;                                                                                                              // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire   [15:0] cmd_demux_001_src2_channel;                                                                                                            // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                                                                                      // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                                                        // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                                                              // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire  [109:0] cmd_demux_001_src3_data;                                                                                                               // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src3_ready;                                                                                                              // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire   [15:0] cmd_demux_001_src3_channel;                                                                                                            // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                                                                      // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                                                        // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                                                              // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire  [109:0] cmd_demux_001_src4_data;                                                                                                               // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_001_src4_ready;                                                                                                              // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire   [15:0] cmd_demux_001_src4_channel;                                                                                                            // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                                                                      // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                                                                        // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                                                              // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire  [109:0] cmd_demux_001_src5_data;                                                                                                               // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src5_ready;                                                                                                              // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire   [15:0] cmd_demux_001_src5_channel;                                                                                                            // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                                                                                      // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                                                                        // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                                                              // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire  [109:0] cmd_demux_001_src6_data;                                                                                                               // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_001_src6_ready;                                                                                                              // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire   [15:0] cmd_demux_001_src6_channel;                                                                                                            // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                                                                                      // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                                                                        // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                                                              // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire  [109:0] cmd_demux_001_src7_data;                                                                                                               // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                                                              // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire   [15:0] cmd_demux_001_src7_channel;                                                                                                            // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                                                                      // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                                                                        // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                                                              // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire  [109:0] cmd_demux_001_src8_data;                                                                                                               // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                                                              // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire   [15:0] cmd_demux_001_src8_channel;                                                                                                            // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                                                                      // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                                                                        // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                                                                              // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire  [109:0] cmd_demux_001_src9_data;                                                                                                               // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src9_ready;                                                                                                              // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire   [15:0] cmd_demux_001_src9_channel;                                                                                                            // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                                                                      // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                                                                        // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                                                                             // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire  [109:0] cmd_demux_001_src10_data;                                                                                                              // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src10_ready;                                                                                                             // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire   [15:0] cmd_demux_001_src10_channel;                                                                                                           // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                                                                     // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                                                                       // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                                                                             // cmd_demux_001:src11_valid -> cmd_mux_011:sink0_valid
	wire  [109:0] cmd_demux_001_src11_data;                                                                                                              // cmd_demux_001:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_001_src11_ready;                                                                                                             // cmd_mux_011:sink0_ready -> cmd_demux_001:src11_ready
	wire   [15:0] cmd_demux_001_src11_channel;                                                                                                           // cmd_demux_001:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_001_src11_startofpacket;                                                                                                     // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                                                                       // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                                                                                             // cmd_demux_001:src12_valid -> cmd_mux_012:sink0_valid
	wire  [109:0] cmd_demux_001_src12_data;                                                                                                              // cmd_demux_001:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_001_src12_ready;                                                                                                             // cmd_mux_012:sink0_ready -> cmd_demux_001:src12_ready
	wire   [15:0] cmd_demux_001_src12_channel;                                                                                                           // cmd_demux_001:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_001_src12_startofpacket;                                                                                                     // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                                                                       // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                                                                             // cmd_demux_001:src13_valid -> cmd_mux_013:sink0_valid
	wire  [109:0] cmd_demux_001_src13_data;                                                                                                              // cmd_demux_001:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_001_src13_ready;                                                                                                             // cmd_mux_013:sink0_ready -> cmd_demux_001:src13_ready
	wire   [15:0] cmd_demux_001_src13_channel;                                                                                                           // cmd_demux_001:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_001_src13_startofpacket;                                                                                                     // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                                                                       // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src14_valid;                                                                                                             // cmd_demux_001:src14_valid -> cmd_mux_014:sink0_valid
	wire  [109:0] cmd_demux_001_src14_data;                                                                                                              // cmd_demux_001:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_001_src14_ready;                                                                                                             // cmd_mux_014:sink0_ready -> cmd_demux_001:src14_ready
	wire   [15:0] cmd_demux_001_src14_channel;                                                                                                           // cmd_demux_001:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_001_src14_startofpacket;                                                                                                     // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                                                                       // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src15_valid;                                                                                                             // cmd_demux_001:src15_valid -> cmd_mux_015:sink0_valid
	wire  [109:0] cmd_demux_001_src15_data;                                                                                                              // cmd_demux_001:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_001_src15_ready;                                                                                                             // cmd_mux_015:sink0_ready -> cmd_demux_001:src15_ready
	wire   [15:0] cmd_demux_001_src15_channel;                                                                                                           // cmd_demux_001:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_001_src15_startofpacket;                                                                                                     // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                                                                       // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                                                              // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [109:0] cmd_demux_002_src0_data;                                                                                                               // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                                                              // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [15:0] cmd_demux_002_src0_channel;                                                                                                            // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                                                      // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                                                        // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                                                              // cmd_demux_002:src1_valid -> cmd_mux_002:sink1_valid
	wire  [109:0] cmd_demux_002_src1_data;                                                                                                               // cmd_demux_002:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_002_src1_ready;                                                                                                              // cmd_mux_002:sink1_ready -> cmd_demux_002:src1_ready
	wire   [15:0] cmd_demux_002_src1_channel;                                                                                                            // cmd_demux_002:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                                                                                      // cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                                                        // cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                                                              // cmd_demux_002:src2_valid -> cmd_mux_003:sink1_valid
	wire  [109:0] cmd_demux_002_src2_data;                                                                                                               // cmd_demux_002:src2_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_002_src2_ready;                                                                                                              // cmd_mux_003:sink1_ready -> cmd_demux_002:src2_ready
	wire   [15:0] cmd_demux_002_src2_channel;                                                                                                            // cmd_demux_002:src2_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_002_src2_startofpacket;                                                                                                      // cmd_demux_002:src2_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                                                                        // cmd_demux_002:src2_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                                                              // cmd_demux_002:src3_valid -> cmd_mux_004:sink1_valid
	wire  [109:0] cmd_demux_002_src3_data;                                                                                                               // cmd_demux_002:src3_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_002_src3_ready;                                                                                                              // cmd_mux_004:sink1_ready -> cmd_demux_002:src3_ready
	wire   [15:0] cmd_demux_002_src3_channel;                                                                                                            // cmd_demux_002:src3_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_002_src3_startofpacket;                                                                                                      // cmd_demux_002:src3_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                                                                        // cmd_demux_002:src3_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                                                              // cmd_demux_002:src4_valid -> cmd_mux_005:sink1_valid
	wire  [109:0] cmd_demux_002_src4_data;                                                                                                               // cmd_demux_002:src4_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_002_src4_ready;                                                                                                              // cmd_mux_005:sink1_ready -> cmd_demux_002:src4_ready
	wire   [15:0] cmd_demux_002_src4_channel;                                                                                                            // cmd_demux_002:src4_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_002_src4_startofpacket;                                                                                                      // cmd_demux_002:src4_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                                                                        // cmd_demux_002:src4_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_src1_valid;                                                                                                                  // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [109:0] rsp_demux_src1_data;                                                                                                                   // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                                                                  // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [15:0] rsp_demux_src1_channel;                                                                                                                // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                                                                          // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                                                            // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                                                                  // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [109:0] rsp_demux_src2_data;                                                                                                                   // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                                                                  // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [15:0] rsp_demux_src2_channel;                                                                                                                // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                                                                          // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                                                            // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire   [91:0] rsp_demux_001_src0_data;                                                                                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [15:0] rsp_demux_001_src0_channel;                                                                                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                                              // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire  [109:0] rsp_demux_002_src0_data;                                                                                                               // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                                                              // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire   [15:0] rsp_demux_002_src0_channel;                                                                                                            // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                                                      // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                                                        // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                                                              // rsp_demux_002:src1_valid -> rsp_mux_002:sink1_valid
	wire  [109:0] rsp_demux_002_src1_data;                                                                                                               // rsp_demux_002:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_002_src1_ready;                                                                                                              // rsp_mux_002:sink1_ready -> rsp_demux_002:src1_ready
	wire   [15:0] rsp_demux_002_src1_channel;                                                                                                            // rsp_demux_002:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                                                                                      // rsp_demux_002:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                                                                        // rsp_demux_002:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                                                              // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire  [109:0] rsp_demux_003_src0_data;                                                                                                               // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                                                              // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire   [15:0] rsp_demux_003_src0_channel;                                                                                                            // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                                                      // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                                                        // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                                                              // rsp_demux_003:src1_valid -> rsp_mux_002:sink2_valid
	wire  [109:0] rsp_demux_003_src1_data;                                                                                                               // rsp_demux_003:src1_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_003_src1_ready;                                                                                                              // rsp_mux_002:sink2_ready -> rsp_demux_003:src1_ready
	wire   [15:0] rsp_demux_003_src1_channel;                                                                                                            // rsp_demux_003:src1_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_003_src1_startofpacket;                                                                                                      // rsp_demux_003:src1_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                                                        // rsp_demux_003:src1_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                                                              // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire  [109:0] rsp_demux_004_src0_data;                                                                                                               // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                                                              // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire   [15:0] rsp_demux_004_src0_channel;                                                                                                            // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                                                      // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                                                        // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                                                              // rsp_demux_004:src1_valid -> rsp_mux_002:sink3_valid
	wire  [109:0] rsp_demux_004_src1_data;                                                                                                               // rsp_demux_004:src1_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_004_src1_ready;                                                                                                              // rsp_mux_002:sink3_ready -> rsp_demux_004:src1_ready
	wire   [15:0] rsp_demux_004_src1_channel;                                                                                                            // rsp_demux_004:src1_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_004_src1_startofpacket;                                                                                                      // rsp_demux_004:src1_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                                                                        // rsp_demux_004:src1_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                                                              // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire  [109:0] rsp_demux_005_src0_data;                                                                                                               // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                                                              // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire   [15:0] rsp_demux_005_src0_channel;                                                                                                            // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                                                      // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                                                        // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                                                              // rsp_demux_005:src1_valid -> rsp_mux_002:sink4_valid
	wire  [109:0] rsp_demux_005_src1_data;                                                                                                               // rsp_demux_005:src1_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_005_src1_ready;                                                                                                              // rsp_mux_002:sink4_ready -> rsp_demux_005:src1_ready
	wire   [15:0] rsp_demux_005_src1_channel;                                                                                                            // rsp_demux_005:src1_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_005_src1_startofpacket;                                                                                                      // rsp_demux_005:src1_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                                                        // rsp_demux_005:src1_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                                                              // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire  [109:0] rsp_demux_006_src0_data;                                                                                                               // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                                                              // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire   [15:0] rsp_demux_006_src0_channel;                                                                                                            // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                                                      // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                                                        // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                                                              // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire  [109:0] rsp_demux_007_src0_data;                                                                                                               // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                                                              // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire   [15:0] rsp_demux_007_src0_channel;                                                                                                            // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                                                      // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                                                        // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                                                              // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire  [109:0] rsp_demux_008_src0_data;                                                                                                               // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                                                              // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire   [15:0] rsp_demux_008_src0_channel;                                                                                                            // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                                                      // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                                                        // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                                                              // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire  [109:0] rsp_demux_009_src0_data;                                                                                                               // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                                                              // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire   [15:0] rsp_demux_009_src0_channel;                                                                                                            // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                                                      // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                                                        // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                                                              // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire  [109:0] rsp_demux_010_src0_data;                                                                                                               // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                                                              // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire   [15:0] rsp_demux_010_src0_channel;                                                                                                            // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                                                      // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                                                        // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                                                              // rsp_demux_011:src0_valid -> rsp_mux_001:sink11_valid
	wire  [109:0] rsp_demux_011_src0_data;                                                                                                               // rsp_demux_011:src0_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                                                              // rsp_mux_001:sink11_ready -> rsp_demux_011:src0_ready
	wire   [15:0] rsp_demux_011_src0_channel;                                                                                                            // rsp_demux_011:src0_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                                                                      // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                                                        // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                                                              // rsp_demux_012:src0_valid -> rsp_mux_001:sink12_valid
	wire  [109:0] rsp_demux_012_src0_data;                                                                                                               // rsp_demux_012:src0_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                                                              // rsp_mux_001:sink12_ready -> rsp_demux_012:src0_ready
	wire   [15:0] rsp_demux_012_src0_channel;                                                                                                            // rsp_demux_012:src0_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                                                                      // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                                                        // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                                                              // rsp_demux_013:src0_valid -> rsp_mux_001:sink13_valid
	wire  [109:0] rsp_demux_013_src0_data;                                                                                                               // rsp_demux_013:src0_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                                                              // rsp_mux_001:sink13_ready -> rsp_demux_013:src0_ready
	wire   [15:0] rsp_demux_013_src0_channel;                                                                                                            // rsp_demux_013:src0_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                                                                      // rsp_demux_013:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                                                        // rsp_demux_013:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                                                              // rsp_demux_014:src0_valid -> rsp_mux_001:sink14_valid
	wire  [109:0] rsp_demux_014_src0_data;                                                                                                               // rsp_demux_014:src0_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                                                              // rsp_mux_001:sink14_ready -> rsp_demux_014:src0_ready
	wire   [15:0] rsp_demux_014_src0_channel;                                                                                                            // rsp_demux_014:src0_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                                                                      // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                                                        // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                                                              // rsp_demux_015:src0_valid -> rsp_mux_001:sink15_valid
	wire  [109:0] rsp_demux_015_src0_data;                                                                                                               // rsp_demux_015:src0_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                                                              // rsp_mux_001:sink15_ready -> rsp_demux_015:src0_ready
	wire   [15:0] rsp_demux_015_src0_channel;                                                                                                            // rsp_demux_015:src0_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                                                                      // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                                                        // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          cmd_demux_src0_valid;                                                                                                                  // cmd_demux:src0_valid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:in_valid
	wire   [91:0] cmd_demux_src0_data;                                                                                                                   // cmd_demux:src0_data -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                                                                                  // video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire   [15:0] cmd_demux_src0_channel;                                                                                                                // cmd_demux:src0_channel -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                                                          // cmd_demux:src0_startofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                                                            // cmd_demux:src0_endofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:in_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_valid;         // video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire  [109:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_data;          // video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_ready;         // cmd_mux:sink0_ready -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:out_ready
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_channel;       // video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_startofpacket; // video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_endofpacket;   // video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                                                              // cmd_demux_001:src1_valid -> Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_001_src1_data;                                                                                                               // cmd_demux_001:src1_data -> Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                                                                              // Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire   [15:0] cmd_demux_001_src1_channel;                                                                                                            // cmd_demux_001:src1_channel -> Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                                                      // cmd_demux_001:src1_startofpacket -> Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                                                        // cmd_demux_001:src1_endofpacket -> Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_endofpacket
	wire          processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_valid;                                                         // Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire   [91:0] processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_data;                                                          // Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_ready;                                                         // cmd_mux_001:sink1_ready -> Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_ready
	wire   [15:0] processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_channel;                                                       // Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket;                                                 // Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket;                                                   // Processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                                                                  // rsp_demux:src0_valid -> video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_src0_data;                                                                                                                   // rsp_demux:src0_data -> video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                                                                                  // video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire   [15:0] rsp_demux_src0_channel;                                                                                                                // rsp_demux:src0_channel -> video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                                                          // rsp_demux:src0_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                                                            // rsp_demux:src0_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:in_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_valid;         // video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire   [91:0] video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_data;          // video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_ready;         // rsp_mux:sink0_ready -> video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:out_ready
	wire   [15:0] video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_channel;       // video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket; // video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket;   // video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                                                              // rsp_demux_001:src1_valid -> sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:in_valid
	wire   [91:0] rsp_demux_001_src1_data;                                                                                                               // rsp_demux_001:src1_data -> sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                                                                              // sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire   [15:0] rsp_demux_001_src1_channel;                                                                                                            // rsp_demux_001:src1_channel -> sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                                                      // rsp_demux_001:src1_startofpacket -> sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                                                        // rsp_demux_001:src1_endofpacket -> sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:in_endofpacket
	wire          sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_valid;                                                         // sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [109:0] sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_data;                                                          // sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_ready;                                                         // rsp_mux_001:sink1_ready -> sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:out_ready
	wire   [15:0] sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_channel;                                                       // sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_startofpacket;                                                 // sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_endofpacket;                                                   // sram_0_avalon_sram_slave_to_Processor_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_valid_data;                                                               // video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [15:0] processor_data_master_limiter_cmd_valid_data;                                                                                          // Processor_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [15:0] processor_instruction_master_limiter_cmd_valid_data;                                                                                   // Processor_instruction_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid;                                                              // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data;                                                               // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter:in_0_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                                                                         // avalon_st_adapter:out_0_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                                                                          // avalon_st_adapter:out_0_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                                                         // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                                                         // avalon_st_adapter:out_0_error -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_error
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid;                                                                                   // sram_0_avalon_sram_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [17:0] sram_0_avalon_sram_slave_agent_rdata_fifo_out_data;                                                                                    // sram_0_avalon_sram_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready;                                                                                   // avalon_st_adapter_001:in_0_ready -> sram_0_avalon_sram_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                                                     // avalon_st_adapter_001:out_0_valid -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_001_out_0_data;                                                                                                      // avalon_st_adapter_001:out_0_data -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                                                     // sram_0_avalon_sram_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                                                     // avalon_st_adapter_001:out_0_error -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                                                                        // SYSID_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                                                                         // SYSID_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                                                                        // avalon_st_adapter_002:in_0_ready -> SYSID_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                                                     // avalon_st_adapter_002:out_0_valid -> SYSID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                                                      // avalon_st_adapter_002:out_0_data -> SYSID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                                                     // SYSID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                                                     // avalon_st_adapter_002:out_0_error -> SYSID_control_slave_agent:rdata_fifo_sink_error
	wire          processor_jtag_debug_module_agent_rdata_fifo_src_valid;                                                                                // Processor_jtag_debug_module_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] processor_jtag_debug_module_agent_rdata_fifo_src_data;                                                                                 // Processor_jtag_debug_module_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          processor_jtag_debug_module_agent_rdata_fifo_src_ready;                                                                                // avalon_st_adapter_003:in_0_ready -> Processor_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                                                     // avalon_st_adapter_003:out_0_valid -> Processor_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                                                                      // avalon_st_adapter_003:out_0_data -> Processor_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                                                     // Processor_jtag_debug_module_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                                                     // avalon_st_adapter_003:out_0_error -> Processor_jtag_debug_module_agent:rdata_fifo_sink_error
	wire          on_chip_mem_s1_agent_rdata_fifo_src_valid;                                                                                             // On_Chip_Mem_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] on_chip_mem_s1_agent_rdata_fifo_src_data;                                                                                              // On_Chip_Mem_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          on_chip_mem_s1_agent_rdata_fifo_src_ready;                                                                                             // avalon_st_adapter_004:in_0_ready -> On_Chip_Mem_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                                                     // avalon_st_adapter_004:out_0_valid -> On_Chip_Mem_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                                                      // avalon_st_adapter_004:out_0_data -> On_Chip_Mem_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                                                     // On_Chip_Mem_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                                                     // avalon_st_adapter_004:out_0_error -> On_Chip_Mem_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                                                                   // SDRAM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                                                                                    // SDRAM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                                                                   // avalon_st_adapter_005:in_0_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                                                     // avalon_st_adapter_005:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                                                                      // avalon_st_adapter_005:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                                                     // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                                                     // avalon_st_adapter_005:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                                                                // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                                                                 // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                                                                // avalon_st_adapter_006:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                                                     // avalon_st_adapter_006:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                                                                      // avalon_st_adapter_006:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                                                     // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                                                     // avalon_st_adapter_006:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_valid;                                                   // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_data;                                                    // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_007:in_0_ready -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                                                     // avalon_st_adapter_007:out_0_valid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                                                                      // avalon_st_adapter_007:out_0_data -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                                                     // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                                                     // avalon_st_adapter_007:out_0_error -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_sink_error
	wire          red_leds_s1_agent_rdata_fifo_src_valid;                                                                                                // RED_LEDs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] red_leds_s1_agent_rdata_fifo_src_data;                                                                                                 // RED_LEDs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          red_leds_s1_agent_rdata_fifo_src_ready;                                                                                                // avalon_st_adapter_008:in_0_ready -> RED_LEDs_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                                                     // avalon_st_adapter_008:out_0_valid -> RED_LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                                                                      // avalon_st_adapter_008:out_0_data -> RED_LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                                                     // RED_LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                                                     // avalon_st_adapter_008:out_0_error -> RED_LEDs_s1_agent:rdata_fifo_sink_error
	wire          green_leds_s1_agent_rdata_fifo_src_valid;                                                                                              // GREEN_LEDs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] green_leds_s1_agent_rdata_fifo_src_data;                                                                                               // GREEN_LEDs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          green_leds_s1_agent_rdata_fifo_src_ready;                                                                                              // avalon_st_adapter_009:in_0_ready -> GREEN_LEDs_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                                                                     // avalon_st_adapter_009:out_0_valid -> GREEN_LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                                                                      // avalon_st_adapter_009:out_0_data -> GREEN_LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                                                                     // GREEN_LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                                                                     // avalon_st_adapter_009:out_0_error -> GREEN_LEDs_s1_agent:rdata_fifo_sink_error
	wire          sevsegment_4lsb_s1_agent_rdata_fifo_src_valid;                                                                                         // SevSegment_4LSB_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] sevsegment_4lsb_s1_agent_rdata_fifo_src_data;                                                                                          // SevSegment_4LSB_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          sevsegment_4lsb_s1_agent_rdata_fifo_src_ready;                                                                                         // avalon_st_adapter_010:in_0_ready -> SevSegment_4LSB_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                                                                     // avalon_st_adapter_010:out_0_valid -> SevSegment_4LSB_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                                                                      // avalon_st_adapter_010:out_0_data -> SevSegment_4LSB_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                                                                     // SevSegment_4LSB_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                                                                     // avalon_st_adapter_010:out_0_error -> SevSegment_4LSB_s1_agent:rdata_fifo_sink_error
	wire          switches_s1_agent_rdata_fifo_src_valid;                                                                                                // Switches_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] switches_s1_agent_rdata_fifo_src_data;                                                                                                 // Switches_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          switches_s1_agent_rdata_fifo_src_ready;                                                                                                // avalon_st_adapter_011:in_0_ready -> Switches_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                                                                     // avalon_st_adapter_011:out_0_valid -> Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                                                                      // avalon_st_adapter_011:out_0_data -> Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                                                                     // Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                                                                     // avalon_st_adapter_011:out_0_error -> Switches_s1_agent:rdata_fifo_sink_error
	wire          sevseg4msb_s1_agent_rdata_fifo_src_valid;                                                                                              // SevSeg4MSB_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] sevseg4msb_s1_agent_rdata_fifo_src_data;                                                                                               // SevSeg4MSB_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          sevseg4msb_s1_agent_rdata_fifo_src_ready;                                                                                              // avalon_st_adapter_012:in_0_ready -> SevSeg4MSB_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                                                                     // avalon_st_adapter_012:out_0_valid -> SevSeg4MSB_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                                                                      // avalon_st_adapter_012:out_0_data -> SevSeg4MSB_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                                                                     // SevSeg4MSB_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                                                                     // avalon_st_adapter_012:out_0_error -> SevSeg4MSB_s1_agent:rdata_fifo_sink_error
	wire          keys_s1_agent_rdata_fifo_src_valid;                                                                                                    // KEYS_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] keys_s1_agent_rdata_fifo_src_data;                                                                                                     // KEYS_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          keys_s1_agent_rdata_fifo_src_ready;                                                                                                    // avalon_st_adapter_013:in_0_ready -> KEYS_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                                                                     // avalon_st_adapter_013:out_0_valid -> KEYS_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                                                                      // avalon_st_adapter_013:out_0_data -> KEYS_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                                                                     // KEYS_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                                                                     // avalon_st_adapter_013:out_0_error -> KEYS_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                                                                                 // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                                                                                  // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                                                                                 // avalon_st_adapter_014:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                                                                     // avalon_st_adapter_014:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                                                                      // avalon_st_adapter_014:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                                                                     // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                                                                     // avalon_st_adapter_014:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          timer_1_s1_agent_rdata_fifo_src_valid;                                                                                                 // timer_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] timer_1_s1_agent_rdata_fifo_src_data;                                                                                                  // timer_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          timer_1_s1_agent_rdata_fifo_src_ready;                                                                                                 // avalon_st_adapter_015:in_0_ready -> timer_1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                                                                     // avalon_st_adapter_015:out_0_valid -> timer_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                                                                      // avalon_st_adapter_015:out_0_data -> timer_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                                                                     // timer_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                                                                     // avalon_st_adapter_015:out_0_error -> timer_1_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator (
		.clk                    (CLK_sys_clk_clk),                                                                                     //                       clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                          //                     reset.reset
		.uav_address            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (video_pixel_buffer_dma_0_avalon_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                (video_pixel_buffer_dma_0_avalon_pixel_dma_master_read),                                               //                          .read
		.av_readdata            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (video_pixel_buffer_dma_0_avalon_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                                                //               (terminated)
		.av_byteenable          (2'b11),                                                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                                //               (terminated)
		.av_write               (1'b0),                                                                                                //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                //               (terminated)
		.uav_clken              (),                                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                                               //               (terminated)
		.av_response            (),                                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor_data_master_translator (
		.clk                    (CLK_sys_clk_clk),                                                          //                       clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (processor_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (processor_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (processor_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (processor_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (processor_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (processor_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (processor_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (processor_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (processor_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (processor_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (processor_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Processor_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Processor_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Processor_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Processor_data_master_read),                                               //                          .read
		.av_readdata            (Processor_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (Processor_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (Processor_data_master_write),                                              //                          .write
		.av_writedata           (Processor_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (Processor_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor_instruction_master_translator (
		.clk                    (CLK_sys_clk_clk),                                                                 //                       clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (processor_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (processor_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (processor_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (processor_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (processor_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (processor_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Processor_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Processor_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Processor_instruction_master_read),                                               //                          .read
		.av_readdata            (Processor_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (Processor_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                            //               (terminated)
		.av_byteenable          (4'b1111),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_translator (
		.clk                    (CLK_sys_clk_clk),                                                      //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_pixel_buffer_dma_0_avalon_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_pixel_buffer_dma_0_avalon_control_slave_write),                  //                         .write
		.av_read                (video_pixel_buffer_dma_0_avalon_control_slave_read),                   //                         .read
		.av_readdata            (video_pixel_buffer_dma_0_avalon_control_slave_readdata),               //                         .readdata
		.av_writedata           (video_pixel_buffer_dma_0_avalon_control_slave_writedata),              //                         .writedata
		.av_byteenable          (video_pixel_buffer_dma_0_avalon_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                                     //              (terminated)
		.av_burstcount          (),                                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_0_avalon_sram_slave_translator (
		.clk                    (CLK_sys_clk_clk),                                            //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_0_avalon_sram_slave_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_0_avalon_sram_slave_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_0_avalon_sram_slave_agent_m0_read),                     //                         .read
		.uav_write              (sram_0_avalon_sram_slave_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_0_avalon_sram_slave_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_0_avalon_sram_slave_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_0_avalon_sram_slave_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_0_avalon_sram_slave_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_0_avalon_sram_slave_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_0_avalon_sram_slave_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_0_avalon_sram_slave_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_0_avalon_sram_slave_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_0_avalon_sram_slave_write),                             //                         .write
		.av_read                (sram_0_avalon_sram_slave_read),                              //                         .read
		.av_readdata            (sram_0_avalon_sram_slave_readdata),                          //                         .readdata
		.av_writedata           (sram_0_avalon_sram_slave_writedata),                         //                         .writedata
		.av_byteenable          (sram_0_avalon_sram_slave_byteenable),                        //                         .byteenable
		.av_readdatavalid       (sram_0_avalon_sram_slave_readdatavalid),                     //                         .readdatavalid
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),             //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (SYSID_control_slave_address),                   //      avalon_anti_slave_0.address
		.av_readdata            (SYSID_control_slave_readdata),                  //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor_jtag_debug_module_translator (
		.clk                    (CLK_sys_clk_clk),                                    //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (processor_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (processor_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (processor_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (processor_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (processor_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (processor_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (processor_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (processor_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (processor_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (processor_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (processor_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Processor_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (Processor_jtag_debug_module_write),                  //                         .write
		.av_read                (Processor_jtag_debug_module_read),                   //                         .read
		.av_readdata            (Processor_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (Processor_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (Processor_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (Processor_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (Processor_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) on_chip_mem_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (on_chip_mem_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (on_chip_mem_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (on_chip_mem_s1_agent_m0_read),                  //                         .read
		.uav_write              (on_chip_mem_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (on_chip_mem_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (on_chip_mem_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (on_chip_mem_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (on_chip_mem_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (on_chip_mem_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (on_chip_mem_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (on_chip_mem_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (On_Chip_Mem_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (On_Chip_Mem_s1_write),                          //                         .write
		.av_readdata            (On_Chip_Mem_s1_readdata),                       //                         .readdata
		.av_writedata           (On_Chip_Mem_s1_writedata),                      //                         .writedata
		.av_byteenable          (On_Chip_Mem_s1_byteenable),                     //                         .byteenable
		.av_chipselect          (On_Chip_Mem_s1_chipselect),                     //                         .chipselect
		.av_clken               (On_Chip_Mem_s1_clken),                          //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                        //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (SDRAM_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                                //                         .write
		.av_read                (SDRAM_s1_read),                                 //                         .read
		.av_readdata            (SDRAM_s1_readdata),                             //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                            //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                           //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                        //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                          //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                           //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (CLK_sys_clk_clk),                                    //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_translator (
		.clk                    (CLK_sys_clk_clk),                                                                 //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address            (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_read),          //                         .read
		.uav_write              (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_write),                  //                         .write
		.av_read                (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_read),                   //                         .read
		.av_readdata            (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_readdata),               //                         .readdata
		.av_writedata           (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_writedata),              //                         .writedata
		.av_byteenable          (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                                //              (terminated)
		.av_burstcount          (),                                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                                            //              (terminated)
		.av_writebyteenable     (),                                                                                //              (terminated)
		.av_lock                (),                                                                                //              (terminated)
		.av_clken               (),                                                                                //              (terminated)
		.uav_clken              (1'b0),                                                                            //              (terminated)
		.av_debugaccess         (),                                                                                //              (terminated)
		.av_outputenable        (),                                                                                //              (terminated)
		.uav_response           (),                                                                                //              (terminated)
		.av_response            (2'b00),                                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) red_leds_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (red_leds_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (red_leds_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (red_leds_s1_agent_m0_read),                     //                         .read
		.uav_write              (red_leds_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (red_leds_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (red_leds_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (red_leds_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (red_leds_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (red_leds_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (red_leds_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (red_leds_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (RED_LEDs_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (RED_LEDs_s1_write),                             //                         .write
		.av_readdata            (RED_LEDs_s1_readdata),                          //                         .readdata
		.av_writedata           (RED_LEDs_s1_writedata),                         //                         .writedata
		.av_chipselect          (RED_LEDs_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) green_leds_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (green_leds_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (green_leds_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (green_leds_s1_agent_m0_read),                   //                         .read
		.uav_write              (green_leds_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (green_leds_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (green_leds_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (green_leds_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (green_leds_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (green_leds_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (green_leds_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (green_leds_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (GREEN_LEDs_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (GREEN_LEDs_s1_write),                           //                         .write
		.av_readdata            (GREEN_LEDs_s1_readdata),                        //                         .readdata
		.av_writedata           (GREEN_LEDs_s1_writedata),                       //                         .writedata
		.av_chipselect          (GREEN_LEDs_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevsegment_4lsb_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sevsegment_4lsb_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sevsegment_4lsb_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sevsegment_4lsb_s1_agent_m0_read),              //                         .read
		.uav_write              (sevsegment_4lsb_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (sevsegment_4lsb_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sevsegment_4lsb_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sevsegment_4lsb_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sevsegment_4lsb_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sevsegment_4lsb_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sevsegment_4lsb_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sevsegment_4lsb_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (SevSegment_4LSB_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (SevSegment_4LSB_s1_write),                      //                         .write
		.av_readdata            (SevSegment_4LSB_s1_readdata),                   //                         .readdata
		.av_writedata           (SevSegment_4LSB_s1_writedata),                  //                         .writedata
		.av_chipselect          (SevSegment_4LSB_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switches_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (switches_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (switches_s1_agent_m0_read),                     //                         .read
		.uav_write              (switches_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (switches_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (switches_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (switches_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (switches_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (switches_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (switches_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (switches_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (Switches_s1_address),                           //      avalon_anti_slave_0.address
		.av_readdata            (Switches_s1_readdata),                          //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sevseg4msb_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sevseg4msb_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (sevseg4msb_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (sevseg4msb_s1_agent_m0_read),                   //                         .read
		.uav_write              (sevseg4msb_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (sevseg4msb_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (sevseg4msb_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (sevseg4msb_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (sevseg4msb_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (sevseg4msb_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (sevseg4msb_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (sevseg4msb_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (SevSeg4MSB_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (SevSeg4MSB_s1_write),                           //                         .write
		.av_readdata            (SevSeg4MSB_s1_readdata),                        //                         .readdata
		.av_writedata           (SevSeg4MSB_s1_writedata),                       //                         .writedata
		.av_chipselect          (SevSeg4MSB_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keys_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (keys_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (keys_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (keys_s1_agent_m0_read),                         //                         .read
		.uav_write              (keys_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (keys_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (keys_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (keys_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (keys_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (keys_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (keys_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (keys_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (KEYS_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (KEYS_s1_write),                                 //                         .write
		.av_readdata            (KEYS_s1_readdata),                              //                         .readdata
		.av_writedata           (KEYS_s1_writedata),                             //                         .writedata
		.av_chipselect          (KEYS_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                      //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (timer_0_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                              //                         .write
		.av_readdata            (timer_0_s1_readdata),                           //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                          //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_1_s1_translator (
		.clk                    (CLK_sys_clk_clk),                               //                      clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_1_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (timer_1_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (timer_1_s1_agent_m0_read),                      //                         .read
		.uav_write              (timer_1_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (timer_1_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (timer_1_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (timer_1_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (timer_1_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (timer_1_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (timer_1_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (timer_1_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (timer_1_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (timer_1_s1_write),                              //                         .write
		.av_readdata            (timer_1_s1_readdata),                           //                         .readdata
		.av_writedata           (timer_1_s1_writedata),                          //                         .writedata
		.av_chipselect          (timer_1_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent (
		.clk                   (CLK_sys_clk_clk),                                                                                     //       clk.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor_data_master_agent (
		.clk                   (CLK_sys_clk_clk),                                                          //       clk.clk
		.reset                 (Processor_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (processor_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (processor_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (processor_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (processor_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (processor_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (processor_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (processor_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (processor_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (processor_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (processor_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (processor_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (processor_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (processor_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (processor_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (processor_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (processor_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (processor_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (processor_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (processor_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (processor_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (processor_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (processor_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor_instruction_master_agent (
		.clk                   (CLK_sys_clk_clk),                                                                 //       clk.clk
		.reset                 (Processor_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (processor_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (processor_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (processor_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (processor_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (processor_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (processor_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (processor_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (processor_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (processor_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (processor_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (processor_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (processor_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (processor_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (processor_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (processor_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (processor_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (processor_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_agent (
		.clk                     (CLK_sys_clk_clk),                                                                //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                            //                .channel
		.rf_sink_ready           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                  //                .error
		.rdata_fifo_src_ready    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                                                //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_0_avalon_sram_slave_agent (
		.clk                     (CLK_sys_clk_clk),                                              //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_0_avalon_sram_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_0_avalon_sram_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_0_avalon_sram_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_0_avalon_sram_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_0_avalon_sram_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_0_avalon_sram_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_0_avalon_sram_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_0_avalon_sram_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_0_avalon_sram_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_0_avalon_sram_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_0_avalon_sram_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_0_avalon_sram_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_0_avalon_sram_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_0_avalon_sram_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_0_avalon_sram_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_0_avalon_sram_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_0_avalon_sram_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_0_avalon_sram_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_0_avalon_sram_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_0_avalon_sram_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_0_avalon_sram_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_0_avalon_sram_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_0_avalon_sram_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_0_avalon_sram_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_0_avalon_sram_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_0_avalon_sram_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_0_avalon_sram_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_0_avalon_sram_slave_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                            //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_0_avalon_sram_slave_agent_rf_source_data),              //        in.data
		.in_valid          (sram_0_avalon_sram_slave_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_0_avalon_sram_slave_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_0_avalon_sram_slave_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_0_avalon_sram_slave_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_0_avalon_sram_slave_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_0_avalon_sram_slave_agent_rdata_fifo (
		.clk               (CLK_sys_clk_clk),                                            //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_0_avalon_sram_slave_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_0_avalon_sram_slave_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (CLK_sys_clk_clk),                                      //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                      //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) processor_jtag_debug_module_agent (
		.clk                     (CLK_sys_clk_clk),                                              //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (processor_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (processor_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (processor_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (processor_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                      //                .channel
		.rf_sink_ready           (processor_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (processor_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor_jtag_debug_module_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                              //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (processor_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (processor_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (processor_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) on_chip_mem_s1_agent (
		.clk                     (CLK_sys_clk_clk),                                 //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (on_chip_mem_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (on_chip_mem_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (on_chip_mem_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (on_chip_mem_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (on_chip_mem_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (on_chip_mem_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (on_chip_mem_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (on_chip_mem_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (on_chip_mem_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (on_chip_mem_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (on_chip_mem_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (on_chip_mem_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (on_chip_mem_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (on_chip_mem_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (on_chip_mem_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (on_chip_mem_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_004_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                         //                .channel
		.rf_sink_ready           (on_chip_mem_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (on_chip_mem_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (on_chip_mem_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (on_chip_mem_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (on_chip_mem_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (on_chip_mem_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (on_chip_mem_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (on_chip_mem_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (on_chip_mem_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (on_chip_mem_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),               //                .error
		.rdata_fifo_src_ready    (on_chip_mem_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (on_chip_mem_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (on_chip_mem_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) on_chip_mem_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                 //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (on_chip_mem_s1_agent_rf_source_data),             //        in.data
		.in_valid          (on_chip_mem_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (on_chip_mem_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (on_chip_mem_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (on_chip_mem_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (on_chip_mem_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (on_chip_mem_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (on_chip_mem_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (on_chip_mem_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (on_chip_mem_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (CLK_sys_clk_clk),                               //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_005_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                               //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (CLK_sys_clk_clk),                                              //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                              //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent (
		.clk                     (CLK_sys_clk_clk),                                                                           //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                                                     //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                                                     //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                                                      //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                                               //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                                                   //                .channel
		.rf_sink_ready           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                                         //                .error
		.rdata_fifo_src_ready    (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                                                           //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_data),             //        in.data
		.in_valid          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                     // (terminated)
		.csr_read          (1'b0),                                                                                      // (terminated)
		.csr_write         (1'b0),                                                                                      // (terminated)
		.csr_readdata      (),                                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                      // (terminated)
		.almost_full_data  (),                                                                                          // (terminated)
		.almost_empty_data (),                                                                                          // (terminated)
		.in_empty          (1'b0),                                                                                      // (terminated)
		.out_empty         (),                                                                                          // (terminated)
		.in_error          (1'b0),                                                                                      // (terminated)
		.out_error         (),                                                                                          // (terminated)
		.in_channel        (1'b0),                                                                                      // (terminated)
		.out_channel       ()                                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) red_leds_s1_agent (
		.clk                     (CLK_sys_clk_clk),                               //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (red_leds_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (red_leds_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (red_leds_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (red_leds_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (red_leds_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (red_leds_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (red_leds_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (red_leds_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (red_leds_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (red_leds_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (red_leds_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (red_leds_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (red_leds_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (red_leds_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (red_leds_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (red_leds_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_008_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                       //                .channel
		.rf_sink_ready           (red_leds_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (red_leds_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (red_leds_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (red_leds_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (red_leds_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (red_leds_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (red_leds_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (red_leds_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (red_leds_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (red_leds_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),             //                .error
		.rdata_fifo_src_ready    (red_leds_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (red_leds_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (red_leds_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) red_leds_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                               //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (red_leds_s1_agent_rf_source_data),              //        in.data
		.in_valid          (red_leds_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (red_leds_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (red_leds_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (red_leds_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (red_leds_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (red_leds_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (red_leds_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (red_leds_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (red_leds_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) green_leds_s1_agent (
		.clk                     (CLK_sys_clk_clk),                                //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (green_leds_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (green_leds_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (green_leds_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (green_leds_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (green_leds_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (green_leds_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (green_leds_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (green_leds_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (green_leds_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (green_leds_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (green_leds_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (green_leds_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (green_leds_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (green_leds_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (green_leds_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (green_leds_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_009_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                        //                .channel
		.rf_sink_ready           (green_leds_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (green_leds_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (green_leds_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (green_leds_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (green_leds_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (green_leds_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (green_leds_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (green_leds_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (green_leds_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (green_leds_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),              //                .error
		.rdata_fifo_src_ready    (green_leds_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (green_leds_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (green_leds_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) green_leds_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (green_leds_s1_agent_rf_source_data),             //        in.data
		.in_valid          (green_leds_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (green_leds_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (green_leds_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (green_leds_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (green_leds_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (green_leds_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (green_leds_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (green_leds_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (green_leds_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sevsegment_4lsb_s1_agent (
		.clk                     (CLK_sys_clk_clk),                                     //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (sevsegment_4lsb_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevsegment_4lsb_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevsegment_4lsb_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevsegment_4lsb_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevsegment_4lsb_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevsegment_4lsb_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevsegment_4lsb_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevsegment_4lsb_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevsegment_4lsb_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevsegment_4lsb_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sevsegment_4lsb_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevsegment_4lsb_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevsegment_4lsb_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sevsegment_4lsb_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sevsegment_4lsb_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevsegment_4lsb_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                             //                .channel
		.rf_sink_ready           (sevsegment_4lsb_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevsegment_4lsb_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevsegment_4lsb_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevsegment_4lsb_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevsegment_4lsb_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevsegment_4lsb_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevsegment_4lsb_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevsegment_4lsb_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevsegment_4lsb_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevsegment_4lsb_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (sevsegment_4lsb_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevsegment_4lsb_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevsegment_4lsb_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevsegment_4lsb_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                     //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sevsegment_4lsb_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sevsegment_4lsb_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sevsegment_4lsb_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevsegment_4lsb_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevsegment_4lsb_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevsegment_4lsb_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevsegment_4lsb_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevsegment_4lsb_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevsegment_4lsb_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevsegment_4lsb_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switches_s1_agent (
		.clk                     (CLK_sys_clk_clk),                               //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (switches_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (switches_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (switches_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (switches_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (switches_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (switches_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (switches_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (switches_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (switches_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (switches_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (switches_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (switches_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (switches_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (switches_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (switches_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (switches_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_011_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                       //                .channel
		.rf_sink_ready           (switches_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (switches_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (switches_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (switches_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (switches_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (switches_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (switches_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (switches_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (switches_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (switches_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),             //                .error
		.rdata_fifo_src_ready    (switches_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (switches_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                               //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (switches_s1_agent_rf_source_data),              //        in.data
		.in_valid          (switches_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (switches_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (switches_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (switches_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (switches_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (switches_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (switches_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (switches_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (switches_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sevseg4msb_s1_agent (
		.clk                     (CLK_sys_clk_clk),                                //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sevseg4msb_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sevseg4msb_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sevseg4msb_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sevseg4msb_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sevseg4msb_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sevseg4msb_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sevseg4msb_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sevseg4msb_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sevseg4msb_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sevseg4msb_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sevseg4msb_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sevseg4msb_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sevseg4msb_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sevseg4msb_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sevseg4msb_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sevseg4msb_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_012_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                        //                .channel
		.rf_sink_ready           (sevseg4msb_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sevseg4msb_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sevseg4msb_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sevseg4msb_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sevseg4msb_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sevseg4msb_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sevseg4msb_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sevseg4msb_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sevseg4msb_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sevseg4msb_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sevseg4msb_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sevseg4msb_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sevseg4msb_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sevseg4msb_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                                //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sevseg4msb_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sevseg4msb_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sevseg4msb_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sevseg4msb_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sevseg4msb_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sevseg4msb_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sevseg4msb_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sevseg4msb_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sevseg4msb_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sevseg4msb_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) keys_s1_agent (
		.clk                     (CLK_sys_clk_clk),                               //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (keys_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (keys_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (keys_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (keys_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (keys_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (keys_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (keys_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (keys_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (keys_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (keys_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (keys_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (keys_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (keys_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (keys_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (keys_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (keys_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_013_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                       //                .channel
		.rf_sink_ready           (keys_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (keys_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (keys_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (keys_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (keys_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (keys_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (keys_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (keys_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (keys_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (keys_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),             //                .error
		.rdata_fifo_src_ready    (keys_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keys_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (keys_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keys_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                               //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keys_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (keys_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (keys_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (keys_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (keys_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (keys_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (keys_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (keys_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (keys_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (keys_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (CLK_sys_clk_clk),                               //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_014_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                       //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),             //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                               //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),               //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_1_s1_agent (
		.clk                     (CLK_sys_clk_clk),                               //             clk.clk
		.reset                   (Processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_1_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (timer_1_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (timer_1_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (timer_1_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (timer_1_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (timer_1_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (timer_1_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (timer_1_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (timer_1_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (timer_1_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (timer_1_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (timer_1_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (timer_1_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (timer_1_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (timer_1_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (timer_1_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_015_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                       //                .channel
		.rf_sink_ready           (timer_1_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (timer_1_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (timer_1_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (timer_1_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (timer_1_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (timer_1_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (timer_1_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (timer_1_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (timer_1_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (timer_1_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),             //                .error
		.rdata_fifo_src_ready    (timer_1_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_1_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (timer_1_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_1_s1_agent_rsp_fifo (
		.clk               (CLK_sys_clk_clk),                               //       clk.clk
		.reset             (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_1_s1_agent_rf_source_data),               //        in.data
		.in_valid          (timer_1_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (timer_1_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (timer_1_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (timer_1_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (timer_1_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (timer_1_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (timer_1_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (timer_1_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (timer_1_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	QsysSystem_mm_interconnect_0_router router (
		.sink_ready         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid),         //          .valid
		.sink_data          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data),          //          .data
		.sink_startofpacket (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (CLK_sys_clk_clk),                                                         //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_src_ready),                                                        //       src.ready
		.src_valid          (router_src_valid),                                                        //          .valid
		.src_data           (router_src_data),                                                         //          .data
		.src_channel        (router_src_channel),                                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                   //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (processor_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (processor_data_master_agent_cp_valid),          //          .valid
		.sink_data          (processor_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (processor_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (processor_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (processor_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (processor_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (processor_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (CLK_sys_clk_clk),                                     //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_002_src_ready),                                //       src.ready
		.src_valid          (router_002_src_valid),                                //          .valid
		.src_data           (router_002_src_data),                                 //          .data
		.src_channel        (router_002_src_channel),                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLK_sys_clk_clk),                                                      //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                 //       src.ready
		.src_valid          (router_003_src_valid),                                                 //          .valid
		.src_data           (router_003_src_data),                                                  //          .data
		.src_channel        (router_003_src_channel),                                               //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                            //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sram_0_avalon_sram_slave_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_0_avalon_sram_slave_agent_rp_valid),                    //          .valid
		.sink_data          (sram_0_avalon_sram_slave_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_0_avalon_sram_slave_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_0_avalon_sram_slave_agent_rp_endofpacket),              //          .endofpacket
		.clk                (CLK_sys_clk_clk),                                            //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                       //       src.ready
		.src_valid          (router_004_src_valid),                                       //          .valid
		.src_data           (router_004_src_data),                                        //          .data
		.src_channel        (router_004_src_channel),                                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                  //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),            //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),             //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (processor_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (processor_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (processor_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLK_sys_clk_clk),                                    //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_006_src_ready),                               //       src.ready
		.src_valid          (router_006_src_valid),                               //          .valid
		.src_data           (router_006_src_data),                                //          .data
		.src_channel        (router_006_src_channel),                             //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                          //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (on_chip_mem_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (on_chip_mem_s1_agent_rp_valid),                 //          .valid
		.sink_data          (on_chip_mem_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (on_chip_mem_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (on_chip_mem_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                          //       src.ready
		.src_valid          (router_007_src_valid),                          //          .valid
		.src_data           (router_007_src_data),                           //          .data
		.src_channel        (router_007_src_channel),                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_005 router_008 (
		.sink_ready         (sdram_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                       //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                          //       src.ready
		.src_valid          (router_008_src_valid),                          //          .valid
		.src_data           (router_008_src_data),                           //          .data
		.src_channel        (router_008_src_channel),                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLK_sys_clk_clk),                                    //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_009_src_ready),                               //       src.ready
		.src_valid          (router_009_src_valid),                               //          .valid
		.src_data           (router_009_src_data),                                //          .data
		.src_channel        (router_009_src_channel),                             //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                          //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_010 (
		.sink_ready         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_valid),         //          .valid
		.sink_data          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_data),          //          .data
		.sink_startofpacket (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (CLK_sys_clk_clk),                                                                 //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_010_src_ready),                                                            //       src.ready
		.src_valid          (router_010_src_valid),                                                            //          .valid
		.src_data           (router_010_src_data),                                                             //          .data
		.src_channel        (router_010_src_channel),                                                          //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                                       //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_011 (
		.sink_ready         (red_leds_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (red_leds_s1_agent_rp_valid),                    //          .valid
		.sink_data          (red_leds_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (red_leds_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (red_leds_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_012 (
		.sink_ready         (green_leds_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (green_leds_s1_agent_rp_valid),                  //          .valid
		.sink_data          (green_leds_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (green_leds_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (green_leds_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                          //       src.ready
		.src_valid          (router_012_src_valid),                          //          .valid
		.src_data           (router_012_src_data),                           //          .data
		.src_channel        (router_012_src_channel),                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_013 (
		.sink_ready         (sevsegment_4lsb_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (sevsegment_4lsb_s1_agent_rp_valid),             //          .valid
		.sink_data          (sevsegment_4lsb_s1_agent_rp_data),              //          .data
		.sink_startofpacket (sevsegment_4lsb_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sevsegment_4lsb_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_014 (
		.sink_ready         (switches_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (switches_s1_agent_rp_valid),                    //          .valid
		.sink_data          (switches_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (switches_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (switches_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_015 (
		.sink_ready         (sevseg4msb_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (sevseg4msb_s1_agent_rp_valid),                  //          .valid
		.sink_data          (sevseg4msb_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (sevseg4msb_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sevseg4msb_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                          //       src.ready
		.src_valid          (router_015_src_valid),                          //          .valid
		.src_data           (router_015_src_data),                           //          .data
		.src_channel        (router_015_src_channel),                        //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_016 (
		.sink_ready         (keys_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (keys_s1_agent_rp_valid),                        //          .valid
		.sink_data          (keys_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (keys_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (keys_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                          //       src.ready
		.src_valid          (router_016_src_valid),                          //          .valid
		.src_data           (router_016_src_data),                           //          .data
		.src_channel        (router_016_src_channel),                        //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_017 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                     //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                          //       src.ready
		.src_valid          (router_017_src_valid),                          //          .valid
		.src_data           (router_017_src_data),                           //          .data
		.src_channel        (router_017_src_channel),                        //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_router_009 router_018 (
		.sink_ready         (timer_1_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (timer_1_s1_agent_rp_valid),                     //          .valid
		.sink_data          (timer_1_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (timer_1_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (timer_1_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                          //       src.ready
		.src_valid          (router_018_src_valid),                          //          .valid
		.src_data           (router_018_src_data),                           //          .data
		.src_channel        (router_018_src_channel),                        //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (16),
		.VALID_WIDTH               (16),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter (
		.clk                    (CLK_sys_clk_clk),                                                                //       clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                               //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                               //          .valid
		.cmd_sink_data          (router_src_data),                                                                //          .data
		.cmd_sink_channel       (router_src_channel),                                                             //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                       //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                         //          .endofpacket
		.cmd_src_ready          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                              //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                            //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                               //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                        //          .endofpacket
		.rsp_src_ready          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (16),
		.VALID_WIDTH               (16),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) processor_data_master_limiter (
		.clk                    (CLK_sys_clk_clk),                                     //       clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (processor_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (processor_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (processor_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (processor_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (processor_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (processor_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (processor_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (processor_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (processor_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (processor_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (processor_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (processor_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (16),
		.VALID_WIDTH               (16),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) processor_instruction_master_limiter (
		.clk                    (CLK_sys_clk_clk),                                            //       clk.clk
		.reset                  (Processor_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                       //          .valid
		.cmd_sink_data          (router_002_src_data),                                        //          .data
		.cmd_sink_channel       (router_002_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (processor_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (processor_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (processor_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (processor_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (processor_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (processor_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (processor_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (processor_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (processor_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (processor_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (processor_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (processor_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sram_0_avalon_sram_slave_burst_adapter (
		.clk                   (CLK_sys_clk_clk),                                              //       cr0.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                        //          .ready
		.source0_valid         (sram_0_avalon_sram_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_0_avalon_sram_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_0_avalon_sram_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_0_avalon_sram_slave_burst_adapter_source0_ready)          //          .ready
	);

	QsysSystem_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (CLK_sys_clk_clk),                                                                //        clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                     //  clk_reset.reset
		.sink_ready         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                           //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                           //           .valid
		.src0_data          (cmd_demux_src0_data),                                                            //           .data
		.src0_channel       (cmd_demux_src0_channel),                                                         //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                   //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                                     //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                           //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                           //           .valid
		.src1_data          (cmd_demux_src1_data),                                                            //           .data
		.src1_channel       (cmd_demux_src1_channel),                                                         //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                                   //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                                      //           .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (CLK_sys_clk_clk),                                     //        clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready          (processor_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (processor_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (processor_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (processor_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (processor_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (processor_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                            //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                            //           .valid
		.src0_data           (cmd_demux_001_src0_data),                             //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                          //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                      //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                            //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                            //           .valid
		.src1_data           (cmd_demux_001_src1_data),                             //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                          //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                      //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                            //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                            //           .valid
		.src2_data           (cmd_demux_001_src2_data),                             //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                          //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                      //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                            //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                            //           .valid
		.src3_data           (cmd_demux_001_src3_data),                             //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                          //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                      //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                            //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                            //           .valid
		.src4_data           (cmd_demux_001_src4_data),                             //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                          //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                      //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                            //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                            //           .valid
		.src5_data           (cmd_demux_001_src5_data),                             //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                          //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                      //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                            //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                            //           .valid
		.src6_data           (cmd_demux_001_src6_data),                             //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                          //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                      //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                            //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                            //           .valid
		.src7_data           (cmd_demux_001_src7_data),                             //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                          //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                      //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                            //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                            //           .valid
		.src8_data           (cmd_demux_001_src8_data),                             //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                          //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                      //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                            //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                            //           .valid
		.src9_data           (cmd_demux_001_src9_data),                             //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                          //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                      //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                           //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                           //           .valid
		.src10_data          (cmd_demux_001_src10_data),                            //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                         //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                     //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                           //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                           //           .valid
		.src11_data          (cmd_demux_001_src11_data),                            //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                         //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                     //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                           //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                           //           .valid
		.src12_data          (cmd_demux_001_src12_data),                            //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                         //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                   //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                     //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                           //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                           //           .valid
		.src13_data          (cmd_demux_001_src13_data),                            //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                         //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                   //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                     //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                           //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                           //           .valid
		.src14_data          (cmd_demux_001_src14_data),                            //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                         //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                   //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                     //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                           //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                           //           .valid
		.src15_data          (cmd_demux_001_src15_data),                            //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                         //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                   //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket)                      //           .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (CLK_sys_clk_clk),                                            //        clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset),              //  clk_reset.reset
		.sink_ready         (processor_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (processor_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (processor_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (processor_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (processor_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (processor_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                             //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                   //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                   //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                    //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                                 //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                             //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                                   //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                                   //           .valid
		.src3_data          (cmd_demux_002_src3_data),                                    //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                                 //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                             //           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                                   //       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                                   //           .valid
		.src4_data          (cmd_demux_002_src4_data),                                    //           .data
		.src4_channel       (cmd_demux_002_src4_channel),                                 //           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket)                              //           .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (CLK_sys_clk_clk),                                                                                                                       //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                                                            // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                                                                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                                                                     //          .valid
		.src_data            (cmd_mux_src_data),                                                                                                                      //          .data
		.src_channel         (cmd_mux_src_channel),                                                                                                                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                                                                             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                                                                               //          .endofpacket
		.sink0_ready         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                                                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                                                                              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                                                                            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                                                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                                                                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                                                                                        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                                                                                              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                                                                                              //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                                                                                            //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                                                                                               //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                                                                                      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                                                                                                         //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (CLK_sys_clk_clk),                                                                       //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_001_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                                                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                                                //          .channel
		.sink0_data          (cmd_demux_src1_data),                                                                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                                            //          .endofpacket
		.sink1_ready         (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                      //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                    //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                       //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                      //          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),                    //          .channel
		.sink1_data          (cmd_demux_002_src1_data),                       //          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                         //          .valid
		.src_data            (cmd_mux_003_src_data),                          //          .data
		.src_channel         (cmd_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                      //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                    //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                       //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_002_src2_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_002_src2_valid),                      //          .valid
		.sink1_channel       (cmd_demux_002_src2_channel),                    //          .channel
		.sink1_data          (cmd_demux_002_src2_data),                       //          .data
		.sink1_startofpacket (cmd_demux_002_src2_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src2_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //          .valid
		.src_data            (cmd_mux_004_src_data),                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                      //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                    //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                       //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_002_src3_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_002_src3_valid),                      //          .valid
		.sink1_channel       (cmd_demux_002_src3_channel),                    //          .channel
		.sink1_data          (cmd_demux_002_src3_data),                       //          .data
		.sink1_startofpacket (cmd_demux_002_src3_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src3_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                         //          .valid
		.src_data            (cmd_mux_005_src_data),                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                      //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                    //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                       //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_002_src4_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_002_src4_valid),                      //          .valid
		.sink1_channel       (cmd_demux_002_src4_channel),                    //          .channel
		.sink1_data          (cmd_demux_002_src4_data),                       //          .data
		.sink1_startofpacket (cmd_demux_002_src4_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src4_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                      //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                    //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                       //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_007 (
		.clk                 (CLK_sys_clk_clk),                                            //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                      //          .valid
		.src_data            (cmd_mux_007_src_data),                                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)                              //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_008 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                      //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                    //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                       //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_009 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //          .valid
		.src_data            (cmd_mux_009_src_data),                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                      //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                    //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                       //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_010 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)                //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_011 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket)                //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_012 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //          .valid
		.src_data            (cmd_mux_012_src_data),                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket)                //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_013 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket)                //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_014 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src14_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src14_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src14_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src14_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src14_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src14_endofpacket)                //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_cmd_mux_006 cmd_mux_015 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                         //          .valid
		.src_data            (cmd_mux_015_src_data),                          //          .data
		.src_channel         (cmd_mux_015_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src15_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src15_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src15_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src15_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src15_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src15_endofpacket)                //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (CLK_sys_clk_clk),                                            //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                       //      sink.ready
		.sink_channel       (router_003_src_channel),                                     //          .channel
		.sink_data          (router_003_src_data),                                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                 //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                       //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                       //          .valid
		.src1_data          (rsp_demux_src1_data),                                        //          .data
		.src1_channel       (rsp_demux_src1_channel),                                     //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                               //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                 //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                       //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                       //          .valid
		.src2_data          (rsp_demux_src2_data),                                        //          .data
		.src2_channel       (rsp_demux_src2_channel),                                     //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                               //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                  //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (CLK_sys_clk_clk),                                            //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                       //      sink.ready
		.sink_channel       (router_004_src_channel),                                     //          .channel
		.sink_data          (router_004_src_data),                                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                              //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //      sink.ready
		.sink_channel       (router_005_src_channel),                        //          .channel
		.sink_data          (router_005_src_data),                           //          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_005_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_002_src1_data),                       //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_002 rsp_demux_003 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                          //      sink.ready
		.sink_channel       (router_006_src_channel),                        //          .channel
		.sink_data          (router_006_src_data),                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_003_src1_data),                       //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_002 rsp_demux_004 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_004_src1_data),                       //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_002 rsp_demux_005 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_005_src1_data),                       //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_007 (
		.clk                (CLK_sys_clk_clk),                                            //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                       //      sink.ready
		.sink_channel       (router_010_src_channel),                                     //          .channel
		.sink_data          (router_010_src_data),                                        //          .data
		.sink_startofpacket (router_010_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_010_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                              //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_008 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_009 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //      sink.ready
		.sink_channel       (router_012_src_channel),                        //          .channel
		.sink_data          (router_012_src_data),                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_010 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_010_src0_data),                       //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_011 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //      sink.ready
		.sink_channel       (router_014_src_channel),                        //          .channel
		.sink_data          (router_014_src_data),                           //          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_014_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_012 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_013 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                          //      sink.ready
		.sink_channel       (router_016_src_channel),                        //          .channel
		.sink_data          (router_016_src_data),                           //          .data
		.sink_startofpacket (router_016_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_016_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_014 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //      sink.ready
		.sink_channel       (router_017_src_channel),                        //          .channel
		.sink_data          (router_017_src_data),                           //          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_017_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_demux_006 rsp_demux_015 (
		.clk                (CLK_sys_clk_clk),                               //       clk.clk
		.reset              (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                 //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (CLK_sys_clk_clk),                                                                                                                       //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                                                            // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                                                                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                                                                     //          .valid
		.src_data            (rsp_mux_src_data),                                                                                                                      //          .data
		.src_channel         (rsp_mux_src_channel),                                                                                                                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                                                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                                                                               //          .endofpacket
		.sink0_ready         (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                                                                              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                                                                              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                                                                            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                                                                               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                                                                                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                                                                                                         //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (CLK_sys_clk_clk),                                                                       //       clk.clk
		.reset                (Processor_reset_n_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                                 //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                                 //          .valid
		.src_data             (rsp_mux_001_src_data),                                                                  //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                               //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                                  //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                                  //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                                                //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                                   //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                                          //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                                            //          .endofpacket
		.sink1_ready          (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid          (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel        (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data           (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket  (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket    (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                              //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                                            //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                               //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                                      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                                        //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                              //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                                            //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                               //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                                      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                                        //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                              //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                              //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                                            //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                               //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                                      //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                                        //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                              //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                                            //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                               //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                                      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                                        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                              //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                                            //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                               //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                                      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                                        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                              //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                                            //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                               //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                                      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                                        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                              //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                                            //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                               //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                                      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                                        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                              //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                                            //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                               //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                                      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                                        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                              //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                                            //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                               //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                                      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                                        //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                                              //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                                              //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                                            //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                               //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                                      //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                                        //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                                              //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                                              //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                                            //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                               //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                                      //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                                        //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                                              //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                                              //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                                            //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                                               //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                                      //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                                        //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                                              //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                                              //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                                            //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                                               //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                                      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                                        //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                                              //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                                              //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                                            //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                                               //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                                      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket)                                                         //          .endofpacket
	);

	QsysSystem_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (CLK_sys_clk_clk),                               //       clk.clk
		.reset               (Processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                         //          .valid
		.src_data            (rsp_mux_002_src_data),                          //          .data
		.src_channel         (rsp_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                          //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                        //          .channel
		.sink0_data          (rsp_demux_src2_data),                           //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket),                    //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                      //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                    //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                       //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_003_src1_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_003_src1_valid),                      //          .valid
		.sink2_channel       (rsp_demux_003_src1_channel),                    //          .channel
		.sink2_data          (rsp_demux_003_src1_data),                       //          .data
		.sink2_startofpacket (rsp_demux_003_src1_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src1_endofpacket),                //          .endofpacket
		.sink3_ready         (rsp_demux_004_src1_ready),                      //     sink3.ready
		.sink3_valid         (rsp_demux_004_src1_valid),                      //          .valid
		.sink3_channel       (rsp_demux_004_src1_channel),                    //          .channel
		.sink3_data          (rsp_demux_004_src1_data),                       //          .data
		.sink3_startofpacket (rsp_demux_004_src1_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_004_src1_endofpacket),                //          .endofpacket
		.sink4_ready         (rsp_demux_005_src1_ready),                      //     sink4.ready
		.sink4_valid         (rsp_demux_005_src1_valid),                      //          .valid
		.sink4_channel       (rsp_demux_005_src1_channel),                    //          .channel
		.sink4_data          (rsp_demux_005_src1_data),                       //          .data
		.sink4_startofpacket (rsp_demux_005_src1_startofpacket),              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_005_src1_endofpacket)                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter (
		.clk                  (CLK_sys_clk_clk),                                                                                                                       //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                                                            // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                                                                                  //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                                                                                //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                                                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                                                                            //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                                                                                  //          .ready
		.in_data              (cmd_demux_src0_data),                                                                                                                   //          .data
		.out_endofpacket      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_pixel_buffer_dma_0_avalon_pixel_dma_master_to_video_pixel_buffer_dma_0_avalon_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter (
		.clk                  (CLK_sys_clk_clk),                                                                       //       clk.clk
		.reset                (Processor_reset_n_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                              //          .ready
		.in_data              (cmd_demux_001_src1_data),                                                               //          .data
		.out_endofpacket      (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (processor_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter (
		.clk                  (CLK_sys_clk_clk),                                                                                                                       //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                                                            // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                                                                                  //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                                                                                //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                                                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                                                                            //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                                                                                  //          .ready
		.in_data              (rsp_demux_src0_data),                                                                                                                   //          .data
		.out_endofpacket      (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_pixel_buffer_dma_0_avalon_control_slave_to_video_pixel_buffer_dma_0_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter (
		.clk                  (CLK_sys_clk_clk),                                                                       //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                              //          .ready
		.in_data              (rsp_demux_001_src1_data),                                                               //          .data
		.out_endofpacket      (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_0_avalon_sram_slave_to_processor_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (CLK_sys_clk_clk),                                                          // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                             //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_0_avalon_sram_slave_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                           //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (processor_jtag_debug_module_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (processor_jtag_debug_module_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (processor_jtag_debug_module_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                       //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (on_chip_mem_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (on_chip_mem_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (on_chip_mem_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                       //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                                                                     // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                          // in_rst_0.reset
		.in_0_data      (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                                                   //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                                                   //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                                                    //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (red_leds_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (red_leds_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (red_leds_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (green_leds_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (green_leds_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (green_leds_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sevsegment_4lsb_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sevsegment_4lsb_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sevsegment_4lsb_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switches_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (switches_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (switches_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sevseg4msb_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (sevseg4msb_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (sevseg4msb_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (keys_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (keys_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (keys_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)              //         .error
	);

	QsysSystem_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (CLK_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (Processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_1_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (timer_1_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (timer_1_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)              //         .error
	);

endmodule
