
FinalProject.elf:     file format elf32-littlenios2
FinalProject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000148a0 memsz 0x000148a0 flags r-x
    LOAD off    0x000158c0 vaddr 0x100148c0 paddr 0x1001642c align 2**12
         filesz 0x00001b6c memsz 0x00001b6c flags rw-
    LOAD off    0x00017f98 vaddr 0x10017f98 paddr 0x10017f98 align 2**12
         filesz 0x00000000 memsz 0x00000708 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000142d4  100001c0  100001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000042c  10014494  10014494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  100148c0  1001642c  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000708  10017f98  10017f98  00017f98  2**2
                  ALLOC, SMALL_DATA
  6 .On_Chip_Mem  00000000  00000000  00000000  0001742c  2**0
                  CONTENTS
  7 .SDRAM        00000000  100186a0  100186a0  0001742c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001742c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ed0  00000000  00000000  00017450  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000253a1  00000000  00000000  00018320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009421  00000000  00000000  0003d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c11b  00000000  00000000  00046ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026f8  00000000  00000000  00052c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003fc3  00000000  00000000  000552f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  000592bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00070b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018f0  00000000  00000000  00070b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00075eb2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  00075eb5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00075ebe  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00075ebf  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00075ec0  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00075ec4  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00075ec8  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00075ecc  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00075ed5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00075ede  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00075ee7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000023  00000000  00000000  00075ef1  2**0
                  CONTENTS, READONLY
 30 .jdi          00004420  00000000  00000000  00075f14  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000902cc  00000000  00000000  0007a334  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001c0 l    d  .text	00000000 .text
10014494 l    d  .rodata	00000000 .rodata
100148c0 l    d  .rwdata	00000000 .rwdata
10017f98 l    d  .bss	00000000 .bss
00000000 l    d  .On_Chip_Mem	00000000 .On_Chip_Mem
100186a0 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalProject_bsp//obj/HAL/src/crt0.o
10000208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 MainProgram.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100145c2 l     O .rodata	00000010 zeroes.4404
100031bc l     F .text	000000bc __sbprintf
100145d2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100033cc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004efc l     F .text	00000008 __fp_unlock
10004f10 l     F .text	0000019c __sinit.part.1
100050ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100148c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10014d04 l     O .rwdata	00000020 lc_ctype_charset
10014ce4 l     O .rwdata	00000020 lc_message_charset
10014d24 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014604 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
100084a8 l     F .text	000000fc __sprint_r.part.0
10014738 l     O .rodata	00000010 blanks.4348
10014728 l     O .rodata	00000010 zeroes.4349
10009a34 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d6f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d7fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d828 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1000da94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000db74 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000dc60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000de34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10016420 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000e080 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e1b4 l     F .text	00000034 alt_dev_reg
1001530c l     O .rwdata	00001060 JTAG_UART
1001636c l     O .rwdata	00000054 video_pixel_buffer_dma_0
100163c0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100129b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
10012bc4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
100131fc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10013464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013968 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
10013aa8 l     F .text	0000003c alt_get_errno
10013ae4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10017fdc g     O .bss	00000004 aux_status_register
10007aec g     F .text	00000074 _mprec_log10
10017f9c g     O .bss	00000004 Value
10007bd8 g     F .text	0000008c __any_on
10009fd0 g     F .text	00000054 _isatty_r
10014610 g     O .rodata	00000028 __mprec_tinytens
1000dd70 g     F .text	0000007c alt_main
10000e3c g     F .text	000000c0 _puts_r
100185a0 g     O .bss	00000100 alt_irq
1000a024 g     F .text	00000060 _lseek_r
1001642c g       *ABS*	00000000 __flash_rwdata_start
1000c21c g     F .text	00000088 .hidden __eqdf2
1000e7d4 g     F .text	000001a4 Check_for_Master_Boot_Record
100186a0 g       *ABS*	00000000 __alt_heap_start
100125d8 g     F .text	000001bc alt_up_sd_card_fclose
10000e00 g     F .text	0000003c printf
1000a23c g     F .text	0000009c _wcrtomb_r
00000000 g       *ABS*	00000000 __alt_mem_On_Chip_Mem
10008368 g     F .text	0000005c __sseek
1000524c g     F .text	00000010 __sinit
1000a0e4 g     F .text	00000140 __swbuf_r
10005d14 g     F .text	0000007c _setlocale_r
100050b4 g     F .text	00000068 __sfmoreglue
1000de10 g     F .text	00000024 __malloc_unlock
10017f98 g     O .bss	00000004 FileSelect
10018000 g     O .bss	00000004 current_sector_modified
10017fa0 g     O .bss	00000004 j
100069e4 g     F .text	0000015c memmove
10005234 g     F .text	00000018 _cleanup
10006c68 g     F .text	000000a8 _Balloc
100111e0 g     F .text	000000c4 alt_up_sd_card_is_Present
10000294 g     F .text	000002e4 initCard
1000e51c g     F .text	0000004c Save_Modified_Sector
1000c2a4 g     F .text	000000dc .hidden __gtdf2
10000000 g     F .entry	0000001c __reset
10017ff8 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009f74 g     F .text	0000005c _fstat_r
10017fc0 g     O .bss	00000004 errno
100082e4 g     F .text	00000008 __seofread
10000d70 g     F .text	00000060 pio_init
10017fcc g     O .bss	00000004 alt_argv
1001e3ec g       *ABS*	00000000 _gp
100117a0 g     F .text	0000037c alt_up_sd_card_fopen
10011310 g     F .text	000000d0 alt_up_sd_card_find_first
10017fec g     O .bss	00000004 command_argument_register
1001518c g     O .rwdata	00000180 alt_fd_list
10010a54 g     F .text	00000134 find_first_empty_record_in_root_directory
10013604 g     F .text	00000090 alt_find_dev
1000689c g     F .text	00000148 memcpy
10004f04 g     F .text	0000000c _cleanup_r
1000d508 g     F .text	000000dc .hidden __floatsidf
10013a2c g     F .text	0000007c alt_io_redirect
1000c380 g     F .text	000000f4 .hidden __ltdf2
10014494 g       *ABS*	00000000 __DTOR_END__
10000efc g     F .text	00000014 puts
1001064c g     F .text	000001bc find_first_empty_cluster
100081c8 g     F .text	00000074 __fpclassifyd
10007a48 g     F .text	000000a4 __ratio
10011124 g     F .text	000000bc alt_up_sd_card_open_dev
10009a18 g     F .text	0000001c __vfiprintf_internal
10012dbc g     F .text	0000021c altera_avalon_jtag_uart_read
10000dd0 g     F .text	00000030 _printf_r
1000afcc g     F .text	00000064 .hidden __udivsi3
1000dad0 g     F .text	000000a4 isatty
10014660 g     O .rodata	000000c8 __mprec_tens
10005d90 g     F .text	0000000c __locale_charset
10014070 g     F .text	00000090 alt_icache_flush
10017fbc g     O .bss	00000004 __malloc_top_pad
100163f4 g     O .rwdata	00000004 __mb_cur_max
10005dc0 g     F .text	0000000c _localeconv_r
10007074 g     F .text	0000003c __i2b
100056d0 g     F .text	000004bc __sfvwrite_r
1000f93c g     F .text	000000b8 get_dir_divider_location
1000823c g     F .text	00000054 _sbrk_r
1000f60c g     F .text	000000c4 filename_to_upper_case
10011b1c g     F .text	00000088 alt_up_sd_card_set_attributes
1000e978 g     F .text	0000027c Read_File_Record_At_Offset
1000a084 g     F .text	00000060 _read_r
10016414 g     O .rwdata	00000004 alt_max_fd
100101d0 g     F .text	0000047c find_file_in_directory
10009c68 g     F .text	000000f0 _fclose_r
10004ecc g     F .text	00000030 fflush
10017fb8 g     O .bss	00000004 __malloc_max_sbrked_mem
1000d914 g     F .text	00000180 alt_irq_register
100112a4 g     F .text	0000006c alt_up_sd_card_is_FAT16
1000b088 g     F .text	000008ac .hidden __adddf3
10000578 g     F .text	000002c8 invertPhoto
100077f0 g     F .text	0000010c __b2d
1000a99c g     F .text	00000538 .hidden __umoddi3
1000dc9c g     F .text	000000d4 lseek
100163ec g     O .rwdata	00000004 _global_impure_ptr
1000fc90 g     F .text	00000540 get_home_directory_cluster_for_file
10007c64 g     F .text	00000564 _realloc_r
100186a0 g       *ABS*	00000000 __bss_end
10013878 g     F .text	000000f0 alt_iic_isr_register
10013d98 g     F .text	00000108 alt_tick
10000c04 g     F .text	000000c8 key0_isr
1000a424 g     F .text	00000578 .hidden __udivdi3
10009ed0 g     F .text	00000024 _fputwc_r
10000244 g     F .text	00000050 VGA
10014638 g     O .rodata	00000028 __mprec_bigtens
10006e58 g     F .text	00000104 __s2b
1000d5e4 g     F .text	000000a8 .hidden __floatunsidf
10007530 g     F .text	00000060 __mcmp
10018004 g     O .bss	00000004 current_sector_index
1000526c g     F .text	00000018 __fp_lock_all
1001382c g     F .text	0000004c alt_ic_irq_enabled
10013cfc g     F .text	0000009c alt_alarm_stop
1000e6f4 g     F .text	000000e0 mark_cluster
10017fc4 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d4 alt_irq_handler
10015164 g     O .rwdata	00000028 alt_dev_null
10010b88 g     F .text	0000018c convert_filename_to_name_extension
1001341c g     F .text	00000048 alt_dcache_flush_all
10006f5c g     F .text	00000068 __hi0bits
10017fd8 g     O .bss	00000004 is_sd_card_formated_as_FAT16
1000d488 g     F .text	00000080 .hidden __fixdfsi
10010808 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
1001642c g       *ABS*	00000000 __ram_rwdata_end
1001640c g     O .rwdata	00000008 alt_dev_list
1000e0bc g     F .text	000000f8 write
10017ffc g     O .bss	00000004 device_pointer
100148c0 g       *ABS*	00000000 __ram_rodata_end
1000d864 g     F .text	000000b0 fstat
10000000 g       *ABS*	00000000 __alt_mem_SDRAM
1000c380 g     F .text	000000f4 .hidden __ledf2
100072a8 g     F .text	00000140 __pow5mult
100085bc g     F .text	0000145c ___vfiprintf_internal_r
10017fb0 g     O .bss	00000004 __nlocale_changed
1000b030 g     F .text	00000058 .hidden __umodsi3
100186a0 g       *ABS*	00000000 end
100128f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
10017fa4 g     O .bss	00000004 i
10014494 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10013274 g     F .text	0000007c alt_avalon_timer_sc_init
1000d68c g     F .text	00000064 .hidden __clzsi2
10012fd8 g     F .text	00000224 altera_avalon_jtag_uart_write
1000525c g     F .text	00000004 __sfp_lock_acquire
100067b8 g     F .text	000000e4 memchr
10000fa8 g     F .text	000021f8 ___vfprintf_internal_r
100053c0 g     F .text	00000310 _free_r
10005d9c g     F .text	00000010 __locale_mb_cur_max
100142e0 g     F .text	00000180 __call_exitprocs
10017fac g     O .bss	00000004 __mlocale_changed
100163f8 g     O .rwdata	00000004 __malloc_sbrk_base
100001c0 g     F .text	0000004c _start
10018008 g     O .bss	00000004 _alt_tick_rate
100073e8 g     F .text	00000148 __lshift
1001800c g     O .bss	00000004 _alt_nticks
10000a88 g     F .text	00000094 key3_isr
1000de70 g     F .text	000000fc read
1000e220 g     F .text	00000248 alt_sys_init
100141c8 g     F .text	00000118 __register_exitproc
10000840 g     F .text	00000248 VGA_box
100070b0 g     F .text	000001f8 __multiply
10012c64 g     F .text	00000068 altera_avalon_jtag_uart_close
100148c0 g       *ABS*	00000000 __ram_rwdata_start
10014494 g       *ABS*	00000000 __ram_rodata_start
10018010 g     O .bss	00000028 __malloc_current_mallinfo
100078fc g     F .text	0000014c __d2b
10017fd4 g     O .bss	00000004 initialized
10012794 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10013fcc g     F .text	000000a4 alt_get_fd
10000ccc g     F .text	000000a4 handle_key_interrupts
10018038 g     O .bss	00000014 search_data
10009b50 g     F .text	00000054 _close_r
1001414c g     F .text	0000007c memcmp
10012854 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100186a0 g       *ABS*	00000000 __alt_stack_base
100128a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10003278 g     F .text	00000154 __swsetup_r
1000b934 g     F .text	000008e8 .hidden __divdf3
1000511c g     F .text	00000118 __sfp
1001804c g     O .bss	00000054 boot_sector_data
10007b60 g     F .text	00000078 __copybits
10014d5c g     O .rwdata	00000408 __malloc_av_
10005268 g     F .text	00000004 __sinit_lock_release
1000c474 g     F .text	00000718 .hidden __muldf3
10008290 g     F .text	00000054 __sread
10013ec4 g     F .text	00000108 alt_find_file
100134a0 g     F .text	000000a4 alt_dev_llist_insert
1000ddec g     F .text	00000024 __malloc_lock
1000dfd0 g     F .text	000000b0 sbrk
10004e70 g     F .text	0000005c _fflush_r
10009ba4 g     F .text	000000c4 _calloc_r
10017f98 g       *ABS*	00000000 __bss_start
10006b40 g     F .text	00000128 memset
1000020c g     F .text	00000038 main
10017fd0 g     O .bss	00000004 alt_envp
10017fb4 g     O .bss	00000004 __malloc_max_total_mem
100127f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000a224 g     F .text	00000018 __swbuf
10011ba4 g     F .text	00000088 alt_up_sd_card_get_attributes
1000e468 g     F .text	000000b4 Write_Sector_Data
10011fa4 g     F .text	00000634 alt_up_sd_card_write
100083c4 g     F .text	00000008 __sclose
10000b88 g     F .text	0000007c key1_isr
18000000 g       *ABS*	00000000 __alt_heap_limit
10009d58 g     F .text	00000014 fclose
100035cc g     F .text	00001688 _dtoa_r
10005fac g     F .text	0000080c _malloc_r
1000a398 g     F .text	00000030 __ascii_wctomb
10016418 g     O .rwdata	00000004 alt_errno
10005b8c g     F .text	000000c4 _fwalk
10000b1c g     F .text	0000006c key2_isr
1000aed4 g     F .text	00000084 .hidden __divsi3
1000529c g     F .text	00000124 _malloc_trim_r
10014494 g       *ABS*	00000000 __CTOR_END__
10017fe0 g     O .bss	00000004 status_register
100083cc g     F .text	000000dc strcmp
10017fe8 g     O .bss	00000004 command_register
10014494 g       *ABS*	00000000 __flash_rodata_start
10014494 g       *ABS*	00000000 __DTOR_LIST__
1000c21c g     F .text	00000088 .hidden __nedf2
1000e1e8 g     F .text	00000038 alt_irq_init
1000df6c g     F .text	00000064 alt_release_fd
1000e640 g     F .text	000000b4 get_cluster_flag
10014748 g     O .rodata	00000100 .hidden __clz_tab
1000ebf4 g     F .text	0000028c Write_File_Record_At_Offset
10017fa8 g     O .bss	00000004 _PathLocale
10014100 g     F .text	00000014 atexit
10009af0 g     F .text	00000060 _write_r
10005dcc g     F .text	00000018 setlocale
1000ee80 g     F .text	000006a0 Check_for_DOS_FAT
10010d14 g     F .text	000002c8 create_file
100163f0 g     O .rwdata	00000004 _impure_ptr
10017fe4 g     O .bss	00000004 CSD_register_w0
10017fc8 g     O .bss	00000004 alt_argc
10004c54 g     F .text	0000021c __sflush_r
100135a4 g     F .text	00000060 _do_dtors
10005db8 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000778c g     F .text	00000064 __ulp
10005284 g     F .text	00000018 __fp_unlock_all
10016404 g     O .rwdata	00000008 alt_fs_list
1000f6d0 g     F .text	0000026c check_file_name_for_FAT16_compliance
10017ff0 g     O .bss	00000004 buffer_memory
10000020 g       *ABS*	00000000 __ram_exceptions_start
10005de4 g     F .text	0000000c localeconv
100136c8 g     F .text	00000050 alt_ic_isr_register
10017ff4 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
1001642c g       *ABS*	00000000 _edata
100186a0 g       *ABS*	00000000 _end
100180a0 g     O .bss	00000500 active_files
10009d6c g     F .text	00000164 __fputwc
100001c0 g       *ABS*	00000000 __ram_exceptions_end
10010fdc g     F .text	00000148 copy_file_record_name_to_string
10012ccc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1000f520 g     F .text	000000ec Look_for_FAT16
100137a0 g     F .text	0000008c alt_ic_irq_disable
100082ec g     F .text	0000007c __swrite
100163fc g     O .rwdata	00000004 __malloc_trim_threshold
10013ea0 g     F .text	00000024 altera_nios2_qsys_irq_init
10005dac g     F .text	0000000c __locale_msgcharset
10014114 g     F .text	00000038 exit
100113e0 g     F .text	000003c0 alt_up_sd_card_find_next
10005c50 g     F .text	000000c4 _fwalk_reent
10007590 g     F .text	000001fc __mdiff
1000af58 g     F .text	00000074 .hidden __modsi3
1000e568 g     F .text	000000d8 Read_Sector_Data
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10005260 g     F .text	00000004 __sfp_lock_release
10014460 g     F .text	00000034 _exit
100132f0 g     F .text	0000012c alt_alarm_start
10011c2c g     F .text	00000378 alt_up_sd_card_read
10005df0 g     F .text	000001bc __smakebuf_r
10000f10 g     F .text	00000098 strlen
10013ba8 g     F .text	00000154 open
1000c2a4 g     F .text	000000dc .hidden __gedf2
10016400 g     O .rwdata	00000004 __wctomb
100085a4 g     F .text	00000018 __sprint_r
10013694 g     F .text	00000034 alt_icache_flush_all
1001641c g     O .rwdata	00000004 alt_priority_mask
10013718 g     F .text	00000088 alt_ic_irq_enable
100031a0 g     F .text	0000001c __vfprintf_internal
1000a3c8 g     F .text	0000005c _wctomb_r
1000cb8c g     F .text	000008fc .hidden __subdf3
10006fc4 g     F .text	000000b0 __lo0bits
10016424 g     O .rwdata	00000008 alt_alarm_list
10013544 g     F .text	00000060 _do_ctors
1000a2d8 g     F .text	000000c0 wcrtomb
1000d72c g     F .text	000000d0 close
1000dbdc g     F .text	00000084 alt_load
1000f9f4 g     F .text	0000029c match_file_record_to_name_ext
10009ef4 g     F .text	00000080 fputwc
10005264 g     F .text	00000004 __sinit_lock_acquire
10006d38 g     F .text	00000120 __multadd
10006d10 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08407014 	ori	at,at,448
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	008400b4 	movhi	r2,4098
10000130:	10a16804 	addi	r2,r2,-31328
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	008400b4 	movhi	r2,4098
10000148:	10a16804 	addi	r2,r2,-31328
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	0001883a 	nop
100001ac:	e037883a 	mov	sp,fp
100001b0:	dfc00117 	ldw	ra,4(sp)
100001b4:	df000017 	ldw	fp,0(sp)
100001b8:	dec00204 	addi	sp,sp,8
100001bc:	f800283a 	ret

Disassembly of section .text:

100001c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
100001c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
100001c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
100001c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
100001cc:	00bffd16 	blt	zero,r2,100001c4 <__alt_data_end+0xf80001c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001d0:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001d8:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001dc:	d6b8fb14 	ori	gp,gp,58348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001e0:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001e4:	109fe614 	ori	r2,r2,32664

    movhi r3, %hi(__bss_end)
100001e8:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001ec:	18e1a814 	ori	r3,r3,34464

    beq r2, r3, 1f
100001f0:	10c00326 	beq	r2,r3,10000200 <_start+0x40>

0:
    stw zero, (r2)
100001f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001fc:	10fffd36 	bltu	r2,r3,100001f4 <__alt_data_end+0xf80001f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000200:	000dbdc0 	call	1000dbdc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000204:	000dd700 	call	1000dd70 <alt_main>

10000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000208:	003fff06 	br	10000208 <__alt_data_end+0xf8000208>

1000020c <main>:
void handle_key_interrupts(void*);
void invertPhoto();
int FileSelect = 0;

int main()
{
1000020c:	defffe04 	addi	sp,sp,-8
10000210:	dfc00115 	stw	ra,4(sp)
10000214:	df000015 	stw	fp,0(sp)
10000218:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
1000021c:	01040074 	movhi	r4,4097
10000220:	21112504 	addi	r4,r4,17556
10000224:	0000efc0 	call	10000efc <puts>
  pio_init();
10000228:	0000d700 	call	10000d70 <pio_init>
  VGA();
1000022c:	00002440 	call	10000244 <VGA>
  initCard();
10000230:	00002940 	call	10000294 <initCard>
  printf("out\n");
10000234:	01040074 	movhi	r4,4097
10000238:	21112a04 	addi	r4,r4,17576
1000023c:	0000efc0 	call	10000efc <puts>
  while (1){
  }
10000240:	003fff06 	br	10000240 <__alt_data_end+0xf8000240>

10000244 <VGA>:
  return 0;
}

void VGA(){
10000244:	defffd04 	addi	sp,sp,-12
10000248:	dfc00215 	stw	ra,8(sp)
1000024c:	df000115 	stw	fp,4(sp)
10000250:	df000104 	addi	fp,sp,4
	printf("VGALOOP");
10000254:	01040074 	movhi	r4,4097
10000258:	21112b04 	addi	r4,r4,17580
1000025c:	0000e000 	call	10000e00 <printf>
	VGA_box(0,0, 321, 241, 0x8000);
10000260:	00a00014 	movui	r2,32768
10000264:	d8800015 	stw	r2,0(sp)
10000268:	01c03c44 	movi	r7,241
1000026c:	01805044 	movi	r6,321
10000270:	000b883a 	mov	r5,zero
10000274:	0009883a 	mov	r4,zero
10000278:	00008400 	call	10000840 <VGA_box>
	//VGA_box(0, 0, 100, 100, 0xF011);
	//VGA_box(20, 20, 300, 200, 0x4002);
	//VGA_box(30,30,600, 1079, 0x4002);

}
1000027c:	0001883a 	nop
10000280:	e037883a 	mov	sp,fp
10000284:	dfc00117 	ldw	ra,4(sp)
10000288:	df000017 	ldw	fp,0(sp)
1000028c:	dec00204 	addi	sp,sp,8
10000290:	f800283a 	ret

10000294 <initCard>:

void initCard()
	{
10000294:	defff504 	addi	sp,sp,-44
10000298:	dfc00a15 	stw	ra,40(sp)
1000029c:	df000915 	stw	fp,36(sp)
100002a0:	df000904 	addi	fp,sp,36
		short att1 = 0, att2 = 0, att3 = 0, att;
100002a4:	e03ff98d 	sth	zero,-26(fp)
100002a8:	e03ffa0d 	sth	zero,-24(fp)
100002ac:	e03ffa8d 	sth	zero,-22(fp)
		int width = 320;
100002b0:	00805004 	movi	r2,320
100002b4:	e0bff815 	stw	r2,-32(fp)
		int height = 240;
100002b8:	00803c04 	movi	r2,240
100002bc:	e0bffb15 	stw	r2,-20(fp)
		int pixel;
	    alt_up_sd_card_dev *device_reference = NULL;
100002c0:	e03ffc15 	stw	zero,-16(fp)
	    int connected = 0;
100002c4:	e03ffd15 	stw	zero,-12(fp)
	    short int fileHandle;

	    if ((Value & 0xF00) == 0x900){
100002c8:	d0a6ec17 	ldw	r2,-25680(gp)
100002cc:	1083c00c 	andi	r2,r2,3840
100002d0:	10824018 	cmpnei	r2,r2,2304
100002d4:	1000051e 	bne	r2,zero,100002ec <initCard+0x58>
	    	width = width + (Value & 0x0FF);
100002d8:	d0a6ec17 	ldw	r2,-25680(gp)
100002dc:	10803fcc 	andi	r2,r2,255
100002e0:	e0fff817 	ldw	r3,-32(fp)
100002e4:	1885883a 	add	r2,r3,r2
100002e8:	e0bff815 	stw	r2,-32(fp)
	    }

	    device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
100002ec:	01040074 	movhi	r4,4097
100002f0:	21112d04 	addi	r4,r4,17588
100002f4:	00111240 	call	10011124 <alt_up_sd_card_open_dev>
100002f8:	e0bffc15 	stw	r2,-16(fp)
	    if (device_reference != NULL)
100002fc:	e0bffc17 	ldw	r2,-16(fp)
10000300:	10009426 	beq	r2,zero,10000554 <initCard+0x2c0>
	    {
		    if ((connected == 0) && (alt_up_sd_card_is_Present()))
10000304:	e0bffd17 	ldw	r2,-12(fp)
10000308:	1000881e 	bne	r2,zero,1000052c <initCard+0x298>
1000030c:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
10000310:	10008626 	beq	r2,zero,1000052c <initCard+0x298>
		    {
		        if (alt_up_sd_card_is_FAT16())
10000314:	00112a40 	call	100112a4 <alt_up_sd_card_is_FAT16>
10000318:	10007e26 	beq	r2,zero,10000514 <initCard+0x280>
		        {
		        	if (FileSelect == 0){
1000031c:	d0a6eb17 	ldw	r2,-25684(gp)
10000320:	1000061e 	bne	r2,zero,1000033c <initCard+0xa8>
		        		fileHandle = alt_up_sd_card_fopen("smile.bmp",false);
10000324:	000b883a 	mov	r5,zero
10000328:	01040074 	movhi	r4,4097
1000032c:	21113804 	addi	r4,r4,17632
10000330:	00117a00 	call	100117a0 <alt_up_sd_card_fopen>
10000334:	e0bff90d 	sth	r2,-28(fp)
10000338:	00001106 	br	10000380 <initCard+0xec>
		        	}
		        	else if (FileSelect == 1){
1000033c:	d0a6eb17 	ldw	r2,-25684(gp)
10000340:	10800058 	cmpnei	r2,r2,1
10000344:	1000061e 	bne	r2,zero,10000360 <initCard+0xcc>
		        		fileHandle = alt_up_sd_card_fopen("tayeb2.bmp",false);
10000348:	000b883a 	mov	r5,zero
1000034c:	01040074 	movhi	r4,4097
10000350:	21113b04 	addi	r4,r4,17644
10000354:	00117a00 	call	100117a0 <alt_up_sd_card_fopen>
10000358:	e0bff90d 	sth	r2,-28(fp)
1000035c:	00000806 	br	10000380 <initCard+0xec>
		        	}
		        	else if (FileSelect == 2){
10000360:	d0a6eb17 	ldw	r2,-25684(gp)
10000364:	10800098 	cmpnei	r2,r2,2
10000368:	1000051e 	bne	r2,zero,10000380 <initCard+0xec>
		          		fileHandle = alt_up_sd_card_fopen("buko.bmp",false);
1000036c:	000b883a 	mov	r5,zero
10000370:	01040074 	movhi	r4,4097
10000374:	21113e04 	addi	r4,r4,17656
10000378:	00117a00 	call	100117a0 <alt_up_sd_card_fopen>
1000037c:	e0bff90d 	sth	r2,-28(fp)
		        	}
			        att = alt_up_sd_card_get_attributes(fileHandle);
10000380:	e0bff90f 	ldh	r2,-28(fp)
10000384:	1009883a 	mov	r4,r2
10000388:	0011ba40 	call	10011ba4 <alt_up_sd_card_get_attributes>
1000038c:	e0bffe0d 	sth	r2,-8(fp)

			        VGA_box(0,0, 321, 241, 0xFFFF);
10000390:	00bfffd4 	movui	r2,65535
10000394:	d8800015 	stw	r2,0(sp)
10000398:	01c03c44 	movi	r7,241
1000039c:	01805044 	movi	r6,321
100003a0:	000b883a 	mov	r5,zero
100003a4:	0009883a 	mov	r4,zero
100003a8:	00008400 	call	10000840 <VGA_box>

			        for (j=0; j<54; j++) //gets past header
100003ac:	d026ed15 	stw	zero,-25676(gp)
100003b0:	00000706 	br	100003d0 <initCard+0x13c>
			        {
			        	att1 = alt_up_sd_card_read(fileHandle);
100003b4:	e0bff90f 	ldh	r2,-28(fp)
100003b8:	1009883a 	mov	r4,r2
100003bc:	0011c2c0 	call	10011c2c <alt_up_sd_card_read>
100003c0:	e0bff98d 	sth	r2,-26(fp)
		        	}
			        att = alt_up_sd_card_get_attributes(fileHandle);

			        VGA_box(0,0, 321, 241, 0xFFFF);

			        for (j=0; j<54; j++) //gets past header
100003c4:	d0a6ed17 	ldw	r2,-25676(gp)
100003c8:	10800044 	addi	r2,r2,1
100003cc:	d0a6ed15 	stw	r2,-25676(gp)
100003d0:	d0a6ed17 	ldw	r2,-25676(gp)
100003d4:	10800d90 	cmplti	r2,r2,54
100003d8:	103ff61e 	bne	r2,zero,100003b4 <__alt_data_end+0xf80003b4>
			        {
			        	att1 = alt_up_sd_card_read(fileHandle);
			        }
			        i = 0, j = 0;
100003dc:	d026ee15 	stw	zero,-25672(gp)
100003e0:	d026ed15 	stw	zero,-25676(gp)
			        printf("File handle: %i\n", fileHandle);
100003e4:	e0bff90f 	ldh	r2,-28(fp)
100003e8:	100b883a 	mov	r5,r2
100003ec:	01040074 	movhi	r4,4097
100003f0:	21114104 	addi	r4,r4,17668
100003f4:	0000e000 	call	10000e00 <printf>
			        for (i = height; i >= 0; i = i-1){
100003f8:	e0bffb17 	ldw	r2,-20(fp)
100003fc:	d0a6ee15 	stw	r2,-25672(gp)
10000400:	00003906 	br	100004e8 <initCard+0x254>
			        	for (j = 0; j < width; j = j+1){
10000404:	d026ed15 	stw	zero,-25676(gp)
10000408:	00003106 	br	100004d0 <initCard+0x23c>
			        		att1 = (unsigned char)alt_up_sd_card_read(fileHandle);
1000040c:	e0bff90f 	ldh	r2,-28(fp)
10000410:	1009883a 	mov	r4,r2
10000414:	0011c2c0 	call	10011c2c <alt_up_sd_card_read>
10000418:	10803fcc 	andi	r2,r2,255
1000041c:	e0bff98d 	sth	r2,-26(fp)
			        		att2 = (unsigned char)alt_up_sd_card_read(fileHandle);
10000420:	e0bff90f 	ldh	r2,-28(fp)
10000424:	1009883a 	mov	r4,r2
10000428:	0011c2c0 	call	10011c2c <alt_up_sd_card_read>
1000042c:	10803fcc 	andi	r2,r2,255
10000430:	e0bffa0d 	sth	r2,-24(fp)
			        		att3 = (unsigned char)alt_up_sd_card_read(fileHandle);
10000434:	e0bff90f 	ldh	r2,-28(fp)
10000438:	1009883a 	mov	r4,r2
1000043c:	0011c2c0 	call	10011c2c <alt_up_sd_card_read>
10000440:	10803fcc 	andi	r2,r2,255
10000444:	e0bffa8d 	sth	r2,-22(fp)
			        		pixel = ((att3>>3)<<11) | ((att2>>2)<<5) | (att1 >> 3);
10000448:	e0bffa8f 	ldh	r2,-22(fp)
1000044c:	1005d0fa 	srai	r2,r2,3
10000450:	10bfffcc 	andi	r2,r2,65535
10000454:	10a0001c 	xori	r2,r2,32768
10000458:	10a00004 	addi	r2,r2,-32768
1000045c:	100692fa 	slli	r3,r2,11
10000460:	e0bffa0f 	ldh	r2,-24(fp)
10000464:	1005d0ba 	srai	r2,r2,2
10000468:	10bfffcc 	andi	r2,r2,65535
1000046c:	10a0001c 	xori	r2,r2,32768
10000470:	10a00004 	addi	r2,r2,-32768
10000474:	1004917a 	slli	r2,r2,5
10000478:	1886b03a 	or	r3,r3,r2
1000047c:	e0bff98f 	ldh	r2,-26(fp)
10000480:	1005d0fa 	srai	r2,r2,3
10000484:	10bfffcc 	andi	r2,r2,65535
10000488:	10a0001c 	xori	r2,r2,32768
1000048c:	10a00004 	addi	r2,r2,-32768
10000490:	1884b03a 	or	r2,r3,r2
10000494:	e0bfff15 	stw	r2,-4(fp)
			        		//pixel = ((att3)<<16) + ((att2)<<8) + (att1);
			        	VGA_box(j,i,j,i,pixel);
10000498:	d0e6ed17 	ldw	r3,-25676(gp)
1000049c:	d126ee17 	ldw	r4,-25672(gp)
100004a0:	d166ed17 	ldw	r5,-25676(gp)
100004a4:	d1a6ee17 	ldw	r6,-25672(gp)
100004a8:	e0bfff17 	ldw	r2,-4(fp)
100004ac:	d8800015 	stw	r2,0(sp)
100004b0:	300f883a 	mov	r7,r6
100004b4:	280d883a 	mov	r6,r5
100004b8:	200b883a 	mov	r5,r4
100004bc:	1809883a 	mov	r4,r3
100004c0:	00008400 	call	10000840 <VGA_box>
			        	att1 = alt_up_sd_card_read(fileHandle);
			        }
			        i = 0, j = 0;
			        printf("File handle: %i\n", fileHandle);
			        for (i = height; i >= 0; i = i-1){
			        	for (j = 0; j < width; j = j+1){
100004c4:	d0a6ed17 	ldw	r2,-25676(gp)
100004c8:	10800044 	addi	r2,r2,1
100004cc:	d0a6ed15 	stw	r2,-25676(gp)
100004d0:	d0e6ed17 	ldw	r3,-25676(gp)
100004d4:	e0bff817 	ldw	r2,-32(fp)
100004d8:	18bfcc16 	blt	r3,r2,1000040c <__alt_data_end+0xf800040c>
			        {
			        	att1 = alt_up_sd_card_read(fileHandle);
			        }
			        i = 0, j = 0;
			        printf("File handle: %i\n", fileHandle);
			        for (i = height; i >= 0; i = i-1){
100004dc:	d0a6ee17 	ldw	r2,-25672(gp)
100004e0:	10bfffc4 	addi	r2,r2,-1
100004e4:	d0a6ee15 	stw	r2,-25672(gp)
100004e8:	d0a6ee17 	ldw	r2,-25672(gp)
100004ec:	103fc50e 	bge	r2,zero,10000404 <__alt_data_end+0xf8000404>
			        		pixel = ((att3>>3)<<11) | ((att2>>2)<<5) | (att1 >> 3);
			        		//pixel = ((att3)<<16) + ((att2)<<8) + (att1);
			        	VGA_box(j,i,j,i,pixel);
			        	}
			        }
			        if ((Value & 0xF000) == 0x1000){
100004f0:	d0a6ec17 	ldw	r2,-25680(gp)
100004f4:	10bc000c 	andi	r2,r2,61440
100004f8:	10840018 	cmpnei	r2,r2,4096
100004fc:	1000011e 	bne	r2,zero,10000504 <initCard+0x270>
			        	    	invertPhoto();
10000500:	00005780 	call	10000578 <invertPhoto>
			        }
			        alt_up_sd_card_fclose(fileHandle);
10000504:	e0bff90f 	ldh	r2,-28(fp)
10000508:	1009883a 	mov	r4,r2
1000050c:	00125d80 	call	100125d8 <alt_up_sd_card_fclose>
10000510:	00000306 	br	10000520 <initCard+0x28c>
			    }
		        else
		        {
			    printf("Unknown file system.\n");
10000514:	01040074 	movhi	r4,4097
10000518:	21114604 	addi	r4,r4,17688
1000051c:	0000efc0 	call	10000efc <puts>
		        }

		        connected = 1;
10000520:	00800044 	movi	r2,1
10000524:	e0bffd15 	stw	r2,-12(fp)
	    else
	    {
		printf("Initialization failed.\n");
	    }

	}
10000528:	00000d06 	br	10000560 <initCard+0x2cc>
			    printf("Unknown file system.\n");
		        }

		        connected = 1;
		    }
		    else if ((connected == 1) && (alt_up_sd_card_is_Present() == false))
1000052c:	e0bffd17 	ldw	r2,-12(fp)
10000530:	10800058 	cmpnei	r2,r2,1
10000534:	10000a1e 	bne	r2,zero,10000560 <initCard+0x2cc>
10000538:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
1000053c:	1000081e 	bne	r2,zero,10000560 <initCard+0x2cc>
		    {
		        printf("Card disconnected.\n");
10000540:	01040074 	movhi	r4,4097
10000544:	21114c04 	addi	r4,r4,17712
10000548:	0000efc0 	call	10000efc <puts>
		        connected = 0;
1000054c:	e03ffd15 	stw	zero,-12(fp)
	    else
	    {
		printf("Initialization failed.\n");
	    }

	}
10000550:	00000306 	br	10000560 <initCard+0x2cc>
		        connected = 0;
		    }
	    }
	    else
	    {
		printf("Initialization failed.\n");
10000554:	01040074 	movhi	r4,4097
10000558:	21115104 	addi	r4,r4,17732
1000055c:	0000efc0 	call	10000efc <puts>
	    }

	}
10000560:	0001883a 	nop
10000564:	e037883a 	mov	sp,fp
10000568:	dfc00117 	ldw	ra,4(sp)
1000056c:	df000017 	ldw	fp,0(sp)
10000570:	dec00204 	addi	sp,sp,8
10000574:	f800283a 	ret

10000578 <invertPhoto>:

void invertPhoto(){
10000578:	defff604 	addi	sp,sp,-40
1000057c:	dfc00915 	stw	ra,36(sp)
10000580:	df000815 	stw	fp,32(sp)
10000584:	df000804 	addi	fp,sp,32
	short att1 = 0, att2 = 0, att3 = 0, att;
10000588:	e03ffa8d 	sth	zero,-22(fp)
1000058c:	e03ffb0d 	sth	zero,-20(fp)
10000590:	e03ffb8d 	sth	zero,-18(fp)
	int pixel;
	int width = 320;
10000594:	00805004 	movi	r2,320
10000598:	e0bff915 	stw	r2,-28(fp)
	alt_up_sd_card_dev *device_reference = NULL;
1000059c:	e03ffc15 	stw	zero,-16(fp)
    int connected = 0;
100005a0:	e03ffd15 	stw	zero,-12(fp)
    short int fileHandle;

    	if ((Value & 0xF00) == 0x900){
100005a4:	d0a6ec17 	ldw	r2,-25680(gp)
100005a8:	1083c00c 	andi	r2,r2,3840
100005ac:	10824018 	cmpnei	r2,r2,2304
100005b0:	1000051e 	bne	r2,zero,100005c8 <invertPhoto+0x50>
		    width = width + (Value & 0x0FF);
100005b4:	d0a6ec17 	ldw	r2,-25680(gp)
100005b8:	10803fcc 	andi	r2,r2,255
100005bc:	e0fff917 	ldw	r3,-28(fp)
100005c0:	1885883a 	add	r2,r3,r2
100005c4:	e0bff915 	stw	r2,-28(fp)
		}

		    device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
100005c8:	01040074 	movhi	r4,4097
100005cc:	21112d04 	addi	r4,r4,17588
100005d0:	00111240 	call	10011124 <alt_up_sd_card_open_dev>
100005d4:	e0bffc15 	stw	r2,-16(fp)
		    if (device_reference != NULL)
100005d8:	e0bffc17 	ldw	r2,-16(fp)
100005dc:	10008f26 	beq	r2,zero,1000081c <invertPhoto+0x2a4>
		    {
			    if ((connected == 0) && (alt_up_sd_card_is_Present()))
100005e0:	e0bffd17 	ldw	r2,-12(fp)
100005e4:	1000831e 	bne	r2,zero,100007f4 <invertPhoto+0x27c>
100005e8:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
100005ec:	10008126 	beq	r2,zero,100007f4 <invertPhoto+0x27c>
			    {
			        if (alt_up_sd_card_is_FAT16())
100005f0:	00112a40 	call	100112a4 <alt_up_sd_card_is_FAT16>
100005f4:	10007926 	beq	r2,zero,100007dc <invertPhoto+0x264>
			        {
			        	if (FileSelect == 0){
100005f8:	d0a6eb17 	ldw	r2,-25684(gp)
100005fc:	1000061e 	bne	r2,zero,10000618 <invertPhoto+0xa0>
			           		fileHandle = alt_up_sd_card_fopen("smile.bmp",false);
10000600:	000b883a 	mov	r5,zero
10000604:	01040074 	movhi	r4,4097
10000608:	21113804 	addi	r4,r4,17632
1000060c:	00117a00 	call	100117a0 <alt_up_sd_card_fopen>
10000610:	e0bffa0d 	sth	r2,-24(fp)
10000614:	00001106 	br	1000065c <invertPhoto+0xe4>
			        		}
  			        	else if (FileSelect == 1){
10000618:	d0a6eb17 	ldw	r2,-25684(gp)
1000061c:	10800058 	cmpnei	r2,r2,1
10000620:	1000061e 	bne	r2,zero,1000063c <invertPhoto+0xc4>
   			        		fileHandle = alt_up_sd_card_fopen("tayeb2.bmp",false);
10000624:	000b883a 	mov	r5,zero
10000628:	01040074 	movhi	r4,4097
1000062c:	21113b04 	addi	r4,r4,17644
10000630:	00117a00 	call	100117a0 <alt_up_sd_card_fopen>
10000634:	e0bffa0d 	sth	r2,-24(fp)
10000638:	00000806 	br	1000065c <invertPhoto+0xe4>
       			        	}
   			        	else if (FileSelect == 2){
1000063c:	d0a6eb17 	ldw	r2,-25684(gp)
10000640:	10800098 	cmpnei	r2,r2,2
10000644:	1000051e 	bne	r2,zero,1000065c <invertPhoto+0xe4>
   			          		fileHandle = alt_up_sd_card_fopen("buko.bmp",false);
10000648:	000b883a 	mov	r5,zero
1000064c:	01040074 	movhi	r4,4097
10000650:	21113e04 	addi	r4,r4,17656
10000654:	00117a00 	call	100117a0 <alt_up_sd_card_fopen>
10000658:	e0bffa0d 	sth	r2,-24(fp)
   			        	}

				        att = alt_up_sd_card_get_attributes(fileHandle);
1000065c:	e0bffa0f 	ldh	r2,-24(fp)
10000660:	1009883a 	mov	r4,r2
10000664:	0011ba40 	call	10011ba4 <alt_up_sd_card_get_attributes>
10000668:	e0bffe0d 	sth	r2,-8(fp)

				        VGA_box(0,0, 321, 241, 0xFFFF);
1000066c:	00bfffd4 	movui	r2,65535
10000670:	d8800015 	stw	r2,0(sp)
10000674:	01c03c44 	movi	r7,241
10000678:	01805044 	movi	r6,321
1000067c:	000b883a 	mov	r5,zero
10000680:	0009883a 	mov	r4,zero
10000684:	00008400 	call	10000840 <VGA_box>

				        for (j=0; j<54; j++) //gets past header
10000688:	d026ed15 	stw	zero,-25676(gp)
1000068c:	00000706 	br	100006ac <invertPhoto+0x134>
				        {
				        	att1 = alt_up_sd_card_read(fileHandle);
10000690:	e0bffa0f 	ldh	r2,-24(fp)
10000694:	1009883a 	mov	r4,r2
10000698:	0011c2c0 	call	10011c2c <alt_up_sd_card_read>
1000069c:	e0bffa8d 	sth	r2,-22(fp)

				        att = alt_up_sd_card_get_attributes(fileHandle);

				        VGA_box(0,0, 321, 241, 0xFFFF);

				        for (j=0; j<54; j++) //gets past header
100006a0:	d0a6ed17 	ldw	r2,-25676(gp)
100006a4:	10800044 	addi	r2,r2,1
100006a8:	d0a6ed15 	stw	r2,-25676(gp)
100006ac:	d0a6ed17 	ldw	r2,-25676(gp)
100006b0:	10800d90 	cmplti	r2,r2,54
100006b4:	103ff61e 	bne	r2,zero,10000690 <__alt_data_end+0xf8000690>
				        {
				        	att1 = alt_up_sd_card_read(fileHandle);
				        }
				        i = 0, j = 0;
100006b8:	d026ee15 	stw	zero,-25672(gp)
100006bc:	d026ed15 	stw	zero,-25676(gp)
				        printf("File handle: %i\n", fileHandle);
100006c0:	e0bffa0f 	ldh	r2,-24(fp)
100006c4:	100b883a 	mov	r5,r2
100006c8:	01040074 	movhi	r4,4097
100006cc:	21114104 	addi	r4,r4,17668
100006d0:	0000e000 	call	10000e00 <printf>
				        for (i = 0; i <= 240; i = i+1){
100006d4:	d026ee15 	stw	zero,-25672(gp)
100006d8:	00003906 	br	100007c0 <invertPhoto+0x248>
				        	for (j = 0; j < width; j = j+1){
100006dc:	d026ed15 	stw	zero,-25676(gp)
100006e0:	00003106 	br	100007a8 <invertPhoto+0x230>
				        		att1 = (unsigned char)alt_up_sd_card_read(fileHandle);
100006e4:	e0bffa0f 	ldh	r2,-24(fp)
100006e8:	1009883a 	mov	r4,r2
100006ec:	0011c2c0 	call	10011c2c <alt_up_sd_card_read>
100006f0:	10803fcc 	andi	r2,r2,255
100006f4:	e0bffa8d 	sth	r2,-22(fp)
				        		att2 = (unsigned char)alt_up_sd_card_read(fileHandle);
100006f8:	e0bffa0f 	ldh	r2,-24(fp)
100006fc:	1009883a 	mov	r4,r2
10000700:	0011c2c0 	call	10011c2c <alt_up_sd_card_read>
10000704:	10803fcc 	andi	r2,r2,255
10000708:	e0bffb0d 	sth	r2,-20(fp)
				        		att3 = (unsigned char)alt_up_sd_card_read(fileHandle);
1000070c:	e0bffa0f 	ldh	r2,-24(fp)
10000710:	1009883a 	mov	r4,r2
10000714:	0011c2c0 	call	10011c2c <alt_up_sd_card_read>
10000718:	10803fcc 	andi	r2,r2,255
1000071c:	e0bffb8d 	sth	r2,-18(fp)
				        		pixel = ((att3>>3)<<11) | ((att2>>2)<<5) | (att1 >> 3);
10000720:	e0bffb8f 	ldh	r2,-18(fp)
10000724:	1005d0fa 	srai	r2,r2,3
10000728:	10bfffcc 	andi	r2,r2,65535
1000072c:	10a0001c 	xori	r2,r2,32768
10000730:	10a00004 	addi	r2,r2,-32768
10000734:	100692fa 	slli	r3,r2,11
10000738:	e0bffb0f 	ldh	r2,-20(fp)
1000073c:	1005d0ba 	srai	r2,r2,2
10000740:	10bfffcc 	andi	r2,r2,65535
10000744:	10a0001c 	xori	r2,r2,32768
10000748:	10a00004 	addi	r2,r2,-32768
1000074c:	1004917a 	slli	r2,r2,5
10000750:	1886b03a 	or	r3,r3,r2
10000754:	e0bffa8f 	ldh	r2,-22(fp)
10000758:	1005d0fa 	srai	r2,r2,3
1000075c:	10bfffcc 	andi	r2,r2,65535
10000760:	10a0001c 	xori	r2,r2,32768
10000764:	10a00004 	addi	r2,r2,-32768
10000768:	1884b03a 	or	r2,r3,r2
1000076c:	e0bfff15 	stw	r2,-4(fp)
				        		//pixel = ((att3)<<16) + ((att2)<<8) + (att1);
				        	VGA_box(j,i,j,i,pixel);
10000770:	d0e6ed17 	ldw	r3,-25676(gp)
10000774:	d126ee17 	ldw	r4,-25672(gp)
10000778:	d166ed17 	ldw	r5,-25676(gp)
1000077c:	d1a6ee17 	ldw	r6,-25672(gp)
10000780:	e0bfff17 	ldw	r2,-4(fp)
10000784:	d8800015 	stw	r2,0(sp)
10000788:	300f883a 	mov	r7,r6
1000078c:	280d883a 	mov	r6,r5
10000790:	200b883a 	mov	r5,r4
10000794:	1809883a 	mov	r4,r3
10000798:	00008400 	call	10000840 <VGA_box>
				        	att1 = alt_up_sd_card_read(fileHandle);
				        }
				        i = 0, j = 0;
				        printf("File handle: %i\n", fileHandle);
				        for (i = 0; i <= 240; i = i+1){
				        	for (j = 0; j < width; j = j+1){
1000079c:	d0a6ed17 	ldw	r2,-25676(gp)
100007a0:	10800044 	addi	r2,r2,1
100007a4:	d0a6ed15 	stw	r2,-25676(gp)
100007a8:	d0e6ed17 	ldw	r3,-25676(gp)
100007ac:	e0bff917 	ldw	r2,-28(fp)
100007b0:	18bfcc16 	blt	r3,r2,100006e4 <__alt_data_end+0xf80006e4>
				        {
				        	att1 = alt_up_sd_card_read(fileHandle);
				        }
				        i = 0, j = 0;
				        printf("File handle: %i\n", fileHandle);
				        for (i = 0; i <= 240; i = i+1){
100007b4:	d0a6ee17 	ldw	r2,-25672(gp)
100007b8:	10800044 	addi	r2,r2,1
100007bc:	d0a6ee15 	stw	r2,-25672(gp)
100007c0:	d0a6ee17 	ldw	r2,-25672(gp)
100007c4:	10803c50 	cmplti	r2,r2,241
100007c8:	103fc41e 	bne	r2,zero,100006dc <__alt_data_end+0xf80006dc>
				        		pixel = ((att3>>3)<<11) | ((att2>>2)<<5) | (att1 >> 3);
				        		//pixel = ((att3)<<16) + ((att2)<<8) + (att1);
				        	VGA_box(j,i,j,i,pixel);
				        	}
				        }
				        alt_up_sd_card_fclose(fileHandle);
100007cc:	e0bffa0f 	ldh	r2,-24(fp)
100007d0:	1009883a 	mov	r4,r2
100007d4:	00125d80 	call	100125d8 <alt_up_sd_card_fclose>
100007d8:	00000306 	br	100007e8 <invertPhoto+0x270>
				    }
			        else
			        {
				    printf("Unknown file system.\n");
100007dc:	01040074 	movhi	r4,4097
100007e0:	21114604 	addi	r4,r4,17688
100007e4:	0000efc0 	call	10000efc <puts>
			        }

			        connected = 1;
100007e8:	00800044 	movi	r2,1
100007ec:	e0bffd15 	stw	r2,-12(fp)
		    else
		    {
			printf("Initialization failed.\n");
		    }

}
100007f0:	00000d06 	br	10000828 <invertPhoto+0x2b0>
				    printf("Unknown file system.\n");
			        }

			        connected = 1;
			    }
			    else if ((connected == 1) && (alt_up_sd_card_is_Present() == false))
100007f4:	e0bffd17 	ldw	r2,-12(fp)
100007f8:	10800058 	cmpnei	r2,r2,1
100007fc:	10000a1e 	bne	r2,zero,10000828 <invertPhoto+0x2b0>
10000800:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
10000804:	1000081e 	bne	r2,zero,10000828 <invertPhoto+0x2b0>
			    {
			        printf("Card disconnected.\n");
10000808:	01040074 	movhi	r4,4097
1000080c:	21114c04 	addi	r4,r4,17712
10000810:	0000efc0 	call	10000efc <puts>
			        connected = 0;
10000814:	e03ffd15 	stw	zero,-12(fp)
		    else
		    {
			printf("Initialization failed.\n");
		    }

}
10000818:	00000306 	br	10000828 <invertPhoto+0x2b0>
			        connected = 0;
			    }
		    }
		    else
		    {
			printf("Initialization failed.\n");
1000081c:	01040074 	movhi	r4,4097
10000820:	21115104 	addi	r4,r4,17732
10000824:	0000efc0 	call	10000efc <puts>
		    }

}
10000828:	0001883a 	nop
1000082c:	e037883a 	mov	sp,fp
10000830:	dfc00117 	ldw	ra,4(sp)
10000834:	df000017 	ldw	fp,0(sp)
10000838:	dec00204 	addi	sp,sp,8
1000083c:	f800283a 	ret

10000840 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, int Color){
10000840:	defff204 	addi	sp,sp,-56
10000844:	df000d15 	stw	fp,52(sp)
10000848:	df000d04 	addi	fp,sp,52
1000084c:	e13ffc15 	stw	r4,-16(fp)
10000850:	e17ffd15 	stw	r5,-12(fp)
10000854:	e1bffe15 	stw	r6,-8(fp)
10000858:	e1ffff15 	stw	r7,-4(fp)
	int offset, row, col, StateFlag, NewValue;
	int R, G, B;
	StateFlag = Value & 0xF00; //Get State Flag
1000085c:	d0a6ec17 	ldw	r2,-25680(gp)
10000860:	1083c00c 	andi	r2,r2,3840
10000864:	e0bff815 	stw	r2,-32(fp)
	NewValue = Value & 0x0001F; //Remask Value
10000868:	d0a6ec17 	ldw	r2,-25680(gp)
1000086c:	108007cc 	andi	r2,r2,31
10000870:	e0bff915 	stw	r2,-28(fp)

	R = Color & (0b1111100000000000);
10000874:	e0800117 	ldw	r2,4(fp)
10000878:	10be000c 	andi	r2,r2,63488
1000087c:	e0bff515 	stw	r2,-44(fp)
	G = Color & (0b0000011111000000);
10000880:	e0800117 	ldw	r2,4(fp)
10000884:	1081f00c 	andi	r2,r2,1984
10000888:	e0bff615 	stw	r2,-40(fp)
	B = Color & (0b0000000000011111);
1000088c:	e0800117 	ldw	r2,4(fp)
10000890:	108007cc 	andi	r2,r2,31
10000894:	e0bff715 	stw	r2,-36(fp)
	switch (StateFlag >> 8){
10000898:	e0bff817 	ldw	r2,-32(fp)
1000089c:	1005d23a 	srai	r2,r2,8
100008a0:	10c001e8 	cmpgeui	r3,r2,7
100008a4:	1800521e 	bne	r3,zero,100009f0 <VGA_box+0x1b0>
100008a8:	100690ba 	slli	r3,r2,2
100008ac:	00840034 	movhi	r2,4096
100008b0:	10823004 	addi	r2,r2,2240
100008b4:	1885883a 	add	r2,r3,r2
100008b8:	10800017 	ldw	r2,0(r2)
100008bc:	1000683a 	jmp	r2
100008c0:	100009f0 	cmpltui	zero,r2,39
100008c4:	100008dc 	xori	zero,r2,35
100008c8:	10000970 	cmpltui	zero,r2,37
100008cc:	10000998 	cmpnei	zero,r2,38
100008d0:	100009c0 	call	1100009c <_gp+0xfe1cb0>
100008d4:	100009d0 	cmplti	zero,r2,39
100008d8:	100009e0 	cmpeqi	zero,r2,39
		case(1):
				R = R + (NewValue << 11);
100008dc:	e0bff917 	ldw	r2,-28(fp)
100008e0:	100492fa 	slli	r2,r2,11
100008e4:	e0fff517 	ldw	r3,-44(fp)
100008e8:	1885883a 	add	r2,r3,r2
100008ec:	e0bff515 	stw	r2,-44(fp)
				G = (Color & 0b0000011111100000) + (NewValue << 6);
100008f0:	e0800117 	ldw	r2,4(fp)
100008f4:	10c1f80c 	andi	r3,r2,2016
100008f8:	e0bff917 	ldw	r2,-28(fp)
100008fc:	100491ba 	slli	r2,r2,6
10000900:	1885883a 	add	r2,r3,r2
10000904:	e0bff615 	stw	r2,-40(fp)
				B = B + NewValue;
10000908:	e0fff717 	ldw	r3,-36(fp)
1000090c:	e0bff917 	ldw	r2,-28(fp)
10000910:	1885883a 	add	r2,r3,r2
10000914:	e0bff715 	stw	r2,-36(fp)
				if (R >= 0b10000000000000000){
10000918:	e0bff517 	ldw	r2,-44(fp)
1000091c:	00ffffd4 	movui	r3,65535
10000920:	1880020e 	bge	r3,r2,1000092c <VGA_box+0xec>
					R = 0b11111 << 11;
10000924:	00be0014 	movui	r2,63488
10000928:	e0bff515 	stw	r2,-44(fp)
				}
				if (G >= 0b0000100000000000){
1000092c:	e0bff617 	ldw	r2,-40(fp)
10000930:	10820010 	cmplti	r2,r2,2048
10000934:	1000021e 	bne	r2,zero,10000940 <VGA_box+0x100>
					G = 0b111111 << 5;
10000938:	0081f804 	movi	r2,2016
1000093c:	e0bff615 	stw	r2,-40(fp)
				}
				if (B >= 0b100000){
10000940:	e0bff717 	ldw	r2,-36(fp)
10000944:	10800810 	cmplti	r2,r2,32
10000948:	1000021e 	bne	r2,zero,10000954 <VGA_box+0x114>
					B = 0b11111;
1000094c:	008007c4 	movi	r2,31
10000950:	e0bff715 	stw	r2,-36(fp)
				}
				Color = R | G | B;
10000954:	e0fff517 	ldw	r3,-44(fp)
10000958:	e0bff617 	ldw	r2,-40(fp)
1000095c:	1886b03a 	or	r3,r3,r2
10000960:	e0bff717 	ldw	r2,-36(fp)
10000964:	1884b03a 	or	r2,r3,r2
10000968:	e0800115 	stw	r2,4(fp)
				break;
1000096c:	00002106 	br	100009f4 <VGA_box+0x1b4>
		case(2): //Red becomes Blue, Blue Becomes Green, Green Becomes Red
				Color = ((R >> 11) | (G << 5) | (B << 6));
10000970:	e0bff517 	ldw	r2,-44(fp)
10000974:	1007d2fa 	srai	r3,r2,11
10000978:	e0bff617 	ldw	r2,-40(fp)
1000097c:	1004917a 	slli	r2,r2,5
10000980:	1886b03a 	or	r3,r3,r2
10000984:	e0bff717 	ldw	r2,-36(fp)
10000988:	100491ba 	slli	r2,r2,6
1000098c:	1884b03a 	or	r2,r3,r2
10000990:	e0800115 	stw	r2,4(fp)
				break;
10000994:	00001706 	br	100009f4 <VGA_box+0x1b4>
		case(3): //Red becomes Green, Green becomes Blue, Blue becomes Red
				Color = ((R >> 5) | (G >> 5) | (B << 11));
10000998:	e0bff517 	ldw	r2,-44(fp)
1000099c:	1007d17a 	srai	r3,r2,5
100009a0:	e0bff617 	ldw	r2,-40(fp)
100009a4:	1005d17a 	srai	r2,r2,5
100009a8:	1886b03a 	or	r3,r3,r2
100009ac:	e0bff717 	ldw	r2,-36(fp)
100009b0:	100492fa 	slli	r2,r2,11
100009b4:	1884b03a 	or	r2,r3,r2
100009b8:	e0800115 	stw	r2,4(fp)
				break;
100009bc:	00000d06 	br	100009f4 <VGA_box+0x1b4>
		case(4):
				Color = Color & 0b1111100000000000;
100009c0:	e0800117 	ldw	r2,4(fp)
100009c4:	10be000c 	andi	r2,r2,63488
100009c8:	e0800115 	stw	r2,4(fp)
				break;
100009cc:	00000906 	br	100009f4 <VGA_box+0x1b4>
		case(5):
				Color = Color & 0b0000011111100000;
100009d0:	e0800117 	ldw	r2,4(fp)
100009d4:	1081f80c 	andi	r2,r2,2016
100009d8:	e0800115 	stw	r2,4(fp)
				break;
100009dc:	00000506 	br	100009f4 <VGA_box+0x1b4>
		case(6):
				Color = Color & 0b0000000000011111;
100009e0:	e0800117 	ldw	r2,4(fp)
100009e4:	108007cc 	andi	r2,r2,31
100009e8:	e0800115 	stw	r2,4(fp)
				break;
100009ec:	00000106 	br	100009f4 <VGA_box+0x1b4>
		default:
			break;
100009f0:	0001883a 	nop
	}

	volatile short *pixel_buffer = (short *) 0x00200000;
100009f4:	00800834 	movhi	r2,32
100009f8:	e0bffa15 	stw	r2,-24(fp)
	for (row = y1; row <= y2; row++){
100009fc:	e0bffd17 	ldw	r2,-12(fp)
10000a00:	e0bff315 	stw	r2,-52(fp)
10000a04:	00001806 	br	10000a68 <VGA_box+0x228>
		col = x1;
10000a08:	e0bffc17 	ldw	r2,-16(fp)
10000a0c:	e0bff415 	stw	r2,-48(fp)
		while (col <= x2){
10000a10:	00000f06 	br	10000a50 <VGA_box+0x210>
			offset = (row << 9) + col;
10000a14:	e0bff317 	ldw	r2,-52(fp)
10000a18:	1006927a 	slli	r3,r2,9
10000a1c:	e0bff417 	ldw	r2,-48(fp)
10000a20:	1885883a 	add	r2,r3,r2
10000a24:	e0bffb15 	stw	r2,-20(fp)
			*(pixel_buffer + offset) = Color;
10000a28:	e0bffb17 	ldw	r2,-20(fp)
10000a2c:	1085883a 	add	r2,r2,r2
10000a30:	1007883a 	mov	r3,r2
10000a34:	e0bffa17 	ldw	r2,-24(fp)
10000a38:	10c5883a 	add	r2,r2,r3
10000a3c:	e0c00117 	ldw	r3,4(fp)
10000a40:	10c0000d 	sth	r3,0(r2)
			++col;
10000a44:	e0bff417 	ldw	r2,-48(fp)
10000a48:	10800044 	addi	r2,r2,1
10000a4c:	e0bff415 	stw	r2,-48(fp)
	}

	volatile short *pixel_buffer = (short *) 0x00200000;
	for (row = y1; row <= y2; row++){
		col = x1;
		while (col <= x2){
10000a50:	e0bff417 	ldw	r2,-48(fp)
10000a54:	e0fffe17 	ldw	r3,-8(fp)
10000a58:	18bfee0e 	bge	r3,r2,10000a14 <__alt_data_end+0xf8000a14>
		default:
			break;
	}

	volatile short *pixel_buffer = (short *) 0x00200000;
	for (row = y1; row <= y2; row++){
10000a5c:	e0bff317 	ldw	r2,-52(fp)
10000a60:	10800044 	addi	r2,r2,1
10000a64:	e0bff315 	stw	r2,-52(fp)
10000a68:	e0bff317 	ldw	r2,-52(fp)
10000a6c:	e0ffff17 	ldw	r3,-4(fp)
10000a70:	18bfe50e 	bge	r3,r2,10000a08 <__alt_data_end+0xf8000a08>
			*(pixel_buffer + offset) = Color;
			++col;
		}

	}
}
10000a74:	0001883a 	nop
10000a78:	e037883a 	mov	sp,fp
10000a7c:	df000017 	ldw	fp,0(sp)
10000a80:	dec00104 	addi	sp,sp,4
10000a84:	f800283a 	ret

10000a88 <key3_isr>:

void key3_isr(){
10000a88:	defffd04 	addi	sp,sp,-12
10000a8c:	dfc00215 	stw	ra,8(sp)
10000a90:	df000115 	stw	fp,4(sp)
10000a94:	df000104 	addi	fp,sp,4
	// Reload Image if switch 1 is high change to next photo
	int Sw = IORD(SWITCHES_BASE, 0);
10000a98:	00892004 	movi	r2,9344
10000a9c:	10800037 	ldwio	r2,0(r2)
10000aa0:	e0bfff15 	stw	r2,-4(fp)
	if ((Sw & 0x1) == 1){
10000aa4:	e0bfff17 	ldw	r2,-4(fp)
10000aa8:	1080004c 	andi	r2,r2,1
10000aac:	10000c26 	beq	r2,zero,10000ae0 <key3_isr+0x58>
		if (FileSelect == 0){
10000ab0:	d0a6eb17 	ldw	r2,-25684(gp)
10000ab4:	1000031e 	bne	r2,zero,10000ac4 <key3_isr+0x3c>
			FileSelect = 1;
10000ab8:	00800044 	movi	r2,1
10000abc:	d0a6eb15 	stw	r2,-25684(gp)
10000ac0:	00000706 	br	10000ae0 <key3_isr+0x58>
		}
		else if (FileSelect == 1){
10000ac4:	d0a6eb17 	ldw	r2,-25684(gp)
10000ac8:	10800058 	cmpnei	r2,r2,1
10000acc:	1000031e 	bne	r2,zero,10000adc <key3_isr+0x54>
			FileSelect = 2;
10000ad0:	00800084 	movi	r2,2
10000ad4:	d0a6eb15 	stw	r2,-25684(gp)
10000ad8:	00000106 	br	10000ae0 <key3_isr+0x58>
		}
		else FileSelect = 0;
10000adc:	d026eb15 	stw	zero,-25684(gp)
	}
	printf("KEY 3");
10000ae0:	01040074 	movhi	r4,4097
10000ae4:	21115704 	addi	r4,r4,17756
10000ae8:	0000e000 	call	10000e00 <printf>
	initCard();
10000aec:	00002940 	call	10000294 <initCard>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
10000af0:	0007883a 	mov	r3,zero
10000af4:	00891b04 	movi	r2,9324
10000af8:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
10000afc:	00891b04 	movi	r2,9324
10000b00:	10800037 	ldwio	r2,0(r2)
	return;
10000b04:	0001883a 	nop
}
10000b08:	e037883a 	mov	sp,fp
10000b0c:	dfc00117 	ldw	ra,4(sp)
10000b10:	df000017 	ldw	fp,0(sp)
10000b14:	dec00204 	addi	sp,sp,8
10000b18:	f800283a 	ret

10000b1c <key2_isr>:

void key2_isr(){
10000b1c:	deffff04 	addi	sp,sp,-4
10000b20:	df000015 	stw	fp,0(sp)
10000b24:	d839883a 	mov	fp,sp
	//Just Red Values, Just Blue Values, Just Green Values
	if (Value == 0x400){
10000b28:	d0a6ec17 	ldw	r2,-25680(gp)
10000b2c:	10810018 	cmpnei	r2,r2,1024
10000b30:	1000031e 	bne	r2,zero,10000b40 <key2_isr+0x24>
		Value = 0x500;
10000b34:	00814004 	movi	r2,1280
10000b38:	d0a6ec15 	stw	r2,-25680(gp)
10000b3c:	00000806 	br	10000b60 <key2_isr+0x44>
	}
	else if (Value == 0x500){
10000b40:	d0a6ec17 	ldw	r2,-25680(gp)
10000b44:	10814018 	cmpnei	r2,r2,1280
10000b48:	1000031e 	bne	r2,zero,10000b58 <key2_isr+0x3c>
		Value = 0x600;
10000b4c:	00818004 	movi	r2,1536
10000b50:	d0a6ec15 	stw	r2,-25680(gp)
10000b54:	00000206 	br	10000b60 <key2_isr+0x44>
	}
	else Value = 0x400;
10000b58:	00810004 	movi	r2,1024
10000b5c:	d0a6ec15 	stw	r2,-25680(gp)

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
10000b60:	0007883a 	mov	r3,zero
10000b64:	00891b04 	movi	r2,9324
10000b68:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
10000b6c:	00891b04 	movi	r2,9324
10000b70:	10800037 	ldwio	r2,0(r2)
	return;
10000b74:	0001883a 	nop
}
10000b78:	e037883a 	mov	sp,fp
10000b7c:	df000017 	ldw	fp,0(sp)
10000b80:	dec00104 	addi	sp,sp,4
10000b84:	f800283a 	ret

10000b88 <key1_isr>:

void key1_isr(){
10000b88:	defffe04 	addi	sp,sp,-8
10000b8c:	dfc00115 	stw	ra,4(sp)
10000b90:	df000015 	stw	fp,0(sp)
10000b94:	d839883a 	mov	fp,sp
	//INVERT RGB
	printf("KEY 2\n");
10000b98:	01040074 	movhi	r4,4097
10000b9c:	21115904 	addi	r4,r4,17764
10000ba0:	0000efc0 	call	10000efc <puts>
	if (Value == 0x200){
10000ba4:	d0a6ec17 	ldw	r2,-25680(gp)
10000ba8:	10808018 	cmpnei	r2,r2,512
10000bac:	1000031e 	bne	r2,zero,10000bbc <key1_isr+0x34>
		Value = 0x300;
10000bb0:	0080c004 	movi	r2,768
10000bb4:	d0a6ec15 	stw	r2,-25680(gp)
10000bb8:	00000706 	br	10000bd8 <key1_isr+0x50>
	}
	else if(Value == 0x300){
10000bbc:	d0a6ec17 	ldw	r2,-25680(gp)
10000bc0:	1080c018 	cmpnei	r2,r2,768
10000bc4:	1000021e 	bne	r2,zero,10000bd0 <key1_isr+0x48>
		Value = 0x000;
10000bc8:	d026ec15 	stw	zero,-25680(gp)
10000bcc:	00000206 	br	10000bd8 <key1_isr+0x50>
	}
	else Value = (0x200);
10000bd0:	00808004 	movi	r2,512
10000bd4:	d0a6ec15 	stw	r2,-25680(gp)

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
10000bd8:	0007883a 	mov	r3,zero
10000bdc:	00891b04 	movi	r2,9324
10000be0:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
10000be4:	00891b04 	movi	r2,9324
10000be8:	10800037 	ldwio	r2,0(r2)
	return;
10000bec:	0001883a 	nop
}
10000bf0:	e037883a 	mov	sp,fp
10000bf4:	dfc00117 	ldw	ra,4(sp)
10000bf8:	df000017 	ldw	fp,0(sp)
10000bfc:	dec00204 	addi	sp,sp,8
10000c00:	f800283a 	ret

10000c04 <key0_isr>:

void key0_isr(){
10000c04:	defffe04 	addi	sp,sp,-8
10000c08:	dfc00115 	stw	ra,4(sp)
10000c0c:	df000015 	stw	fp,0(sp)
10000c10:	d839883a 	mov	fp,sp
	//Brightness, Increase Pixel Color by Switch Value
	printf("KEY 0");
10000c14:	01040074 	movhi	r4,4097
10000c18:	21115b04 	addi	r4,r4,17772
10000c1c:	0000e000 	call	10000e00 <printf>
	Value = IORD(SWITCHES_BASE, 0);
10000c20:	00892004 	movi	r2,9344
10000c24:	10800037 	ldwio	r2,0(r2)
10000c28:	d0a6ec15 	stw	r2,-25680(gp)
	if ((Value & 0b100000000000000000) > 0){
10000c2c:	d0a6ec17 	ldw	r2,-25680(gp)
10000c30:	108000ac 	andhi	r2,r2,2
10000c34:	0080070e 	bge	zero,r2,10000c54 <key0_isr+0x50>
		//If Value of 17 is high, Width Adjustment go crazy
		Value = Value & 0x001F;
10000c38:	d0a6ec17 	ldw	r2,-25680(gp)
10000c3c:	108007cc 	andi	r2,r2,31
10000c40:	d0a6ec15 	stw	r2,-25680(gp)
		Value = Value + 0x900;
10000c44:	d0a6ec17 	ldw	r2,-25680(gp)
10000c48:	10824004 	addi	r2,r2,2304
10000c4c:	d0a6ec15 	stw	r2,-25680(gp)
10000c50:	00001306 	br	10000ca0 <key0_isr+0x9c>
	}
	else if ((Value & 0b010000000000000000) > 0){ //Switch 16 is high, Mirror the image up and down
10000c54:	d0a6ec17 	ldw	r2,-25680(gp)
10000c58:	1080006c 	andhi	r2,r2,1
10000c5c:	0080070e 	bge	zero,r2,10000c7c <key0_isr+0x78>
		Value = Value & 0x001F;
10000c60:	d0a6ec17 	ldw	r2,-25680(gp)
10000c64:	108007cc 	andi	r2,r2,31
10000c68:	d0a6ec15 	stw	r2,-25680(gp)
		Value = Value + 0x1000;
10000c6c:	d0a6ec17 	ldw	r2,-25680(gp)
10000c70:	10840004 	addi	r2,r2,4096
10000c74:	d0a6ec15 	stw	r2,-25680(gp)
10000c78:	00000906 	br	10000ca0 <key0_isr+0x9c>
	}
	else if ((Value & 0b001000000000000000) > 0) { //Switch 15 is high brightness changes
10000c7c:	d0a6ec17 	ldw	r2,-25680(gp)
10000c80:	10a0000c 	andi	r2,r2,32768
10000c84:	0080060e 	bge	zero,r2,10000ca0 <key0_isr+0x9c>
	Value = Value & (0x001F);
10000c88:	d0a6ec17 	ldw	r2,-25680(gp)
10000c8c:	108007cc 	andi	r2,r2,31
10000c90:	d0a6ec15 	stw	r2,-25680(gp)
	Value = Value + (0x100); //Add the State Flag
10000c94:	d0a6ec17 	ldw	r2,-25680(gp)
10000c98:	10804004 	addi	r2,r2,256
10000c9c:	d0a6ec15 	stw	r2,-25680(gp)
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
10000ca0:	0007883a 	mov	r3,zero
10000ca4:	00891b04 	movi	r2,9324
10000ca8:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
10000cac:	00891b04 	movi	r2,9324
10000cb0:	10800037 	ldwio	r2,0(r2)
	return;
10000cb4:	0001883a 	nop
}
10000cb8:	e037883a 	mov	sp,fp
10000cbc:	dfc00117 	ldw	ra,4(sp)
10000cc0:	df000017 	ldw	fp,0(sp)
10000cc4:	dec00204 	addi	sp,sp,8
10000cc8:	f800283a 	ret

10000ccc <handle_key_interrupts>:

void handle_key_interrupts(void* context){
10000ccc:	defffc04 	addi	sp,sp,-16
10000cd0:	dfc00315 	stw	ra,12(sp)
10000cd4:	df000215 	stw	fp,8(sp)
10000cd8:	df000204 	addi	fp,sp,8
10000cdc:	e13fff15 	stw	r4,-4(fp)
	volatile int *edge_capture_ptr = (volatile int*) context;
10000ce0:	e0bfff17 	ldw	r2,-4(fp)
10000ce4:	e0bffe15 	stw	r2,-8(fp)
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
10000ce8:	00891b04 	movi	r2,9324
10000cec:	10c00037 	ldwio	r3,0(r2)
10000cf0:	e0bffe17 	ldw	r2,-8(fp)
10000cf4:	10c00015 	stw	r3,0(r2)
	if (*edge_capture_ptr & 0x8){
10000cf8:	e0bffe17 	ldw	r2,-8(fp)
10000cfc:	10800017 	ldw	r2,0(r2)
10000d00:	1080020c 	andi	r2,r2,8
10000d04:	10000226 	beq	r2,zero,10000d10 <handle_key_interrupts+0x44>
		key3_isr();
10000d08:	0000a880 	call	10000a88 <key3_isr>
		key1_isr();
	}
	else if (*edge_capture_ptr & 0x1){
		key0_isr();
	}
	return;
10000d0c:	00001206 	br	10000d58 <handle_key_interrupts+0x8c>
	volatile int *edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
	if (*edge_capture_ptr & 0x8){
		key3_isr();
	}
	else if (*edge_capture_ptr & 0x4){
10000d10:	e0bffe17 	ldw	r2,-8(fp)
10000d14:	10800017 	ldw	r2,0(r2)
10000d18:	1080010c 	andi	r2,r2,4
10000d1c:	10000226 	beq	r2,zero,10000d28 <handle_key_interrupts+0x5c>
		key2_isr();
10000d20:	0000b1c0 	call	10000b1c <key2_isr>
		key1_isr();
	}
	else if (*edge_capture_ptr & 0x1){
		key0_isr();
	}
	return;
10000d24:	00000c06 	br	10000d58 <handle_key_interrupts+0x8c>
		key3_isr();
	}
	else if (*edge_capture_ptr & 0x4){
		key2_isr();
		}
	else if (*edge_capture_ptr & 0x2){
10000d28:	e0bffe17 	ldw	r2,-8(fp)
10000d2c:	10800017 	ldw	r2,0(r2)
10000d30:	1080008c 	andi	r2,r2,2
10000d34:	10000226 	beq	r2,zero,10000d40 <handle_key_interrupts+0x74>
		key1_isr();
10000d38:	0000b880 	call	10000b88 <key1_isr>
	}
	else if (*edge_capture_ptr & 0x1){
		key0_isr();
	}
	return;
10000d3c:	00000606 	br	10000d58 <handle_key_interrupts+0x8c>
		key2_isr();
		}
	else if (*edge_capture_ptr & 0x2){
		key1_isr();
	}
	else if (*edge_capture_ptr & 0x1){
10000d40:	e0bffe17 	ldw	r2,-8(fp)
10000d44:	10800017 	ldw	r2,0(r2)
10000d48:	1080004c 	andi	r2,r2,1
10000d4c:	10000226 	beq	r2,zero,10000d58 <handle_key_interrupts+0x8c>
		key0_isr();
10000d50:	0000c040 	call	10000c04 <key0_isr>
	}
	return;
10000d54:	0001883a 	nop
10000d58:	0001883a 	nop
}
10000d5c:	e037883a 	mov	sp,fp
10000d60:	dfc00117 	ldw	ra,4(sp)
10000d64:	df000017 	ldw	fp,0(sp)
10000d68:	dec00204 	addi	sp,sp,8
10000d6c:	f800283a 	ret

10000d70 <pio_init>:

void pio_init(){
10000d70:	defffd04 	addi	sp,sp,-12
10000d74:	dfc00215 	stw	ra,8(sp)
10000d78:	df000115 	stw	fp,4(sp)
10000d7c:	df000104 	addi	fp,sp,4
	void* edge_capture_ptr = KEYS_EDGE_TYPE;
10000d80:	00840074 	movhi	r2,4097
10000d84:	10915d04 	addi	r2,r2,17780
10000d88:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0xF);
10000d8c:	00c003c4 	movi	r3,15
10000d90:	00891a04 	movi	r2,9320
10000d94:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0x0);
10000d98:	0007883a 	mov	r3,zero
10000d9c:	00891b04 	movi	r2,9324
10000da0:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(KEYS_IRQ, edge_capture_ptr, handle_key_interrupts);
10000da4:	01840034 	movhi	r6,4096
10000da8:	31833304 	addi	r6,r6,3276
10000dac:	e17fff17 	ldw	r5,-4(fp)
10000db0:	010000c4 	movi	r4,3
10000db4:	000d9140 	call	1000d914 <alt_irq_register>

	return;
10000db8:	0001883a 	nop
	}
10000dbc:	e037883a 	mov	sp,fp
10000dc0:	dfc00117 	ldw	ra,4(sp)
10000dc4:	df000017 	ldw	fp,0(sp)
10000dc8:	dec00204 	addi	sp,sp,8
10000dcc:	f800283a 	ret

10000dd0 <_printf_r>:
10000dd0:	defffd04 	addi	sp,sp,-12
10000dd4:	2805883a 	mov	r2,r5
10000dd8:	dfc00015 	stw	ra,0(sp)
10000ddc:	d9800115 	stw	r6,4(sp)
10000de0:	d9c00215 	stw	r7,8(sp)
10000de4:	21400217 	ldw	r5,8(r4)
10000de8:	d9c00104 	addi	r7,sp,4
10000dec:	100d883a 	mov	r6,r2
10000df0:	0000fa80 	call	10000fa8 <___vfprintf_internal_r>
10000df4:	dfc00017 	ldw	ra,0(sp)
10000df8:	dec00304 	addi	sp,sp,12
10000dfc:	f800283a 	ret

10000e00 <printf>:
10000e00:	defffc04 	addi	sp,sp,-16
10000e04:	dfc00015 	stw	ra,0(sp)
10000e08:	d9400115 	stw	r5,4(sp)
10000e0c:	d9800215 	stw	r6,8(sp)
10000e10:	d9c00315 	stw	r7,12(sp)
10000e14:	00840074 	movhi	r2,4097
10000e18:	1098fc04 	addi	r2,r2,25584
10000e1c:	10800017 	ldw	r2,0(r2)
10000e20:	200b883a 	mov	r5,r4
10000e24:	d9800104 	addi	r6,sp,4
10000e28:	11000217 	ldw	r4,8(r2)
10000e2c:	00031a00 	call	100031a0 <__vfprintf_internal>
10000e30:	dfc00017 	ldw	ra,0(sp)
10000e34:	dec00404 	addi	sp,sp,16
10000e38:	f800283a 	ret

10000e3c <_puts_r>:
10000e3c:	defff604 	addi	sp,sp,-40
10000e40:	dc000715 	stw	r16,28(sp)
10000e44:	2021883a 	mov	r16,r4
10000e48:	2809883a 	mov	r4,r5
10000e4c:	dc400815 	stw	r17,32(sp)
10000e50:	dfc00915 	stw	ra,36(sp)
10000e54:	2823883a 	mov	r17,r5
10000e58:	0000f100 	call	10000f10 <strlen>
10000e5c:	10c00044 	addi	r3,r2,1
10000e60:	d8800115 	stw	r2,4(sp)
10000e64:	00840074 	movhi	r2,4097
10000e68:	10915f04 	addi	r2,r2,17788
10000e6c:	d8800215 	stw	r2,8(sp)
10000e70:	00800044 	movi	r2,1
10000e74:	d8800315 	stw	r2,12(sp)
10000e78:	00800084 	movi	r2,2
10000e7c:	dc400015 	stw	r17,0(sp)
10000e80:	d8c00615 	stw	r3,24(sp)
10000e84:	dec00415 	stw	sp,16(sp)
10000e88:	d8800515 	stw	r2,20(sp)
10000e8c:	80000226 	beq	r16,zero,10000e98 <_puts_r+0x5c>
10000e90:	80800e17 	ldw	r2,56(r16)
10000e94:	10001426 	beq	r2,zero,10000ee8 <_puts_r+0xac>
10000e98:	81400217 	ldw	r5,8(r16)
10000e9c:	2880030b 	ldhu	r2,12(r5)
10000ea0:	10c8000c 	andi	r3,r2,8192
10000ea4:	1800061e 	bne	r3,zero,10000ec0 <_puts_r+0x84>
10000ea8:	29001917 	ldw	r4,100(r5)
10000eac:	00f7ffc4 	movi	r3,-8193
10000eb0:	10880014 	ori	r2,r2,8192
10000eb4:	20c6703a 	and	r3,r4,r3
10000eb8:	2880030d 	sth	r2,12(r5)
10000ebc:	28c01915 	stw	r3,100(r5)
10000ec0:	d9800404 	addi	r6,sp,16
10000ec4:	8009883a 	mov	r4,r16
10000ec8:	00056d00 	call	100056d0 <__sfvwrite_r>
10000ecc:	1000091e 	bne	r2,zero,10000ef4 <_puts_r+0xb8>
10000ed0:	00800284 	movi	r2,10
10000ed4:	dfc00917 	ldw	ra,36(sp)
10000ed8:	dc400817 	ldw	r17,32(sp)
10000edc:	dc000717 	ldw	r16,28(sp)
10000ee0:	dec00a04 	addi	sp,sp,40
10000ee4:	f800283a 	ret
10000ee8:	8009883a 	mov	r4,r16
10000eec:	000524c0 	call	1000524c <__sinit>
10000ef0:	003fe906 	br	10000e98 <__alt_data_end+0xf8000e98>
10000ef4:	00bfffc4 	movi	r2,-1
10000ef8:	003ff606 	br	10000ed4 <__alt_data_end+0xf8000ed4>

10000efc <puts>:
10000efc:	00840074 	movhi	r2,4097
10000f00:	1098fc04 	addi	r2,r2,25584
10000f04:	200b883a 	mov	r5,r4
10000f08:	11000017 	ldw	r4,0(r2)
10000f0c:	0000e3c1 	jmpi	10000e3c <_puts_r>

10000f10 <strlen>:
10000f10:	208000cc 	andi	r2,r4,3
10000f14:	10002026 	beq	r2,zero,10000f98 <strlen+0x88>
10000f18:	20800007 	ldb	r2,0(r4)
10000f1c:	10002026 	beq	r2,zero,10000fa0 <strlen+0x90>
10000f20:	2005883a 	mov	r2,r4
10000f24:	00000206 	br	10000f30 <strlen+0x20>
10000f28:	10c00007 	ldb	r3,0(r2)
10000f2c:	18001826 	beq	r3,zero,10000f90 <strlen+0x80>
10000f30:	10800044 	addi	r2,r2,1
10000f34:	10c000cc 	andi	r3,r2,3
10000f38:	183ffb1e 	bne	r3,zero,10000f28 <__alt_data_end+0xf8000f28>
10000f3c:	10c00017 	ldw	r3,0(r2)
10000f40:	01ffbff4 	movhi	r7,65279
10000f44:	39ffbfc4 	addi	r7,r7,-257
10000f48:	00ca303a 	nor	r5,zero,r3
10000f4c:	01a02074 	movhi	r6,32897
10000f50:	19c7883a 	add	r3,r3,r7
10000f54:	31a02004 	addi	r6,r6,-32640
10000f58:	1946703a 	and	r3,r3,r5
10000f5c:	1986703a 	and	r3,r3,r6
10000f60:	1800091e 	bne	r3,zero,10000f88 <strlen+0x78>
10000f64:	10800104 	addi	r2,r2,4
10000f68:	10c00017 	ldw	r3,0(r2)
10000f6c:	19cb883a 	add	r5,r3,r7
10000f70:	00c6303a 	nor	r3,zero,r3
10000f74:	28c6703a 	and	r3,r5,r3
10000f78:	1986703a 	and	r3,r3,r6
10000f7c:	183ff926 	beq	r3,zero,10000f64 <__alt_data_end+0xf8000f64>
10000f80:	00000106 	br	10000f88 <strlen+0x78>
10000f84:	10800044 	addi	r2,r2,1
10000f88:	10c00007 	ldb	r3,0(r2)
10000f8c:	183ffd1e 	bne	r3,zero,10000f84 <__alt_data_end+0xf8000f84>
10000f90:	1105c83a 	sub	r2,r2,r4
10000f94:	f800283a 	ret
10000f98:	2005883a 	mov	r2,r4
10000f9c:	003fe706 	br	10000f3c <__alt_data_end+0xf8000f3c>
10000fa0:	0005883a 	mov	r2,zero
10000fa4:	f800283a 	ret

10000fa8 <___vfprintf_internal_r>:
10000fa8:	deffb804 	addi	sp,sp,-288
10000fac:	dfc04715 	stw	ra,284(sp)
10000fb0:	ddc04515 	stw	r23,276(sp)
10000fb4:	dd404315 	stw	r21,268(sp)
10000fb8:	d9002c15 	stw	r4,176(sp)
10000fbc:	282f883a 	mov	r23,r5
10000fc0:	302b883a 	mov	r21,r6
10000fc4:	d9c02d15 	stw	r7,180(sp)
10000fc8:	df004615 	stw	fp,280(sp)
10000fcc:	dd804415 	stw	r22,272(sp)
10000fd0:	dd004215 	stw	r20,264(sp)
10000fd4:	dcc04115 	stw	r19,260(sp)
10000fd8:	dc804015 	stw	r18,256(sp)
10000fdc:	dc403f15 	stw	r17,252(sp)
10000fe0:	dc003e15 	stw	r16,248(sp)
10000fe4:	0005dc00 	call	10005dc0 <_localeconv_r>
10000fe8:	10800017 	ldw	r2,0(r2)
10000fec:	1009883a 	mov	r4,r2
10000ff0:	d8803415 	stw	r2,208(sp)
10000ff4:	0000f100 	call	10000f10 <strlen>
10000ff8:	d8803715 	stw	r2,220(sp)
10000ffc:	d8802c17 	ldw	r2,176(sp)
10001000:	10000226 	beq	r2,zero,1000100c <___vfprintf_internal_r+0x64>
10001004:	10800e17 	ldw	r2,56(r2)
10001008:	1000f926 	beq	r2,zero,100013f0 <___vfprintf_internal_r+0x448>
1000100c:	b880030b 	ldhu	r2,12(r23)
10001010:	10c8000c 	andi	r3,r2,8192
10001014:	1800061e 	bne	r3,zero,10001030 <___vfprintf_internal_r+0x88>
10001018:	b9001917 	ldw	r4,100(r23)
1000101c:	00f7ffc4 	movi	r3,-8193
10001020:	10880014 	ori	r2,r2,8192
10001024:	20c6703a 	and	r3,r4,r3
10001028:	b880030d 	sth	r2,12(r23)
1000102c:	b8c01915 	stw	r3,100(r23)
10001030:	10c0020c 	andi	r3,r2,8
10001034:	1800c126 	beq	r3,zero,1000133c <___vfprintf_internal_r+0x394>
10001038:	b8c00417 	ldw	r3,16(r23)
1000103c:	1800bf26 	beq	r3,zero,1000133c <___vfprintf_internal_r+0x394>
10001040:	1080068c 	andi	r2,r2,26
10001044:	00c00284 	movi	r3,10
10001048:	10c0c426 	beq	r2,r3,1000135c <___vfprintf_internal_r+0x3b4>
1000104c:	d8c00404 	addi	r3,sp,16
10001050:	05040074 	movhi	r20,4097
10001054:	d9001e04 	addi	r4,sp,120
10001058:	a5117084 	addi	r20,r20,17858
1000105c:	d8c01e15 	stw	r3,120(sp)
10001060:	d8002015 	stw	zero,128(sp)
10001064:	d8001f15 	stw	zero,124(sp)
10001068:	d8003315 	stw	zero,204(sp)
1000106c:	d8003615 	stw	zero,216(sp)
10001070:	d8003815 	stw	zero,224(sp)
10001074:	1811883a 	mov	r8,r3
10001078:	d8003915 	stw	zero,228(sp)
1000107c:	d8003a15 	stw	zero,232(sp)
10001080:	d8002f15 	stw	zero,188(sp)
10001084:	d9002815 	stw	r4,160(sp)
10001088:	a8800007 	ldb	r2,0(r21)
1000108c:	10027b26 	beq	r2,zero,10001a7c <___vfprintf_internal_r+0xad4>
10001090:	00c00944 	movi	r3,37
10001094:	a821883a 	mov	r16,r21
10001098:	10c0021e 	bne	r2,r3,100010a4 <___vfprintf_internal_r+0xfc>
1000109c:	00001406 	br	100010f0 <___vfprintf_internal_r+0x148>
100010a0:	10c00326 	beq	r2,r3,100010b0 <___vfprintf_internal_r+0x108>
100010a4:	84000044 	addi	r16,r16,1
100010a8:	80800007 	ldb	r2,0(r16)
100010ac:	103ffc1e 	bne	r2,zero,100010a0 <__alt_data_end+0xf80010a0>
100010b0:	8563c83a 	sub	r17,r16,r21
100010b4:	88000e26 	beq	r17,zero,100010f0 <___vfprintf_internal_r+0x148>
100010b8:	d8c02017 	ldw	r3,128(sp)
100010bc:	d8801f17 	ldw	r2,124(sp)
100010c0:	45400015 	stw	r21,0(r8)
100010c4:	1c47883a 	add	r3,r3,r17
100010c8:	10800044 	addi	r2,r2,1
100010cc:	d8c02015 	stw	r3,128(sp)
100010d0:	44400115 	stw	r17,4(r8)
100010d4:	d8801f15 	stw	r2,124(sp)
100010d8:	00c001c4 	movi	r3,7
100010dc:	1880a716 	blt	r3,r2,1000137c <___vfprintf_internal_r+0x3d4>
100010e0:	42000204 	addi	r8,r8,8
100010e4:	d9402f17 	ldw	r5,188(sp)
100010e8:	2c4b883a 	add	r5,r5,r17
100010ec:	d9402f15 	stw	r5,188(sp)
100010f0:	80800007 	ldb	r2,0(r16)
100010f4:	1000a826 	beq	r2,zero,10001398 <___vfprintf_internal_r+0x3f0>
100010f8:	84400047 	ldb	r17,1(r16)
100010fc:	00bfffc4 	movi	r2,-1
10001100:	85400044 	addi	r21,r16,1
10001104:	d8002785 	stb	zero,158(sp)
10001108:	0007883a 	mov	r3,zero
1000110c:	000f883a 	mov	r7,zero
10001110:	d8802915 	stw	r2,164(sp)
10001114:	d8003115 	stw	zero,196(sp)
10001118:	0025883a 	mov	r18,zero
1000111c:	01401604 	movi	r5,88
10001120:	01800244 	movi	r6,9
10001124:	02800a84 	movi	r10,42
10001128:	02401b04 	movi	r9,108
1000112c:	ad400044 	addi	r21,r21,1
10001130:	88bff804 	addi	r2,r17,-32
10001134:	28830436 	bltu	r5,r2,10001d48 <___vfprintf_internal_r+0xda0>
10001138:	100490ba 	slli	r2,r2,2
1000113c:	01040034 	movhi	r4,4096
10001140:	21045404 	addi	r4,r4,4432
10001144:	1105883a 	add	r2,r2,r4
10001148:	10800017 	ldw	r2,0(r2)
1000114c:	1000683a 	jmp	r2
10001150:	10001c68 	cmpgeui	zero,r2,113
10001154:	10001d48 	cmpgei	zero,r2,117
10001158:	10001d48 	cmpgei	zero,r2,117
1000115c:	10001c88 	cmpgei	zero,r2,114
10001160:	10001d48 	cmpgei	zero,r2,117
10001164:	10001d48 	cmpgei	zero,r2,117
10001168:	10001d48 	cmpgei	zero,r2,117
1000116c:	10001d48 	cmpgei	zero,r2,117
10001170:	10001d48 	cmpgei	zero,r2,117
10001174:	10001d48 	cmpgei	zero,r2,117
10001178:	100013fc 	xorhi	zero,r2,79
1000117c:	10001ba4 	muli	zero,r2,110
10001180:	10001d48 	cmpgei	zero,r2,117
10001184:	100012c4 	addi	zero,r2,75
10001188:	10001424 	muli	zero,r2,80
1000118c:	10001d48 	cmpgei	zero,r2,117
10001190:	10001464 	muli	zero,r2,81
10001194:	10001470 	cmpltui	zero,r2,81
10001198:	10001470 	cmpltui	zero,r2,81
1000119c:	10001470 	cmpltui	zero,r2,81
100011a0:	10001470 	cmpltui	zero,r2,81
100011a4:	10001470 	cmpltui	zero,r2,81
100011a8:	10001470 	cmpltui	zero,r2,81
100011ac:	10001470 	cmpltui	zero,r2,81
100011b0:	10001470 	cmpltui	zero,r2,81
100011b4:	10001470 	cmpltui	zero,r2,81
100011b8:	10001d48 	cmpgei	zero,r2,117
100011bc:	10001d48 	cmpgei	zero,r2,117
100011c0:	10001d48 	cmpgei	zero,r2,117
100011c4:	10001d48 	cmpgei	zero,r2,117
100011c8:	10001d48 	cmpgei	zero,r2,117
100011cc:	10001d48 	cmpgei	zero,r2,117
100011d0:	10001d48 	cmpgei	zero,r2,117
100011d4:	10001d48 	cmpgei	zero,r2,117
100011d8:	10001d48 	cmpgei	zero,r2,117
100011dc:	10001d48 	cmpgei	zero,r2,117
100011e0:	100014a4 	muli	zero,r2,82
100011e4:	10001560 	cmpeqi	zero,r2,85
100011e8:	10001d48 	cmpgei	zero,r2,117
100011ec:	10001560 	cmpeqi	zero,r2,85
100011f0:	10001d48 	cmpgei	zero,r2,117
100011f4:	10001d48 	cmpgei	zero,r2,117
100011f8:	10001d48 	cmpgei	zero,r2,117
100011fc:	10001d48 	cmpgei	zero,r2,117
10001200:	10001600 	call	11000160 <_gp+0xfe1d74>
10001204:	10001d48 	cmpgei	zero,r2,117
10001208:	10001d48 	cmpgei	zero,r2,117
1000120c:	1000160c 	andi	zero,r2,88
10001210:	10001d48 	cmpgei	zero,r2,117
10001214:	10001d48 	cmpgei	zero,r2,117
10001218:	10001d48 	cmpgei	zero,r2,117
1000121c:	10001d48 	cmpgei	zero,r2,117
10001220:	10001d48 	cmpgei	zero,r2,117
10001224:	10001a84 	addi	zero,r2,106
10001228:	10001d48 	cmpgei	zero,r2,117
1000122c:	10001d48 	cmpgei	zero,r2,117
10001230:	10001ae4 	muli	zero,r2,107
10001234:	10001d48 	cmpgei	zero,r2,117
10001238:	10001d48 	cmpgei	zero,r2,117
1000123c:	10001d48 	cmpgei	zero,r2,117
10001240:	10001d48 	cmpgei	zero,r2,117
10001244:	10001d48 	cmpgei	zero,r2,117
10001248:	10001d48 	cmpgei	zero,r2,117
1000124c:	10001d48 	cmpgei	zero,r2,117
10001250:	10001d48 	cmpgei	zero,r2,117
10001254:	10001d48 	cmpgei	zero,r2,117
10001258:	10001d48 	cmpgei	zero,r2,117
1000125c:	10001cf4 	orhi	zero,r2,115
10001260:	10001c94 	ori	zero,r2,114
10001264:	10001560 	cmpeqi	zero,r2,85
10001268:	10001560 	cmpeqi	zero,r2,85
1000126c:	10001560 	cmpeqi	zero,r2,85
10001270:	10001ca4 	muli	zero,r2,114
10001274:	10001c94 	ori	zero,r2,114
10001278:	10001d48 	cmpgei	zero,r2,117
1000127c:	10001d48 	cmpgei	zero,r2,117
10001280:	10001cb0 	cmpltui	zero,r2,114
10001284:	10001d48 	cmpgei	zero,r2,117
10001288:	10001cc0 	call	110001cc <_gp+0xfe1de0>
1000128c:	10001b94 	ori	zero,r2,110
10001290:	100012d0 	cmplti	zero,r2,75
10001294:	10001bb4 	orhi	zero,r2,110
10001298:	10001d48 	cmpgei	zero,r2,117
1000129c:	10001bc0 	call	110001bc <_gp+0xfe1dd0>
100012a0:	10001d48 	cmpgei	zero,r2,117
100012a4:	10001c1c 	xori	zero,r2,112
100012a8:	10001d48 	cmpgei	zero,r2,117
100012ac:	10001d48 	cmpgei	zero,r2,117
100012b0:	10001c2c 	andhi	zero,r2,112
100012b4:	d9003117 	ldw	r4,196(sp)
100012b8:	d8802d15 	stw	r2,180(sp)
100012bc:	0109c83a 	sub	r4,zero,r4
100012c0:	d9003115 	stw	r4,196(sp)
100012c4:	94800114 	ori	r18,r18,4
100012c8:	ac400007 	ldb	r17,0(r21)
100012cc:	003f9706 	br	1000112c <__alt_data_end+0xf800112c>
100012d0:	00800c04 	movi	r2,48
100012d4:	d9002d17 	ldw	r4,180(sp)
100012d8:	d9402917 	ldw	r5,164(sp)
100012dc:	d8802705 	stb	r2,156(sp)
100012e0:	00801e04 	movi	r2,120
100012e4:	d8802745 	stb	r2,157(sp)
100012e8:	d8002785 	stb	zero,158(sp)
100012ec:	20c00104 	addi	r3,r4,4
100012f0:	24c00017 	ldw	r19,0(r4)
100012f4:	002d883a 	mov	r22,zero
100012f8:	90800094 	ori	r2,r18,2
100012fc:	28029a16 	blt	r5,zero,10001d68 <___vfprintf_internal_r+0xdc0>
10001300:	00bfdfc4 	movi	r2,-129
10001304:	90a4703a 	and	r18,r18,r2
10001308:	d8c02d15 	stw	r3,180(sp)
1000130c:	94800094 	ori	r18,r18,2
10001310:	9802871e 	bne	r19,zero,10001d30 <___vfprintf_internal_r+0xd88>
10001314:	00840074 	movhi	r2,4097
10001318:	10916904 	addi	r2,r2,17828
1000131c:	d8803915 	stw	r2,228(sp)
10001320:	04401e04 	movi	r17,120
10001324:	d8802917 	ldw	r2,164(sp)
10001328:	0039883a 	mov	fp,zero
1000132c:	1001e926 	beq	r2,zero,10001ad4 <___vfprintf_internal_r+0xb2c>
10001330:	0027883a 	mov	r19,zero
10001334:	002d883a 	mov	r22,zero
10001338:	00020506 	br	10001b50 <___vfprintf_internal_r+0xba8>
1000133c:	d9002c17 	ldw	r4,176(sp)
10001340:	b80b883a 	mov	r5,r23
10001344:	00032780 	call	10003278 <__swsetup_r>
10001348:	1005ac1e 	bne	r2,zero,100029fc <___vfprintf_internal_r+0x1a54>
1000134c:	b880030b 	ldhu	r2,12(r23)
10001350:	00c00284 	movi	r3,10
10001354:	1080068c 	andi	r2,r2,26
10001358:	10ff3c1e 	bne	r2,r3,1000104c <__alt_data_end+0xf800104c>
1000135c:	b880038f 	ldh	r2,14(r23)
10001360:	103f3a16 	blt	r2,zero,1000104c <__alt_data_end+0xf800104c>
10001364:	d9c02d17 	ldw	r7,180(sp)
10001368:	d9002c17 	ldw	r4,176(sp)
1000136c:	a80d883a 	mov	r6,r21
10001370:	b80b883a 	mov	r5,r23
10001374:	00031bc0 	call	100031bc <__sbprintf>
10001378:	00001106 	br	100013c0 <___vfprintf_internal_r+0x418>
1000137c:	d9002c17 	ldw	r4,176(sp)
10001380:	d9801e04 	addi	r6,sp,120
10001384:	b80b883a 	mov	r5,r23
10001388:	00085a40 	call	100085a4 <__sprint_r>
1000138c:	1000081e 	bne	r2,zero,100013b0 <___vfprintf_internal_r+0x408>
10001390:	da000404 	addi	r8,sp,16
10001394:	003f5306 	br	100010e4 <__alt_data_end+0xf80010e4>
10001398:	d8802017 	ldw	r2,128(sp)
1000139c:	10000426 	beq	r2,zero,100013b0 <___vfprintf_internal_r+0x408>
100013a0:	d9002c17 	ldw	r4,176(sp)
100013a4:	d9801e04 	addi	r6,sp,120
100013a8:	b80b883a 	mov	r5,r23
100013ac:	00085a40 	call	100085a4 <__sprint_r>
100013b0:	b880030b 	ldhu	r2,12(r23)
100013b4:	1080100c 	andi	r2,r2,64
100013b8:	1005901e 	bne	r2,zero,100029fc <___vfprintf_internal_r+0x1a54>
100013bc:	d8802f17 	ldw	r2,188(sp)
100013c0:	dfc04717 	ldw	ra,284(sp)
100013c4:	df004617 	ldw	fp,280(sp)
100013c8:	ddc04517 	ldw	r23,276(sp)
100013cc:	dd804417 	ldw	r22,272(sp)
100013d0:	dd404317 	ldw	r21,268(sp)
100013d4:	dd004217 	ldw	r20,264(sp)
100013d8:	dcc04117 	ldw	r19,260(sp)
100013dc:	dc804017 	ldw	r18,256(sp)
100013e0:	dc403f17 	ldw	r17,252(sp)
100013e4:	dc003e17 	ldw	r16,248(sp)
100013e8:	dec04804 	addi	sp,sp,288
100013ec:	f800283a 	ret
100013f0:	d9002c17 	ldw	r4,176(sp)
100013f4:	000524c0 	call	1000524c <__sinit>
100013f8:	003f0406 	br	1000100c <__alt_data_end+0xf800100c>
100013fc:	d8802d17 	ldw	r2,180(sp)
10001400:	d9002d17 	ldw	r4,180(sp)
10001404:	10800017 	ldw	r2,0(r2)
10001408:	d8803115 	stw	r2,196(sp)
1000140c:	20800104 	addi	r2,r4,4
10001410:	d9003117 	ldw	r4,196(sp)
10001414:	203fa716 	blt	r4,zero,100012b4 <__alt_data_end+0xf80012b4>
10001418:	d8802d15 	stw	r2,180(sp)
1000141c:	ac400007 	ldb	r17,0(r21)
10001420:	003f4206 	br	1000112c <__alt_data_end+0xf800112c>
10001424:	ac400007 	ldb	r17,0(r21)
10001428:	aac00044 	addi	r11,r21,1
1000142c:	8a872826 	beq	r17,r10,100030d0 <___vfprintf_internal_r+0x2128>
10001430:	88bff404 	addi	r2,r17,-48
10001434:	0009883a 	mov	r4,zero
10001438:	30867d36 	bltu	r6,r2,10002e30 <___vfprintf_internal_r+0x1e88>
1000143c:	5c400007 	ldb	r17,0(r11)
10001440:	210002a4 	muli	r4,r4,10
10001444:	5d400044 	addi	r21,r11,1
10001448:	a817883a 	mov	r11,r21
1000144c:	2089883a 	add	r4,r4,r2
10001450:	88bff404 	addi	r2,r17,-48
10001454:	30bff92e 	bgeu	r6,r2,1000143c <__alt_data_end+0xf800143c>
10001458:	2005c916 	blt	r4,zero,10002b80 <___vfprintf_internal_r+0x1bd8>
1000145c:	d9002915 	stw	r4,164(sp)
10001460:	003f3306 	br	10001130 <__alt_data_end+0xf8001130>
10001464:	94802014 	ori	r18,r18,128
10001468:	ac400007 	ldb	r17,0(r21)
1000146c:	003f2f06 	br	1000112c <__alt_data_end+0xf800112c>
10001470:	a809883a 	mov	r4,r21
10001474:	d8003115 	stw	zero,196(sp)
10001478:	88bff404 	addi	r2,r17,-48
1000147c:	0017883a 	mov	r11,zero
10001480:	24400007 	ldb	r17,0(r4)
10001484:	5ac002a4 	muli	r11,r11,10
10001488:	ad400044 	addi	r21,r21,1
1000148c:	a809883a 	mov	r4,r21
10001490:	12d7883a 	add	r11,r2,r11
10001494:	88bff404 	addi	r2,r17,-48
10001498:	30bff92e 	bgeu	r6,r2,10001480 <__alt_data_end+0xf8001480>
1000149c:	dac03115 	stw	r11,196(sp)
100014a0:	003f2306 	br	10001130 <__alt_data_end+0xf8001130>
100014a4:	18c03fcc 	andi	r3,r3,255
100014a8:	18072b1e 	bne	r3,zero,10003158 <___vfprintf_internal_r+0x21b0>
100014ac:	94800414 	ori	r18,r18,16
100014b0:	9080080c 	andi	r2,r18,32
100014b4:	10037b26 	beq	r2,zero,100022a4 <___vfprintf_internal_r+0x12fc>
100014b8:	d9402d17 	ldw	r5,180(sp)
100014bc:	28800117 	ldw	r2,4(r5)
100014c0:	2cc00017 	ldw	r19,0(r5)
100014c4:	29400204 	addi	r5,r5,8
100014c8:	d9402d15 	stw	r5,180(sp)
100014cc:	102d883a 	mov	r22,r2
100014d0:	10044b16 	blt	r2,zero,10002600 <___vfprintf_internal_r+0x1658>
100014d4:	d9402917 	ldw	r5,164(sp)
100014d8:	df002783 	ldbu	fp,158(sp)
100014dc:	2803bc16 	blt	r5,zero,100023d0 <___vfprintf_internal_r+0x1428>
100014e0:	00ffdfc4 	movi	r3,-129
100014e4:	9d84b03a 	or	r2,r19,r22
100014e8:	90e4703a 	and	r18,r18,r3
100014ec:	10017726 	beq	r2,zero,10001acc <___vfprintf_internal_r+0xb24>
100014f0:	b0038326 	beq	r22,zero,10002300 <___vfprintf_internal_r+0x1358>
100014f4:	dc402a15 	stw	r17,168(sp)
100014f8:	dc001e04 	addi	r16,sp,120
100014fc:	b023883a 	mov	r17,r22
10001500:	402d883a 	mov	r22,r8
10001504:	9809883a 	mov	r4,r19
10001508:	880b883a 	mov	r5,r17
1000150c:	01800284 	movi	r6,10
10001510:	000f883a 	mov	r7,zero
10001514:	000a99c0 	call	1000a99c <__umoddi3>
10001518:	10800c04 	addi	r2,r2,48
1000151c:	843fffc4 	addi	r16,r16,-1
10001520:	9809883a 	mov	r4,r19
10001524:	880b883a 	mov	r5,r17
10001528:	80800005 	stb	r2,0(r16)
1000152c:	01800284 	movi	r6,10
10001530:	000f883a 	mov	r7,zero
10001534:	000a4240 	call	1000a424 <__udivdi3>
10001538:	1027883a 	mov	r19,r2
1000153c:	10c4b03a 	or	r2,r2,r3
10001540:	1823883a 	mov	r17,r3
10001544:	103fef1e 	bne	r2,zero,10001504 <__alt_data_end+0xf8001504>
10001548:	d8c02817 	ldw	r3,160(sp)
1000154c:	dc402a17 	ldw	r17,168(sp)
10001550:	b011883a 	mov	r8,r22
10001554:	1c07c83a 	sub	r3,r3,r16
10001558:	d8c02e15 	stw	r3,184(sp)
1000155c:	00005906 	br	100016c4 <___vfprintf_internal_r+0x71c>
10001560:	18c03fcc 	andi	r3,r3,255
10001564:	1806fa1e 	bne	r3,zero,10003150 <___vfprintf_internal_r+0x21a8>
10001568:	9080020c 	andi	r2,r18,8
1000156c:	10048a26 	beq	r2,zero,10002798 <___vfprintf_internal_r+0x17f0>
10001570:	d8c02d17 	ldw	r3,180(sp)
10001574:	d9002d17 	ldw	r4,180(sp)
10001578:	d9402d17 	ldw	r5,180(sp)
1000157c:	18c00017 	ldw	r3,0(r3)
10001580:	21000117 	ldw	r4,4(r4)
10001584:	29400204 	addi	r5,r5,8
10001588:	d8c03615 	stw	r3,216(sp)
1000158c:	d9003815 	stw	r4,224(sp)
10001590:	d9402d15 	stw	r5,180(sp)
10001594:	d9003617 	ldw	r4,216(sp)
10001598:	d9403817 	ldw	r5,224(sp)
1000159c:	da003d15 	stw	r8,244(sp)
100015a0:	04000044 	movi	r16,1
100015a4:	00081c80 	call	100081c8 <__fpclassifyd>
100015a8:	da003d17 	ldw	r8,244(sp)
100015ac:	14041f1e 	bne	r2,r16,1000262c <___vfprintf_internal_r+0x1684>
100015b0:	d9003617 	ldw	r4,216(sp)
100015b4:	d9403817 	ldw	r5,224(sp)
100015b8:	000d883a 	mov	r6,zero
100015bc:	000f883a 	mov	r7,zero
100015c0:	000c3800 	call	1000c380 <__ledf2>
100015c4:	da003d17 	ldw	r8,244(sp)
100015c8:	1005be16 	blt	r2,zero,10002cc4 <___vfprintf_internal_r+0x1d1c>
100015cc:	df002783 	ldbu	fp,158(sp)
100015d0:	008011c4 	movi	r2,71
100015d4:	1445330e 	bge	r2,r17,10002aa4 <___vfprintf_internal_r+0x1afc>
100015d8:	04040074 	movhi	r16,4097
100015dc:	84116104 	addi	r16,r16,17796
100015e0:	00c000c4 	movi	r3,3
100015e4:	00bfdfc4 	movi	r2,-129
100015e8:	d8c02a15 	stw	r3,168(sp)
100015ec:	90a4703a 	and	r18,r18,r2
100015f0:	d8c02e15 	stw	r3,184(sp)
100015f4:	d8002915 	stw	zero,164(sp)
100015f8:	d8003215 	stw	zero,200(sp)
100015fc:	00003706 	br	100016dc <___vfprintf_internal_r+0x734>
10001600:	94800214 	ori	r18,r18,8
10001604:	ac400007 	ldb	r17,0(r21)
10001608:	003ec806 	br	1000112c <__alt_data_end+0xf800112c>
1000160c:	18c03fcc 	andi	r3,r3,255
10001610:	1806db1e 	bne	r3,zero,10003180 <___vfprintf_internal_r+0x21d8>
10001614:	94800414 	ori	r18,r18,16
10001618:	9080080c 	andi	r2,r18,32
1000161c:	1002d826 	beq	r2,zero,10002180 <___vfprintf_internal_r+0x11d8>
10001620:	d9402d17 	ldw	r5,180(sp)
10001624:	d8c02917 	ldw	r3,164(sp)
10001628:	d8002785 	stb	zero,158(sp)
1000162c:	28800204 	addi	r2,r5,8
10001630:	2cc00017 	ldw	r19,0(r5)
10001634:	2d800117 	ldw	r22,4(r5)
10001638:	18048f16 	blt	r3,zero,10002878 <___vfprintf_internal_r+0x18d0>
1000163c:	013fdfc4 	movi	r4,-129
10001640:	9d86b03a 	or	r3,r19,r22
10001644:	d8802d15 	stw	r2,180(sp)
10001648:	9124703a 	and	r18,r18,r4
1000164c:	1802d91e 	bne	r3,zero,100021b4 <___vfprintf_internal_r+0x120c>
10001650:	d8c02917 	ldw	r3,164(sp)
10001654:	0039883a 	mov	fp,zero
10001658:	1805c326 	beq	r3,zero,10002d68 <___vfprintf_internal_r+0x1dc0>
1000165c:	0027883a 	mov	r19,zero
10001660:	002d883a 	mov	r22,zero
10001664:	dc001e04 	addi	r16,sp,120
10001668:	9806d0fa 	srli	r3,r19,3
1000166c:	b008977a 	slli	r4,r22,29
10001670:	b02cd0fa 	srli	r22,r22,3
10001674:	9cc001cc 	andi	r19,r19,7
10001678:	98800c04 	addi	r2,r19,48
1000167c:	843fffc4 	addi	r16,r16,-1
10001680:	20e6b03a 	or	r19,r4,r3
10001684:	80800005 	stb	r2,0(r16)
10001688:	9d86b03a 	or	r3,r19,r22
1000168c:	183ff61e 	bne	r3,zero,10001668 <__alt_data_end+0xf8001668>
10001690:	90c0004c 	andi	r3,r18,1
10001694:	18013b26 	beq	r3,zero,10001b84 <___vfprintf_internal_r+0xbdc>
10001698:	10803fcc 	andi	r2,r2,255
1000169c:	1080201c 	xori	r2,r2,128
100016a0:	10bfe004 	addi	r2,r2,-128
100016a4:	00c00c04 	movi	r3,48
100016a8:	10c13626 	beq	r2,r3,10001b84 <___vfprintf_internal_r+0xbdc>
100016ac:	80ffffc5 	stb	r3,-1(r16)
100016b0:	d8c02817 	ldw	r3,160(sp)
100016b4:	80bfffc4 	addi	r2,r16,-1
100016b8:	1021883a 	mov	r16,r2
100016bc:	1887c83a 	sub	r3,r3,r2
100016c0:	d8c02e15 	stw	r3,184(sp)
100016c4:	d8802e17 	ldw	r2,184(sp)
100016c8:	d9002917 	ldw	r4,164(sp)
100016cc:	1100010e 	bge	r2,r4,100016d4 <___vfprintf_internal_r+0x72c>
100016d0:	2005883a 	mov	r2,r4
100016d4:	d8802a15 	stw	r2,168(sp)
100016d8:	d8003215 	stw	zero,200(sp)
100016dc:	e7003fcc 	andi	fp,fp,255
100016e0:	e700201c 	xori	fp,fp,128
100016e4:	e73fe004 	addi	fp,fp,-128
100016e8:	e0000326 	beq	fp,zero,100016f8 <___vfprintf_internal_r+0x750>
100016ec:	d8c02a17 	ldw	r3,168(sp)
100016f0:	18c00044 	addi	r3,r3,1
100016f4:	d8c02a15 	stw	r3,168(sp)
100016f8:	90c0008c 	andi	r3,r18,2
100016fc:	d8c02b15 	stw	r3,172(sp)
10001700:	18000326 	beq	r3,zero,10001710 <___vfprintf_internal_r+0x768>
10001704:	d8c02a17 	ldw	r3,168(sp)
10001708:	18c00084 	addi	r3,r3,2
1000170c:	d8c02a15 	stw	r3,168(sp)
10001710:	90c0210c 	andi	r3,r18,132
10001714:	d8c03015 	stw	r3,192(sp)
10001718:	1801a31e 	bne	r3,zero,10001da8 <___vfprintf_internal_r+0xe00>
1000171c:	d9003117 	ldw	r4,196(sp)
10001720:	d8c02a17 	ldw	r3,168(sp)
10001724:	20e7c83a 	sub	r19,r4,r3
10001728:	04c19f0e 	bge	zero,r19,10001da8 <___vfprintf_internal_r+0xe00>
1000172c:	02400404 	movi	r9,16
10001730:	d8c02017 	ldw	r3,128(sp)
10001734:	d8801f17 	ldw	r2,124(sp)
10001738:	4cc50d0e 	bge	r9,r19,10002b70 <___vfprintf_internal_r+0x1bc8>
1000173c:	01440074 	movhi	r5,4097
10001740:	29517484 	addi	r5,r5,17874
10001744:	dc403b15 	stw	r17,236(sp)
10001748:	d9403515 	stw	r5,212(sp)
1000174c:	9823883a 	mov	r17,r19
10001750:	482d883a 	mov	r22,r9
10001754:	9027883a 	mov	r19,r18
10001758:	070001c4 	movi	fp,7
1000175c:	8025883a 	mov	r18,r16
10001760:	dc002c17 	ldw	r16,176(sp)
10001764:	00000306 	br	10001774 <___vfprintf_internal_r+0x7cc>
10001768:	8c7ffc04 	addi	r17,r17,-16
1000176c:	42000204 	addi	r8,r8,8
10001770:	b440130e 	bge	r22,r17,100017c0 <___vfprintf_internal_r+0x818>
10001774:	01040074 	movhi	r4,4097
10001778:	18c00404 	addi	r3,r3,16
1000177c:	10800044 	addi	r2,r2,1
10001780:	21117484 	addi	r4,r4,17874
10001784:	41000015 	stw	r4,0(r8)
10001788:	45800115 	stw	r22,4(r8)
1000178c:	d8c02015 	stw	r3,128(sp)
10001790:	d8801f15 	stw	r2,124(sp)
10001794:	e0bff40e 	bge	fp,r2,10001768 <__alt_data_end+0xf8001768>
10001798:	d9801e04 	addi	r6,sp,120
1000179c:	b80b883a 	mov	r5,r23
100017a0:	8009883a 	mov	r4,r16
100017a4:	00085a40 	call	100085a4 <__sprint_r>
100017a8:	103f011e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100017ac:	8c7ffc04 	addi	r17,r17,-16
100017b0:	d8c02017 	ldw	r3,128(sp)
100017b4:	d8801f17 	ldw	r2,124(sp)
100017b8:	da000404 	addi	r8,sp,16
100017bc:	b47fed16 	blt	r22,r17,10001774 <__alt_data_end+0xf8001774>
100017c0:	9021883a 	mov	r16,r18
100017c4:	9825883a 	mov	r18,r19
100017c8:	8827883a 	mov	r19,r17
100017cc:	dc403b17 	ldw	r17,236(sp)
100017d0:	d9403517 	ldw	r5,212(sp)
100017d4:	98c7883a 	add	r3,r19,r3
100017d8:	10800044 	addi	r2,r2,1
100017dc:	41400015 	stw	r5,0(r8)
100017e0:	44c00115 	stw	r19,4(r8)
100017e4:	d8c02015 	stw	r3,128(sp)
100017e8:	d8801f15 	stw	r2,124(sp)
100017ec:	010001c4 	movi	r4,7
100017f0:	2082a316 	blt	r4,r2,10002280 <___vfprintf_internal_r+0x12d8>
100017f4:	df002787 	ldb	fp,158(sp)
100017f8:	42000204 	addi	r8,r8,8
100017fc:	e0000c26 	beq	fp,zero,10001830 <___vfprintf_internal_r+0x888>
10001800:	d8801f17 	ldw	r2,124(sp)
10001804:	d9002784 	addi	r4,sp,158
10001808:	18c00044 	addi	r3,r3,1
1000180c:	10800044 	addi	r2,r2,1
10001810:	41000015 	stw	r4,0(r8)
10001814:	01000044 	movi	r4,1
10001818:	41000115 	stw	r4,4(r8)
1000181c:	d8c02015 	stw	r3,128(sp)
10001820:	d8801f15 	stw	r2,124(sp)
10001824:	010001c4 	movi	r4,7
10001828:	20823c16 	blt	r4,r2,1000211c <___vfprintf_internal_r+0x1174>
1000182c:	42000204 	addi	r8,r8,8
10001830:	d8802b17 	ldw	r2,172(sp)
10001834:	10000c26 	beq	r2,zero,10001868 <___vfprintf_internal_r+0x8c0>
10001838:	d8801f17 	ldw	r2,124(sp)
1000183c:	d9002704 	addi	r4,sp,156
10001840:	18c00084 	addi	r3,r3,2
10001844:	10800044 	addi	r2,r2,1
10001848:	41000015 	stw	r4,0(r8)
1000184c:	01000084 	movi	r4,2
10001850:	41000115 	stw	r4,4(r8)
10001854:	d8c02015 	stw	r3,128(sp)
10001858:	d8801f15 	stw	r2,124(sp)
1000185c:	010001c4 	movi	r4,7
10001860:	20823616 	blt	r4,r2,1000213c <___vfprintf_internal_r+0x1194>
10001864:	42000204 	addi	r8,r8,8
10001868:	d9003017 	ldw	r4,192(sp)
1000186c:	00802004 	movi	r2,128
10001870:	20819926 	beq	r4,r2,10001ed8 <___vfprintf_internal_r+0xf30>
10001874:	d9402917 	ldw	r5,164(sp)
10001878:	d8802e17 	ldw	r2,184(sp)
1000187c:	28adc83a 	sub	r22,r5,r2
10001880:	0580310e 	bge	zero,r22,10001948 <___vfprintf_internal_r+0x9a0>
10001884:	07000404 	movi	fp,16
10001888:	d8801f17 	ldw	r2,124(sp)
1000188c:	e584140e 	bge	fp,r22,100028e0 <___vfprintf_internal_r+0x1938>
10001890:	01440074 	movhi	r5,4097
10001894:	29517084 	addi	r5,r5,17858
10001898:	dc402915 	stw	r17,164(sp)
1000189c:	d9402b15 	stw	r5,172(sp)
100018a0:	b023883a 	mov	r17,r22
100018a4:	04c001c4 	movi	r19,7
100018a8:	a82d883a 	mov	r22,r21
100018ac:	902b883a 	mov	r21,r18
100018b0:	8025883a 	mov	r18,r16
100018b4:	dc002c17 	ldw	r16,176(sp)
100018b8:	00000306 	br	100018c8 <___vfprintf_internal_r+0x920>
100018bc:	8c7ffc04 	addi	r17,r17,-16
100018c0:	42000204 	addi	r8,r8,8
100018c4:	e440110e 	bge	fp,r17,1000190c <___vfprintf_internal_r+0x964>
100018c8:	18c00404 	addi	r3,r3,16
100018cc:	10800044 	addi	r2,r2,1
100018d0:	45000015 	stw	r20,0(r8)
100018d4:	47000115 	stw	fp,4(r8)
100018d8:	d8c02015 	stw	r3,128(sp)
100018dc:	d8801f15 	stw	r2,124(sp)
100018e0:	98bff60e 	bge	r19,r2,100018bc <__alt_data_end+0xf80018bc>
100018e4:	d9801e04 	addi	r6,sp,120
100018e8:	b80b883a 	mov	r5,r23
100018ec:	8009883a 	mov	r4,r16
100018f0:	00085a40 	call	100085a4 <__sprint_r>
100018f4:	103eae1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100018f8:	8c7ffc04 	addi	r17,r17,-16
100018fc:	d8c02017 	ldw	r3,128(sp)
10001900:	d8801f17 	ldw	r2,124(sp)
10001904:	da000404 	addi	r8,sp,16
10001908:	e47fef16 	blt	fp,r17,100018c8 <__alt_data_end+0xf80018c8>
1000190c:	9021883a 	mov	r16,r18
10001910:	a825883a 	mov	r18,r21
10001914:	b02b883a 	mov	r21,r22
10001918:	882d883a 	mov	r22,r17
1000191c:	dc402917 	ldw	r17,164(sp)
10001920:	d9002b17 	ldw	r4,172(sp)
10001924:	1d87883a 	add	r3,r3,r22
10001928:	10800044 	addi	r2,r2,1
1000192c:	41000015 	stw	r4,0(r8)
10001930:	45800115 	stw	r22,4(r8)
10001934:	d8c02015 	stw	r3,128(sp)
10001938:	d8801f15 	stw	r2,124(sp)
1000193c:	010001c4 	movi	r4,7
10001940:	2081ee16 	blt	r4,r2,100020fc <___vfprintf_internal_r+0x1154>
10001944:	42000204 	addi	r8,r8,8
10001948:	9080400c 	andi	r2,r18,256
1000194c:	1001181e 	bne	r2,zero,10001db0 <___vfprintf_internal_r+0xe08>
10001950:	d9402e17 	ldw	r5,184(sp)
10001954:	d8801f17 	ldw	r2,124(sp)
10001958:	44000015 	stw	r16,0(r8)
1000195c:	1947883a 	add	r3,r3,r5
10001960:	10800044 	addi	r2,r2,1
10001964:	41400115 	stw	r5,4(r8)
10001968:	d8c02015 	stw	r3,128(sp)
1000196c:	d8801f15 	stw	r2,124(sp)
10001970:	010001c4 	movi	r4,7
10001974:	2081d316 	blt	r4,r2,100020c4 <___vfprintf_internal_r+0x111c>
10001978:	42000204 	addi	r8,r8,8
1000197c:	9480010c 	andi	r18,r18,4
10001980:	90003226 	beq	r18,zero,10001a4c <___vfprintf_internal_r+0xaa4>
10001984:	d9403117 	ldw	r5,196(sp)
10001988:	d8802a17 	ldw	r2,168(sp)
1000198c:	28a1c83a 	sub	r16,r5,r2
10001990:	04002e0e 	bge	zero,r16,10001a4c <___vfprintf_internal_r+0xaa4>
10001994:	04400404 	movi	r17,16
10001998:	d8801f17 	ldw	r2,124(sp)
1000199c:	8c04a20e 	bge	r17,r16,10002c28 <___vfprintf_internal_r+0x1c80>
100019a0:	01440074 	movhi	r5,4097
100019a4:	29517484 	addi	r5,r5,17874
100019a8:	d9403515 	stw	r5,212(sp)
100019ac:	048001c4 	movi	r18,7
100019b0:	dcc02c17 	ldw	r19,176(sp)
100019b4:	00000306 	br	100019c4 <___vfprintf_internal_r+0xa1c>
100019b8:	843ffc04 	addi	r16,r16,-16
100019bc:	42000204 	addi	r8,r8,8
100019c0:	8c00130e 	bge	r17,r16,10001a10 <___vfprintf_internal_r+0xa68>
100019c4:	01040074 	movhi	r4,4097
100019c8:	18c00404 	addi	r3,r3,16
100019cc:	10800044 	addi	r2,r2,1
100019d0:	21117484 	addi	r4,r4,17874
100019d4:	41000015 	stw	r4,0(r8)
100019d8:	44400115 	stw	r17,4(r8)
100019dc:	d8c02015 	stw	r3,128(sp)
100019e0:	d8801f15 	stw	r2,124(sp)
100019e4:	90bff40e 	bge	r18,r2,100019b8 <__alt_data_end+0xf80019b8>
100019e8:	d9801e04 	addi	r6,sp,120
100019ec:	b80b883a 	mov	r5,r23
100019f0:	9809883a 	mov	r4,r19
100019f4:	00085a40 	call	100085a4 <__sprint_r>
100019f8:	103e6d1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100019fc:	843ffc04 	addi	r16,r16,-16
10001a00:	d8c02017 	ldw	r3,128(sp)
10001a04:	d8801f17 	ldw	r2,124(sp)
10001a08:	da000404 	addi	r8,sp,16
10001a0c:	8c3fed16 	blt	r17,r16,100019c4 <__alt_data_end+0xf80019c4>
10001a10:	d9403517 	ldw	r5,212(sp)
10001a14:	1c07883a 	add	r3,r3,r16
10001a18:	10800044 	addi	r2,r2,1
10001a1c:	41400015 	stw	r5,0(r8)
10001a20:	44000115 	stw	r16,4(r8)
10001a24:	d8c02015 	stw	r3,128(sp)
10001a28:	d8801f15 	stw	r2,124(sp)
10001a2c:	010001c4 	movi	r4,7
10001a30:	2080060e 	bge	r4,r2,10001a4c <___vfprintf_internal_r+0xaa4>
10001a34:	d9002c17 	ldw	r4,176(sp)
10001a38:	d9801e04 	addi	r6,sp,120
10001a3c:	b80b883a 	mov	r5,r23
10001a40:	00085a40 	call	100085a4 <__sprint_r>
10001a44:	103e5a1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10001a48:	d8c02017 	ldw	r3,128(sp)
10001a4c:	d8803117 	ldw	r2,196(sp)
10001a50:	d9002a17 	ldw	r4,168(sp)
10001a54:	1100010e 	bge	r2,r4,10001a5c <___vfprintf_internal_r+0xab4>
10001a58:	2005883a 	mov	r2,r4
10001a5c:	d9402f17 	ldw	r5,188(sp)
10001a60:	288b883a 	add	r5,r5,r2
10001a64:	d9402f15 	stw	r5,188(sp)
10001a68:	18019e1e 	bne	r3,zero,100020e4 <___vfprintf_internal_r+0x113c>
10001a6c:	a8800007 	ldb	r2,0(r21)
10001a70:	d8001f15 	stw	zero,124(sp)
10001a74:	da000404 	addi	r8,sp,16
10001a78:	103d851e 	bne	r2,zero,10001090 <__alt_data_end+0xf8001090>
10001a7c:	a821883a 	mov	r16,r21
10001a80:	003d9b06 	br	100010f0 <__alt_data_end+0xf80010f0>
10001a84:	18c03fcc 	andi	r3,r3,255
10001a88:	1805c11e 	bne	r3,zero,10003190 <___vfprintf_internal_r+0x21e8>
10001a8c:	94800414 	ori	r18,r18,16
10001a90:	9080080c 	andi	r2,r18,32
10001a94:	10020c26 	beq	r2,zero,100022c8 <___vfprintf_internal_r+0x1320>
10001a98:	d8802d17 	ldw	r2,180(sp)
10001a9c:	d9002917 	ldw	r4,164(sp)
10001aa0:	d8002785 	stb	zero,158(sp)
10001aa4:	10c00204 	addi	r3,r2,8
10001aa8:	14c00017 	ldw	r19,0(r2)
10001aac:	15800117 	ldw	r22,4(r2)
10001ab0:	20040f16 	blt	r4,zero,10002af0 <___vfprintf_internal_r+0x1b48>
10001ab4:	013fdfc4 	movi	r4,-129
10001ab8:	9d84b03a 	or	r2,r19,r22
10001abc:	d8c02d15 	stw	r3,180(sp)
10001ac0:	9124703a 	and	r18,r18,r4
10001ac4:	0039883a 	mov	fp,zero
10001ac8:	103e891e 	bne	r2,zero,100014f0 <__alt_data_end+0xf80014f0>
10001acc:	d9002917 	ldw	r4,164(sp)
10001ad0:	2002c11e 	bne	r4,zero,100025d8 <___vfprintf_internal_r+0x1630>
10001ad4:	d8002915 	stw	zero,164(sp)
10001ad8:	d8002e15 	stw	zero,184(sp)
10001adc:	dc001e04 	addi	r16,sp,120
10001ae0:	003ef806 	br	100016c4 <__alt_data_end+0xf80016c4>
10001ae4:	18c03fcc 	andi	r3,r3,255
10001ae8:	18059d1e 	bne	r3,zero,10003160 <___vfprintf_internal_r+0x21b8>
10001aec:	01440074 	movhi	r5,4097
10001af0:	29516404 	addi	r5,r5,17808
10001af4:	d9403915 	stw	r5,228(sp)
10001af8:	9080080c 	andi	r2,r18,32
10001afc:	10005226 	beq	r2,zero,10001c48 <___vfprintf_internal_r+0xca0>
10001b00:	d8802d17 	ldw	r2,180(sp)
10001b04:	14c00017 	ldw	r19,0(r2)
10001b08:	15800117 	ldw	r22,4(r2)
10001b0c:	10800204 	addi	r2,r2,8
10001b10:	d8802d15 	stw	r2,180(sp)
10001b14:	9080004c 	andi	r2,r18,1
10001b18:	10019026 	beq	r2,zero,1000215c <___vfprintf_internal_r+0x11b4>
10001b1c:	9d84b03a 	or	r2,r19,r22
10001b20:	10036926 	beq	r2,zero,100028c8 <___vfprintf_internal_r+0x1920>
10001b24:	d8c02917 	ldw	r3,164(sp)
10001b28:	00800c04 	movi	r2,48
10001b2c:	d8802705 	stb	r2,156(sp)
10001b30:	dc402745 	stb	r17,157(sp)
10001b34:	d8002785 	stb	zero,158(sp)
10001b38:	90800094 	ori	r2,r18,2
10001b3c:	18045d16 	blt	r3,zero,10002cb4 <___vfprintf_internal_r+0x1d0c>
10001b40:	00bfdfc4 	movi	r2,-129
10001b44:	90a4703a 	and	r18,r18,r2
10001b48:	94800094 	ori	r18,r18,2
10001b4c:	0039883a 	mov	fp,zero
10001b50:	d9003917 	ldw	r4,228(sp)
10001b54:	dc001e04 	addi	r16,sp,120
10001b58:	988003cc 	andi	r2,r19,15
10001b5c:	b006973a 	slli	r3,r22,28
10001b60:	2085883a 	add	r2,r4,r2
10001b64:	9826d13a 	srli	r19,r19,4
10001b68:	10800003 	ldbu	r2,0(r2)
10001b6c:	b02cd13a 	srli	r22,r22,4
10001b70:	843fffc4 	addi	r16,r16,-1
10001b74:	1ce6b03a 	or	r19,r3,r19
10001b78:	80800005 	stb	r2,0(r16)
10001b7c:	9d84b03a 	or	r2,r19,r22
10001b80:	103ff51e 	bne	r2,zero,10001b58 <__alt_data_end+0xf8001b58>
10001b84:	d8c02817 	ldw	r3,160(sp)
10001b88:	1c07c83a 	sub	r3,r3,r16
10001b8c:	d8c02e15 	stw	r3,184(sp)
10001b90:	003ecc06 	br	100016c4 <__alt_data_end+0xf80016c4>
10001b94:	18c03fcc 	andi	r3,r3,255
10001b98:	183e9f26 	beq	r3,zero,10001618 <__alt_data_end+0xf8001618>
10001b9c:	d9c02785 	stb	r7,158(sp)
10001ba0:	003e9d06 	br	10001618 <__alt_data_end+0xf8001618>
10001ba4:	00c00044 	movi	r3,1
10001ba8:	01c00ac4 	movi	r7,43
10001bac:	ac400007 	ldb	r17,0(r21)
10001bb0:	003d5e06 	br	1000112c <__alt_data_end+0xf800112c>
10001bb4:	94800814 	ori	r18,r18,32
10001bb8:	ac400007 	ldb	r17,0(r21)
10001bbc:	003d5b06 	br	1000112c <__alt_data_end+0xf800112c>
10001bc0:	d8c02d17 	ldw	r3,180(sp)
10001bc4:	d8002785 	stb	zero,158(sp)
10001bc8:	1c000017 	ldw	r16,0(r3)
10001bcc:	1cc00104 	addi	r19,r3,4
10001bd0:	80041926 	beq	r16,zero,10002c38 <___vfprintf_internal_r+0x1c90>
10001bd4:	d9002917 	ldw	r4,164(sp)
10001bd8:	2003d016 	blt	r4,zero,10002b1c <___vfprintf_internal_r+0x1b74>
10001bdc:	200d883a 	mov	r6,r4
10001be0:	000b883a 	mov	r5,zero
10001be4:	8009883a 	mov	r4,r16
10001be8:	da003d15 	stw	r8,244(sp)
10001bec:	00067b80 	call	100067b8 <memchr>
10001bf0:	da003d17 	ldw	r8,244(sp)
10001bf4:	10045426 	beq	r2,zero,10002d48 <___vfprintf_internal_r+0x1da0>
10001bf8:	1405c83a 	sub	r2,r2,r16
10001bfc:	d8802e15 	stw	r2,184(sp)
10001c00:	1003cc16 	blt	r2,zero,10002b34 <___vfprintf_internal_r+0x1b8c>
10001c04:	df002783 	ldbu	fp,158(sp)
10001c08:	d8802a15 	stw	r2,168(sp)
10001c0c:	dcc02d15 	stw	r19,180(sp)
10001c10:	d8002915 	stw	zero,164(sp)
10001c14:	d8003215 	stw	zero,200(sp)
10001c18:	003eb006 	br	100016dc <__alt_data_end+0xf80016dc>
10001c1c:	18c03fcc 	andi	r3,r3,255
10001c20:	183f9b26 	beq	r3,zero,10001a90 <__alt_data_end+0xf8001a90>
10001c24:	d9c02785 	stb	r7,158(sp)
10001c28:	003f9906 	br	10001a90 <__alt_data_end+0xf8001a90>
10001c2c:	18c03fcc 	andi	r3,r3,255
10001c30:	1805551e 	bne	r3,zero,10003188 <___vfprintf_internal_r+0x21e0>
10001c34:	01440074 	movhi	r5,4097
10001c38:	29516904 	addi	r5,r5,17828
10001c3c:	d9403915 	stw	r5,228(sp)
10001c40:	9080080c 	andi	r2,r18,32
10001c44:	103fae1e 	bne	r2,zero,10001b00 <__alt_data_end+0xf8001b00>
10001c48:	9080040c 	andi	r2,r18,16
10001c4c:	1002de26 	beq	r2,zero,100027c8 <___vfprintf_internal_r+0x1820>
10001c50:	d8c02d17 	ldw	r3,180(sp)
10001c54:	002d883a 	mov	r22,zero
10001c58:	1cc00017 	ldw	r19,0(r3)
10001c5c:	18c00104 	addi	r3,r3,4
10001c60:	d8c02d15 	stw	r3,180(sp)
10001c64:	003fab06 	br	10001b14 <__alt_data_end+0xf8001b14>
10001c68:	38803fcc 	andi	r2,r7,255
10001c6c:	1080201c 	xori	r2,r2,128
10001c70:	10bfe004 	addi	r2,r2,-128
10001c74:	1002d21e 	bne	r2,zero,100027c0 <___vfprintf_internal_r+0x1818>
10001c78:	00c00044 	movi	r3,1
10001c7c:	01c00804 	movi	r7,32
10001c80:	ac400007 	ldb	r17,0(r21)
10001c84:	003d2906 	br	1000112c <__alt_data_end+0xf800112c>
10001c88:	94800054 	ori	r18,r18,1
10001c8c:	ac400007 	ldb	r17,0(r21)
10001c90:	003d2606 	br	1000112c <__alt_data_end+0xf800112c>
10001c94:	18c03fcc 	andi	r3,r3,255
10001c98:	183e0526 	beq	r3,zero,100014b0 <__alt_data_end+0xf80014b0>
10001c9c:	d9c02785 	stb	r7,158(sp)
10001ca0:	003e0306 	br	100014b0 <__alt_data_end+0xf80014b0>
10001ca4:	94801014 	ori	r18,r18,64
10001ca8:	ac400007 	ldb	r17,0(r21)
10001cac:	003d1f06 	br	1000112c <__alt_data_end+0xf800112c>
10001cb0:	ac400007 	ldb	r17,0(r21)
10001cb4:	8a438726 	beq	r17,r9,10002ad4 <___vfprintf_internal_r+0x1b2c>
10001cb8:	94800414 	ori	r18,r18,16
10001cbc:	003d1b06 	br	1000112c <__alt_data_end+0xf800112c>
10001cc0:	18c03fcc 	andi	r3,r3,255
10001cc4:	1805341e 	bne	r3,zero,10003198 <___vfprintf_internal_r+0x21f0>
10001cc8:	9080080c 	andi	r2,r18,32
10001ccc:	1002cd26 	beq	r2,zero,10002804 <___vfprintf_internal_r+0x185c>
10001cd0:	d9402d17 	ldw	r5,180(sp)
10001cd4:	d9002f17 	ldw	r4,188(sp)
10001cd8:	28800017 	ldw	r2,0(r5)
10001cdc:	2007d7fa 	srai	r3,r4,31
10001ce0:	29400104 	addi	r5,r5,4
10001ce4:	d9402d15 	stw	r5,180(sp)
10001ce8:	11000015 	stw	r4,0(r2)
10001cec:	10c00115 	stw	r3,4(r2)
10001cf0:	003ce506 	br	10001088 <__alt_data_end+0xf8001088>
10001cf4:	d8c02d17 	ldw	r3,180(sp)
10001cf8:	d9002d17 	ldw	r4,180(sp)
10001cfc:	d8002785 	stb	zero,158(sp)
10001d00:	18800017 	ldw	r2,0(r3)
10001d04:	21000104 	addi	r4,r4,4
10001d08:	00c00044 	movi	r3,1
10001d0c:	d8c02a15 	stw	r3,168(sp)
10001d10:	d8801405 	stb	r2,80(sp)
10001d14:	d9002d15 	stw	r4,180(sp)
10001d18:	d8c02e15 	stw	r3,184(sp)
10001d1c:	d8002915 	stw	zero,164(sp)
10001d20:	d8003215 	stw	zero,200(sp)
10001d24:	dc001404 	addi	r16,sp,80
10001d28:	0039883a 	mov	fp,zero
10001d2c:	003e7206 	br	100016f8 <__alt_data_end+0xf80016f8>
10001d30:	01040074 	movhi	r4,4097
10001d34:	21116904 	addi	r4,r4,17828
10001d38:	0039883a 	mov	fp,zero
10001d3c:	d9003915 	stw	r4,228(sp)
10001d40:	04401e04 	movi	r17,120
10001d44:	003f8206 	br	10001b50 <__alt_data_end+0xf8001b50>
10001d48:	18c03fcc 	andi	r3,r3,255
10001d4c:	1805061e 	bne	r3,zero,10003168 <___vfprintf_internal_r+0x21c0>
10001d50:	883d9126 	beq	r17,zero,10001398 <__alt_data_end+0xf8001398>
10001d54:	00c00044 	movi	r3,1
10001d58:	d8c02a15 	stw	r3,168(sp)
10001d5c:	dc401405 	stb	r17,80(sp)
10001d60:	d8002785 	stb	zero,158(sp)
10001d64:	003fec06 	br	10001d18 <__alt_data_end+0xf8001d18>
10001d68:	01440074 	movhi	r5,4097
10001d6c:	29516904 	addi	r5,r5,17828
10001d70:	d9403915 	stw	r5,228(sp)
10001d74:	d8c02d15 	stw	r3,180(sp)
10001d78:	1025883a 	mov	r18,r2
10001d7c:	04401e04 	movi	r17,120
10001d80:	9d84b03a 	or	r2,r19,r22
10001d84:	1000fc1e 	bne	r2,zero,10002178 <___vfprintf_internal_r+0x11d0>
10001d88:	0039883a 	mov	fp,zero
10001d8c:	00800084 	movi	r2,2
10001d90:	10803fcc 	andi	r2,r2,255
10001d94:	00c00044 	movi	r3,1
10001d98:	10c20f26 	beq	r2,r3,100025d8 <___vfprintf_internal_r+0x1630>
10001d9c:	00c00084 	movi	r3,2
10001da0:	10fd6326 	beq	r2,r3,10001330 <__alt_data_end+0xf8001330>
10001da4:	003e2d06 	br	1000165c <__alt_data_end+0xf800165c>
10001da8:	d8c02017 	ldw	r3,128(sp)
10001dac:	003e9306 	br	100017fc <__alt_data_end+0xf80017fc>
10001db0:	00801944 	movi	r2,101
10001db4:	14407e0e 	bge	r2,r17,10001fb0 <___vfprintf_internal_r+0x1008>
10001db8:	d9003617 	ldw	r4,216(sp)
10001dbc:	d9403817 	ldw	r5,224(sp)
10001dc0:	000d883a 	mov	r6,zero
10001dc4:	000f883a 	mov	r7,zero
10001dc8:	d8c03c15 	stw	r3,240(sp)
10001dcc:	da003d15 	stw	r8,244(sp)
10001dd0:	000c21c0 	call	1000c21c <__eqdf2>
10001dd4:	d8c03c17 	ldw	r3,240(sp)
10001dd8:	da003d17 	ldw	r8,244(sp)
10001ddc:	1000f71e 	bne	r2,zero,100021bc <___vfprintf_internal_r+0x1214>
10001de0:	d8801f17 	ldw	r2,124(sp)
10001de4:	01040074 	movhi	r4,4097
10001de8:	21117004 	addi	r4,r4,17856
10001dec:	18c00044 	addi	r3,r3,1
10001df0:	10800044 	addi	r2,r2,1
10001df4:	41000015 	stw	r4,0(r8)
10001df8:	01000044 	movi	r4,1
10001dfc:	41000115 	stw	r4,4(r8)
10001e00:	d8c02015 	stw	r3,128(sp)
10001e04:	d8801f15 	stw	r2,124(sp)
10001e08:	010001c4 	movi	r4,7
10001e0c:	2082b816 	blt	r4,r2,100028f0 <___vfprintf_internal_r+0x1948>
10001e10:	42000204 	addi	r8,r8,8
10001e14:	d8802617 	ldw	r2,152(sp)
10001e18:	d9403317 	ldw	r5,204(sp)
10001e1c:	11400216 	blt	r2,r5,10001e28 <___vfprintf_internal_r+0xe80>
10001e20:	9080004c 	andi	r2,r18,1
10001e24:	103ed526 	beq	r2,zero,1000197c <__alt_data_end+0xf800197c>
10001e28:	d8803717 	ldw	r2,220(sp)
10001e2c:	d9003417 	ldw	r4,208(sp)
10001e30:	d9403717 	ldw	r5,220(sp)
10001e34:	1887883a 	add	r3,r3,r2
10001e38:	d8801f17 	ldw	r2,124(sp)
10001e3c:	41000015 	stw	r4,0(r8)
10001e40:	41400115 	stw	r5,4(r8)
10001e44:	10800044 	addi	r2,r2,1
10001e48:	d8c02015 	stw	r3,128(sp)
10001e4c:	d8801f15 	stw	r2,124(sp)
10001e50:	010001c4 	movi	r4,7
10001e54:	20832916 	blt	r4,r2,10002afc <___vfprintf_internal_r+0x1b54>
10001e58:	42000204 	addi	r8,r8,8
10001e5c:	d8803317 	ldw	r2,204(sp)
10001e60:	143fffc4 	addi	r16,r2,-1
10001e64:	043ec50e 	bge	zero,r16,1000197c <__alt_data_end+0xf800197c>
10001e68:	04400404 	movi	r17,16
10001e6c:	d8801f17 	ldw	r2,124(sp)
10001e70:	8c00880e 	bge	r17,r16,10002094 <___vfprintf_internal_r+0x10ec>
10001e74:	01440074 	movhi	r5,4097
10001e78:	29517084 	addi	r5,r5,17858
10001e7c:	d9402b15 	stw	r5,172(sp)
10001e80:	058001c4 	movi	r22,7
10001e84:	dcc02c17 	ldw	r19,176(sp)
10001e88:	00000306 	br	10001e98 <___vfprintf_internal_r+0xef0>
10001e8c:	42000204 	addi	r8,r8,8
10001e90:	843ffc04 	addi	r16,r16,-16
10001e94:	8c00820e 	bge	r17,r16,100020a0 <___vfprintf_internal_r+0x10f8>
10001e98:	18c00404 	addi	r3,r3,16
10001e9c:	10800044 	addi	r2,r2,1
10001ea0:	45000015 	stw	r20,0(r8)
10001ea4:	44400115 	stw	r17,4(r8)
10001ea8:	d8c02015 	stw	r3,128(sp)
10001eac:	d8801f15 	stw	r2,124(sp)
10001eb0:	b0bff60e 	bge	r22,r2,10001e8c <__alt_data_end+0xf8001e8c>
10001eb4:	d9801e04 	addi	r6,sp,120
10001eb8:	b80b883a 	mov	r5,r23
10001ebc:	9809883a 	mov	r4,r19
10001ec0:	00085a40 	call	100085a4 <__sprint_r>
10001ec4:	103d3a1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10001ec8:	d8c02017 	ldw	r3,128(sp)
10001ecc:	d8801f17 	ldw	r2,124(sp)
10001ed0:	da000404 	addi	r8,sp,16
10001ed4:	003fee06 	br	10001e90 <__alt_data_end+0xf8001e90>
10001ed8:	d9403117 	ldw	r5,196(sp)
10001edc:	d8802a17 	ldw	r2,168(sp)
10001ee0:	28adc83a 	sub	r22,r5,r2
10001ee4:	05be630e 	bge	zero,r22,10001874 <__alt_data_end+0xf8001874>
10001ee8:	07000404 	movi	fp,16
10001eec:	d8801f17 	ldw	r2,124(sp)
10001ef0:	e5838f0e 	bge	fp,r22,10002d30 <___vfprintf_internal_r+0x1d88>
10001ef4:	01440074 	movhi	r5,4097
10001ef8:	29517084 	addi	r5,r5,17858
10001efc:	dc403015 	stw	r17,192(sp)
10001f00:	d9402b15 	stw	r5,172(sp)
10001f04:	b023883a 	mov	r17,r22
10001f08:	04c001c4 	movi	r19,7
10001f0c:	a82d883a 	mov	r22,r21
10001f10:	902b883a 	mov	r21,r18
10001f14:	8025883a 	mov	r18,r16
10001f18:	dc002c17 	ldw	r16,176(sp)
10001f1c:	00000306 	br	10001f2c <___vfprintf_internal_r+0xf84>
10001f20:	8c7ffc04 	addi	r17,r17,-16
10001f24:	42000204 	addi	r8,r8,8
10001f28:	e440110e 	bge	fp,r17,10001f70 <___vfprintf_internal_r+0xfc8>
10001f2c:	18c00404 	addi	r3,r3,16
10001f30:	10800044 	addi	r2,r2,1
10001f34:	45000015 	stw	r20,0(r8)
10001f38:	47000115 	stw	fp,4(r8)
10001f3c:	d8c02015 	stw	r3,128(sp)
10001f40:	d8801f15 	stw	r2,124(sp)
10001f44:	98bff60e 	bge	r19,r2,10001f20 <__alt_data_end+0xf8001f20>
10001f48:	d9801e04 	addi	r6,sp,120
10001f4c:	b80b883a 	mov	r5,r23
10001f50:	8009883a 	mov	r4,r16
10001f54:	00085a40 	call	100085a4 <__sprint_r>
10001f58:	103d151e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10001f5c:	8c7ffc04 	addi	r17,r17,-16
10001f60:	d8c02017 	ldw	r3,128(sp)
10001f64:	d8801f17 	ldw	r2,124(sp)
10001f68:	da000404 	addi	r8,sp,16
10001f6c:	e47fef16 	blt	fp,r17,10001f2c <__alt_data_end+0xf8001f2c>
10001f70:	9021883a 	mov	r16,r18
10001f74:	a825883a 	mov	r18,r21
10001f78:	b02b883a 	mov	r21,r22
10001f7c:	882d883a 	mov	r22,r17
10001f80:	dc403017 	ldw	r17,192(sp)
10001f84:	d9002b17 	ldw	r4,172(sp)
10001f88:	1d87883a 	add	r3,r3,r22
10001f8c:	10800044 	addi	r2,r2,1
10001f90:	41000015 	stw	r4,0(r8)
10001f94:	45800115 	stw	r22,4(r8)
10001f98:	d8c02015 	stw	r3,128(sp)
10001f9c:	d8801f15 	stw	r2,124(sp)
10001fa0:	010001c4 	movi	r4,7
10001fa4:	20818e16 	blt	r4,r2,100025e0 <___vfprintf_internal_r+0x1638>
10001fa8:	42000204 	addi	r8,r8,8
10001fac:	003e3106 	br	10001874 <__alt_data_end+0xf8001874>
10001fb0:	d9403317 	ldw	r5,204(sp)
10001fb4:	00800044 	movi	r2,1
10001fb8:	18c00044 	addi	r3,r3,1
10001fbc:	1141530e 	bge	r2,r5,1000250c <___vfprintf_internal_r+0x1564>
10001fc0:	dc401f17 	ldw	r17,124(sp)
10001fc4:	00800044 	movi	r2,1
10001fc8:	40800115 	stw	r2,4(r8)
10001fcc:	8c400044 	addi	r17,r17,1
10001fd0:	44000015 	stw	r16,0(r8)
10001fd4:	d8c02015 	stw	r3,128(sp)
10001fd8:	dc401f15 	stw	r17,124(sp)
10001fdc:	008001c4 	movi	r2,7
10001fe0:	14416b16 	blt	r2,r17,10002590 <___vfprintf_internal_r+0x15e8>
10001fe4:	42000204 	addi	r8,r8,8
10001fe8:	d8803717 	ldw	r2,220(sp)
10001fec:	d9003417 	ldw	r4,208(sp)
10001ff0:	8c400044 	addi	r17,r17,1
10001ff4:	10c7883a 	add	r3,r2,r3
10001ff8:	40800115 	stw	r2,4(r8)
10001ffc:	41000015 	stw	r4,0(r8)
10002000:	d8c02015 	stw	r3,128(sp)
10002004:	dc401f15 	stw	r17,124(sp)
10002008:	008001c4 	movi	r2,7
1000200c:	14416916 	blt	r2,r17,100025b4 <___vfprintf_internal_r+0x160c>
10002010:	45800204 	addi	r22,r8,8
10002014:	d9003617 	ldw	r4,216(sp)
10002018:	d9403817 	ldw	r5,224(sp)
1000201c:	000d883a 	mov	r6,zero
10002020:	000f883a 	mov	r7,zero
10002024:	d8c03c15 	stw	r3,240(sp)
10002028:	000c21c0 	call	1000c21c <__eqdf2>
1000202c:	d8c03c17 	ldw	r3,240(sp)
10002030:	1000bc26 	beq	r2,zero,10002324 <___vfprintf_internal_r+0x137c>
10002034:	d9403317 	ldw	r5,204(sp)
10002038:	84000044 	addi	r16,r16,1
1000203c:	8c400044 	addi	r17,r17,1
10002040:	28bfffc4 	addi	r2,r5,-1
10002044:	1887883a 	add	r3,r3,r2
10002048:	b0800115 	stw	r2,4(r22)
1000204c:	b4000015 	stw	r16,0(r22)
10002050:	d8c02015 	stw	r3,128(sp)
10002054:	dc401f15 	stw	r17,124(sp)
10002058:	008001c4 	movi	r2,7
1000205c:	14414316 	blt	r2,r17,1000256c <___vfprintf_internal_r+0x15c4>
10002060:	b5800204 	addi	r22,r22,8
10002064:	d9003a17 	ldw	r4,232(sp)
10002068:	df0022c4 	addi	fp,sp,139
1000206c:	8c400044 	addi	r17,r17,1
10002070:	20c7883a 	add	r3,r4,r3
10002074:	b7000015 	stw	fp,0(r22)
10002078:	b1000115 	stw	r4,4(r22)
1000207c:	d8c02015 	stw	r3,128(sp)
10002080:	dc401f15 	stw	r17,124(sp)
10002084:	008001c4 	movi	r2,7
10002088:	14400e16 	blt	r2,r17,100020c4 <___vfprintf_internal_r+0x111c>
1000208c:	b2000204 	addi	r8,r22,8
10002090:	003e3a06 	br	1000197c <__alt_data_end+0xf800197c>
10002094:	01040074 	movhi	r4,4097
10002098:	21117084 	addi	r4,r4,17858
1000209c:	d9002b15 	stw	r4,172(sp)
100020a0:	d9002b17 	ldw	r4,172(sp)
100020a4:	1c07883a 	add	r3,r3,r16
100020a8:	44000115 	stw	r16,4(r8)
100020ac:	41000015 	stw	r4,0(r8)
100020b0:	10800044 	addi	r2,r2,1
100020b4:	d8c02015 	stw	r3,128(sp)
100020b8:	d8801f15 	stw	r2,124(sp)
100020bc:	010001c4 	movi	r4,7
100020c0:	20be2d0e 	bge	r4,r2,10001978 <__alt_data_end+0xf8001978>
100020c4:	d9002c17 	ldw	r4,176(sp)
100020c8:	d9801e04 	addi	r6,sp,120
100020cc:	b80b883a 	mov	r5,r23
100020d0:	00085a40 	call	100085a4 <__sprint_r>
100020d4:	103cb61e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100020d8:	d8c02017 	ldw	r3,128(sp)
100020dc:	da000404 	addi	r8,sp,16
100020e0:	003e2606 	br	1000197c <__alt_data_end+0xf800197c>
100020e4:	d9002c17 	ldw	r4,176(sp)
100020e8:	d9801e04 	addi	r6,sp,120
100020ec:	b80b883a 	mov	r5,r23
100020f0:	00085a40 	call	100085a4 <__sprint_r>
100020f4:	103e5d26 	beq	r2,zero,10001a6c <__alt_data_end+0xf8001a6c>
100020f8:	003cad06 	br	100013b0 <__alt_data_end+0xf80013b0>
100020fc:	d9002c17 	ldw	r4,176(sp)
10002100:	d9801e04 	addi	r6,sp,120
10002104:	b80b883a 	mov	r5,r23
10002108:	00085a40 	call	100085a4 <__sprint_r>
1000210c:	103ca81e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002110:	d8c02017 	ldw	r3,128(sp)
10002114:	da000404 	addi	r8,sp,16
10002118:	003e0b06 	br	10001948 <__alt_data_end+0xf8001948>
1000211c:	d9002c17 	ldw	r4,176(sp)
10002120:	d9801e04 	addi	r6,sp,120
10002124:	b80b883a 	mov	r5,r23
10002128:	00085a40 	call	100085a4 <__sprint_r>
1000212c:	103ca01e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002130:	d8c02017 	ldw	r3,128(sp)
10002134:	da000404 	addi	r8,sp,16
10002138:	003dbd06 	br	10001830 <__alt_data_end+0xf8001830>
1000213c:	d9002c17 	ldw	r4,176(sp)
10002140:	d9801e04 	addi	r6,sp,120
10002144:	b80b883a 	mov	r5,r23
10002148:	00085a40 	call	100085a4 <__sprint_r>
1000214c:	103c981e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002150:	d8c02017 	ldw	r3,128(sp)
10002154:	da000404 	addi	r8,sp,16
10002158:	003dc306 	br	10001868 <__alt_data_end+0xf8001868>
1000215c:	d8802917 	ldw	r2,164(sp)
10002160:	d8002785 	stb	zero,158(sp)
10002164:	103f0616 	blt	r2,zero,10001d80 <__alt_data_end+0xf8001d80>
10002168:	00ffdfc4 	movi	r3,-129
1000216c:	9d84b03a 	or	r2,r19,r22
10002170:	90e4703a 	and	r18,r18,r3
10002174:	103c6b26 	beq	r2,zero,10001324 <__alt_data_end+0xf8001324>
10002178:	0039883a 	mov	fp,zero
1000217c:	003e7406 	br	10001b50 <__alt_data_end+0xf8001b50>
10002180:	9080040c 	andi	r2,r18,16
10002184:	1001b326 	beq	r2,zero,10002854 <___vfprintf_internal_r+0x18ac>
10002188:	d9002d17 	ldw	r4,180(sp)
1000218c:	d9402917 	ldw	r5,164(sp)
10002190:	d8002785 	stb	zero,158(sp)
10002194:	20800104 	addi	r2,r4,4
10002198:	24c00017 	ldw	r19,0(r4)
1000219c:	002d883a 	mov	r22,zero
100021a0:	2801b516 	blt	r5,zero,10002878 <___vfprintf_internal_r+0x18d0>
100021a4:	00ffdfc4 	movi	r3,-129
100021a8:	d8802d15 	stw	r2,180(sp)
100021ac:	90e4703a 	and	r18,r18,r3
100021b0:	983d2726 	beq	r19,zero,10001650 <__alt_data_end+0xf8001650>
100021b4:	0039883a 	mov	fp,zero
100021b8:	003d2a06 	br	10001664 <__alt_data_end+0xf8001664>
100021bc:	dc402617 	ldw	r17,152(sp)
100021c0:	0441d30e 	bge	zero,r17,10002910 <___vfprintf_internal_r+0x1968>
100021c4:	dc403217 	ldw	r17,200(sp)
100021c8:	d8803317 	ldw	r2,204(sp)
100021cc:	1440010e 	bge	r2,r17,100021d4 <___vfprintf_internal_r+0x122c>
100021d0:	1023883a 	mov	r17,r2
100021d4:	04400a0e 	bge	zero,r17,10002200 <___vfprintf_internal_r+0x1258>
100021d8:	d8801f17 	ldw	r2,124(sp)
100021dc:	1c47883a 	add	r3,r3,r17
100021e0:	44000015 	stw	r16,0(r8)
100021e4:	10800044 	addi	r2,r2,1
100021e8:	44400115 	stw	r17,4(r8)
100021ec:	d8c02015 	stw	r3,128(sp)
100021f0:	d8801f15 	stw	r2,124(sp)
100021f4:	010001c4 	movi	r4,7
100021f8:	20826516 	blt	r4,r2,10002b90 <___vfprintf_internal_r+0x1be8>
100021fc:	42000204 	addi	r8,r8,8
10002200:	88026116 	blt	r17,zero,10002b88 <___vfprintf_internal_r+0x1be0>
10002204:	d9003217 	ldw	r4,200(sp)
10002208:	2463c83a 	sub	r17,r4,r17
1000220c:	04407b0e 	bge	zero,r17,100023fc <___vfprintf_internal_r+0x1454>
10002210:	05800404 	movi	r22,16
10002214:	d8801f17 	ldw	r2,124(sp)
10002218:	b4419d0e 	bge	r22,r17,10002890 <___vfprintf_internal_r+0x18e8>
1000221c:	01040074 	movhi	r4,4097
10002220:	21117084 	addi	r4,r4,17858
10002224:	d9002b15 	stw	r4,172(sp)
10002228:	070001c4 	movi	fp,7
1000222c:	dcc02c17 	ldw	r19,176(sp)
10002230:	00000306 	br	10002240 <___vfprintf_internal_r+0x1298>
10002234:	42000204 	addi	r8,r8,8
10002238:	8c7ffc04 	addi	r17,r17,-16
1000223c:	b441970e 	bge	r22,r17,1000289c <___vfprintf_internal_r+0x18f4>
10002240:	18c00404 	addi	r3,r3,16
10002244:	10800044 	addi	r2,r2,1
10002248:	45000015 	stw	r20,0(r8)
1000224c:	45800115 	stw	r22,4(r8)
10002250:	d8c02015 	stw	r3,128(sp)
10002254:	d8801f15 	stw	r2,124(sp)
10002258:	e0bff60e 	bge	fp,r2,10002234 <__alt_data_end+0xf8002234>
1000225c:	d9801e04 	addi	r6,sp,120
10002260:	b80b883a 	mov	r5,r23
10002264:	9809883a 	mov	r4,r19
10002268:	00085a40 	call	100085a4 <__sprint_r>
1000226c:	103c501e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002270:	d8c02017 	ldw	r3,128(sp)
10002274:	d8801f17 	ldw	r2,124(sp)
10002278:	da000404 	addi	r8,sp,16
1000227c:	003fee06 	br	10002238 <__alt_data_end+0xf8002238>
10002280:	d9002c17 	ldw	r4,176(sp)
10002284:	d9801e04 	addi	r6,sp,120
10002288:	b80b883a 	mov	r5,r23
1000228c:	00085a40 	call	100085a4 <__sprint_r>
10002290:	103c471e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002294:	d8c02017 	ldw	r3,128(sp)
10002298:	df002787 	ldb	fp,158(sp)
1000229c:	da000404 	addi	r8,sp,16
100022a0:	003d5606 	br	100017fc <__alt_data_end+0xf80017fc>
100022a4:	9080040c 	andi	r2,r18,16
100022a8:	10016126 	beq	r2,zero,10002830 <___vfprintf_internal_r+0x1888>
100022ac:	d8802d17 	ldw	r2,180(sp)
100022b0:	14c00017 	ldw	r19,0(r2)
100022b4:	10800104 	addi	r2,r2,4
100022b8:	d8802d15 	stw	r2,180(sp)
100022bc:	982dd7fa 	srai	r22,r19,31
100022c0:	b005883a 	mov	r2,r22
100022c4:	003c8206 	br	100014d0 <__alt_data_end+0xf80014d0>
100022c8:	9080040c 	andi	r2,r18,16
100022cc:	10003526 	beq	r2,zero,100023a4 <___vfprintf_internal_r+0x13fc>
100022d0:	d9402d17 	ldw	r5,180(sp)
100022d4:	d8c02917 	ldw	r3,164(sp)
100022d8:	d8002785 	stb	zero,158(sp)
100022dc:	28800104 	addi	r2,r5,4
100022e0:	2cc00017 	ldw	r19,0(r5)
100022e4:	002d883a 	mov	r22,zero
100022e8:	18003716 	blt	r3,zero,100023c8 <___vfprintf_internal_r+0x1420>
100022ec:	00ffdfc4 	movi	r3,-129
100022f0:	d8802d15 	stw	r2,180(sp)
100022f4:	90e4703a 	and	r18,r18,r3
100022f8:	0039883a 	mov	fp,zero
100022fc:	983df326 	beq	r19,zero,10001acc <__alt_data_end+0xf8001acc>
10002300:	00800244 	movi	r2,9
10002304:	14fc7b36 	bltu	r2,r19,100014f4 <__alt_data_end+0xf80014f4>
10002308:	d8c02817 	ldw	r3,160(sp)
1000230c:	dc001dc4 	addi	r16,sp,119
10002310:	9cc00c04 	addi	r19,r19,48
10002314:	1c07c83a 	sub	r3,r3,r16
10002318:	dcc01dc5 	stb	r19,119(sp)
1000231c:	d8c02e15 	stw	r3,184(sp)
10002320:	003ce806 	br	100016c4 <__alt_data_end+0xf80016c4>
10002324:	d8803317 	ldw	r2,204(sp)
10002328:	143fffc4 	addi	r16,r2,-1
1000232c:	043f4d0e 	bge	zero,r16,10002064 <__alt_data_end+0xf8002064>
10002330:	07000404 	movi	fp,16
10002334:	e400810e 	bge	fp,r16,1000253c <___vfprintf_internal_r+0x1594>
10002338:	01440074 	movhi	r5,4097
1000233c:	29517084 	addi	r5,r5,17858
10002340:	d9402b15 	stw	r5,172(sp)
10002344:	01c001c4 	movi	r7,7
10002348:	dcc02c17 	ldw	r19,176(sp)
1000234c:	00000306 	br	1000235c <___vfprintf_internal_r+0x13b4>
10002350:	b5800204 	addi	r22,r22,8
10002354:	843ffc04 	addi	r16,r16,-16
10002358:	e4007b0e 	bge	fp,r16,10002548 <___vfprintf_internal_r+0x15a0>
1000235c:	18c00404 	addi	r3,r3,16
10002360:	8c400044 	addi	r17,r17,1
10002364:	b5000015 	stw	r20,0(r22)
10002368:	b7000115 	stw	fp,4(r22)
1000236c:	d8c02015 	stw	r3,128(sp)
10002370:	dc401f15 	stw	r17,124(sp)
10002374:	3c7ff60e 	bge	r7,r17,10002350 <__alt_data_end+0xf8002350>
10002378:	d9801e04 	addi	r6,sp,120
1000237c:	b80b883a 	mov	r5,r23
10002380:	9809883a 	mov	r4,r19
10002384:	d9c03c15 	stw	r7,240(sp)
10002388:	00085a40 	call	100085a4 <__sprint_r>
1000238c:	d9c03c17 	ldw	r7,240(sp)
10002390:	103c071e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002394:	d8c02017 	ldw	r3,128(sp)
10002398:	dc401f17 	ldw	r17,124(sp)
1000239c:	dd800404 	addi	r22,sp,16
100023a0:	003fec06 	br	10002354 <__alt_data_end+0xf8002354>
100023a4:	9080100c 	andi	r2,r18,64
100023a8:	d8002785 	stb	zero,158(sp)
100023ac:	10010e26 	beq	r2,zero,100027e8 <___vfprintf_internal_r+0x1840>
100023b0:	d9002d17 	ldw	r4,180(sp)
100023b4:	d9402917 	ldw	r5,164(sp)
100023b8:	002d883a 	mov	r22,zero
100023bc:	20800104 	addi	r2,r4,4
100023c0:	24c0000b 	ldhu	r19,0(r4)
100023c4:	283fc90e 	bge	r5,zero,100022ec <__alt_data_end+0xf80022ec>
100023c8:	d8802d15 	stw	r2,180(sp)
100023cc:	0039883a 	mov	fp,zero
100023d0:	9d84b03a 	or	r2,r19,r22
100023d4:	103c461e 	bne	r2,zero,100014f0 <__alt_data_end+0xf80014f0>
100023d8:	00800044 	movi	r2,1
100023dc:	003e6c06 	br	10001d90 <__alt_data_end+0xf8001d90>
100023e0:	d9002c17 	ldw	r4,176(sp)
100023e4:	d9801e04 	addi	r6,sp,120
100023e8:	b80b883a 	mov	r5,r23
100023ec:	00085a40 	call	100085a4 <__sprint_r>
100023f0:	103bef1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100023f4:	d8c02017 	ldw	r3,128(sp)
100023f8:	da000404 	addi	r8,sp,16
100023fc:	d9003217 	ldw	r4,200(sp)
10002400:	d8802617 	ldw	r2,152(sp)
10002404:	d9403317 	ldw	r5,204(sp)
10002408:	8123883a 	add	r17,r16,r4
1000240c:	11400216 	blt	r2,r5,10002418 <___vfprintf_internal_r+0x1470>
10002410:	9100004c 	andi	r4,r18,1
10002414:	20000d26 	beq	r4,zero,1000244c <___vfprintf_internal_r+0x14a4>
10002418:	d9003717 	ldw	r4,220(sp)
1000241c:	d9403417 	ldw	r5,208(sp)
10002420:	1907883a 	add	r3,r3,r4
10002424:	d9001f17 	ldw	r4,124(sp)
10002428:	41400015 	stw	r5,0(r8)
1000242c:	d9403717 	ldw	r5,220(sp)
10002430:	21000044 	addi	r4,r4,1
10002434:	d8c02015 	stw	r3,128(sp)
10002438:	41400115 	stw	r5,4(r8)
1000243c:	d9001f15 	stw	r4,124(sp)
10002440:	014001c4 	movi	r5,7
10002444:	2901e816 	blt	r5,r4,10002be8 <___vfprintf_internal_r+0x1c40>
10002448:	42000204 	addi	r8,r8,8
1000244c:	d9003317 	ldw	r4,204(sp)
10002450:	8121883a 	add	r16,r16,r4
10002454:	2085c83a 	sub	r2,r4,r2
10002458:	8461c83a 	sub	r16,r16,r17
1000245c:	1400010e 	bge	r2,r16,10002464 <___vfprintf_internal_r+0x14bc>
10002460:	1021883a 	mov	r16,r2
10002464:	04000a0e 	bge	zero,r16,10002490 <___vfprintf_internal_r+0x14e8>
10002468:	d9001f17 	ldw	r4,124(sp)
1000246c:	1c07883a 	add	r3,r3,r16
10002470:	44400015 	stw	r17,0(r8)
10002474:	21000044 	addi	r4,r4,1
10002478:	44000115 	stw	r16,4(r8)
1000247c:	d8c02015 	stw	r3,128(sp)
10002480:	d9001f15 	stw	r4,124(sp)
10002484:	014001c4 	movi	r5,7
10002488:	2901fb16 	blt	r5,r4,10002c78 <___vfprintf_internal_r+0x1cd0>
1000248c:	42000204 	addi	r8,r8,8
10002490:	8001f716 	blt	r16,zero,10002c70 <___vfprintf_internal_r+0x1cc8>
10002494:	1421c83a 	sub	r16,r2,r16
10002498:	043d380e 	bge	zero,r16,1000197c <__alt_data_end+0xf800197c>
1000249c:	04400404 	movi	r17,16
100024a0:	d8801f17 	ldw	r2,124(sp)
100024a4:	8c3efb0e 	bge	r17,r16,10002094 <__alt_data_end+0xf8002094>
100024a8:	01440074 	movhi	r5,4097
100024ac:	29517084 	addi	r5,r5,17858
100024b0:	d9402b15 	stw	r5,172(sp)
100024b4:	058001c4 	movi	r22,7
100024b8:	dcc02c17 	ldw	r19,176(sp)
100024bc:	00000306 	br	100024cc <___vfprintf_internal_r+0x1524>
100024c0:	42000204 	addi	r8,r8,8
100024c4:	843ffc04 	addi	r16,r16,-16
100024c8:	8c3ef50e 	bge	r17,r16,100020a0 <__alt_data_end+0xf80020a0>
100024cc:	18c00404 	addi	r3,r3,16
100024d0:	10800044 	addi	r2,r2,1
100024d4:	45000015 	stw	r20,0(r8)
100024d8:	44400115 	stw	r17,4(r8)
100024dc:	d8c02015 	stw	r3,128(sp)
100024e0:	d8801f15 	stw	r2,124(sp)
100024e4:	b0bff60e 	bge	r22,r2,100024c0 <__alt_data_end+0xf80024c0>
100024e8:	d9801e04 	addi	r6,sp,120
100024ec:	b80b883a 	mov	r5,r23
100024f0:	9809883a 	mov	r4,r19
100024f4:	00085a40 	call	100085a4 <__sprint_r>
100024f8:	103bad1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100024fc:	d8c02017 	ldw	r3,128(sp)
10002500:	d8801f17 	ldw	r2,124(sp)
10002504:	da000404 	addi	r8,sp,16
10002508:	003fee06 	br	100024c4 <__alt_data_end+0xf80024c4>
1000250c:	9088703a 	and	r4,r18,r2
10002510:	203eab1e 	bne	r4,zero,10001fc0 <__alt_data_end+0xf8001fc0>
10002514:	dc401f17 	ldw	r17,124(sp)
10002518:	40800115 	stw	r2,4(r8)
1000251c:	44000015 	stw	r16,0(r8)
10002520:	8c400044 	addi	r17,r17,1
10002524:	d8c02015 	stw	r3,128(sp)
10002528:	dc401f15 	stw	r17,124(sp)
1000252c:	008001c4 	movi	r2,7
10002530:	14400e16 	blt	r2,r17,1000256c <___vfprintf_internal_r+0x15c4>
10002534:	45800204 	addi	r22,r8,8
10002538:	003eca06 	br	10002064 <__alt_data_end+0xf8002064>
1000253c:	01040074 	movhi	r4,4097
10002540:	21117084 	addi	r4,r4,17858
10002544:	d9002b15 	stw	r4,172(sp)
10002548:	d8802b17 	ldw	r2,172(sp)
1000254c:	1c07883a 	add	r3,r3,r16
10002550:	8c400044 	addi	r17,r17,1
10002554:	b0800015 	stw	r2,0(r22)
10002558:	b4000115 	stw	r16,4(r22)
1000255c:	d8c02015 	stw	r3,128(sp)
10002560:	dc401f15 	stw	r17,124(sp)
10002564:	008001c4 	movi	r2,7
10002568:	147ebd0e 	bge	r2,r17,10002060 <__alt_data_end+0xf8002060>
1000256c:	d9002c17 	ldw	r4,176(sp)
10002570:	d9801e04 	addi	r6,sp,120
10002574:	b80b883a 	mov	r5,r23
10002578:	00085a40 	call	100085a4 <__sprint_r>
1000257c:	103b8c1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002580:	d8c02017 	ldw	r3,128(sp)
10002584:	dc401f17 	ldw	r17,124(sp)
10002588:	dd800404 	addi	r22,sp,16
1000258c:	003eb506 	br	10002064 <__alt_data_end+0xf8002064>
10002590:	d9002c17 	ldw	r4,176(sp)
10002594:	d9801e04 	addi	r6,sp,120
10002598:	b80b883a 	mov	r5,r23
1000259c:	00085a40 	call	100085a4 <__sprint_r>
100025a0:	103b831e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100025a4:	d8c02017 	ldw	r3,128(sp)
100025a8:	dc401f17 	ldw	r17,124(sp)
100025ac:	da000404 	addi	r8,sp,16
100025b0:	003e8d06 	br	10001fe8 <__alt_data_end+0xf8001fe8>
100025b4:	d9002c17 	ldw	r4,176(sp)
100025b8:	d9801e04 	addi	r6,sp,120
100025bc:	b80b883a 	mov	r5,r23
100025c0:	00085a40 	call	100085a4 <__sprint_r>
100025c4:	103b7a1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100025c8:	d8c02017 	ldw	r3,128(sp)
100025cc:	dc401f17 	ldw	r17,124(sp)
100025d0:	dd800404 	addi	r22,sp,16
100025d4:	003e8f06 	br	10002014 <__alt_data_end+0xf8002014>
100025d8:	0027883a 	mov	r19,zero
100025dc:	003f4a06 	br	10002308 <__alt_data_end+0xf8002308>
100025e0:	d9002c17 	ldw	r4,176(sp)
100025e4:	d9801e04 	addi	r6,sp,120
100025e8:	b80b883a 	mov	r5,r23
100025ec:	00085a40 	call	100085a4 <__sprint_r>
100025f0:	103b6f1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100025f4:	d8c02017 	ldw	r3,128(sp)
100025f8:	da000404 	addi	r8,sp,16
100025fc:	003c9d06 	br	10001874 <__alt_data_end+0xf8001874>
10002600:	04e7c83a 	sub	r19,zero,r19
10002604:	9804c03a 	cmpne	r2,r19,zero
10002608:	05adc83a 	sub	r22,zero,r22
1000260c:	b0adc83a 	sub	r22,r22,r2
10002610:	d8802917 	ldw	r2,164(sp)
10002614:	07000b44 	movi	fp,45
10002618:	df002785 	stb	fp,158(sp)
1000261c:	10017b16 	blt	r2,zero,10002c0c <___vfprintf_internal_r+0x1c64>
10002620:	00bfdfc4 	movi	r2,-129
10002624:	90a4703a 	and	r18,r18,r2
10002628:	003bb106 	br	100014f0 <__alt_data_end+0xf80014f0>
1000262c:	d9003617 	ldw	r4,216(sp)
10002630:	d9403817 	ldw	r5,224(sp)
10002634:	da003d15 	stw	r8,244(sp)
10002638:	00081c80 	call	100081c8 <__fpclassifyd>
1000263c:	da003d17 	ldw	r8,244(sp)
10002640:	1000f026 	beq	r2,zero,10002a04 <___vfprintf_internal_r+0x1a5c>
10002644:	d9002917 	ldw	r4,164(sp)
10002648:	05bff7c4 	movi	r22,-33
1000264c:	00bfffc4 	movi	r2,-1
10002650:	8dac703a 	and	r22,r17,r22
10002654:	20820026 	beq	r4,r2,10002e58 <___vfprintf_internal_r+0x1eb0>
10002658:	008011c4 	movi	r2,71
1000265c:	b081f726 	beq	r22,r2,10002e3c <___vfprintf_internal_r+0x1e94>
10002660:	d9003817 	ldw	r4,224(sp)
10002664:	90c04014 	ori	r3,r18,256
10002668:	d8c02b15 	stw	r3,172(sp)
1000266c:	20021516 	blt	r4,zero,10002ec4 <___vfprintf_internal_r+0x1f1c>
10002670:	dcc03817 	ldw	r19,224(sp)
10002674:	d8002a05 	stb	zero,168(sp)
10002678:	00801984 	movi	r2,102
1000267c:	8881f926 	beq	r17,r2,10002e64 <___vfprintf_internal_r+0x1ebc>
10002680:	00801184 	movi	r2,70
10002684:	88821c26 	beq	r17,r2,10002ef8 <___vfprintf_internal_r+0x1f50>
10002688:	00801144 	movi	r2,69
1000268c:	b081ef26 	beq	r22,r2,10002e4c <___vfprintf_internal_r+0x1ea4>
10002690:	d8c02917 	ldw	r3,164(sp)
10002694:	d8802104 	addi	r2,sp,132
10002698:	d8800315 	stw	r2,12(sp)
1000269c:	d9403617 	ldw	r5,216(sp)
100026a0:	d8802504 	addi	r2,sp,148
100026a4:	d9002c17 	ldw	r4,176(sp)
100026a8:	d8800215 	stw	r2,8(sp)
100026ac:	d8802604 	addi	r2,sp,152
100026b0:	d8c00015 	stw	r3,0(sp)
100026b4:	d8800115 	stw	r2,4(sp)
100026b8:	01c00084 	movi	r7,2
100026bc:	980d883a 	mov	r6,r19
100026c0:	d8c03c15 	stw	r3,240(sp)
100026c4:	da003d15 	stw	r8,244(sp)
100026c8:	00035cc0 	call	100035cc <_dtoa_r>
100026cc:	1021883a 	mov	r16,r2
100026d0:	008019c4 	movi	r2,103
100026d4:	d8c03c17 	ldw	r3,240(sp)
100026d8:	da003d17 	ldw	r8,244(sp)
100026dc:	88817126 	beq	r17,r2,10002ca4 <___vfprintf_internal_r+0x1cfc>
100026e0:	008011c4 	movi	r2,71
100026e4:	88829226 	beq	r17,r2,10003130 <___vfprintf_internal_r+0x2188>
100026e8:	80f9883a 	add	fp,r16,r3
100026ec:	d9003617 	ldw	r4,216(sp)
100026f0:	000d883a 	mov	r6,zero
100026f4:	000f883a 	mov	r7,zero
100026f8:	980b883a 	mov	r5,r19
100026fc:	da003d15 	stw	r8,244(sp)
10002700:	000c21c0 	call	1000c21c <__eqdf2>
10002704:	da003d17 	ldw	r8,244(sp)
10002708:	10018d26 	beq	r2,zero,10002d40 <___vfprintf_internal_r+0x1d98>
1000270c:	d8802117 	ldw	r2,132(sp)
10002710:	1700062e 	bgeu	r2,fp,1000272c <___vfprintf_internal_r+0x1784>
10002714:	01000c04 	movi	r4,48
10002718:	10c00044 	addi	r3,r2,1
1000271c:	d8c02115 	stw	r3,132(sp)
10002720:	11000005 	stb	r4,0(r2)
10002724:	d8802117 	ldw	r2,132(sp)
10002728:	173ffb36 	bltu	r2,fp,10002718 <__alt_data_end+0xf8002718>
1000272c:	1405c83a 	sub	r2,r2,r16
10002730:	d8803315 	stw	r2,204(sp)
10002734:	008011c4 	movi	r2,71
10002738:	b0817626 	beq	r22,r2,10002d14 <___vfprintf_internal_r+0x1d6c>
1000273c:	00801944 	movi	r2,101
10002740:	1442810e 	bge	r2,r17,10003148 <___vfprintf_internal_r+0x21a0>
10002744:	d8c02617 	ldw	r3,152(sp)
10002748:	00801984 	movi	r2,102
1000274c:	d8c03215 	stw	r3,200(sp)
10002750:	8881fe26 	beq	r17,r2,10002f4c <___vfprintf_internal_r+0x1fa4>
10002754:	d8c03217 	ldw	r3,200(sp)
10002758:	d9003317 	ldw	r4,204(sp)
1000275c:	1901dd16 	blt	r3,r4,10002ed4 <___vfprintf_internal_r+0x1f2c>
10002760:	9480004c 	andi	r18,r18,1
10002764:	90022b1e 	bne	r18,zero,10003014 <___vfprintf_internal_r+0x206c>
10002768:	1805883a 	mov	r2,r3
1000276c:	18028016 	blt	r3,zero,10003170 <___vfprintf_internal_r+0x21c8>
10002770:	d8c03217 	ldw	r3,200(sp)
10002774:	044019c4 	movi	r17,103
10002778:	d8c02e15 	stw	r3,184(sp)
1000277c:	df002a07 	ldb	fp,168(sp)
10002780:	e001531e 	bne	fp,zero,10002cd0 <___vfprintf_internal_r+0x1d28>
10002784:	df002783 	ldbu	fp,158(sp)
10002788:	d8802a15 	stw	r2,168(sp)
1000278c:	dc802b17 	ldw	r18,172(sp)
10002790:	d8002915 	stw	zero,164(sp)
10002794:	003bd106 	br	100016dc <__alt_data_end+0xf80016dc>
10002798:	d8802d17 	ldw	r2,180(sp)
1000279c:	d8c02d17 	ldw	r3,180(sp)
100027a0:	d9002d17 	ldw	r4,180(sp)
100027a4:	10800017 	ldw	r2,0(r2)
100027a8:	18c00117 	ldw	r3,4(r3)
100027ac:	21000204 	addi	r4,r4,8
100027b0:	d8803615 	stw	r2,216(sp)
100027b4:	d8c03815 	stw	r3,224(sp)
100027b8:	d9002d15 	stw	r4,180(sp)
100027bc:	003b7506 	br	10001594 <__alt_data_end+0xf8001594>
100027c0:	ac400007 	ldb	r17,0(r21)
100027c4:	003a5906 	br	1000112c <__alt_data_end+0xf800112c>
100027c8:	9080100c 	andi	r2,r18,64
100027cc:	1000a826 	beq	r2,zero,10002a70 <___vfprintf_internal_r+0x1ac8>
100027d0:	d9002d17 	ldw	r4,180(sp)
100027d4:	002d883a 	mov	r22,zero
100027d8:	24c0000b 	ldhu	r19,0(r4)
100027dc:	21000104 	addi	r4,r4,4
100027e0:	d9002d15 	stw	r4,180(sp)
100027e4:	003ccb06 	br	10001b14 <__alt_data_end+0xf8001b14>
100027e8:	d8c02d17 	ldw	r3,180(sp)
100027ec:	d9002917 	ldw	r4,164(sp)
100027f0:	002d883a 	mov	r22,zero
100027f4:	18800104 	addi	r2,r3,4
100027f8:	1cc00017 	ldw	r19,0(r3)
100027fc:	203ebb0e 	bge	r4,zero,100022ec <__alt_data_end+0xf80022ec>
10002800:	003ef106 	br	100023c8 <__alt_data_end+0xf80023c8>
10002804:	9080040c 	andi	r2,r18,16
10002808:	1000921e 	bne	r2,zero,10002a54 <___vfprintf_internal_r+0x1aac>
1000280c:	9480100c 	andi	r18,r18,64
10002810:	90013926 	beq	r18,zero,10002cf8 <___vfprintf_internal_r+0x1d50>
10002814:	d9002d17 	ldw	r4,180(sp)
10002818:	d9402f17 	ldw	r5,188(sp)
1000281c:	20800017 	ldw	r2,0(r4)
10002820:	21000104 	addi	r4,r4,4
10002824:	d9002d15 	stw	r4,180(sp)
10002828:	1140000d 	sth	r5,0(r2)
1000282c:	003a1606 	br	10001088 <__alt_data_end+0xf8001088>
10002830:	9080100c 	andi	r2,r18,64
10002834:	10008026 	beq	r2,zero,10002a38 <___vfprintf_internal_r+0x1a90>
10002838:	d8c02d17 	ldw	r3,180(sp)
1000283c:	1cc0000f 	ldh	r19,0(r3)
10002840:	18c00104 	addi	r3,r3,4
10002844:	d8c02d15 	stw	r3,180(sp)
10002848:	982dd7fa 	srai	r22,r19,31
1000284c:	b005883a 	mov	r2,r22
10002850:	003b1f06 	br	100014d0 <__alt_data_end+0xf80014d0>
10002854:	9080100c 	andi	r2,r18,64
10002858:	d8002785 	stb	zero,158(sp)
1000285c:	10008a1e 	bne	r2,zero,10002a88 <___vfprintf_internal_r+0x1ae0>
10002860:	d9402d17 	ldw	r5,180(sp)
10002864:	d8c02917 	ldw	r3,164(sp)
10002868:	002d883a 	mov	r22,zero
1000286c:	28800104 	addi	r2,r5,4
10002870:	2cc00017 	ldw	r19,0(r5)
10002874:	183e4b0e 	bge	r3,zero,100021a4 <__alt_data_end+0xf80021a4>
10002878:	9d86b03a 	or	r3,r19,r22
1000287c:	d8802d15 	stw	r2,180(sp)
10002880:	183e4c1e 	bne	r3,zero,100021b4 <__alt_data_end+0xf80021b4>
10002884:	0039883a 	mov	fp,zero
10002888:	0005883a 	mov	r2,zero
1000288c:	003d4006 	br	10001d90 <__alt_data_end+0xf8001d90>
10002890:	01440074 	movhi	r5,4097
10002894:	29517084 	addi	r5,r5,17858
10002898:	d9402b15 	stw	r5,172(sp)
1000289c:	d9402b17 	ldw	r5,172(sp)
100028a0:	1c47883a 	add	r3,r3,r17
100028a4:	10800044 	addi	r2,r2,1
100028a8:	41400015 	stw	r5,0(r8)
100028ac:	44400115 	stw	r17,4(r8)
100028b0:	d8c02015 	stw	r3,128(sp)
100028b4:	d8801f15 	stw	r2,124(sp)
100028b8:	010001c4 	movi	r4,7
100028bc:	20bec816 	blt	r4,r2,100023e0 <__alt_data_end+0xf80023e0>
100028c0:	42000204 	addi	r8,r8,8
100028c4:	003ecd06 	br	100023fc <__alt_data_end+0xf80023fc>
100028c8:	d9002917 	ldw	r4,164(sp)
100028cc:	d8002785 	stb	zero,158(sp)
100028d0:	203d2d16 	blt	r4,zero,10001d88 <__alt_data_end+0xf8001d88>
100028d4:	00bfdfc4 	movi	r2,-129
100028d8:	90a4703a 	and	r18,r18,r2
100028dc:	003a9106 	br	10001324 <__alt_data_end+0xf8001324>
100028e0:	01040074 	movhi	r4,4097
100028e4:	21117084 	addi	r4,r4,17858
100028e8:	d9002b15 	stw	r4,172(sp)
100028ec:	003c0c06 	br	10001920 <__alt_data_end+0xf8001920>
100028f0:	d9002c17 	ldw	r4,176(sp)
100028f4:	d9801e04 	addi	r6,sp,120
100028f8:	b80b883a 	mov	r5,r23
100028fc:	00085a40 	call	100085a4 <__sprint_r>
10002900:	103aab1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002904:	d8c02017 	ldw	r3,128(sp)
10002908:	da000404 	addi	r8,sp,16
1000290c:	003d4106 	br	10001e14 <__alt_data_end+0xf8001e14>
10002910:	d8801f17 	ldw	r2,124(sp)
10002914:	01440074 	movhi	r5,4097
10002918:	01000044 	movi	r4,1
1000291c:	18c00044 	addi	r3,r3,1
10002920:	10800044 	addi	r2,r2,1
10002924:	29517004 	addi	r5,r5,17856
10002928:	41000115 	stw	r4,4(r8)
1000292c:	41400015 	stw	r5,0(r8)
10002930:	d8c02015 	stw	r3,128(sp)
10002934:	d8801f15 	stw	r2,124(sp)
10002938:	010001c4 	movi	r4,7
1000293c:	20805c16 	blt	r4,r2,10002ab0 <___vfprintf_internal_r+0x1b08>
10002940:	42000204 	addi	r8,r8,8
10002944:	8800041e 	bne	r17,zero,10002958 <___vfprintf_internal_r+0x19b0>
10002948:	d8803317 	ldw	r2,204(sp)
1000294c:	1000021e 	bne	r2,zero,10002958 <___vfprintf_internal_r+0x19b0>
10002950:	9080004c 	andi	r2,r18,1
10002954:	103c0926 	beq	r2,zero,1000197c <__alt_data_end+0xf800197c>
10002958:	d9003717 	ldw	r4,220(sp)
1000295c:	d8801f17 	ldw	r2,124(sp)
10002960:	d9403417 	ldw	r5,208(sp)
10002964:	20c7883a 	add	r3,r4,r3
10002968:	10800044 	addi	r2,r2,1
1000296c:	41000115 	stw	r4,4(r8)
10002970:	41400015 	stw	r5,0(r8)
10002974:	d8c02015 	stw	r3,128(sp)
10002978:	d8801f15 	stw	r2,124(sp)
1000297c:	010001c4 	movi	r4,7
10002980:	20812116 	blt	r4,r2,10002e08 <___vfprintf_internal_r+0x1e60>
10002984:	42000204 	addi	r8,r8,8
10002988:	0463c83a 	sub	r17,zero,r17
1000298c:	0440730e 	bge	zero,r17,10002b5c <___vfprintf_internal_r+0x1bb4>
10002990:	05800404 	movi	r22,16
10002994:	b440860e 	bge	r22,r17,10002bb0 <___vfprintf_internal_r+0x1c08>
10002998:	01440074 	movhi	r5,4097
1000299c:	29517084 	addi	r5,r5,17858
100029a0:	d9402b15 	stw	r5,172(sp)
100029a4:	070001c4 	movi	fp,7
100029a8:	dcc02c17 	ldw	r19,176(sp)
100029ac:	00000306 	br	100029bc <___vfprintf_internal_r+0x1a14>
100029b0:	42000204 	addi	r8,r8,8
100029b4:	8c7ffc04 	addi	r17,r17,-16
100029b8:	b440800e 	bge	r22,r17,10002bbc <___vfprintf_internal_r+0x1c14>
100029bc:	18c00404 	addi	r3,r3,16
100029c0:	10800044 	addi	r2,r2,1
100029c4:	45000015 	stw	r20,0(r8)
100029c8:	45800115 	stw	r22,4(r8)
100029cc:	d8c02015 	stw	r3,128(sp)
100029d0:	d8801f15 	stw	r2,124(sp)
100029d4:	e0bff60e 	bge	fp,r2,100029b0 <__alt_data_end+0xf80029b0>
100029d8:	d9801e04 	addi	r6,sp,120
100029dc:	b80b883a 	mov	r5,r23
100029e0:	9809883a 	mov	r4,r19
100029e4:	00085a40 	call	100085a4 <__sprint_r>
100029e8:	103a711e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
100029ec:	d8c02017 	ldw	r3,128(sp)
100029f0:	d8801f17 	ldw	r2,124(sp)
100029f4:	da000404 	addi	r8,sp,16
100029f8:	003fee06 	br	100029b4 <__alt_data_end+0xf80029b4>
100029fc:	00bfffc4 	movi	r2,-1
10002a00:	003a6f06 	br	100013c0 <__alt_data_end+0xf80013c0>
10002a04:	008011c4 	movi	r2,71
10002a08:	1440b816 	blt	r2,r17,10002cec <___vfprintf_internal_r+0x1d44>
10002a0c:	04040074 	movhi	r16,4097
10002a10:	84116204 	addi	r16,r16,17800
10002a14:	00c000c4 	movi	r3,3
10002a18:	00bfdfc4 	movi	r2,-129
10002a1c:	d8c02a15 	stw	r3,168(sp)
10002a20:	90a4703a 	and	r18,r18,r2
10002a24:	df002783 	ldbu	fp,158(sp)
10002a28:	d8c02e15 	stw	r3,184(sp)
10002a2c:	d8002915 	stw	zero,164(sp)
10002a30:	d8003215 	stw	zero,200(sp)
10002a34:	003b2906 	br	100016dc <__alt_data_end+0xf80016dc>
10002a38:	d9002d17 	ldw	r4,180(sp)
10002a3c:	24c00017 	ldw	r19,0(r4)
10002a40:	21000104 	addi	r4,r4,4
10002a44:	d9002d15 	stw	r4,180(sp)
10002a48:	982dd7fa 	srai	r22,r19,31
10002a4c:	b005883a 	mov	r2,r22
10002a50:	003a9f06 	br	100014d0 <__alt_data_end+0xf80014d0>
10002a54:	d9402d17 	ldw	r5,180(sp)
10002a58:	d8c02f17 	ldw	r3,188(sp)
10002a5c:	28800017 	ldw	r2,0(r5)
10002a60:	29400104 	addi	r5,r5,4
10002a64:	d9402d15 	stw	r5,180(sp)
10002a68:	10c00015 	stw	r3,0(r2)
10002a6c:	00398606 	br	10001088 <__alt_data_end+0xf8001088>
10002a70:	d9402d17 	ldw	r5,180(sp)
10002a74:	002d883a 	mov	r22,zero
10002a78:	2cc00017 	ldw	r19,0(r5)
10002a7c:	29400104 	addi	r5,r5,4
10002a80:	d9402d15 	stw	r5,180(sp)
10002a84:	003c2306 	br	10001b14 <__alt_data_end+0xf8001b14>
10002a88:	d8c02d17 	ldw	r3,180(sp)
10002a8c:	d9002917 	ldw	r4,164(sp)
10002a90:	002d883a 	mov	r22,zero
10002a94:	18800104 	addi	r2,r3,4
10002a98:	1cc0000b 	ldhu	r19,0(r3)
10002a9c:	203dc10e 	bge	r4,zero,100021a4 <__alt_data_end+0xf80021a4>
10002aa0:	003f7506 	br	10002878 <__alt_data_end+0xf8002878>
10002aa4:	04040074 	movhi	r16,4097
10002aa8:	84116004 	addi	r16,r16,17792
10002aac:	003acc06 	br	100015e0 <__alt_data_end+0xf80015e0>
10002ab0:	d9002c17 	ldw	r4,176(sp)
10002ab4:	d9801e04 	addi	r6,sp,120
10002ab8:	b80b883a 	mov	r5,r23
10002abc:	00085a40 	call	100085a4 <__sprint_r>
10002ac0:	103a3b1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002ac4:	dc402617 	ldw	r17,152(sp)
10002ac8:	d8c02017 	ldw	r3,128(sp)
10002acc:	da000404 	addi	r8,sp,16
10002ad0:	003f9c06 	br	10002944 <__alt_data_end+0xf8002944>
10002ad4:	ac400043 	ldbu	r17,1(r21)
10002ad8:	94800814 	ori	r18,r18,32
10002adc:	ad400044 	addi	r21,r21,1
10002ae0:	8c403fcc 	andi	r17,r17,255
10002ae4:	8c40201c 	xori	r17,r17,128
10002ae8:	8c7fe004 	addi	r17,r17,-128
10002aec:	00398f06 	br	1000112c <__alt_data_end+0xf800112c>
10002af0:	d8c02d15 	stw	r3,180(sp)
10002af4:	0039883a 	mov	fp,zero
10002af8:	003e3506 	br	100023d0 <__alt_data_end+0xf80023d0>
10002afc:	d9002c17 	ldw	r4,176(sp)
10002b00:	d9801e04 	addi	r6,sp,120
10002b04:	b80b883a 	mov	r5,r23
10002b08:	00085a40 	call	100085a4 <__sprint_r>
10002b0c:	103a281e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002b10:	d8c02017 	ldw	r3,128(sp)
10002b14:	da000404 	addi	r8,sp,16
10002b18:	003cd006 	br	10001e5c <__alt_data_end+0xf8001e5c>
10002b1c:	8009883a 	mov	r4,r16
10002b20:	da003d15 	stw	r8,244(sp)
10002b24:	0000f100 	call	10000f10 <strlen>
10002b28:	d8802e15 	stw	r2,184(sp)
10002b2c:	da003d17 	ldw	r8,244(sp)
10002b30:	103c340e 	bge	r2,zero,10001c04 <__alt_data_end+0xf8001c04>
10002b34:	0005883a 	mov	r2,zero
10002b38:	003c3206 	br	10001c04 <__alt_data_end+0xf8001c04>
10002b3c:	d9002c17 	ldw	r4,176(sp)
10002b40:	d9801e04 	addi	r6,sp,120
10002b44:	b80b883a 	mov	r5,r23
10002b48:	00085a40 	call	100085a4 <__sprint_r>
10002b4c:	103a181e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002b50:	d8c02017 	ldw	r3,128(sp)
10002b54:	d8801f17 	ldw	r2,124(sp)
10002b58:	da000404 	addi	r8,sp,16
10002b5c:	d9403317 	ldw	r5,204(sp)
10002b60:	10800044 	addi	r2,r2,1
10002b64:	44000015 	stw	r16,0(r8)
10002b68:	28c7883a 	add	r3,r5,r3
10002b6c:	003b7d06 	br	10001964 <__alt_data_end+0xf8001964>
10002b70:	01040074 	movhi	r4,4097
10002b74:	21117484 	addi	r4,r4,17874
10002b78:	d9003515 	stw	r4,212(sp)
10002b7c:	003b1406 	br	100017d0 <__alt_data_end+0xf80017d0>
10002b80:	013fffc4 	movi	r4,-1
10002b84:	003a3506 	br	1000145c <__alt_data_end+0xf800145c>
10002b88:	0023883a 	mov	r17,zero
10002b8c:	003d9d06 	br	10002204 <__alt_data_end+0xf8002204>
10002b90:	d9002c17 	ldw	r4,176(sp)
10002b94:	d9801e04 	addi	r6,sp,120
10002b98:	b80b883a 	mov	r5,r23
10002b9c:	00085a40 	call	100085a4 <__sprint_r>
10002ba0:	103a031e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002ba4:	d8c02017 	ldw	r3,128(sp)
10002ba8:	da000404 	addi	r8,sp,16
10002bac:	003d9406 	br	10002200 <__alt_data_end+0xf8002200>
10002bb0:	01040074 	movhi	r4,4097
10002bb4:	21117084 	addi	r4,r4,17858
10002bb8:	d9002b15 	stw	r4,172(sp)
10002bbc:	d9002b17 	ldw	r4,172(sp)
10002bc0:	1c47883a 	add	r3,r3,r17
10002bc4:	10800044 	addi	r2,r2,1
10002bc8:	41000015 	stw	r4,0(r8)
10002bcc:	44400115 	stw	r17,4(r8)
10002bd0:	d8c02015 	stw	r3,128(sp)
10002bd4:	d8801f15 	stw	r2,124(sp)
10002bd8:	010001c4 	movi	r4,7
10002bdc:	20bfd716 	blt	r4,r2,10002b3c <__alt_data_end+0xf8002b3c>
10002be0:	42000204 	addi	r8,r8,8
10002be4:	003fdd06 	br	10002b5c <__alt_data_end+0xf8002b5c>
10002be8:	d9002c17 	ldw	r4,176(sp)
10002bec:	d9801e04 	addi	r6,sp,120
10002bf0:	b80b883a 	mov	r5,r23
10002bf4:	00085a40 	call	100085a4 <__sprint_r>
10002bf8:	1039ed1e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002bfc:	d8802617 	ldw	r2,152(sp)
10002c00:	d8c02017 	ldw	r3,128(sp)
10002c04:	da000404 	addi	r8,sp,16
10002c08:	003e1006 	br	1000244c <__alt_data_end+0xf800244c>
10002c0c:	00800044 	movi	r2,1
10002c10:	10803fcc 	andi	r2,r2,255
10002c14:	00c00044 	movi	r3,1
10002c18:	10fa3526 	beq	r2,r3,100014f0 <__alt_data_end+0xf80014f0>
10002c1c:	00c00084 	movi	r3,2
10002c20:	10fbcb26 	beq	r2,r3,10001b50 <__alt_data_end+0xf8001b50>
10002c24:	003a8f06 	br	10001664 <__alt_data_end+0xf8001664>
10002c28:	01040074 	movhi	r4,4097
10002c2c:	21117484 	addi	r4,r4,17874
10002c30:	d9003515 	stw	r4,212(sp)
10002c34:	003b7606 	br	10001a10 <__alt_data_end+0xf8001a10>
10002c38:	d8802917 	ldw	r2,164(sp)
10002c3c:	00c00184 	movi	r3,6
10002c40:	1880012e 	bgeu	r3,r2,10002c48 <___vfprintf_internal_r+0x1ca0>
10002c44:	1805883a 	mov	r2,r3
10002c48:	d8802e15 	stw	r2,184(sp)
10002c4c:	1000ef16 	blt	r2,zero,1000300c <___vfprintf_internal_r+0x2064>
10002c50:	04040074 	movhi	r16,4097
10002c54:	d8802a15 	stw	r2,168(sp)
10002c58:	dcc02d15 	stw	r19,180(sp)
10002c5c:	d8002915 	stw	zero,164(sp)
10002c60:	d8003215 	stw	zero,200(sp)
10002c64:	84116e04 	addi	r16,r16,17848
10002c68:	0039883a 	mov	fp,zero
10002c6c:	003aa206 	br	100016f8 <__alt_data_end+0xf80016f8>
10002c70:	0021883a 	mov	r16,zero
10002c74:	003e0706 	br	10002494 <__alt_data_end+0xf8002494>
10002c78:	d9002c17 	ldw	r4,176(sp)
10002c7c:	d9801e04 	addi	r6,sp,120
10002c80:	b80b883a 	mov	r5,r23
10002c84:	00085a40 	call	100085a4 <__sprint_r>
10002c88:	1039c91e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002c8c:	d8802617 	ldw	r2,152(sp)
10002c90:	d9403317 	ldw	r5,204(sp)
10002c94:	d8c02017 	ldw	r3,128(sp)
10002c98:	da000404 	addi	r8,sp,16
10002c9c:	2885c83a 	sub	r2,r5,r2
10002ca0:	003dfb06 	br	10002490 <__alt_data_end+0xf8002490>
10002ca4:	9080004c 	andi	r2,r18,1
10002ca8:	103e8f1e 	bne	r2,zero,100026e8 <__alt_data_end+0xf80026e8>
10002cac:	d8802117 	ldw	r2,132(sp)
10002cb0:	003e9e06 	br	1000272c <__alt_data_end+0xf800272c>
10002cb4:	1025883a 	mov	r18,r2
10002cb8:	0039883a 	mov	fp,zero
10002cbc:	00800084 	movi	r2,2
10002cc0:	003fd306 	br	10002c10 <__alt_data_end+0xf8002c10>
10002cc4:	07000b44 	movi	fp,45
10002cc8:	df002785 	stb	fp,158(sp)
10002ccc:	003a4006 	br	100015d0 <__alt_data_end+0xf80015d0>
10002cd0:	00c00b44 	movi	r3,45
10002cd4:	d8c02785 	stb	r3,158(sp)
10002cd8:	d8802a15 	stw	r2,168(sp)
10002cdc:	dc802b17 	ldw	r18,172(sp)
10002ce0:	d8002915 	stw	zero,164(sp)
10002ce4:	07000b44 	movi	fp,45
10002ce8:	003a8006 	br	100016ec <__alt_data_end+0xf80016ec>
10002cec:	04040074 	movhi	r16,4097
10002cf0:	84116304 	addi	r16,r16,17804
10002cf4:	003f4706 	br	10002a14 <__alt_data_end+0xf8002a14>
10002cf8:	d8c02d17 	ldw	r3,180(sp)
10002cfc:	d9002f17 	ldw	r4,188(sp)
10002d00:	18800017 	ldw	r2,0(r3)
10002d04:	18c00104 	addi	r3,r3,4
10002d08:	d8c02d15 	stw	r3,180(sp)
10002d0c:	11000015 	stw	r4,0(r2)
10002d10:	0038dd06 	br	10001088 <__alt_data_end+0xf8001088>
10002d14:	dd802617 	ldw	r22,152(sp)
10002d18:	00bfff44 	movi	r2,-3
10002d1c:	b0801c16 	blt	r22,r2,10002d90 <___vfprintf_internal_r+0x1de8>
10002d20:	d9402917 	ldw	r5,164(sp)
10002d24:	2d801a16 	blt	r5,r22,10002d90 <___vfprintf_internal_r+0x1de8>
10002d28:	dd803215 	stw	r22,200(sp)
10002d2c:	003e8906 	br	10002754 <__alt_data_end+0xf8002754>
10002d30:	01040074 	movhi	r4,4097
10002d34:	21117084 	addi	r4,r4,17858
10002d38:	d9002b15 	stw	r4,172(sp)
10002d3c:	003c9106 	br	10001f84 <__alt_data_end+0xf8001f84>
10002d40:	e005883a 	mov	r2,fp
10002d44:	003e7906 	br	1000272c <__alt_data_end+0xf800272c>
10002d48:	d9402917 	ldw	r5,164(sp)
10002d4c:	df002783 	ldbu	fp,158(sp)
10002d50:	dcc02d15 	stw	r19,180(sp)
10002d54:	d9402a15 	stw	r5,168(sp)
10002d58:	d9402e15 	stw	r5,184(sp)
10002d5c:	d8002915 	stw	zero,164(sp)
10002d60:	d8003215 	stw	zero,200(sp)
10002d64:	003a5d06 	br	100016dc <__alt_data_end+0xf80016dc>
10002d68:	9080004c 	andi	r2,r18,1
10002d6c:	0039883a 	mov	fp,zero
10002d70:	10000426 	beq	r2,zero,10002d84 <___vfprintf_internal_r+0x1ddc>
10002d74:	00800c04 	movi	r2,48
10002d78:	dc001dc4 	addi	r16,sp,119
10002d7c:	d8801dc5 	stb	r2,119(sp)
10002d80:	003b8006 	br	10001b84 <__alt_data_end+0xf8001b84>
10002d84:	d8002e15 	stw	zero,184(sp)
10002d88:	dc001e04 	addi	r16,sp,120
10002d8c:	003a4d06 	br	100016c4 <__alt_data_end+0xf80016c4>
10002d90:	8c7fff84 	addi	r17,r17,-2
10002d94:	b5bfffc4 	addi	r22,r22,-1
10002d98:	dd802615 	stw	r22,152(sp)
10002d9c:	dc4022c5 	stb	r17,139(sp)
10002da0:	b000bf16 	blt	r22,zero,100030a0 <___vfprintf_internal_r+0x20f8>
10002da4:	00800ac4 	movi	r2,43
10002da8:	d8802305 	stb	r2,140(sp)
10002dac:	00800244 	movi	r2,9
10002db0:	15807016 	blt	r2,r22,10002f74 <___vfprintf_internal_r+0x1fcc>
10002db4:	00800c04 	movi	r2,48
10002db8:	b5800c04 	addi	r22,r22,48
10002dbc:	d8802345 	stb	r2,141(sp)
10002dc0:	dd802385 	stb	r22,142(sp)
10002dc4:	d88023c4 	addi	r2,sp,143
10002dc8:	df0022c4 	addi	fp,sp,139
10002dcc:	d8c03317 	ldw	r3,204(sp)
10002dd0:	1739c83a 	sub	fp,r2,fp
10002dd4:	d9003317 	ldw	r4,204(sp)
10002dd8:	e0c7883a 	add	r3,fp,r3
10002ddc:	df003a15 	stw	fp,232(sp)
10002de0:	d8c02e15 	stw	r3,184(sp)
10002de4:	00800044 	movi	r2,1
10002de8:	1100b30e 	bge	r2,r4,100030b8 <___vfprintf_internal_r+0x2110>
10002dec:	d8c02e17 	ldw	r3,184(sp)
10002df0:	18c00044 	addi	r3,r3,1
10002df4:	d8c02e15 	stw	r3,184(sp)
10002df8:	1805883a 	mov	r2,r3
10002dfc:	1800ac16 	blt	r3,zero,100030b0 <___vfprintf_internal_r+0x2108>
10002e00:	d8003215 	stw	zero,200(sp)
10002e04:	003e5d06 	br	1000277c <__alt_data_end+0xf800277c>
10002e08:	d9002c17 	ldw	r4,176(sp)
10002e0c:	d9801e04 	addi	r6,sp,120
10002e10:	b80b883a 	mov	r5,r23
10002e14:	00085a40 	call	100085a4 <__sprint_r>
10002e18:	1039651e 	bne	r2,zero,100013b0 <__alt_data_end+0xf80013b0>
10002e1c:	dc402617 	ldw	r17,152(sp)
10002e20:	d8c02017 	ldw	r3,128(sp)
10002e24:	d8801f17 	ldw	r2,124(sp)
10002e28:	da000404 	addi	r8,sp,16
10002e2c:	003ed606 	br	10002988 <__alt_data_end+0xf8002988>
10002e30:	582b883a 	mov	r21,r11
10002e34:	d8002915 	stw	zero,164(sp)
10002e38:	0038bd06 	br	10001130 <__alt_data_end+0xf8001130>
10002e3c:	d8802917 	ldw	r2,164(sp)
10002e40:	103e071e 	bne	r2,zero,10002660 <__alt_data_end+0xf8002660>
10002e44:	dc002915 	stw	r16,164(sp)
10002e48:	003e0506 	br	10002660 <__alt_data_end+0xf8002660>
10002e4c:	d9002917 	ldw	r4,164(sp)
10002e50:	20c00044 	addi	r3,r4,1
10002e54:	003e0f06 	br	10002694 <__alt_data_end+0xf8002694>
10002e58:	01400184 	movi	r5,6
10002e5c:	d9402915 	stw	r5,164(sp)
10002e60:	003dff06 	br	10002660 <__alt_data_end+0xf8002660>
10002e64:	d8802104 	addi	r2,sp,132
10002e68:	d8800315 	stw	r2,12(sp)
10002e6c:	d8802504 	addi	r2,sp,148
10002e70:	d8800215 	stw	r2,8(sp)
10002e74:	d8802604 	addi	r2,sp,152
10002e78:	d8800115 	stw	r2,4(sp)
10002e7c:	d8802917 	ldw	r2,164(sp)
10002e80:	d9403617 	ldw	r5,216(sp)
10002e84:	d9002c17 	ldw	r4,176(sp)
10002e88:	d8800015 	stw	r2,0(sp)
10002e8c:	01c000c4 	movi	r7,3
10002e90:	980d883a 	mov	r6,r19
10002e94:	da003d15 	stw	r8,244(sp)
10002e98:	00035cc0 	call	100035cc <_dtoa_r>
10002e9c:	d8c02917 	ldw	r3,164(sp)
10002ea0:	da003d17 	ldw	r8,244(sp)
10002ea4:	1021883a 	mov	r16,r2
10002ea8:	10f9883a 	add	fp,r2,r3
10002eac:	81000007 	ldb	r4,0(r16)
10002eb0:	00800c04 	movi	r2,48
10002eb4:	20805e26 	beq	r4,r2,10003030 <___vfprintf_internal_r+0x2088>
10002eb8:	d8c02617 	ldw	r3,152(sp)
10002ebc:	e0f9883a 	add	fp,fp,r3
10002ec0:	003e0a06 	br	100026ec <__alt_data_end+0xf80026ec>
10002ec4:	00c00b44 	movi	r3,45
10002ec8:	24e0003c 	xorhi	r19,r4,32768
10002ecc:	d8c02a05 	stb	r3,168(sp)
10002ed0:	003de906 	br	10002678 <__alt_data_end+0xf8002678>
10002ed4:	d8c03217 	ldw	r3,200(sp)
10002ed8:	00c07a0e 	bge	zero,r3,100030c4 <___vfprintf_internal_r+0x211c>
10002edc:	00800044 	movi	r2,1
10002ee0:	d9003317 	ldw	r4,204(sp)
10002ee4:	1105883a 	add	r2,r2,r4
10002ee8:	d8802e15 	stw	r2,184(sp)
10002eec:	10004e16 	blt	r2,zero,10003028 <___vfprintf_internal_r+0x2080>
10002ef0:	044019c4 	movi	r17,103
10002ef4:	003e2106 	br	1000277c <__alt_data_end+0xf800277c>
10002ef8:	d9002917 	ldw	r4,164(sp)
10002efc:	d8802104 	addi	r2,sp,132
10002f00:	d8800315 	stw	r2,12(sp)
10002f04:	d9000015 	stw	r4,0(sp)
10002f08:	d8802504 	addi	r2,sp,148
10002f0c:	d9403617 	ldw	r5,216(sp)
10002f10:	d9002c17 	ldw	r4,176(sp)
10002f14:	d8800215 	stw	r2,8(sp)
10002f18:	d8802604 	addi	r2,sp,152
10002f1c:	d8800115 	stw	r2,4(sp)
10002f20:	01c000c4 	movi	r7,3
10002f24:	980d883a 	mov	r6,r19
10002f28:	da003d15 	stw	r8,244(sp)
10002f2c:	00035cc0 	call	100035cc <_dtoa_r>
10002f30:	d8c02917 	ldw	r3,164(sp)
10002f34:	da003d17 	ldw	r8,244(sp)
10002f38:	1021883a 	mov	r16,r2
10002f3c:	00801184 	movi	r2,70
10002f40:	80f9883a 	add	fp,r16,r3
10002f44:	88bfd926 	beq	r17,r2,10002eac <__alt_data_end+0xf8002eac>
10002f48:	003de806 	br	100026ec <__alt_data_end+0xf80026ec>
10002f4c:	d9002917 	ldw	r4,164(sp)
10002f50:	00c04d0e 	bge	zero,r3,10003088 <___vfprintf_internal_r+0x20e0>
10002f54:	2000441e 	bne	r4,zero,10003068 <___vfprintf_internal_r+0x20c0>
10002f58:	9480004c 	andi	r18,r18,1
10002f5c:	9000421e 	bne	r18,zero,10003068 <___vfprintf_internal_r+0x20c0>
10002f60:	1805883a 	mov	r2,r3
10002f64:	18007016 	blt	r3,zero,10003128 <___vfprintf_internal_r+0x2180>
10002f68:	d8c03217 	ldw	r3,200(sp)
10002f6c:	d8c02e15 	stw	r3,184(sp)
10002f70:	003e0206 	br	1000277c <__alt_data_end+0xf800277c>
10002f74:	df0022c4 	addi	fp,sp,139
10002f78:	dc002915 	stw	r16,164(sp)
10002f7c:	4027883a 	mov	r19,r8
10002f80:	e021883a 	mov	r16,fp
10002f84:	b009883a 	mov	r4,r22
10002f88:	01400284 	movi	r5,10
10002f8c:	000af580 	call	1000af58 <__modsi3>
10002f90:	10800c04 	addi	r2,r2,48
10002f94:	843fffc4 	addi	r16,r16,-1
10002f98:	b009883a 	mov	r4,r22
10002f9c:	01400284 	movi	r5,10
10002fa0:	80800005 	stb	r2,0(r16)
10002fa4:	000aed40 	call	1000aed4 <__divsi3>
10002fa8:	102d883a 	mov	r22,r2
10002fac:	00800244 	movi	r2,9
10002fb0:	15bff416 	blt	r2,r22,10002f84 <__alt_data_end+0xf8002f84>
10002fb4:	9811883a 	mov	r8,r19
10002fb8:	b0800c04 	addi	r2,r22,48
10002fbc:	8027883a 	mov	r19,r16
10002fc0:	997fffc4 	addi	r5,r19,-1
10002fc4:	98bfffc5 	stb	r2,-1(r19)
10002fc8:	dc002917 	ldw	r16,164(sp)
10002fcc:	2f006a2e 	bgeu	r5,fp,10003178 <___vfprintf_internal_r+0x21d0>
10002fd0:	d9c02384 	addi	r7,sp,142
10002fd4:	3ccfc83a 	sub	r7,r7,r19
10002fd8:	d9002344 	addi	r4,sp,141
10002fdc:	e1cf883a 	add	r7,fp,r7
10002fe0:	00000106 	br	10002fe8 <___vfprintf_internal_r+0x2040>
10002fe4:	28800003 	ldbu	r2,0(r5)
10002fe8:	20800005 	stb	r2,0(r4)
10002fec:	21000044 	addi	r4,r4,1
10002ff0:	29400044 	addi	r5,r5,1
10002ff4:	393ffb1e 	bne	r7,r4,10002fe4 <__alt_data_end+0xf8002fe4>
10002ff8:	d8802304 	addi	r2,sp,140
10002ffc:	14c5c83a 	sub	r2,r2,r19
10003000:	d8c02344 	addi	r3,sp,141
10003004:	1885883a 	add	r2,r3,r2
10003008:	003f7006 	br	10002dcc <__alt_data_end+0xf8002dcc>
1000300c:	0005883a 	mov	r2,zero
10003010:	003f0f06 	br	10002c50 <__alt_data_end+0xf8002c50>
10003014:	d8c03217 	ldw	r3,200(sp)
10003018:	18c00044 	addi	r3,r3,1
1000301c:	d8c02e15 	stw	r3,184(sp)
10003020:	1805883a 	mov	r2,r3
10003024:	183fb20e 	bge	r3,zero,10002ef0 <__alt_data_end+0xf8002ef0>
10003028:	0005883a 	mov	r2,zero
1000302c:	003fb006 	br	10002ef0 <__alt_data_end+0xf8002ef0>
10003030:	d9003617 	ldw	r4,216(sp)
10003034:	000d883a 	mov	r6,zero
10003038:	000f883a 	mov	r7,zero
1000303c:	980b883a 	mov	r5,r19
10003040:	d8c03c15 	stw	r3,240(sp)
10003044:	da003d15 	stw	r8,244(sp)
10003048:	000c21c0 	call	1000c21c <__eqdf2>
1000304c:	d8c03c17 	ldw	r3,240(sp)
10003050:	da003d17 	ldw	r8,244(sp)
10003054:	103f9826 	beq	r2,zero,10002eb8 <__alt_data_end+0xf8002eb8>
10003058:	00800044 	movi	r2,1
1000305c:	10c7c83a 	sub	r3,r2,r3
10003060:	d8c02615 	stw	r3,152(sp)
10003064:	003f9506 	br	10002ebc <__alt_data_end+0xf8002ebc>
10003068:	d9002917 	ldw	r4,164(sp)
1000306c:	d8c03217 	ldw	r3,200(sp)
10003070:	20800044 	addi	r2,r4,1
10003074:	1885883a 	add	r2,r3,r2
10003078:	d8802e15 	stw	r2,184(sp)
1000307c:	103dbf0e 	bge	r2,zero,1000277c <__alt_data_end+0xf800277c>
10003080:	0005883a 	mov	r2,zero
10003084:	003dbd06 	br	1000277c <__alt_data_end+0xf800277c>
10003088:	2000211e 	bne	r4,zero,10003110 <___vfprintf_internal_r+0x2168>
1000308c:	9480004c 	andi	r18,r18,1
10003090:	90001f1e 	bne	r18,zero,10003110 <___vfprintf_internal_r+0x2168>
10003094:	00800044 	movi	r2,1
10003098:	d8802e15 	stw	r2,184(sp)
1000309c:	003db706 	br	1000277c <__alt_data_end+0xf800277c>
100030a0:	00800b44 	movi	r2,45
100030a4:	05adc83a 	sub	r22,zero,r22
100030a8:	d8802305 	stb	r2,140(sp)
100030ac:	003f3f06 	br	10002dac <__alt_data_end+0xf8002dac>
100030b0:	0005883a 	mov	r2,zero
100030b4:	003f5206 	br	10002e00 <__alt_data_end+0xf8002e00>
100030b8:	90a4703a 	and	r18,r18,r2
100030bc:	903f4e26 	beq	r18,zero,10002df8 <__alt_data_end+0xf8002df8>
100030c0:	003f4a06 	br	10002dec <__alt_data_end+0xf8002dec>
100030c4:	00800084 	movi	r2,2
100030c8:	10c5c83a 	sub	r2,r2,r3
100030cc:	003f8406 	br	10002ee0 <__alt_data_end+0xf8002ee0>
100030d0:	d8802d17 	ldw	r2,180(sp)
100030d4:	d9002d17 	ldw	r4,180(sp)
100030d8:	ac400043 	ldbu	r17,1(r21)
100030dc:	10800017 	ldw	r2,0(r2)
100030e0:	582b883a 	mov	r21,r11
100030e4:	d8802915 	stw	r2,164(sp)
100030e8:	20800104 	addi	r2,r4,4
100030ec:	d9002917 	ldw	r4,164(sp)
100030f0:	d8802d15 	stw	r2,180(sp)
100030f4:	203e7a0e 	bge	r4,zero,10002ae0 <__alt_data_end+0xf8002ae0>
100030f8:	8c403fcc 	andi	r17,r17,255
100030fc:	00bfffc4 	movi	r2,-1
10003100:	8c40201c 	xori	r17,r17,128
10003104:	d8802915 	stw	r2,164(sp)
10003108:	8c7fe004 	addi	r17,r17,-128
1000310c:	00380706 	br	1000112c <__alt_data_end+0xf800112c>
10003110:	d8c02917 	ldw	r3,164(sp)
10003114:	18c00084 	addi	r3,r3,2
10003118:	d8c02e15 	stw	r3,184(sp)
1000311c:	1805883a 	mov	r2,r3
10003120:	183d960e 	bge	r3,zero,1000277c <__alt_data_end+0xf800277c>
10003124:	003fd606 	br	10003080 <__alt_data_end+0xf8003080>
10003128:	0005883a 	mov	r2,zero
1000312c:	003f8e06 	br	10002f68 <__alt_data_end+0xf8002f68>
10003130:	9080004c 	andi	r2,r18,1
10003134:	103f811e 	bne	r2,zero,10002f3c <__alt_data_end+0xf8002f3c>
10003138:	d8802117 	ldw	r2,132(sp)
1000313c:	1405c83a 	sub	r2,r2,r16
10003140:	d8803315 	stw	r2,204(sp)
10003144:	b47ef326 	beq	r22,r17,10002d14 <__alt_data_end+0xf8002d14>
10003148:	dd802617 	ldw	r22,152(sp)
1000314c:	003f1106 	br	10002d94 <__alt_data_end+0xf8002d94>
10003150:	d9c02785 	stb	r7,158(sp)
10003154:	00390406 	br	10001568 <__alt_data_end+0xf8001568>
10003158:	d9c02785 	stb	r7,158(sp)
1000315c:	0038d306 	br	100014ac <__alt_data_end+0xf80014ac>
10003160:	d9c02785 	stb	r7,158(sp)
10003164:	003a6106 	br	10001aec <__alt_data_end+0xf8001aec>
10003168:	d9c02785 	stb	r7,158(sp)
1000316c:	003af806 	br	10001d50 <__alt_data_end+0xf8001d50>
10003170:	0005883a 	mov	r2,zero
10003174:	003d7e06 	br	10002770 <__alt_data_end+0xf8002770>
10003178:	d8802344 	addi	r2,sp,141
1000317c:	003f1306 	br	10002dcc <__alt_data_end+0xf8002dcc>
10003180:	d9c02785 	stb	r7,158(sp)
10003184:	00392306 	br	10001614 <__alt_data_end+0xf8001614>
10003188:	d9c02785 	stb	r7,158(sp)
1000318c:	003aa906 	br	10001c34 <__alt_data_end+0xf8001c34>
10003190:	d9c02785 	stb	r7,158(sp)
10003194:	003a3d06 	br	10001a8c <__alt_data_end+0xf8001a8c>
10003198:	d9c02785 	stb	r7,158(sp)
1000319c:	003aca06 	br	10001cc8 <__alt_data_end+0xf8001cc8>

100031a0 <__vfprintf_internal>:
100031a0:	00840074 	movhi	r2,4097
100031a4:	1098fc04 	addi	r2,r2,25584
100031a8:	300f883a 	mov	r7,r6
100031ac:	280d883a 	mov	r6,r5
100031b0:	200b883a 	mov	r5,r4
100031b4:	11000017 	ldw	r4,0(r2)
100031b8:	0000fa81 	jmpi	10000fa8 <___vfprintf_internal_r>

100031bc <__sbprintf>:
100031bc:	2880030b 	ldhu	r2,12(r5)
100031c0:	2ac01917 	ldw	r11,100(r5)
100031c4:	2a80038b 	ldhu	r10,14(r5)
100031c8:	2a400717 	ldw	r9,28(r5)
100031cc:	2a000917 	ldw	r8,36(r5)
100031d0:	defee204 	addi	sp,sp,-1144
100031d4:	00c10004 	movi	r3,1024
100031d8:	dc011a15 	stw	r16,1128(sp)
100031dc:	10bfff4c 	andi	r2,r2,65533
100031e0:	2821883a 	mov	r16,r5
100031e4:	d8cb883a 	add	r5,sp,r3
100031e8:	dc811c15 	stw	r18,1136(sp)
100031ec:	dc411b15 	stw	r17,1132(sp)
100031f0:	dfc11d15 	stw	ra,1140(sp)
100031f4:	2025883a 	mov	r18,r4
100031f8:	d881030d 	sth	r2,1036(sp)
100031fc:	dac11915 	stw	r11,1124(sp)
10003200:	da81038d 	sth	r10,1038(sp)
10003204:	da410715 	stw	r9,1052(sp)
10003208:	da010915 	stw	r8,1060(sp)
1000320c:	dec10015 	stw	sp,1024(sp)
10003210:	dec10415 	stw	sp,1040(sp)
10003214:	d8c10215 	stw	r3,1032(sp)
10003218:	d8c10515 	stw	r3,1044(sp)
1000321c:	d8010615 	stw	zero,1048(sp)
10003220:	0000fa80 	call	10000fa8 <___vfprintf_internal_r>
10003224:	1023883a 	mov	r17,r2
10003228:	10000416 	blt	r2,zero,1000323c <__sbprintf+0x80>
1000322c:	d9410004 	addi	r5,sp,1024
10003230:	9009883a 	mov	r4,r18
10003234:	0004e700 	call	10004e70 <_fflush_r>
10003238:	10000d1e 	bne	r2,zero,10003270 <__sbprintf+0xb4>
1000323c:	d881030b 	ldhu	r2,1036(sp)
10003240:	1080100c 	andi	r2,r2,64
10003244:	10000326 	beq	r2,zero,10003254 <__sbprintf+0x98>
10003248:	8080030b 	ldhu	r2,12(r16)
1000324c:	10801014 	ori	r2,r2,64
10003250:	8080030d 	sth	r2,12(r16)
10003254:	8805883a 	mov	r2,r17
10003258:	dfc11d17 	ldw	ra,1140(sp)
1000325c:	dc811c17 	ldw	r18,1136(sp)
10003260:	dc411b17 	ldw	r17,1132(sp)
10003264:	dc011a17 	ldw	r16,1128(sp)
10003268:	dec11e04 	addi	sp,sp,1144
1000326c:	f800283a 	ret
10003270:	047fffc4 	movi	r17,-1
10003274:	003ff106 	br	1000323c <__alt_data_end+0xf800323c>

10003278 <__swsetup_r>:
10003278:	00840074 	movhi	r2,4097
1000327c:	defffd04 	addi	sp,sp,-12
10003280:	1098fc04 	addi	r2,r2,25584
10003284:	dc400115 	stw	r17,4(sp)
10003288:	2023883a 	mov	r17,r4
1000328c:	11000017 	ldw	r4,0(r2)
10003290:	dc000015 	stw	r16,0(sp)
10003294:	dfc00215 	stw	ra,8(sp)
10003298:	2821883a 	mov	r16,r5
1000329c:	20000226 	beq	r4,zero,100032a8 <__swsetup_r+0x30>
100032a0:	20800e17 	ldw	r2,56(r4)
100032a4:	10003126 	beq	r2,zero,1000336c <__swsetup_r+0xf4>
100032a8:	8080030b 	ldhu	r2,12(r16)
100032ac:	10c0020c 	andi	r3,r2,8
100032b0:	1009883a 	mov	r4,r2
100032b4:	18000f26 	beq	r3,zero,100032f4 <__swsetup_r+0x7c>
100032b8:	80c00417 	ldw	r3,16(r16)
100032bc:	18001526 	beq	r3,zero,10003314 <__swsetup_r+0x9c>
100032c0:	1100004c 	andi	r4,r2,1
100032c4:	20001c1e 	bne	r4,zero,10003338 <__swsetup_r+0xc0>
100032c8:	1080008c 	andi	r2,r2,2
100032cc:	1000291e 	bne	r2,zero,10003374 <__swsetup_r+0xfc>
100032d0:	80800517 	ldw	r2,20(r16)
100032d4:	80800215 	stw	r2,8(r16)
100032d8:	18001c26 	beq	r3,zero,1000334c <__swsetup_r+0xd4>
100032dc:	0005883a 	mov	r2,zero
100032e0:	dfc00217 	ldw	ra,8(sp)
100032e4:	dc400117 	ldw	r17,4(sp)
100032e8:	dc000017 	ldw	r16,0(sp)
100032ec:	dec00304 	addi	sp,sp,12
100032f0:	f800283a 	ret
100032f4:	2080040c 	andi	r2,r4,16
100032f8:	10002e26 	beq	r2,zero,100033b4 <__swsetup_r+0x13c>
100032fc:	2080010c 	andi	r2,r4,4
10003300:	10001e1e 	bne	r2,zero,1000337c <__swsetup_r+0x104>
10003304:	80c00417 	ldw	r3,16(r16)
10003308:	20800214 	ori	r2,r4,8
1000330c:	8080030d 	sth	r2,12(r16)
10003310:	183feb1e 	bne	r3,zero,100032c0 <__alt_data_end+0xf80032c0>
10003314:	1100a00c 	andi	r4,r2,640
10003318:	01408004 	movi	r5,512
1000331c:	217fe826 	beq	r4,r5,100032c0 <__alt_data_end+0xf80032c0>
10003320:	800b883a 	mov	r5,r16
10003324:	8809883a 	mov	r4,r17
10003328:	0005df00 	call	10005df0 <__smakebuf_r>
1000332c:	8080030b 	ldhu	r2,12(r16)
10003330:	80c00417 	ldw	r3,16(r16)
10003334:	003fe206 	br	100032c0 <__alt_data_end+0xf80032c0>
10003338:	80800517 	ldw	r2,20(r16)
1000333c:	80000215 	stw	zero,8(r16)
10003340:	0085c83a 	sub	r2,zero,r2
10003344:	80800615 	stw	r2,24(r16)
10003348:	183fe41e 	bne	r3,zero,100032dc <__alt_data_end+0xf80032dc>
1000334c:	80c0030b 	ldhu	r3,12(r16)
10003350:	0005883a 	mov	r2,zero
10003354:	1900200c 	andi	r4,r3,128
10003358:	203fe126 	beq	r4,zero,100032e0 <__alt_data_end+0xf80032e0>
1000335c:	18c01014 	ori	r3,r3,64
10003360:	80c0030d 	sth	r3,12(r16)
10003364:	00bfffc4 	movi	r2,-1
10003368:	003fdd06 	br	100032e0 <__alt_data_end+0xf80032e0>
1000336c:	000524c0 	call	1000524c <__sinit>
10003370:	003fcd06 	br	100032a8 <__alt_data_end+0xf80032a8>
10003374:	0005883a 	mov	r2,zero
10003378:	003fd606 	br	100032d4 <__alt_data_end+0xf80032d4>
1000337c:	81400c17 	ldw	r5,48(r16)
10003380:	28000626 	beq	r5,zero,1000339c <__swsetup_r+0x124>
10003384:	80801004 	addi	r2,r16,64
10003388:	28800326 	beq	r5,r2,10003398 <__swsetup_r+0x120>
1000338c:	8809883a 	mov	r4,r17
10003390:	00053c00 	call	100053c0 <_free_r>
10003394:	8100030b 	ldhu	r4,12(r16)
10003398:	80000c15 	stw	zero,48(r16)
1000339c:	80c00417 	ldw	r3,16(r16)
100033a0:	00bff6c4 	movi	r2,-37
100033a4:	1108703a 	and	r4,r2,r4
100033a8:	80000115 	stw	zero,4(r16)
100033ac:	80c00015 	stw	r3,0(r16)
100033b0:	003fd506 	br	10003308 <__alt_data_end+0xf8003308>
100033b4:	00800244 	movi	r2,9
100033b8:	88800015 	stw	r2,0(r17)
100033bc:	20801014 	ori	r2,r4,64
100033c0:	8080030d 	sth	r2,12(r16)
100033c4:	00bfffc4 	movi	r2,-1
100033c8:	003fc506 	br	100032e0 <__alt_data_end+0xf80032e0>

100033cc <quorem>:
100033cc:	defff704 	addi	sp,sp,-36
100033d0:	dc800215 	stw	r18,8(sp)
100033d4:	20800417 	ldw	r2,16(r4)
100033d8:	2c800417 	ldw	r18,16(r5)
100033dc:	dfc00815 	stw	ra,32(sp)
100033e0:	ddc00715 	stw	r23,28(sp)
100033e4:	dd800615 	stw	r22,24(sp)
100033e8:	dd400515 	stw	r21,20(sp)
100033ec:	dd000415 	stw	r20,16(sp)
100033f0:	dcc00315 	stw	r19,12(sp)
100033f4:	dc400115 	stw	r17,4(sp)
100033f8:	dc000015 	stw	r16,0(sp)
100033fc:	14807116 	blt	r2,r18,100035c4 <quorem+0x1f8>
10003400:	94bfffc4 	addi	r18,r18,-1
10003404:	94ad883a 	add	r22,r18,r18
10003408:	b5ad883a 	add	r22,r22,r22
1000340c:	2c400504 	addi	r17,r5,20
10003410:	8da9883a 	add	r20,r17,r22
10003414:	25400504 	addi	r21,r4,20
10003418:	282f883a 	mov	r23,r5
1000341c:	adad883a 	add	r22,r21,r22
10003420:	a1400017 	ldw	r5,0(r20)
10003424:	2021883a 	mov	r16,r4
10003428:	b1000017 	ldw	r4,0(r22)
1000342c:	29400044 	addi	r5,r5,1
10003430:	000afcc0 	call	1000afcc <__udivsi3>
10003434:	1027883a 	mov	r19,r2
10003438:	10002c26 	beq	r2,zero,100034ec <quorem+0x120>
1000343c:	a813883a 	mov	r9,r21
10003440:	880b883a 	mov	r5,r17
10003444:	0009883a 	mov	r4,zero
10003448:	000d883a 	mov	r6,zero
1000344c:	2a000017 	ldw	r8,0(r5)
10003450:	49c00017 	ldw	r7,0(r9)
10003454:	29400104 	addi	r5,r5,4
10003458:	40bfffcc 	andi	r2,r8,65535
1000345c:	14c5383a 	mul	r2,r2,r19
10003460:	4010d43a 	srli	r8,r8,16
10003464:	38ffffcc 	andi	r3,r7,65535
10003468:	1105883a 	add	r2,r2,r4
1000346c:	1008d43a 	srli	r4,r2,16
10003470:	44d1383a 	mul	r8,r8,r19
10003474:	198d883a 	add	r6,r3,r6
10003478:	10ffffcc 	andi	r3,r2,65535
1000347c:	30c7c83a 	sub	r3,r6,r3
10003480:	380ed43a 	srli	r7,r7,16
10003484:	4105883a 	add	r2,r8,r4
10003488:	180dd43a 	srai	r6,r3,16
1000348c:	113fffcc 	andi	r4,r2,65535
10003490:	390fc83a 	sub	r7,r7,r4
10003494:	398d883a 	add	r6,r7,r6
10003498:	300e943a 	slli	r7,r6,16
1000349c:	18ffffcc 	andi	r3,r3,65535
100034a0:	1008d43a 	srli	r4,r2,16
100034a4:	38ceb03a 	or	r7,r7,r3
100034a8:	49c00015 	stw	r7,0(r9)
100034ac:	300dd43a 	srai	r6,r6,16
100034b0:	4a400104 	addi	r9,r9,4
100034b4:	a17fe52e 	bgeu	r20,r5,1000344c <__alt_data_end+0xf800344c>
100034b8:	b0800017 	ldw	r2,0(r22)
100034bc:	10000b1e 	bne	r2,zero,100034ec <quorem+0x120>
100034c0:	b0bfff04 	addi	r2,r22,-4
100034c4:	a880082e 	bgeu	r21,r2,100034e8 <quorem+0x11c>
100034c8:	b0ffff17 	ldw	r3,-4(r22)
100034cc:	18000326 	beq	r3,zero,100034dc <quorem+0x110>
100034d0:	00000506 	br	100034e8 <quorem+0x11c>
100034d4:	10c00017 	ldw	r3,0(r2)
100034d8:	1800031e 	bne	r3,zero,100034e8 <quorem+0x11c>
100034dc:	10bfff04 	addi	r2,r2,-4
100034e0:	94bfffc4 	addi	r18,r18,-1
100034e4:	a8bffb36 	bltu	r21,r2,100034d4 <__alt_data_end+0xf80034d4>
100034e8:	84800415 	stw	r18,16(r16)
100034ec:	b80b883a 	mov	r5,r23
100034f0:	8009883a 	mov	r4,r16
100034f4:	00075300 	call	10007530 <__mcmp>
100034f8:	10002616 	blt	r2,zero,10003594 <quorem+0x1c8>
100034fc:	9cc00044 	addi	r19,r19,1
10003500:	a805883a 	mov	r2,r21
10003504:	000b883a 	mov	r5,zero
10003508:	11000017 	ldw	r4,0(r2)
1000350c:	89800017 	ldw	r6,0(r17)
10003510:	10800104 	addi	r2,r2,4
10003514:	20ffffcc 	andi	r3,r4,65535
10003518:	194b883a 	add	r5,r3,r5
1000351c:	30ffffcc 	andi	r3,r6,65535
10003520:	28c7c83a 	sub	r3,r5,r3
10003524:	300cd43a 	srli	r6,r6,16
10003528:	2008d43a 	srli	r4,r4,16
1000352c:	180bd43a 	srai	r5,r3,16
10003530:	18ffffcc 	andi	r3,r3,65535
10003534:	2189c83a 	sub	r4,r4,r6
10003538:	2149883a 	add	r4,r4,r5
1000353c:	200c943a 	slli	r6,r4,16
10003540:	8c400104 	addi	r17,r17,4
10003544:	200bd43a 	srai	r5,r4,16
10003548:	30c6b03a 	or	r3,r6,r3
1000354c:	10ffff15 	stw	r3,-4(r2)
10003550:	a47fed2e 	bgeu	r20,r17,10003508 <__alt_data_end+0xf8003508>
10003554:	9485883a 	add	r2,r18,r18
10003558:	1085883a 	add	r2,r2,r2
1000355c:	a887883a 	add	r3,r21,r2
10003560:	18800017 	ldw	r2,0(r3)
10003564:	10000b1e 	bne	r2,zero,10003594 <quorem+0x1c8>
10003568:	18bfff04 	addi	r2,r3,-4
1000356c:	a880082e 	bgeu	r21,r2,10003590 <quorem+0x1c4>
10003570:	18ffff17 	ldw	r3,-4(r3)
10003574:	18000326 	beq	r3,zero,10003584 <quorem+0x1b8>
10003578:	00000506 	br	10003590 <quorem+0x1c4>
1000357c:	10c00017 	ldw	r3,0(r2)
10003580:	1800031e 	bne	r3,zero,10003590 <quorem+0x1c4>
10003584:	10bfff04 	addi	r2,r2,-4
10003588:	94bfffc4 	addi	r18,r18,-1
1000358c:	a8bffb36 	bltu	r21,r2,1000357c <__alt_data_end+0xf800357c>
10003590:	84800415 	stw	r18,16(r16)
10003594:	9805883a 	mov	r2,r19
10003598:	dfc00817 	ldw	ra,32(sp)
1000359c:	ddc00717 	ldw	r23,28(sp)
100035a0:	dd800617 	ldw	r22,24(sp)
100035a4:	dd400517 	ldw	r21,20(sp)
100035a8:	dd000417 	ldw	r20,16(sp)
100035ac:	dcc00317 	ldw	r19,12(sp)
100035b0:	dc800217 	ldw	r18,8(sp)
100035b4:	dc400117 	ldw	r17,4(sp)
100035b8:	dc000017 	ldw	r16,0(sp)
100035bc:	dec00904 	addi	sp,sp,36
100035c0:	f800283a 	ret
100035c4:	0005883a 	mov	r2,zero
100035c8:	003ff306 	br	10003598 <__alt_data_end+0xf8003598>

100035cc <_dtoa_r>:
100035cc:	20801017 	ldw	r2,64(r4)
100035d0:	deffde04 	addi	sp,sp,-136
100035d4:	df002015 	stw	fp,128(sp)
100035d8:	dcc01b15 	stw	r19,108(sp)
100035dc:	dc801a15 	stw	r18,104(sp)
100035e0:	dc401915 	stw	r17,100(sp)
100035e4:	dc001815 	stw	r16,96(sp)
100035e8:	dfc02115 	stw	ra,132(sp)
100035ec:	ddc01f15 	stw	r23,124(sp)
100035f0:	dd801e15 	stw	r22,120(sp)
100035f4:	dd401d15 	stw	r21,116(sp)
100035f8:	dd001c15 	stw	r20,112(sp)
100035fc:	d9c00315 	stw	r7,12(sp)
10003600:	2039883a 	mov	fp,r4
10003604:	3023883a 	mov	r17,r6
10003608:	2825883a 	mov	r18,r5
1000360c:	dc002417 	ldw	r16,144(sp)
10003610:	3027883a 	mov	r19,r6
10003614:	10000826 	beq	r2,zero,10003638 <_dtoa_r+0x6c>
10003618:	21801117 	ldw	r6,68(r4)
1000361c:	00c00044 	movi	r3,1
10003620:	100b883a 	mov	r5,r2
10003624:	1986983a 	sll	r3,r3,r6
10003628:	11800115 	stw	r6,4(r2)
1000362c:	10c00215 	stw	r3,8(r2)
10003630:	0006d100 	call	10006d10 <_Bfree>
10003634:	e0001015 	stw	zero,64(fp)
10003638:	88002e16 	blt	r17,zero,100036f4 <_dtoa_r+0x128>
1000363c:	80000015 	stw	zero,0(r16)
10003640:	889ffc2c 	andhi	r2,r17,32752
10003644:	00dffc34 	movhi	r3,32752
10003648:	10c01c26 	beq	r2,r3,100036bc <_dtoa_r+0xf0>
1000364c:	000d883a 	mov	r6,zero
10003650:	000f883a 	mov	r7,zero
10003654:	9009883a 	mov	r4,r18
10003658:	980b883a 	mov	r5,r19
1000365c:	000c21c0 	call	1000c21c <__eqdf2>
10003660:	10002b1e 	bne	r2,zero,10003710 <_dtoa_r+0x144>
10003664:	d9c02317 	ldw	r7,140(sp)
10003668:	00800044 	movi	r2,1
1000366c:	38800015 	stw	r2,0(r7)
10003670:	d8802517 	ldw	r2,148(sp)
10003674:	10019e26 	beq	r2,zero,10003cf0 <_dtoa_r+0x724>
10003678:	d8c02517 	ldw	r3,148(sp)
1000367c:	00840074 	movhi	r2,4097
10003680:	10917044 	addi	r2,r2,17857
10003684:	18800015 	stw	r2,0(r3)
10003688:	10bfffc4 	addi	r2,r2,-1
1000368c:	dfc02117 	ldw	ra,132(sp)
10003690:	df002017 	ldw	fp,128(sp)
10003694:	ddc01f17 	ldw	r23,124(sp)
10003698:	dd801e17 	ldw	r22,120(sp)
1000369c:	dd401d17 	ldw	r21,116(sp)
100036a0:	dd001c17 	ldw	r20,112(sp)
100036a4:	dcc01b17 	ldw	r19,108(sp)
100036a8:	dc801a17 	ldw	r18,104(sp)
100036ac:	dc401917 	ldw	r17,100(sp)
100036b0:	dc001817 	ldw	r16,96(sp)
100036b4:	dec02204 	addi	sp,sp,136
100036b8:	f800283a 	ret
100036bc:	d8c02317 	ldw	r3,140(sp)
100036c0:	0089c3c4 	movi	r2,9999
100036c4:	18800015 	stw	r2,0(r3)
100036c8:	90017726 	beq	r18,zero,10003ca8 <_dtoa_r+0x6dc>
100036cc:	00840074 	movhi	r2,4097
100036d0:	10917c04 	addi	r2,r2,17904
100036d4:	d9002517 	ldw	r4,148(sp)
100036d8:	203fec26 	beq	r4,zero,1000368c <__alt_data_end+0xf800368c>
100036dc:	10c000c7 	ldb	r3,3(r2)
100036e0:	1801781e 	bne	r3,zero,10003cc4 <_dtoa_r+0x6f8>
100036e4:	10c000c4 	addi	r3,r2,3
100036e8:	d9802517 	ldw	r6,148(sp)
100036ec:	30c00015 	stw	r3,0(r6)
100036f0:	003fe606 	br	1000368c <__alt_data_end+0xf800368c>
100036f4:	04e00034 	movhi	r19,32768
100036f8:	9cffffc4 	addi	r19,r19,-1
100036fc:	00800044 	movi	r2,1
10003700:	8ce6703a 	and	r19,r17,r19
10003704:	80800015 	stw	r2,0(r16)
10003708:	9823883a 	mov	r17,r19
1000370c:	003fcc06 	br	10003640 <__alt_data_end+0xf8003640>
10003710:	d8800204 	addi	r2,sp,8
10003714:	d8800015 	stw	r2,0(sp)
10003718:	d9c00104 	addi	r7,sp,4
1000371c:	900b883a 	mov	r5,r18
10003720:	980d883a 	mov	r6,r19
10003724:	e009883a 	mov	r4,fp
10003728:	8820d53a 	srli	r16,r17,20
1000372c:	00078fc0 	call	100078fc <__d2b>
10003730:	d8800915 	stw	r2,36(sp)
10003734:	8001651e 	bne	r16,zero,10003ccc <_dtoa_r+0x700>
10003738:	dd800217 	ldw	r22,8(sp)
1000373c:	dc000117 	ldw	r16,4(sp)
10003740:	00800804 	movi	r2,32
10003744:	b421883a 	add	r16,r22,r16
10003748:	80c10c84 	addi	r3,r16,1074
1000374c:	10c2d10e 	bge	r2,r3,10004294 <_dtoa_r+0xcc8>
10003750:	00801004 	movi	r2,64
10003754:	81010484 	addi	r4,r16,1042
10003758:	10c7c83a 	sub	r3,r2,r3
1000375c:	9108d83a 	srl	r4,r18,r4
10003760:	88e2983a 	sll	r17,r17,r3
10003764:	2448b03a 	or	r4,r4,r17
10003768:	000d5e40 	call	1000d5e4 <__floatunsidf>
1000376c:	017f8434 	movhi	r5,65040
10003770:	01800044 	movi	r6,1
10003774:	1009883a 	mov	r4,r2
10003778:	194b883a 	add	r5,r3,r5
1000377c:	843fffc4 	addi	r16,r16,-1
10003780:	d9801115 	stw	r6,68(sp)
10003784:	000d883a 	mov	r6,zero
10003788:	01cffe34 	movhi	r7,16376
1000378c:	000cb8c0 	call	1000cb8c <__subdf3>
10003790:	0198dbf4 	movhi	r6,25455
10003794:	01cff4f4 	movhi	r7,16339
10003798:	3190d844 	addi	r6,r6,17249
1000379c:	39e1e9c4 	addi	r7,r7,-30809
100037a0:	1009883a 	mov	r4,r2
100037a4:	180b883a 	mov	r5,r3
100037a8:	000c4740 	call	1000c474 <__muldf3>
100037ac:	01a2d874 	movhi	r6,35681
100037b0:	01cff1f4 	movhi	r7,16327
100037b4:	31b22cc4 	addi	r6,r6,-14157
100037b8:	39e28a04 	addi	r7,r7,-30168
100037bc:	180b883a 	mov	r5,r3
100037c0:	1009883a 	mov	r4,r2
100037c4:	000b0880 	call	1000b088 <__adddf3>
100037c8:	8009883a 	mov	r4,r16
100037cc:	1029883a 	mov	r20,r2
100037d0:	1823883a 	mov	r17,r3
100037d4:	000d5080 	call	1000d508 <__floatsidf>
100037d8:	019427f4 	movhi	r6,20639
100037dc:	01cff4f4 	movhi	r7,16339
100037e0:	319e7ec4 	addi	r6,r6,31227
100037e4:	39d104c4 	addi	r7,r7,17427
100037e8:	1009883a 	mov	r4,r2
100037ec:	180b883a 	mov	r5,r3
100037f0:	000c4740 	call	1000c474 <__muldf3>
100037f4:	100d883a 	mov	r6,r2
100037f8:	180f883a 	mov	r7,r3
100037fc:	a009883a 	mov	r4,r20
10003800:	880b883a 	mov	r5,r17
10003804:	000b0880 	call	1000b088 <__adddf3>
10003808:	1009883a 	mov	r4,r2
1000380c:	180b883a 	mov	r5,r3
10003810:	1029883a 	mov	r20,r2
10003814:	1823883a 	mov	r17,r3
10003818:	000d4880 	call	1000d488 <__fixdfsi>
1000381c:	000d883a 	mov	r6,zero
10003820:	000f883a 	mov	r7,zero
10003824:	a009883a 	mov	r4,r20
10003828:	880b883a 	mov	r5,r17
1000382c:	d8800515 	stw	r2,20(sp)
10003830:	000c3800 	call	1000c380 <__ledf2>
10003834:	10028716 	blt	r2,zero,10004254 <_dtoa_r+0xc88>
10003838:	d8c00517 	ldw	r3,20(sp)
1000383c:	00800584 	movi	r2,22
10003840:	10c27536 	bltu	r2,r3,10004218 <_dtoa_r+0xc4c>
10003844:	180490fa 	slli	r2,r3,3
10003848:	00c40074 	movhi	r3,4097
1000384c:	18d19804 	addi	r3,r3,18016
10003850:	1885883a 	add	r2,r3,r2
10003854:	11000017 	ldw	r4,0(r2)
10003858:	11400117 	ldw	r5,4(r2)
1000385c:	900d883a 	mov	r6,r18
10003860:	980f883a 	mov	r7,r19
10003864:	000c2a40 	call	1000c2a4 <__gedf2>
10003868:	00828d0e 	bge	zero,r2,100042a0 <_dtoa_r+0xcd4>
1000386c:	d9000517 	ldw	r4,20(sp)
10003870:	d8000e15 	stw	zero,56(sp)
10003874:	213fffc4 	addi	r4,r4,-1
10003878:	d9000515 	stw	r4,20(sp)
1000387c:	b42dc83a 	sub	r22,r22,r16
10003880:	b5bfffc4 	addi	r22,r22,-1
10003884:	b0026f16 	blt	r22,zero,10004244 <_dtoa_r+0xc78>
10003888:	d8000815 	stw	zero,32(sp)
1000388c:	d9c00517 	ldw	r7,20(sp)
10003890:	38026416 	blt	r7,zero,10004224 <_dtoa_r+0xc58>
10003894:	b1ed883a 	add	r22,r22,r7
10003898:	d9c00d15 	stw	r7,52(sp)
1000389c:	d8000a15 	stw	zero,40(sp)
100038a0:	d9800317 	ldw	r6,12(sp)
100038a4:	00800244 	movi	r2,9
100038a8:	11811436 	bltu	r2,r6,10003cfc <_dtoa_r+0x730>
100038ac:	00800144 	movi	r2,5
100038b0:	1184e10e 	bge	r2,r6,10004c38 <_dtoa_r+0x166c>
100038b4:	31bfff04 	addi	r6,r6,-4
100038b8:	d9800315 	stw	r6,12(sp)
100038bc:	0023883a 	mov	r17,zero
100038c0:	d9800317 	ldw	r6,12(sp)
100038c4:	008000c4 	movi	r2,3
100038c8:	30836726 	beq	r6,r2,10004668 <_dtoa_r+0x109c>
100038cc:	1183410e 	bge	r2,r6,100045d4 <_dtoa_r+0x1008>
100038d0:	d9c00317 	ldw	r7,12(sp)
100038d4:	00800104 	movi	r2,4
100038d8:	38827c26 	beq	r7,r2,100042cc <_dtoa_r+0xd00>
100038dc:	00800144 	movi	r2,5
100038e0:	3884c41e 	bne	r7,r2,10004bf4 <_dtoa_r+0x1628>
100038e4:	00800044 	movi	r2,1
100038e8:	d8800b15 	stw	r2,44(sp)
100038ec:	d8c00517 	ldw	r3,20(sp)
100038f0:	d9002217 	ldw	r4,136(sp)
100038f4:	1907883a 	add	r3,r3,r4
100038f8:	19800044 	addi	r6,r3,1
100038fc:	d8c00c15 	stw	r3,48(sp)
10003900:	d9800615 	stw	r6,24(sp)
10003904:	0183a40e 	bge	zero,r6,10004798 <_dtoa_r+0x11cc>
10003908:	d9800617 	ldw	r6,24(sp)
1000390c:	3021883a 	mov	r16,r6
10003910:	e0001115 	stw	zero,68(fp)
10003914:	008005c4 	movi	r2,23
10003918:	1184c92e 	bgeu	r2,r6,10004c40 <_dtoa_r+0x1674>
1000391c:	00c00044 	movi	r3,1
10003920:	00800104 	movi	r2,4
10003924:	1085883a 	add	r2,r2,r2
10003928:	11000504 	addi	r4,r2,20
1000392c:	180b883a 	mov	r5,r3
10003930:	18c00044 	addi	r3,r3,1
10003934:	313ffb2e 	bgeu	r6,r4,10003924 <__alt_data_end+0xf8003924>
10003938:	e1401115 	stw	r5,68(fp)
1000393c:	e009883a 	mov	r4,fp
10003940:	0006c680 	call	10006c68 <_Balloc>
10003944:	d8800715 	stw	r2,28(sp)
10003948:	e0801015 	stw	r2,64(fp)
1000394c:	00800384 	movi	r2,14
10003950:	1400f736 	bltu	r2,r16,10003d30 <_dtoa_r+0x764>
10003954:	8800f626 	beq	r17,zero,10003d30 <_dtoa_r+0x764>
10003958:	d9c00517 	ldw	r7,20(sp)
1000395c:	01c39a0e 	bge	zero,r7,100047c8 <_dtoa_r+0x11fc>
10003960:	388003cc 	andi	r2,r7,15
10003964:	100490fa 	slli	r2,r2,3
10003968:	382bd13a 	srai	r21,r7,4
1000396c:	00c40074 	movhi	r3,4097
10003970:	18d19804 	addi	r3,r3,18016
10003974:	1885883a 	add	r2,r3,r2
10003978:	a8c0040c 	andi	r3,r21,16
1000397c:	12400017 	ldw	r9,0(r2)
10003980:	12000117 	ldw	r8,4(r2)
10003984:	18037926 	beq	r3,zero,1000476c <_dtoa_r+0x11a0>
10003988:	00840074 	movhi	r2,4097
1000398c:	10918e04 	addi	r2,r2,17976
10003990:	11800817 	ldw	r6,32(r2)
10003994:	11c00917 	ldw	r7,36(r2)
10003998:	9009883a 	mov	r4,r18
1000399c:	980b883a 	mov	r5,r19
100039a0:	da001715 	stw	r8,92(sp)
100039a4:	da401615 	stw	r9,88(sp)
100039a8:	000b9340 	call	1000b934 <__divdf3>
100039ac:	da001717 	ldw	r8,92(sp)
100039b0:	da401617 	ldw	r9,88(sp)
100039b4:	ad4003cc 	andi	r21,r21,15
100039b8:	040000c4 	movi	r16,3
100039bc:	1023883a 	mov	r17,r2
100039c0:	1829883a 	mov	r20,r3
100039c4:	a8001126 	beq	r21,zero,10003a0c <_dtoa_r+0x440>
100039c8:	05c40074 	movhi	r23,4097
100039cc:	bdd18e04 	addi	r23,r23,17976
100039d0:	4805883a 	mov	r2,r9
100039d4:	4007883a 	mov	r3,r8
100039d8:	a980004c 	andi	r6,r21,1
100039dc:	1009883a 	mov	r4,r2
100039e0:	a82bd07a 	srai	r21,r21,1
100039e4:	180b883a 	mov	r5,r3
100039e8:	30000426 	beq	r6,zero,100039fc <_dtoa_r+0x430>
100039ec:	b9800017 	ldw	r6,0(r23)
100039f0:	b9c00117 	ldw	r7,4(r23)
100039f4:	84000044 	addi	r16,r16,1
100039f8:	000c4740 	call	1000c474 <__muldf3>
100039fc:	bdc00204 	addi	r23,r23,8
10003a00:	a83ff51e 	bne	r21,zero,100039d8 <__alt_data_end+0xf80039d8>
10003a04:	1013883a 	mov	r9,r2
10003a08:	1811883a 	mov	r8,r3
10003a0c:	480d883a 	mov	r6,r9
10003a10:	400f883a 	mov	r7,r8
10003a14:	8809883a 	mov	r4,r17
10003a18:	a00b883a 	mov	r5,r20
10003a1c:	000b9340 	call	1000b934 <__divdf3>
10003a20:	d8800f15 	stw	r2,60(sp)
10003a24:	d8c01015 	stw	r3,64(sp)
10003a28:	d8c00e17 	ldw	r3,56(sp)
10003a2c:	18000626 	beq	r3,zero,10003a48 <_dtoa_r+0x47c>
10003a30:	d9000f17 	ldw	r4,60(sp)
10003a34:	d9401017 	ldw	r5,64(sp)
10003a38:	000d883a 	mov	r6,zero
10003a3c:	01cffc34 	movhi	r7,16368
10003a40:	000c3800 	call	1000c380 <__ledf2>
10003a44:	10040b16 	blt	r2,zero,10004a74 <_dtoa_r+0x14a8>
10003a48:	8009883a 	mov	r4,r16
10003a4c:	000d5080 	call	1000d508 <__floatsidf>
10003a50:	d9800f17 	ldw	r6,60(sp)
10003a54:	d9c01017 	ldw	r7,64(sp)
10003a58:	1009883a 	mov	r4,r2
10003a5c:	180b883a 	mov	r5,r3
10003a60:	000c4740 	call	1000c474 <__muldf3>
10003a64:	000d883a 	mov	r6,zero
10003a68:	01d00734 	movhi	r7,16412
10003a6c:	1009883a 	mov	r4,r2
10003a70:	180b883a 	mov	r5,r3
10003a74:	000b0880 	call	1000b088 <__adddf3>
10003a78:	1021883a 	mov	r16,r2
10003a7c:	d8800617 	ldw	r2,24(sp)
10003a80:	047f3034 	movhi	r17,64704
10003a84:	1c63883a 	add	r17,r3,r17
10003a88:	10031826 	beq	r2,zero,100046ec <_dtoa_r+0x1120>
10003a8c:	d8c00517 	ldw	r3,20(sp)
10003a90:	db000617 	ldw	r12,24(sp)
10003a94:	d8c01315 	stw	r3,76(sp)
10003a98:	d9000b17 	ldw	r4,44(sp)
10003a9c:	20038f26 	beq	r4,zero,100048dc <_dtoa_r+0x1310>
10003aa0:	60bfffc4 	addi	r2,r12,-1
10003aa4:	100490fa 	slli	r2,r2,3
10003aa8:	00c40074 	movhi	r3,4097
10003aac:	18d19804 	addi	r3,r3,18016
10003ab0:	1885883a 	add	r2,r3,r2
10003ab4:	11800017 	ldw	r6,0(r2)
10003ab8:	11c00117 	ldw	r7,4(r2)
10003abc:	d8800717 	ldw	r2,28(sp)
10003ac0:	0009883a 	mov	r4,zero
10003ac4:	014ff834 	movhi	r5,16352
10003ac8:	db001615 	stw	r12,88(sp)
10003acc:	15c00044 	addi	r23,r2,1
10003ad0:	000b9340 	call	1000b934 <__divdf3>
10003ad4:	800d883a 	mov	r6,r16
10003ad8:	880f883a 	mov	r7,r17
10003adc:	1009883a 	mov	r4,r2
10003ae0:	180b883a 	mov	r5,r3
10003ae4:	000cb8c0 	call	1000cb8c <__subdf3>
10003ae8:	d9401017 	ldw	r5,64(sp)
10003aec:	d9000f17 	ldw	r4,60(sp)
10003af0:	102b883a 	mov	r21,r2
10003af4:	d8c01215 	stw	r3,72(sp)
10003af8:	000d4880 	call	1000d488 <__fixdfsi>
10003afc:	1009883a 	mov	r4,r2
10003b00:	1029883a 	mov	r20,r2
10003b04:	000d5080 	call	1000d508 <__floatsidf>
10003b08:	d9000f17 	ldw	r4,60(sp)
10003b0c:	d9401017 	ldw	r5,64(sp)
10003b10:	100d883a 	mov	r6,r2
10003b14:	180f883a 	mov	r7,r3
10003b18:	000cb8c0 	call	1000cb8c <__subdf3>
10003b1c:	1823883a 	mov	r17,r3
10003b20:	d8c00717 	ldw	r3,28(sp)
10003b24:	d9401217 	ldw	r5,72(sp)
10003b28:	a2000c04 	addi	r8,r20,48
10003b2c:	1021883a 	mov	r16,r2
10003b30:	1a000005 	stb	r8,0(r3)
10003b34:	800d883a 	mov	r6,r16
10003b38:	880f883a 	mov	r7,r17
10003b3c:	a809883a 	mov	r4,r21
10003b40:	4029883a 	mov	r20,r8
10003b44:	000c2a40 	call	1000c2a4 <__gedf2>
10003b48:	00841d16 	blt	zero,r2,10004bc0 <_dtoa_r+0x15f4>
10003b4c:	800d883a 	mov	r6,r16
10003b50:	880f883a 	mov	r7,r17
10003b54:	0009883a 	mov	r4,zero
10003b58:	014ffc34 	movhi	r5,16368
10003b5c:	000cb8c0 	call	1000cb8c <__subdf3>
10003b60:	d9401217 	ldw	r5,72(sp)
10003b64:	100d883a 	mov	r6,r2
10003b68:	180f883a 	mov	r7,r3
10003b6c:	a809883a 	mov	r4,r21
10003b70:	000c2a40 	call	1000c2a4 <__gedf2>
10003b74:	db001617 	ldw	r12,88(sp)
10003b78:	00840e16 	blt	zero,r2,10004bb4 <_dtoa_r+0x15e8>
10003b7c:	00800044 	movi	r2,1
10003b80:	13006b0e 	bge	r2,r12,10003d30 <_dtoa_r+0x764>
10003b84:	d9000717 	ldw	r4,28(sp)
10003b88:	dd800f15 	stw	r22,60(sp)
10003b8c:	dcc01015 	stw	r19,64(sp)
10003b90:	2319883a 	add	r12,r4,r12
10003b94:	dcc01217 	ldw	r19,72(sp)
10003b98:	602d883a 	mov	r22,r12
10003b9c:	dc801215 	stw	r18,72(sp)
10003ba0:	b825883a 	mov	r18,r23
10003ba4:	00000906 	br	10003bcc <_dtoa_r+0x600>
10003ba8:	000cb8c0 	call	1000cb8c <__subdf3>
10003bac:	a80d883a 	mov	r6,r21
10003bb0:	980f883a 	mov	r7,r19
10003bb4:	1009883a 	mov	r4,r2
10003bb8:	180b883a 	mov	r5,r3
10003bbc:	000c3800 	call	1000c380 <__ledf2>
10003bc0:	1003e816 	blt	r2,zero,10004b64 <_dtoa_r+0x1598>
10003bc4:	b825883a 	mov	r18,r23
10003bc8:	bd83e926 	beq	r23,r22,10004b70 <_dtoa_r+0x15a4>
10003bcc:	a809883a 	mov	r4,r21
10003bd0:	980b883a 	mov	r5,r19
10003bd4:	000d883a 	mov	r6,zero
10003bd8:	01d00934 	movhi	r7,16420
10003bdc:	000c4740 	call	1000c474 <__muldf3>
10003be0:	000d883a 	mov	r6,zero
10003be4:	01d00934 	movhi	r7,16420
10003be8:	8009883a 	mov	r4,r16
10003bec:	880b883a 	mov	r5,r17
10003bf0:	102b883a 	mov	r21,r2
10003bf4:	1827883a 	mov	r19,r3
10003bf8:	000c4740 	call	1000c474 <__muldf3>
10003bfc:	180b883a 	mov	r5,r3
10003c00:	1009883a 	mov	r4,r2
10003c04:	1821883a 	mov	r16,r3
10003c08:	1023883a 	mov	r17,r2
10003c0c:	000d4880 	call	1000d488 <__fixdfsi>
10003c10:	1009883a 	mov	r4,r2
10003c14:	1029883a 	mov	r20,r2
10003c18:	000d5080 	call	1000d508 <__floatsidf>
10003c1c:	8809883a 	mov	r4,r17
10003c20:	800b883a 	mov	r5,r16
10003c24:	100d883a 	mov	r6,r2
10003c28:	180f883a 	mov	r7,r3
10003c2c:	000cb8c0 	call	1000cb8c <__subdf3>
10003c30:	a5000c04 	addi	r20,r20,48
10003c34:	a80d883a 	mov	r6,r21
10003c38:	980f883a 	mov	r7,r19
10003c3c:	1009883a 	mov	r4,r2
10003c40:	180b883a 	mov	r5,r3
10003c44:	95000005 	stb	r20,0(r18)
10003c48:	1021883a 	mov	r16,r2
10003c4c:	1823883a 	mov	r17,r3
10003c50:	000c3800 	call	1000c380 <__ledf2>
10003c54:	bdc00044 	addi	r23,r23,1
10003c58:	800d883a 	mov	r6,r16
10003c5c:	880f883a 	mov	r7,r17
10003c60:	0009883a 	mov	r4,zero
10003c64:	014ffc34 	movhi	r5,16368
10003c68:	103fcf0e 	bge	r2,zero,10003ba8 <__alt_data_end+0xf8003ba8>
10003c6c:	d8c01317 	ldw	r3,76(sp)
10003c70:	d8c00515 	stw	r3,20(sp)
10003c74:	d9400917 	ldw	r5,36(sp)
10003c78:	e009883a 	mov	r4,fp
10003c7c:	0006d100 	call	10006d10 <_Bfree>
10003c80:	d9000517 	ldw	r4,20(sp)
10003c84:	d9802317 	ldw	r6,140(sp)
10003c88:	d9c02517 	ldw	r7,148(sp)
10003c8c:	b8000005 	stb	zero,0(r23)
10003c90:	20800044 	addi	r2,r4,1
10003c94:	30800015 	stw	r2,0(r6)
10003c98:	3802aa26 	beq	r7,zero,10004744 <_dtoa_r+0x1178>
10003c9c:	3dc00015 	stw	r23,0(r7)
10003ca0:	d8800717 	ldw	r2,28(sp)
10003ca4:	003e7906 	br	1000368c <__alt_data_end+0xf800368c>
10003ca8:	00800434 	movhi	r2,16
10003cac:	10bfffc4 	addi	r2,r2,-1
10003cb0:	88a2703a 	and	r17,r17,r2
10003cb4:	883e851e 	bne	r17,zero,100036cc <__alt_data_end+0xf80036cc>
10003cb8:	00840074 	movhi	r2,4097
10003cbc:	10917904 	addi	r2,r2,17892
10003cc0:	003e8406 	br	100036d4 <__alt_data_end+0xf80036d4>
10003cc4:	10c00204 	addi	r3,r2,8
10003cc8:	003e8706 	br	100036e8 <__alt_data_end+0xf80036e8>
10003ccc:	01400434 	movhi	r5,16
10003cd0:	297fffc4 	addi	r5,r5,-1
10003cd4:	994a703a 	and	r5,r19,r5
10003cd8:	9009883a 	mov	r4,r18
10003cdc:	843f0044 	addi	r16,r16,-1023
10003ce0:	294ffc34 	orhi	r5,r5,16368
10003ce4:	dd800217 	ldw	r22,8(sp)
10003ce8:	d8001115 	stw	zero,68(sp)
10003cec:	003ea506 	br	10003784 <__alt_data_end+0xf8003784>
10003cf0:	00840074 	movhi	r2,4097
10003cf4:	10917004 	addi	r2,r2,17856
10003cf8:	003e6406 	br	1000368c <__alt_data_end+0xf800368c>
10003cfc:	e0001115 	stw	zero,68(fp)
10003d00:	000b883a 	mov	r5,zero
10003d04:	e009883a 	mov	r4,fp
10003d08:	0006c680 	call	10006c68 <_Balloc>
10003d0c:	01bfffc4 	movi	r6,-1
10003d10:	01c00044 	movi	r7,1
10003d14:	d8800715 	stw	r2,28(sp)
10003d18:	d9800c15 	stw	r6,48(sp)
10003d1c:	e0801015 	stw	r2,64(fp)
10003d20:	d8000315 	stw	zero,12(sp)
10003d24:	d9c00b15 	stw	r7,44(sp)
10003d28:	d9800615 	stw	r6,24(sp)
10003d2c:	d8002215 	stw	zero,136(sp)
10003d30:	d8800117 	ldw	r2,4(sp)
10003d34:	10008916 	blt	r2,zero,10003f5c <_dtoa_r+0x990>
10003d38:	d9000517 	ldw	r4,20(sp)
10003d3c:	00c00384 	movi	r3,14
10003d40:	19008616 	blt	r3,r4,10003f5c <_dtoa_r+0x990>
10003d44:	200490fa 	slli	r2,r4,3
10003d48:	00c40074 	movhi	r3,4097
10003d4c:	d9802217 	ldw	r6,136(sp)
10003d50:	18d19804 	addi	r3,r3,18016
10003d54:	1885883a 	add	r2,r3,r2
10003d58:	14000017 	ldw	r16,0(r2)
10003d5c:	14400117 	ldw	r17,4(r2)
10003d60:	30016316 	blt	r6,zero,100042f0 <_dtoa_r+0xd24>
10003d64:	800d883a 	mov	r6,r16
10003d68:	880f883a 	mov	r7,r17
10003d6c:	9009883a 	mov	r4,r18
10003d70:	980b883a 	mov	r5,r19
10003d74:	000b9340 	call	1000b934 <__divdf3>
10003d78:	180b883a 	mov	r5,r3
10003d7c:	1009883a 	mov	r4,r2
10003d80:	000d4880 	call	1000d488 <__fixdfsi>
10003d84:	1009883a 	mov	r4,r2
10003d88:	102b883a 	mov	r21,r2
10003d8c:	000d5080 	call	1000d508 <__floatsidf>
10003d90:	800d883a 	mov	r6,r16
10003d94:	880f883a 	mov	r7,r17
10003d98:	1009883a 	mov	r4,r2
10003d9c:	180b883a 	mov	r5,r3
10003da0:	000c4740 	call	1000c474 <__muldf3>
10003da4:	100d883a 	mov	r6,r2
10003da8:	180f883a 	mov	r7,r3
10003dac:	9009883a 	mov	r4,r18
10003db0:	980b883a 	mov	r5,r19
10003db4:	000cb8c0 	call	1000cb8c <__subdf3>
10003db8:	d9c00717 	ldw	r7,28(sp)
10003dbc:	1009883a 	mov	r4,r2
10003dc0:	a8800c04 	addi	r2,r21,48
10003dc4:	38800005 	stb	r2,0(r7)
10003dc8:	3dc00044 	addi	r23,r7,1
10003dcc:	d9c00617 	ldw	r7,24(sp)
10003dd0:	01800044 	movi	r6,1
10003dd4:	180b883a 	mov	r5,r3
10003dd8:	2005883a 	mov	r2,r4
10003ddc:	39803826 	beq	r7,r6,10003ec0 <_dtoa_r+0x8f4>
10003de0:	000d883a 	mov	r6,zero
10003de4:	01d00934 	movhi	r7,16420
10003de8:	000c4740 	call	1000c474 <__muldf3>
10003dec:	000d883a 	mov	r6,zero
10003df0:	000f883a 	mov	r7,zero
10003df4:	1009883a 	mov	r4,r2
10003df8:	180b883a 	mov	r5,r3
10003dfc:	1025883a 	mov	r18,r2
10003e00:	1827883a 	mov	r19,r3
10003e04:	000c21c0 	call	1000c21c <__eqdf2>
10003e08:	103f9a26 	beq	r2,zero,10003c74 <__alt_data_end+0xf8003c74>
10003e0c:	d9c00617 	ldw	r7,24(sp)
10003e10:	d8c00717 	ldw	r3,28(sp)
10003e14:	b829883a 	mov	r20,r23
10003e18:	38bfffc4 	addi	r2,r7,-1
10003e1c:	18ad883a 	add	r22,r3,r2
10003e20:	00000a06 	br	10003e4c <_dtoa_r+0x880>
10003e24:	000c4740 	call	1000c474 <__muldf3>
10003e28:	000d883a 	mov	r6,zero
10003e2c:	000f883a 	mov	r7,zero
10003e30:	1009883a 	mov	r4,r2
10003e34:	180b883a 	mov	r5,r3
10003e38:	1025883a 	mov	r18,r2
10003e3c:	1827883a 	mov	r19,r3
10003e40:	b829883a 	mov	r20,r23
10003e44:	000c21c0 	call	1000c21c <__eqdf2>
10003e48:	103f8a26 	beq	r2,zero,10003c74 <__alt_data_end+0xf8003c74>
10003e4c:	800d883a 	mov	r6,r16
10003e50:	880f883a 	mov	r7,r17
10003e54:	9009883a 	mov	r4,r18
10003e58:	980b883a 	mov	r5,r19
10003e5c:	000b9340 	call	1000b934 <__divdf3>
10003e60:	180b883a 	mov	r5,r3
10003e64:	1009883a 	mov	r4,r2
10003e68:	000d4880 	call	1000d488 <__fixdfsi>
10003e6c:	1009883a 	mov	r4,r2
10003e70:	102b883a 	mov	r21,r2
10003e74:	000d5080 	call	1000d508 <__floatsidf>
10003e78:	800d883a 	mov	r6,r16
10003e7c:	880f883a 	mov	r7,r17
10003e80:	1009883a 	mov	r4,r2
10003e84:	180b883a 	mov	r5,r3
10003e88:	000c4740 	call	1000c474 <__muldf3>
10003e8c:	100d883a 	mov	r6,r2
10003e90:	180f883a 	mov	r7,r3
10003e94:	9009883a 	mov	r4,r18
10003e98:	980b883a 	mov	r5,r19
10003e9c:	000cb8c0 	call	1000cb8c <__subdf3>
10003ea0:	aa000c04 	addi	r8,r21,48
10003ea4:	a2000005 	stb	r8,0(r20)
10003ea8:	000d883a 	mov	r6,zero
10003eac:	01d00934 	movhi	r7,16420
10003eb0:	1009883a 	mov	r4,r2
10003eb4:	180b883a 	mov	r5,r3
10003eb8:	a5c00044 	addi	r23,r20,1
10003ebc:	b53fd91e 	bne	r22,r20,10003e24 <__alt_data_end+0xf8003e24>
10003ec0:	100d883a 	mov	r6,r2
10003ec4:	180f883a 	mov	r7,r3
10003ec8:	1009883a 	mov	r4,r2
10003ecc:	180b883a 	mov	r5,r3
10003ed0:	000b0880 	call	1000b088 <__adddf3>
10003ed4:	100d883a 	mov	r6,r2
10003ed8:	180f883a 	mov	r7,r3
10003edc:	8009883a 	mov	r4,r16
10003ee0:	880b883a 	mov	r5,r17
10003ee4:	1027883a 	mov	r19,r2
10003ee8:	1825883a 	mov	r18,r3
10003eec:	000c3800 	call	1000c380 <__ledf2>
10003ef0:	10000816 	blt	r2,zero,10003f14 <_dtoa_r+0x948>
10003ef4:	980d883a 	mov	r6,r19
10003ef8:	900f883a 	mov	r7,r18
10003efc:	8009883a 	mov	r4,r16
10003f00:	880b883a 	mov	r5,r17
10003f04:	000c21c0 	call	1000c21c <__eqdf2>
10003f08:	103f5a1e 	bne	r2,zero,10003c74 <__alt_data_end+0xf8003c74>
10003f0c:	ad40004c 	andi	r21,r21,1
10003f10:	a83f5826 	beq	r21,zero,10003c74 <__alt_data_end+0xf8003c74>
10003f14:	bd3fffc3 	ldbu	r20,-1(r23)
10003f18:	b8bfffc4 	addi	r2,r23,-1
10003f1c:	1007883a 	mov	r3,r2
10003f20:	01400e44 	movi	r5,57
10003f24:	d9800717 	ldw	r6,28(sp)
10003f28:	00000506 	br	10003f40 <_dtoa_r+0x974>
10003f2c:	18ffffc4 	addi	r3,r3,-1
10003f30:	11824726 	beq	r2,r6,10004850 <_dtoa_r+0x1284>
10003f34:	1d000003 	ldbu	r20,0(r3)
10003f38:	102f883a 	mov	r23,r2
10003f3c:	10bfffc4 	addi	r2,r2,-1
10003f40:	a1003fcc 	andi	r4,r20,255
10003f44:	2100201c 	xori	r4,r4,128
10003f48:	213fe004 	addi	r4,r4,-128
10003f4c:	217ff726 	beq	r4,r5,10003f2c <__alt_data_end+0xf8003f2c>
10003f50:	a2000044 	addi	r8,r20,1
10003f54:	12000005 	stb	r8,0(r2)
10003f58:	003f4606 	br	10003c74 <__alt_data_end+0xf8003c74>
10003f5c:	d9000b17 	ldw	r4,44(sp)
10003f60:	2000c826 	beq	r4,zero,10004284 <_dtoa_r+0xcb8>
10003f64:	d9800317 	ldw	r6,12(sp)
10003f68:	00c00044 	movi	r3,1
10003f6c:	1980f90e 	bge	r3,r6,10004354 <_dtoa_r+0xd88>
10003f70:	d8800617 	ldw	r2,24(sp)
10003f74:	d8c00a17 	ldw	r3,40(sp)
10003f78:	157fffc4 	addi	r21,r2,-1
10003f7c:	1d41f316 	blt	r3,r21,1000474c <_dtoa_r+0x1180>
10003f80:	1d6bc83a 	sub	r21,r3,r21
10003f84:	d9c00617 	ldw	r7,24(sp)
10003f88:	3802aa16 	blt	r7,zero,10004a34 <_dtoa_r+0x1468>
10003f8c:	dd000817 	ldw	r20,32(sp)
10003f90:	d8800617 	ldw	r2,24(sp)
10003f94:	d8c00817 	ldw	r3,32(sp)
10003f98:	01400044 	movi	r5,1
10003f9c:	e009883a 	mov	r4,fp
10003fa0:	1887883a 	add	r3,r3,r2
10003fa4:	d8c00815 	stw	r3,32(sp)
10003fa8:	b0ad883a 	add	r22,r22,r2
10003fac:	00070740 	call	10007074 <__i2b>
10003fb0:	1023883a 	mov	r17,r2
10003fb4:	a0000826 	beq	r20,zero,10003fd8 <_dtoa_r+0xa0c>
10003fb8:	0580070e 	bge	zero,r22,10003fd8 <_dtoa_r+0xa0c>
10003fbc:	a005883a 	mov	r2,r20
10003fc0:	b500b916 	blt	r22,r20,100042a8 <_dtoa_r+0xcdc>
10003fc4:	d9000817 	ldw	r4,32(sp)
10003fc8:	a0a9c83a 	sub	r20,r20,r2
10003fcc:	b0adc83a 	sub	r22,r22,r2
10003fd0:	2089c83a 	sub	r4,r4,r2
10003fd4:	d9000815 	stw	r4,32(sp)
10003fd8:	d9800a17 	ldw	r6,40(sp)
10003fdc:	0181810e 	bge	zero,r6,100045e4 <_dtoa_r+0x1018>
10003fe0:	d9c00b17 	ldw	r7,44(sp)
10003fe4:	3800b326 	beq	r7,zero,100042b4 <_dtoa_r+0xce8>
10003fe8:	a800b226 	beq	r21,zero,100042b4 <_dtoa_r+0xce8>
10003fec:	880b883a 	mov	r5,r17
10003ff0:	a80d883a 	mov	r6,r21
10003ff4:	e009883a 	mov	r4,fp
10003ff8:	00072a80 	call	100072a8 <__pow5mult>
10003ffc:	d9800917 	ldw	r6,36(sp)
10004000:	100b883a 	mov	r5,r2
10004004:	e009883a 	mov	r4,fp
10004008:	1023883a 	mov	r17,r2
1000400c:	00070b00 	call	100070b0 <__multiply>
10004010:	1021883a 	mov	r16,r2
10004014:	d8800a17 	ldw	r2,40(sp)
10004018:	d9400917 	ldw	r5,36(sp)
1000401c:	e009883a 	mov	r4,fp
10004020:	1545c83a 	sub	r2,r2,r21
10004024:	d8800a15 	stw	r2,40(sp)
10004028:	0006d100 	call	10006d10 <_Bfree>
1000402c:	d8c00a17 	ldw	r3,40(sp)
10004030:	18009f1e 	bne	r3,zero,100042b0 <_dtoa_r+0xce4>
10004034:	05c00044 	movi	r23,1
10004038:	e009883a 	mov	r4,fp
1000403c:	b80b883a 	mov	r5,r23
10004040:	00070740 	call	10007074 <__i2b>
10004044:	d9000d17 	ldw	r4,52(sp)
10004048:	102b883a 	mov	r21,r2
1000404c:	2000ce26 	beq	r4,zero,10004388 <_dtoa_r+0xdbc>
10004050:	200d883a 	mov	r6,r4
10004054:	100b883a 	mov	r5,r2
10004058:	e009883a 	mov	r4,fp
1000405c:	00072a80 	call	100072a8 <__pow5mult>
10004060:	d9800317 	ldw	r6,12(sp)
10004064:	102b883a 	mov	r21,r2
10004068:	b981810e 	bge	r23,r6,10004670 <_dtoa_r+0x10a4>
1000406c:	0027883a 	mov	r19,zero
10004070:	a8800417 	ldw	r2,16(r21)
10004074:	05c00804 	movi	r23,32
10004078:	10800104 	addi	r2,r2,4
1000407c:	1085883a 	add	r2,r2,r2
10004080:	1085883a 	add	r2,r2,r2
10004084:	a885883a 	add	r2,r21,r2
10004088:	11000017 	ldw	r4,0(r2)
1000408c:	0006f5c0 	call	10006f5c <__hi0bits>
10004090:	b885c83a 	sub	r2,r23,r2
10004094:	1585883a 	add	r2,r2,r22
10004098:	108007cc 	andi	r2,r2,31
1000409c:	1000b326 	beq	r2,zero,1000436c <_dtoa_r+0xda0>
100040a0:	00c00804 	movi	r3,32
100040a4:	1887c83a 	sub	r3,r3,r2
100040a8:	01000104 	movi	r4,4
100040ac:	20c2cd0e 	bge	r4,r3,10004be4 <_dtoa_r+0x1618>
100040b0:	00c00704 	movi	r3,28
100040b4:	1885c83a 	sub	r2,r3,r2
100040b8:	d8c00817 	ldw	r3,32(sp)
100040bc:	a0a9883a 	add	r20,r20,r2
100040c0:	b0ad883a 	add	r22,r22,r2
100040c4:	1887883a 	add	r3,r3,r2
100040c8:	d8c00815 	stw	r3,32(sp)
100040cc:	d9800817 	ldw	r6,32(sp)
100040d0:	0180040e 	bge	zero,r6,100040e4 <_dtoa_r+0xb18>
100040d4:	800b883a 	mov	r5,r16
100040d8:	e009883a 	mov	r4,fp
100040dc:	00073e80 	call	100073e8 <__lshift>
100040e0:	1021883a 	mov	r16,r2
100040e4:	0580050e 	bge	zero,r22,100040fc <_dtoa_r+0xb30>
100040e8:	a80b883a 	mov	r5,r21
100040ec:	b00d883a 	mov	r6,r22
100040f0:	e009883a 	mov	r4,fp
100040f4:	00073e80 	call	100073e8 <__lshift>
100040f8:	102b883a 	mov	r21,r2
100040fc:	d9c00e17 	ldw	r7,56(sp)
10004100:	3801211e 	bne	r7,zero,10004588 <_dtoa_r+0xfbc>
10004104:	d9800617 	ldw	r6,24(sp)
10004108:	0181380e 	bge	zero,r6,100045ec <_dtoa_r+0x1020>
1000410c:	d8c00b17 	ldw	r3,44(sp)
10004110:	1800ab1e 	bne	r3,zero,100043c0 <_dtoa_r+0xdf4>
10004114:	dc800717 	ldw	r18,28(sp)
10004118:	dcc00617 	ldw	r19,24(sp)
1000411c:	9029883a 	mov	r20,r18
10004120:	00000206 	br	1000412c <_dtoa_r+0xb60>
10004124:	0006d380 	call	10006d38 <__multadd>
10004128:	1021883a 	mov	r16,r2
1000412c:	a80b883a 	mov	r5,r21
10004130:	8009883a 	mov	r4,r16
10004134:	00033cc0 	call	100033cc <quorem>
10004138:	10800c04 	addi	r2,r2,48
1000413c:	90800005 	stb	r2,0(r18)
10004140:	94800044 	addi	r18,r18,1
10004144:	9507c83a 	sub	r3,r18,r20
10004148:	000f883a 	mov	r7,zero
1000414c:	01800284 	movi	r6,10
10004150:	800b883a 	mov	r5,r16
10004154:	e009883a 	mov	r4,fp
10004158:	1cfff216 	blt	r3,r19,10004124 <__alt_data_end+0xf8004124>
1000415c:	1011883a 	mov	r8,r2
10004160:	d8800617 	ldw	r2,24(sp)
10004164:	0082370e 	bge	zero,r2,10004a44 <_dtoa_r+0x1478>
10004168:	d9000717 	ldw	r4,28(sp)
1000416c:	0025883a 	mov	r18,zero
10004170:	20af883a 	add	r23,r4,r2
10004174:	01800044 	movi	r6,1
10004178:	800b883a 	mov	r5,r16
1000417c:	e009883a 	mov	r4,fp
10004180:	da001715 	stw	r8,92(sp)
10004184:	00073e80 	call	100073e8 <__lshift>
10004188:	a80b883a 	mov	r5,r21
1000418c:	1009883a 	mov	r4,r2
10004190:	d8800915 	stw	r2,36(sp)
10004194:	00075300 	call	10007530 <__mcmp>
10004198:	da001717 	ldw	r8,92(sp)
1000419c:	0081800e 	bge	zero,r2,100047a0 <_dtoa_r+0x11d4>
100041a0:	b93fffc3 	ldbu	r4,-1(r23)
100041a4:	b8bfffc4 	addi	r2,r23,-1
100041a8:	1007883a 	mov	r3,r2
100041ac:	01800e44 	movi	r6,57
100041b0:	d9c00717 	ldw	r7,28(sp)
100041b4:	00000506 	br	100041cc <_dtoa_r+0xc00>
100041b8:	18ffffc4 	addi	r3,r3,-1
100041bc:	11c12326 	beq	r2,r7,1000464c <_dtoa_r+0x1080>
100041c0:	19000003 	ldbu	r4,0(r3)
100041c4:	102f883a 	mov	r23,r2
100041c8:	10bfffc4 	addi	r2,r2,-1
100041cc:	21403fcc 	andi	r5,r4,255
100041d0:	2940201c 	xori	r5,r5,128
100041d4:	297fe004 	addi	r5,r5,-128
100041d8:	29bff726 	beq	r5,r6,100041b8 <__alt_data_end+0xf80041b8>
100041dc:	21000044 	addi	r4,r4,1
100041e0:	11000005 	stb	r4,0(r2)
100041e4:	a80b883a 	mov	r5,r21
100041e8:	e009883a 	mov	r4,fp
100041ec:	0006d100 	call	10006d10 <_Bfree>
100041f0:	883ea026 	beq	r17,zero,10003c74 <__alt_data_end+0xf8003c74>
100041f4:	90000426 	beq	r18,zero,10004208 <_dtoa_r+0xc3c>
100041f8:	94400326 	beq	r18,r17,10004208 <_dtoa_r+0xc3c>
100041fc:	900b883a 	mov	r5,r18
10004200:	e009883a 	mov	r4,fp
10004204:	0006d100 	call	10006d10 <_Bfree>
10004208:	880b883a 	mov	r5,r17
1000420c:	e009883a 	mov	r4,fp
10004210:	0006d100 	call	10006d10 <_Bfree>
10004214:	003e9706 	br	10003c74 <__alt_data_end+0xf8003c74>
10004218:	01800044 	movi	r6,1
1000421c:	d9800e15 	stw	r6,56(sp)
10004220:	003d9606 	br	1000387c <__alt_data_end+0xf800387c>
10004224:	d8800817 	ldw	r2,32(sp)
10004228:	d8c00517 	ldw	r3,20(sp)
1000422c:	d8000d15 	stw	zero,52(sp)
10004230:	10c5c83a 	sub	r2,r2,r3
10004234:	00c9c83a 	sub	r4,zero,r3
10004238:	d8800815 	stw	r2,32(sp)
1000423c:	d9000a15 	stw	r4,40(sp)
10004240:	003d9706 	br	100038a0 <__alt_data_end+0xf80038a0>
10004244:	05adc83a 	sub	r22,zero,r22
10004248:	dd800815 	stw	r22,32(sp)
1000424c:	002d883a 	mov	r22,zero
10004250:	003d8e06 	br	1000388c <__alt_data_end+0xf800388c>
10004254:	d9000517 	ldw	r4,20(sp)
10004258:	000d5080 	call	1000d508 <__floatsidf>
1000425c:	100d883a 	mov	r6,r2
10004260:	180f883a 	mov	r7,r3
10004264:	a009883a 	mov	r4,r20
10004268:	880b883a 	mov	r5,r17
1000426c:	000c21c0 	call	1000c21c <__eqdf2>
10004270:	103d7126 	beq	r2,zero,10003838 <__alt_data_end+0xf8003838>
10004274:	d9c00517 	ldw	r7,20(sp)
10004278:	39ffffc4 	addi	r7,r7,-1
1000427c:	d9c00515 	stw	r7,20(sp)
10004280:	003d6d06 	br	10003838 <__alt_data_end+0xf8003838>
10004284:	dd400a17 	ldw	r21,40(sp)
10004288:	dd000817 	ldw	r20,32(sp)
1000428c:	0023883a 	mov	r17,zero
10004290:	003f4806 	br	10003fb4 <__alt_data_end+0xf8003fb4>
10004294:	10e3c83a 	sub	r17,r2,r3
10004298:	9448983a 	sll	r4,r18,r17
1000429c:	003d3206 	br	10003768 <__alt_data_end+0xf8003768>
100042a0:	d8000e15 	stw	zero,56(sp)
100042a4:	003d7506 	br	1000387c <__alt_data_end+0xf800387c>
100042a8:	b005883a 	mov	r2,r22
100042ac:	003f4506 	br	10003fc4 <__alt_data_end+0xf8003fc4>
100042b0:	dc000915 	stw	r16,36(sp)
100042b4:	d9800a17 	ldw	r6,40(sp)
100042b8:	d9400917 	ldw	r5,36(sp)
100042bc:	e009883a 	mov	r4,fp
100042c0:	00072a80 	call	100072a8 <__pow5mult>
100042c4:	1021883a 	mov	r16,r2
100042c8:	003f5a06 	br	10004034 <__alt_data_end+0xf8004034>
100042cc:	01c00044 	movi	r7,1
100042d0:	d9c00b15 	stw	r7,44(sp)
100042d4:	d8802217 	ldw	r2,136(sp)
100042d8:	0081280e 	bge	zero,r2,1000477c <_dtoa_r+0x11b0>
100042dc:	100d883a 	mov	r6,r2
100042e0:	1021883a 	mov	r16,r2
100042e4:	d8800c15 	stw	r2,48(sp)
100042e8:	d8800615 	stw	r2,24(sp)
100042ec:	003d8806 	br	10003910 <__alt_data_end+0xf8003910>
100042f0:	d8800617 	ldw	r2,24(sp)
100042f4:	00be9b16 	blt	zero,r2,10003d64 <__alt_data_end+0xf8003d64>
100042f8:	10010f1e 	bne	r2,zero,10004738 <_dtoa_r+0x116c>
100042fc:	880b883a 	mov	r5,r17
10004300:	000d883a 	mov	r6,zero
10004304:	01d00534 	movhi	r7,16404
10004308:	8009883a 	mov	r4,r16
1000430c:	000c4740 	call	1000c474 <__muldf3>
10004310:	900d883a 	mov	r6,r18
10004314:	980f883a 	mov	r7,r19
10004318:	1009883a 	mov	r4,r2
1000431c:	180b883a 	mov	r5,r3
10004320:	000c2a40 	call	1000c2a4 <__gedf2>
10004324:	002b883a 	mov	r21,zero
10004328:	0023883a 	mov	r17,zero
1000432c:	1000bf16 	blt	r2,zero,1000462c <_dtoa_r+0x1060>
10004330:	d9802217 	ldw	r6,136(sp)
10004334:	ddc00717 	ldw	r23,28(sp)
10004338:	018c303a 	nor	r6,zero,r6
1000433c:	d9800515 	stw	r6,20(sp)
10004340:	a80b883a 	mov	r5,r21
10004344:	e009883a 	mov	r4,fp
10004348:	0006d100 	call	10006d10 <_Bfree>
1000434c:	883e4926 	beq	r17,zero,10003c74 <__alt_data_end+0xf8003c74>
10004350:	003fad06 	br	10004208 <__alt_data_end+0xf8004208>
10004354:	d9c01117 	ldw	r7,68(sp)
10004358:	3801bc26 	beq	r7,zero,10004a4c <_dtoa_r+0x1480>
1000435c:	10810cc4 	addi	r2,r2,1075
10004360:	dd400a17 	ldw	r21,40(sp)
10004364:	dd000817 	ldw	r20,32(sp)
10004368:	003f0a06 	br	10003f94 <__alt_data_end+0xf8003f94>
1000436c:	00800704 	movi	r2,28
10004370:	d9000817 	ldw	r4,32(sp)
10004374:	a0a9883a 	add	r20,r20,r2
10004378:	b0ad883a 	add	r22,r22,r2
1000437c:	2089883a 	add	r4,r4,r2
10004380:	d9000815 	stw	r4,32(sp)
10004384:	003f5106 	br	100040cc <__alt_data_end+0xf80040cc>
10004388:	d8c00317 	ldw	r3,12(sp)
1000438c:	b8c1fc0e 	bge	r23,r3,10004b80 <_dtoa_r+0x15b4>
10004390:	0027883a 	mov	r19,zero
10004394:	b805883a 	mov	r2,r23
10004398:	003f3e06 	br	10004094 <__alt_data_end+0xf8004094>
1000439c:	880b883a 	mov	r5,r17
100043a0:	e009883a 	mov	r4,fp
100043a4:	000f883a 	mov	r7,zero
100043a8:	01800284 	movi	r6,10
100043ac:	0006d380 	call	10006d38 <__multadd>
100043b0:	d9000c17 	ldw	r4,48(sp)
100043b4:	1023883a 	mov	r17,r2
100043b8:	0102040e 	bge	zero,r4,10004bcc <_dtoa_r+0x1600>
100043bc:	d9000615 	stw	r4,24(sp)
100043c0:	0500050e 	bge	zero,r20,100043d8 <_dtoa_r+0xe0c>
100043c4:	880b883a 	mov	r5,r17
100043c8:	a00d883a 	mov	r6,r20
100043cc:	e009883a 	mov	r4,fp
100043d0:	00073e80 	call	100073e8 <__lshift>
100043d4:	1023883a 	mov	r17,r2
100043d8:	9801241e 	bne	r19,zero,1000486c <_dtoa_r+0x12a0>
100043dc:	8829883a 	mov	r20,r17
100043e0:	d9000617 	ldw	r4,24(sp)
100043e4:	dcc00717 	ldw	r19,28(sp)
100043e8:	9480004c 	andi	r18,r18,1
100043ec:	20bfffc4 	addi	r2,r4,-1
100043f0:	9885883a 	add	r2,r19,r2
100043f4:	d8800415 	stw	r2,16(sp)
100043f8:	dc800615 	stw	r18,24(sp)
100043fc:	a80b883a 	mov	r5,r21
10004400:	8009883a 	mov	r4,r16
10004404:	00033cc0 	call	100033cc <quorem>
10004408:	880b883a 	mov	r5,r17
1000440c:	8009883a 	mov	r4,r16
10004410:	102f883a 	mov	r23,r2
10004414:	00075300 	call	10007530 <__mcmp>
10004418:	a80b883a 	mov	r5,r21
1000441c:	a00d883a 	mov	r6,r20
10004420:	e009883a 	mov	r4,fp
10004424:	102d883a 	mov	r22,r2
10004428:	00075900 	call	10007590 <__mdiff>
1000442c:	1007883a 	mov	r3,r2
10004430:	10800317 	ldw	r2,12(r2)
10004434:	bc800c04 	addi	r18,r23,48
10004438:	180b883a 	mov	r5,r3
1000443c:	10004e1e 	bne	r2,zero,10004578 <_dtoa_r+0xfac>
10004440:	8009883a 	mov	r4,r16
10004444:	d8c01615 	stw	r3,88(sp)
10004448:	00075300 	call	10007530 <__mcmp>
1000444c:	d8c01617 	ldw	r3,88(sp)
10004450:	e009883a 	mov	r4,fp
10004454:	d8801615 	stw	r2,88(sp)
10004458:	180b883a 	mov	r5,r3
1000445c:	0006d100 	call	10006d10 <_Bfree>
10004460:	d8801617 	ldw	r2,88(sp)
10004464:	1000041e 	bne	r2,zero,10004478 <_dtoa_r+0xeac>
10004468:	d9800317 	ldw	r6,12(sp)
1000446c:	3000021e 	bne	r6,zero,10004478 <_dtoa_r+0xeac>
10004470:	d8c00617 	ldw	r3,24(sp)
10004474:	18003726 	beq	r3,zero,10004554 <_dtoa_r+0xf88>
10004478:	b0002016 	blt	r22,zero,100044fc <_dtoa_r+0xf30>
1000447c:	b000041e 	bne	r22,zero,10004490 <_dtoa_r+0xec4>
10004480:	d9000317 	ldw	r4,12(sp)
10004484:	2000021e 	bne	r4,zero,10004490 <_dtoa_r+0xec4>
10004488:	d8c00617 	ldw	r3,24(sp)
1000448c:	18001b26 	beq	r3,zero,100044fc <_dtoa_r+0xf30>
10004490:	00810716 	blt	zero,r2,100048b0 <_dtoa_r+0x12e4>
10004494:	d8c00417 	ldw	r3,16(sp)
10004498:	9d800044 	addi	r22,r19,1
1000449c:	9c800005 	stb	r18,0(r19)
100044a0:	b02f883a 	mov	r23,r22
100044a4:	98c10626 	beq	r19,r3,100048c0 <_dtoa_r+0x12f4>
100044a8:	800b883a 	mov	r5,r16
100044ac:	000f883a 	mov	r7,zero
100044b0:	01800284 	movi	r6,10
100044b4:	e009883a 	mov	r4,fp
100044b8:	0006d380 	call	10006d38 <__multadd>
100044bc:	1021883a 	mov	r16,r2
100044c0:	000f883a 	mov	r7,zero
100044c4:	01800284 	movi	r6,10
100044c8:	880b883a 	mov	r5,r17
100044cc:	e009883a 	mov	r4,fp
100044d0:	8d002526 	beq	r17,r20,10004568 <_dtoa_r+0xf9c>
100044d4:	0006d380 	call	10006d38 <__multadd>
100044d8:	a00b883a 	mov	r5,r20
100044dc:	000f883a 	mov	r7,zero
100044e0:	01800284 	movi	r6,10
100044e4:	e009883a 	mov	r4,fp
100044e8:	1023883a 	mov	r17,r2
100044ec:	0006d380 	call	10006d38 <__multadd>
100044f0:	1029883a 	mov	r20,r2
100044f4:	b027883a 	mov	r19,r22
100044f8:	003fc006 	br	100043fc <__alt_data_end+0xf80043fc>
100044fc:	9011883a 	mov	r8,r18
10004500:	00800e0e 	bge	zero,r2,1000453c <_dtoa_r+0xf70>
10004504:	800b883a 	mov	r5,r16
10004508:	01800044 	movi	r6,1
1000450c:	e009883a 	mov	r4,fp
10004510:	da001715 	stw	r8,92(sp)
10004514:	00073e80 	call	100073e8 <__lshift>
10004518:	a80b883a 	mov	r5,r21
1000451c:	1009883a 	mov	r4,r2
10004520:	1021883a 	mov	r16,r2
10004524:	00075300 	call	10007530 <__mcmp>
10004528:	da001717 	ldw	r8,92(sp)
1000452c:	0081960e 	bge	zero,r2,10004b88 <_dtoa_r+0x15bc>
10004530:	00800e44 	movi	r2,57
10004534:	40817026 	beq	r8,r2,10004af8 <_dtoa_r+0x152c>
10004538:	ba000c44 	addi	r8,r23,49
1000453c:	8825883a 	mov	r18,r17
10004540:	9dc00044 	addi	r23,r19,1
10004544:	9a000005 	stb	r8,0(r19)
10004548:	a023883a 	mov	r17,r20
1000454c:	dc000915 	stw	r16,36(sp)
10004550:	003f2406 	br	100041e4 <__alt_data_end+0xf80041e4>
10004554:	00800e44 	movi	r2,57
10004558:	9011883a 	mov	r8,r18
1000455c:	90816626 	beq	r18,r2,10004af8 <_dtoa_r+0x152c>
10004560:	05bff516 	blt	zero,r22,10004538 <__alt_data_end+0xf8004538>
10004564:	003ff506 	br	1000453c <__alt_data_end+0xf800453c>
10004568:	0006d380 	call	10006d38 <__multadd>
1000456c:	1023883a 	mov	r17,r2
10004570:	1029883a 	mov	r20,r2
10004574:	003fdf06 	br	100044f4 <__alt_data_end+0xf80044f4>
10004578:	e009883a 	mov	r4,fp
1000457c:	0006d100 	call	10006d10 <_Bfree>
10004580:	00800044 	movi	r2,1
10004584:	003fbc06 	br	10004478 <__alt_data_end+0xf8004478>
10004588:	a80b883a 	mov	r5,r21
1000458c:	8009883a 	mov	r4,r16
10004590:	00075300 	call	10007530 <__mcmp>
10004594:	103edb0e 	bge	r2,zero,10004104 <__alt_data_end+0xf8004104>
10004598:	800b883a 	mov	r5,r16
1000459c:	000f883a 	mov	r7,zero
100045a0:	01800284 	movi	r6,10
100045a4:	e009883a 	mov	r4,fp
100045a8:	0006d380 	call	10006d38 <__multadd>
100045ac:	1021883a 	mov	r16,r2
100045b0:	d8800517 	ldw	r2,20(sp)
100045b4:	d8c00b17 	ldw	r3,44(sp)
100045b8:	10bfffc4 	addi	r2,r2,-1
100045bc:	d8800515 	stw	r2,20(sp)
100045c0:	183f761e 	bne	r3,zero,1000439c <__alt_data_end+0xf800439c>
100045c4:	d9000c17 	ldw	r4,48(sp)
100045c8:	0101730e 	bge	zero,r4,10004b98 <_dtoa_r+0x15cc>
100045cc:	d9000615 	stw	r4,24(sp)
100045d0:	003ed006 	br	10004114 <__alt_data_end+0xf8004114>
100045d4:	00800084 	movi	r2,2
100045d8:	3081861e 	bne	r6,r2,10004bf4 <_dtoa_r+0x1628>
100045dc:	d8000b15 	stw	zero,44(sp)
100045e0:	003f3c06 	br	100042d4 <__alt_data_end+0xf80042d4>
100045e4:	dc000917 	ldw	r16,36(sp)
100045e8:	003e9206 	br	10004034 <__alt_data_end+0xf8004034>
100045ec:	d9c00317 	ldw	r7,12(sp)
100045f0:	00800084 	movi	r2,2
100045f4:	11fec50e 	bge	r2,r7,1000410c <__alt_data_end+0xf800410c>
100045f8:	d9000617 	ldw	r4,24(sp)
100045fc:	20013c1e 	bne	r4,zero,10004af0 <_dtoa_r+0x1524>
10004600:	a80b883a 	mov	r5,r21
10004604:	000f883a 	mov	r7,zero
10004608:	01800144 	movi	r6,5
1000460c:	e009883a 	mov	r4,fp
10004610:	0006d380 	call	10006d38 <__multadd>
10004614:	100b883a 	mov	r5,r2
10004618:	8009883a 	mov	r4,r16
1000461c:	102b883a 	mov	r21,r2
10004620:	00075300 	call	10007530 <__mcmp>
10004624:	dc000915 	stw	r16,36(sp)
10004628:	00bf410e 	bge	zero,r2,10004330 <__alt_data_end+0xf8004330>
1000462c:	d9c00717 	ldw	r7,28(sp)
10004630:	00800c44 	movi	r2,49
10004634:	38800005 	stb	r2,0(r7)
10004638:	d8800517 	ldw	r2,20(sp)
1000463c:	3dc00044 	addi	r23,r7,1
10004640:	10800044 	addi	r2,r2,1
10004644:	d8800515 	stw	r2,20(sp)
10004648:	003f3d06 	br	10004340 <__alt_data_end+0xf8004340>
1000464c:	d9800517 	ldw	r6,20(sp)
10004650:	d9c00717 	ldw	r7,28(sp)
10004654:	00800c44 	movi	r2,49
10004658:	31800044 	addi	r6,r6,1
1000465c:	d9800515 	stw	r6,20(sp)
10004660:	38800005 	stb	r2,0(r7)
10004664:	003edf06 	br	100041e4 <__alt_data_end+0xf80041e4>
10004668:	d8000b15 	stw	zero,44(sp)
1000466c:	003c9f06 	br	100038ec <__alt_data_end+0xf80038ec>
10004670:	903e7e1e 	bne	r18,zero,1000406c <__alt_data_end+0xf800406c>
10004674:	00800434 	movhi	r2,16
10004678:	10bfffc4 	addi	r2,r2,-1
1000467c:	9884703a 	and	r2,r19,r2
10004680:	1000ea1e 	bne	r2,zero,10004a2c <_dtoa_r+0x1460>
10004684:	9cdffc2c 	andhi	r19,r19,32752
10004688:	9800e826 	beq	r19,zero,10004a2c <_dtoa_r+0x1460>
1000468c:	d9c00817 	ldw	r7,32(sp)
10004690:	b5800044 	addi	r22,r22,1
10004694:	04c00044 	movi	r19,1
10004698:	39c00044 	addi	r7,r7,1
1000469c:	d9c00815 	stw	r7,32(sp)
100046a0:	d8800d17 	ldw	r2,52(sp)
100046a4:	103e721e 	bne	r2,zero,10004070 <__alt_data_end+0xf8004070>
100046a8:	00800044 	movi	r2,1
100046ac:	003e7906 	br	10004094 <__alt_data_end+0xf8004094>
100046b0:	8009883a 	mov	r4,r16
100046b4:	000d5080 	call	1000d508 <__floatsidf>
100046b8:	d9800f17 	ldw	r6,60(sp)
100046bc:	d9c01017 	ldw	r7,64(sp)
100046c0:	1009883a 	mov	r4,r2
100046c4:	180b883a 	mov	r5,r3
100046c8:	000c4740 	call	1000c474 <__muldf3>
100046cc:	000d883a 	mov	r6,zero
100046d0:	01d00734 	movhi	r7,16412
100046d4:	1009883a 	mov	r4,r2
100046d8:	180b883a 	mov	r5,r3
100046dc:	000b0880 	call	1000b088 <__adddf3>
100046e0:	047f3034 	movhi	r17,64704
100046e4:	1021883a 	mov	r16,r2
100046e8:	1c63883a 	add	r17,r3,r17
100046ec:	d9000f17 	ldw	r4,60(sp)
100046f0:	d9401017 	ldw	r5,64(sp)
100046f4:	000d883a 	mov	r6,zero
100046f8:	01d00534 	movhi	r7,16404
100046fc:	000cb8c0 	call	1000cb8c <__subdf3>
10004700:	800d883a 	mov	r6,r16
10004704:	880f883a 	mov	r7,r17
10004708:	1009883a 	mov	r4,r2
1000470c:	180b883a 	mov	r5,r3
10004710:	102b883a 	mov	r21,r2
10004714:	1829883a 	mov	r20,r3
10004718:	000c2a40 	call	1000c2a4 <__gedf2>
1000471c:	00806c16 	blt	zero,r2,100048d0 <_dtoa_r+0x1304>
10004720:	89e0003c 	xorhi	r7,r17,32768
10004724:	800d883a 	mov	r6,r16
10004728:	a809883a 	mov	r4,r21
1000472c:	a00b883a 	mov	r5,r20
10004730:	000c3800 	call	1000c380 <__ledf2>
10004734:	103d7e0e 	bge	r2,zero,10003d30 <__alt_data_end+0xf8003d30>
10004738:	002b883a 	mov	r21,zero
1000473c:	0023883a 	mov	r17,zero
10004740:	003efb06 	br	10004330 <__alt_data_end+0xf8004330>
10004744:	d8800717 	ldw	r2,28(sp)
10004748:	003bd006 	br	1000368c <__alt_data_end+0xf800368c>
1000474c:	d9000a17 	ldw	r4,40(sp)
10004750:	d9800d17 	ldw	r6,52(sp)
10004754:	dd400a15 	stw	r21,40(sp)
10004758:	a905c83a 	sub	r2,r21,r4
1000475c:	308d883a 	add	r6,r6,r2
10004760:	d9800d15 	stw	r6,52(sp)
10004764:	002b883a 	mov	r21,zero
10004768:	003e0606 	br	10003f84 <__alt_data_end+0xf8003f84>
1000476c:	9023883a 	mov	r17,r18
10004770:	9829883a 	mov	r20,r19
10004774:	04000084 	movi	r16,2
10004778:	003c9206 	br	100039c4 <__alt_data_end+0xf80039c4>
1000477c:	04000044 	movi	r16,1
10004780:	dc000c15 	stw	r16,48(sp)
10004784:	dc000615 	stw	r16,24(sp)
10004788:	dc002215 	stw	r16,136(sp)
1000478c:	e0001115 	stw	zero,68(fp)
10004790:	000b883a 	mov	r5,zero
10004794:	003c6906 	br	1000393c <__alt_data_end+0xf800393c>
10004798:	3021883a 	mov	r16,r6
1000479c:	003ffb06 	br	1000478c <__alt_data_end+0xf800478c>
100047a0:	1000021e 	bne	r2,zero,100047ac <_dtoa_r+0x11e0>
100047a4:	4200004c 	andi	r8,r8,1
100047a8:	403e7d1e 	bne	r8,zero,100041a0 <__alt_data_end+0xf80041a0>
100047ac:	01000c04 	movi	r4,48
100047b0:	00000106 	br	100047b8 <_dtoa_r+0x11ec>
100047b4:	102f883a 	mov	r23,r2
100047b8:	b8bfffc4 	addi	r2,r23,-1
100047bc:	10c00007 	ldb	r3,0(r2)
100047c0:	193ffc26 	beq	r3,r4,100047b4 <__alt_data_end+0xf80047b4>
100047c4:	003e8706 	br	100041e4 <__alt_data_end+0xf80041e4>
100047c8:	d8800517 	ldw	r2,20(sp)
100047cc:	00a3c83a 	sub	r17,zero,r2
100047d0:	8800a426 	beq	r17,zero,10004a64 <_dtoa_r+0x1498>
100047d4:	888003cc 	andi	r2,r17,15
100047d8:	100490fa 	slli	r2,r2,3
100047dc:	00c40074 	movhi	r3,4097
100047e0:	18d19804 	addi	r3,r3,18016
100047e4:	1885883a 	add	r2,r3,r2
100047e8:	11800017 	ldw	r6,0(r2)
100047ec:	11c00117 	ldw	r7,4(r2)
100047f0:	9009883a 	mov	r4,r18
100047f4:	980b883a 	mov	r5,r19
100047f8:	8823d13a 	srai	r17,r17,4
100047fc:	000c4740 	call	1000c474 <__muldf3>
10004800:	d8800f15 	stw	r2,60(sp)
10004804:	d8c01015 	stw	r3,64(sp)
10004808:	8800e826 	beq	r17,zero,10004bac <_dtoa_r+0x15e0>
1000480c:	05040074 	movhi	r20,4097
10004810:	a5118e04 	addi	r20,r20,17976
10004814:	04000084 	movi	r16,2
10004818:	8980004c 	andi	r6,r17,1
1000481c:	1009883a 	mov	r4,r2
10004820:	8823d07a 	srai	r17,r17,1
10004824:	180b883a 	mov	r5,r3
10004828:	30000426 	beq	r6,zero,1000483c <_dtoa_r+0x1270>
1000482c:	a1800017 	ldw	r6,0(r20)
10004830:	a1c00117 	ldw	r7,4(r20)
10004834:	84000044 	addi	r16,r16,1
10004838:	000c4740 	call	1000c474 <__muldf3>
1000483c:	a5000204 	addi	r20,r20,8
10004840:	883ff51e 	bne	r17,zero,10004818 <__alt_data_end+0xf8004818>
10004844:	d8800f15 	stw	r2,60(sp)
10004848:	d8c01015 	stw	r3,64(sp)
1000484c:	003c7606 	br	10003a28 <__alt_data_end+0xf8003a28>
10004850:	00c00c04 	movi	r3,48
10004854:	10c00005 	stb	r3,0(r2)
10004858:	d8c00517 	ldw	r3,20(sp)
1000485c:	bd3fffc3 	ldbu	r20,-1(r23)
10004860:	18c00044 	addi	r3,r3,1
10004864:	d8c00515 	stw	r3,20(sp)
10004868:	003db906 	br	10003f50 <__alt_data_end+0xf8003f50>
1000486c:	89400117 	ldw	r5,4(r17)
10004870:	e009883a 	mov	r4,fp
10004874:	0006c680 	call	10006c68 <_Balloc>
10004878:	89800417 	ldw	r6,16(r17)
1000487c:	89400304 	addi	r5,r17,12
10004880:	11000304 	addi	r4,r2,12
10004884:	31800084 	addi	r6,r6,2
10004888:	318d883a 	add	r6,r6,r6
1000488c:	318d883a 	add	r6,r6,r6
10004890:	1027883a 	mov	r19,r2
10004894:	000689c0 	call	1000689c <memcpy>
10004898:	01800044 	movi	r6,1
1000489c:	980b883a 	mov	r5,r19
100048a0:	e009883a 	mov	r4,fp
100048a4:	00073e80 	call	100073e8 <__lshift>
100048a8:	1029883a 	mov	r20,r2
100048ac:	003ecc06 	br	100043e0 <__alt_data_end+0xf80043e0>
100048b0:	00800e44 	movi	r2,57
100048b4:	90809026 	beq	r18,r2,10004af8 <_dtoa_r+0x152c>
100048b8:	92000044 	addi	r8,r18,1
100048bc:	003f1f06 	br	1000453c <__alt_data_end+0xf800453c>
100048c0:	9011883a 	mov	r8,r18
100048c4:	8825883a 	mov	r18,r17
100048c8:	a023883a 	mov	r17,r20
100048cc:	003e2906 	br	10004174 <__alt_data_end+0xf8004174>
100048d0:	002b883a 	mov	r21,zero
100048d4:	0023883a 	mov	r17,zero
100048d8:	003f5406 	br	1000462c <__alt_data_end+0xf800462c>
100048dc:	61bfffc4 	addi	r6,r12,-1
100048e0:	300490fa 	slli	r2,r6,3
100048e4:	00c40074 	movhi	r3,4097
100048e8:	18d19804 	addi	r3,r3,18016
100048ec:	1885883a 	add	r2,r3,r2
100048f0:	11000017 	ldw	r4,0(r2)
100048f4:	11400117 	ldw	r5,4(r2)
100048f8:	d8800717 	ldw	r2,28(sp)
100048fc:	880f883a 	mov	r7,r17
10004900:	d9801215 	stw	r6,72(sp)
10004904:	800d883a 	mov	r6,r16
10004908:	db001615 	stw	r12,88(sp)
1000490c:	15c00044 	addi	r23,r2,1
10004910:	000c4740 	call	1000c474 <__muldf3>
10004914:	d9401017 	ldw	r5,64(sp)
10004918:	d9000f17 	ldw	r4,60(sp)
1000491c:	d8c01515 	stw	r3,84(sp)
10004920:	d8801415 	stw	r2,80(sp)
10004924:	000d4880 	call	1000d488 <__fixdfsi>
10004928:	1009883a 	mov	r4,r2
1000492c:	1021883a 	mov	r16,r2
10004930:	000d5080 	call	1000d508 <__floatsidf>
10004934:	d9000f17 	ldw	r4,60(sp)
10004938:	d9401017 	ldw	r5,64(sp)
1000493c:	100d883a 	mov	r6,r2
10004940:	180f883a 	mov	r7,r3
10004944:	000cb8c0 	call	1000cb8c <__subdf3>
10004948:	1829883a 	mov	r20,r3
1000494c:	d8c00717 	ldw	r3,28(sp)
10004950:	84000c04 	addi	r16,r16,48
10004954:	1023883a 	mov	r17,r2
10004958:	1c000005 	stb	r16,0(r3)
1000495c:	db001617 	ldw	r12,88(sp)
10004960:	00800044 	movi	r2,1
10004964:	60802226 	beq	r12,r2,100049f0 <_dtoa_r+0x1424>
10004968:	d9c00717 	ldw	r7,28(sp)
1000496c:	8805883a 	mov	r2,r17
10004970:	b82b883a 	mov	r21,r23
10004974:	3b19883a 	add	r12,r7,r12
10004978:	6023883a 	mov	r17,r12
1000497c:	a007883a 	mov	r3,r20
10004980:	dc800f15 	stw	r18,60(sp)
10004984:	000d883a 	mov	r6,zero
10004988:	01d00934 	movhi	r7,16420
1000498c:	1009883a 	mov	r4,r2
10004990:	180b883a 	mov	r5,r3
10004994:	000c4740 	call	1000c474 <__muldf3>
10004998:	180b883a 	mov	r5,r3
1000499c:	1009883a 	mov	r4,r2
100049a0:	1829883a 	mov	r20,r3
100049a4:	1025883a 	mov	r18,r2
100049a8:	000d4880 	call	1000d488 <__fixdfsi>
100049ac:	1009883a 	mov	r4,r2
100049b0:	1021883a 	mov	r16,r2
100049b4:	000d5080 	call	1000d508 <__floatsidf>
100049b8:	100d883a 	mov	r6,r2
100049bc:	180f883a 	mov	r7,r3
100049c0:	9009883a 	mov	r4,r18
100049c4:	a00b883a 	mov	r5,r20
100049c8:	84000c04 	addi	r16,r16,48
100049cc:	000cb8c0 	call	1000cb8c <__subdf3>
100049d0:	ad400044 	addi	r21,r21,1
100049d4:	ac3fffc5 	stb	r16,-1(r21)
100049d8:	ac7fea1e 	bne	r21,r17,10004984 <__alt_data_end+0xf8004984>
100049dc:	1023883a 	mov	r17,r2
100049e0:	d8801217 	ldw	r2,72(sp)
100049e4:	dc800f17 	ldw	r18,60(sp)
100049e8:	1829883a 	mov	r20,r3
100049ec:	b8af883a 	add	r23,r23,r2
100049f0:	d9001417 	ldw	r4,80(sp)
100049f4:	d9401517 	ldw	r5,84(sp)
100049f8:	000d883a 	mov	r6,zero
100049fc:	01cff834 	movhi	r7,16352
10004a00:	000b0880 	call	1000b088 <__adddf3>
10004a04:	880d883a 	mov	r6,r17
10004a08:	a00f883a 	mov	r7,r20
10004a0c:	1009883a 	mov	r4,r2
10004a10:	180b883a 	mov	r5,r3
10004a14:	000c3800 	call	1000c380 <__ledf2>
10004a18:	10003e0e 	bge	r2,zero,10004b14 <_dtoa_r+0x1548>
10004a1c:	d9001317 	ldw	r4,76(sp)
10004a20:	bd3fffc3 	ldbu	r20,-1(r23)
10004a24:	d9000515 	stw	r4,20(sp)
10004a28:	003d3b06 	br	10003f18 <__alt_data_end+0xf8003f18>
10004a2c:	0027883a 	mov	r19,zero
10004a30:	003f1b06 	br	100046a0 <__alt_data_end+0xf80046a0>
10004a34:	d8800817 	ldw	r2,32(sp)
10004a38:	11e9c83a 	sub	r20,r2,r7
10004a3c:	0005883a 	mov	r2,zero
10004a40:	003d5406 	br	10003f94 <__alt_data_end+0xf8003f94>
10004a44:	00800044 	movi	r2,1
10004a48:	003dc706 	br	10004168 <__alt_data_end+0xf8004168>
10004a4c:	d8c00217 	ldw	r3,8(sp)
10004a50:	00800d84 	movi	r2,54
10004a54:	dd400a17 	ldw	r21,40(sp)
10004a58:	10c5c83a 	sub	r2,r2,r3
10004a5c:	dd000817 	ldw	r20,32(sp)
10004a60:	003d4c06 	br	10003f94 <__alt_data_end+0xf8003f94>
10004a64:	dc800f15 	stw	r18,60(sp)
10004a68:	dcc01015 	stw	r19,64(sp)
10004a6c:	04000084 	movi	r16,2
10004a70:	003bed06 	br	10003a28 <__alt_data_end+0xf8003a28>
10004a74:	d9000617 	ldw	r4,24(sp)
10004a78:	203f0d26 	beq	r4,zero,100046b0 <__alt_data_end+0xf80046b0>
10004a7c:	d9800c17 	ldw	r6,48(sp)
10004a80:	01bcab0e 	bge	zero,r6,10003d30 <__alt_data_end+0xf8003d30>
10004a84:	d9401017 	ldw	r5,64(sp)
10004a88:	d9000f17 	ldw	r4,60(sp)
10004a8c:	000d883a 	mov	r6,zero
10004a90:	01d00934 	movhi	r7,16420
10004a94:	000c4740 	call	1000c474 <__muldf3>
10004a98:	81000044 	addi	r4,r16,1
10004a9c:	d8800f15 	stw	r2,60(sp)
10004aa0:	d8c01015 	stw	r3,64(sp)
10004aa4:	000d5080 	call	1000d508 <__floatsidf>
10004aa8:	d9800f17 	ldw	r6,60(sp)
10004aac:	d9c01017 	ldw	r7,64(sp)
10004ab0:	1009883a 	mov	r4,r2
10004ab4:	180b883a 	mov	r5,r3
10004ab8:	000c4740 	call	1000c474 <__muldf3>
10004abc:	01d00734 	movhi	r7,16412
10004ac0:	000d883a 	mov	r6,zero
10004ac4:	1009883a 	mov	r4,r2
10004ac8:	180b883a 	mov	r5,r3
10004acc:	000b0880 	call	1000b088 <__adddf3>
10004ad0:	d9c00517 	ldw	r7,20(sp)
10004ad4:	047f3034 	movhi	r17,64704
10004ad8:	1021883a 	mov	r16,r2
10004adc:	39ffffc4 	addi	r7,r7,-1
10004ae0:	d9c01315 	stw	r7,76(sp)
10004ae4:	1c63883a 	add	r17,r3,r17
10004ae8:	db000c17 	ldw	r12,48(sp)
10004aec:	003bea06 	br	10003a98 <__alt_data_end+0xf8003a98>
10004af0:	dc000915 	stw	r16,36(sp)
10004af4:	003e0e06 	br	10004330 <__alt_data_end+0xf8004330>
10004af8:	01000e44 	movi	r4,57
10004afc:	8825883a 	mov	r18,r17
10004b00:	9dc00044 	addi	r23,r19,1
10004b04:	99000005 	stb	r4,0(r19)
10004b08:	a023883a 	mov	r17,r20
10004b0c:	dc000915 	stw	r16,36(sp)
10004b10:	003da406 	br	100041a4 <__alt_data_end+0xf80041a4>
10004b14:	d9801417 	ldw	r6,80(sp)
10004b18:	d9c01517 	ldw	r7,84(sp)
10004b1c:	0009883a 	mov	r4,zero
10004b20:	014ff834 	movhi	r5,16352
10004b24:	000cb8c0 	call	1000cb8c <__subdf3>
10004b28:	880d883a 	mov	r6,r17
10004b2c:	a00f883a 	mov	r7,r20
10004b30:	1009883a 	mov	r4,r2
10004b34:	180b883a 	mov	r5,r3
10004b38:	000c2a40 	call	1000c2a4 <__gedf2>
10004b3c:	00bc7c0e 	bge	zero,r2,10003d30 <__alt_data_end+0xf8003d30>
10004b40:	01000c04 	movi	r4,48
10004b44:	00000106 	br	10004b4c <_dtoa_r+0x1580>
10004b48:	102f883a 	mov	r23,r2
10004b4c:	b8bfffc4 	addi	r2,r23,-1
10004b50:	10c00007 	ldb	r3,0(r2)
10004b54:	193ffc26 	beq	r3,r4,10004b48 <__alt_data_end+0xf8004b48>
10004b58:	d9801317 	ldw	r6,76(sp)
10004b5c:	d9800515 	stw	r6,20(sp)
10004b60:	003c4406 	br	10003c74 <__alt_data_end+0xf8003c74>
10004b64:	d9801317 	ldw	r6,76(sp)
10004b68:	d9800515 	stw	r6,20(sp)
10004b6c:	003cea06 	br	10003f18 <__alt_data_end+0xf8003f18>
10004b70:	dd800f17 	ldw	r22,60(sp)
10004b74:	dcc01017 	ldw	r19,64(sp)
10004b78:	dc801217 	ldw	r18,72(sp)
10004b7c:	003c6c06 	br	10003d30 <__alt_data_end+0xf8003d30>
10004b80:	903e031e 	bne	r18,zero,10004390 <__alt_data_end+0xf8004390>
10004b84:	003ebb06 	br	10004674 <__alt_data_end+0xf8004674>
10004b88:	103e6c1e 	bne	r2,zero,1000453c <__alt_data_end+0xf800453c>
10004b8c:	4080004c 	andi	r2,r8,1
10004b90:	103e6a26 	beq	r2,zero,1000453c <__alt_data_end+0xf800453c>
10004b94:	003e6606 	br	10004530 <__alt_data_end+0xf8004530>
10004b98:	d8c00317 	ldw	r3,12(sp)
10004b9c:	00800084 	movi	r2,2
10004ba0:	10c02916 	blt	r2,r3,10004c48 <_dtoa_r+0x167c>
10004ba4:	d9000c17 	ldw	r4,48(sp)
10004ba8:	003e8806 	br	100045cc <__alt_data_end+0xf80045cc>
10004bac:	04000084 	movi	r16,2
10004bb0:	003b9d06 	br	10003a28 <__alt_data_end+0xf8003a28>
10004bb4:	d9001317 	ldw	r4,76(sp)
10004bb8:	d9000515 	stw	r4,20(sp)
10004bbc:	003cd606 	br	10003f18 <__alt_data_end+0xf8003f18>
10004bc0:	d8801317 	ldw	r2,76(sp)
10004bc4:	d8800515 	stw	r2,20(sp)
10004bc8:	003c2a06 	br	10003c74 <__alt_data_end+0xf8003c74>
10004bcc:	d9800317 	ldw	r6,12(sp)
10004bd0:	00800084 	movi	r2,2
10004bd4:	11801516 	blt	r2,r6,10004c2c <_dtoa_r+0x1660>
10004bd8:	d9c00c17 	ldw	r7,48(sp)
10004bdc:	d9c00615 	stw	r7,24(sp)
10004be0:	003df706 	br	100043c0 <__alt_data_end+0xf80043c0>
10004be4:	193d3926 	beq	r3,r4,100040cc <__alt_data_end+0xf80040cc>
10004be8:	00c00f04 	movi	r3,60
10004bec:	1885c83a 	sub	r2,r3,r2
10004bf0:	003ddf06 	br	10004370 <__alt_data_end+0xf8004370>
10004bf4:	e009883a 	mov	r4,fp
10004bf8:	e0001115 	stw	zero,68(fp)
10004bfc:	000b883a 	mov	r5,zero
10004c00:	0006c680 	call	10006c68 <_Balloc>
10004c04:	d8800715 	stw	r2,28(sp)
10004c08:	d8c00717 	ldw	r3,28(sp)
10004c0c:	00bfffc4 	movi	r2,-1
10004c10:	01000044 	movi	r4,1
10004c14:	d8800c15 	stw	r2,48(sp)
10004c18:	e0c01015 	stw	r3,64(fp)
10004c1c:	d9000b15 	stw	r4,44(sp)
10004c20:	d8800615 	stw	r2,24(sp)
10004c24:	d8002215 	stw	zero,136(sp)
10004c28:	003c4106 	br	10003d30 <__alt_data_end+0xf8003d30>
10004c2c:	d8c00c17 	ldw	r3,48(sp)
10004c30:	d8c00615 	stw	r3,24(sp)
10004c34:	003e7006 	br	100045f8 <__alt_data_end+0xf80045f8>
10004c38:	04400044 	movi	r17,1
10004c3c:	003b2006 	br	100038c0 <__alt_data_end+0xf80038c0>
10004c40:	000b883a 	mov	r5,zero
10004c44:	003b3d06 	br	1000393c <__alt_data_end+0xf800393c>
10004c48:	d8800c17 	ldw	r2,48(sp)
10004c4c:	d8800615 	stw	r2,24(sp)
10004c50:	003e6906 	br	100045f8 <__alt_data_end+0xf80045f8>

10004c54 <__sflush_r>:
10004c54:	2880030b 	ldhu	r2,12(r5)
10004c58:	defffb04 	addi	sp,sp,-20
10004c5c:	dcc00315 	stw	r19,12(sp)
10004c60:	dc400115 	stw	r17,4(sp)
10004c64:	dfc00415 	stw	ra,16(sp)
10004c68:	dc800215 	stw	r18,8(sp)
10004c6c:	dc000015 	stw	r16,0(sp)
10004c70:	10c0020c 	andi	r3,r2,8
10004c74:	2823883a 	mov	r17,r5
10004c78:	2027883a 	mov	r19,r4
10004c7c:	1800311e 	bne	r3,zero,10004d44 <__sflush_r+0xf0>
10004c80:	28c00117 	ldw	r3,4(r5)
10004c84:	10820014 	ori	r2,r2,2048
10004c88:	2880030d 	sth	r2,12(r5)
10004c8c:	00c04b0e 	bge	zero,r3,10004dbc <__sflush_r+0x168>
10004c90:	8a000a17 	ldw	r8,40(r17)
10004c94:	40002326 	beq	r8,zero,10004d24 <__sflush_r+0xd0>
10004c98:	9c000017 	ldw	r16,0(r19)
10004c9c:	10c4000c 	andi	r3,r2,4096
10004ca0:	98000015 	stw	zero,0(r19)
10004ca4:	18004826 	beq	r3,zero,10004dc8 <__sflush_r+0x174>
10004ca8:	89801417 	ldw	r6,80(r17)
10004cac:	10c0010c 	andi	r3,r2,4
10004cb0:	18000626 	beq	r3,zero,10004ccc <__sflush_r+0x78>
10004cb4:	88c00117 	ldw	r3,4(r17)
10004cb8:	88800c17 	ldw	r2,48(r17)
10004cbc:	30cdc83a 	sub	r6,r6,r3
10004cc0:	10000226 	beq	r2,zero,10004ccc <__sflush_r+0x78>
10004cc4:	88800f17 	ldw	r2,60(r17)
10004cc8:	308dc83a 	sub	r6,r6,r2
10004ccc:	89400717 	ldw	r5,28(r17)
10004cd0:	000f883a 	mov	r7,zero
10004cd4:	9809883a 	mov	r4,r19
10004cd8:	403ee83a 	callr	r8
10004cdc:	00ffffc4 	movi	r3,-1
10004ce0:	10c04426 	beq	r2,r3,10004df4 <__sflush_r+0x1a0>
10004ce4:	88c0030b 	ldhu	r3,12(r17)
10004ce8:	89000417 	ldw	r4,16(r17)
10004cec:	88000115 	stw	zero,4(r17)
10004cf0:	197dffcc 	andi	r5,r3,63487
10004cf4:	8940030d 	sth	r5,12(r17)
10004cf8:	89000015 	stw	r4,0(r17)
10004cfc:	18c4000c 	andi	r3,r3,4096
10004d00:	18002c1e 	bne	r3,zero,10004db4 <__sflush_r+0x160>
10004d04:	89400c17 	ldw	r5,48(r17)
10004d08:	9c000015 	stw	r16,0(r19)
10004d0c:	28000526 	beq	r5,zero,10004d24 <__sflush_r+0xd0>
10004d10:	88801004 	addi	r2,r17,64
10004d14:	28800226 	beq	r5,r2,10004d20 <__sflush_r+0xcc>
10004d18:	9809883a 	mov	r4,r19
10004d1c:	00053c00 	call	100053c0 <_free_r>
10004d20:	88000c15 	stw	zero,48(r17)
10004d24:	0005883a 	mov	r2,zero
10004d28:	dfc00417 	ldw	ra,16(sp)
10004d2c:	dcc00317 	ldw	r19,12(sp)
10004d30:	dc800217 	ldw	r18,8(sp)
10004d34:	dc400117 	ldw	r17,4(sp)
10004d38:	dc000017 	ldw	r16,0(sp)
10004d3c:	dec00504 	addi	sp,sp,20
10004d40:	f800283a 	ret
10004d44:	2c800417 	ldw	r18,16(r5)
10004d48:	903ff626 	beq	r18,zero,10004d24 <__alt_data_end+0xf8004d24>
10004d4c:	2c000017 	ldw	r16,0(r5)
10004d50:	108000cc 	andi	r2,r2,3
10004d54:	2c800015 	stw	r18,0(r5)
10004d58:	84a1c83a 	sub	r16,r16,r18
10004d5c:	1000131e 	bne	r2,zero,10004dac <__sflush_r+0x158>
10004d60:	28800517 	ldw	r2,20(r5)
10004d64:	88800215 	stw	r2,8(r17)
10004d68:	04000316 	blt	zero,r16,10004d78 <__sflush_r+0x124>
10004d6c:	003fed06 	br	10004d24 <__alt_data_end+0xf8004d24>
10004d70:	90a5883a 	add	r18,r18,r2
10004d74:	043feb0e 	bge	zero,r16,10004d24 <__alt_data_end+0xf8004d24>
10004d78:	88800917 	ldw	r2,36(r17)
10004d7c:	89400717 	ldw	r5,28(r17)
10004d80:	800f883a 	mov	r7,r16
10004d84:	900d883a 	mov	r6,r18
10004d88:	9809883a 	mov	r4,r19
10004d8c:	103ee83a 	callr	r2
10004d90:	80a1c83a 	sub	r16,r16,r2
10004d94:	00bff616 	blt	zero,r2,10004d70 <__alt_data_end+0xf8004d70>
10004d98:	88c0030b 	ldhu	r3,12(r17)
10004d9c:	00bfffc4 	movi	r2,-1
10004da0:	18c01014 	ori	r3,r3,64
10004da4:	88c0030d 	sth	r3,12(r17)
10004da8:	003fdf06 	br	10004d28 <__alt_data_end+0xf8004d28>
10004dac:	0005883a 	mov	r2,zero
10004db0:	003fec06 	br	10004d64 <__alt_data_end+0xf8004d64>
10004db4:	88801415 	stw	r2,80(r17)
10004db8:	003fd206 	br	10004d04 <__alt_data_end+0xf8004d04>
10004dbc:	28c00f17 	ldw	r3,60(r5)
10004dc0:	00ffb316 	blt	zero,r3,10004c90 <__alt_data_end+0xf8004c90>
10004dc4:	003fd706 	br	10004d24 <__alt_data_end+0xf8004d24>
10004dc8:	89400717 	ldw	r5,28(r17)
10004dcc:	000d883a 	mov	r6,zero
10004dd0:	01c00044 	movi	r7,1
10004dd4:	9809883a 	mov	r4,r19
10004dd8:	403ee83a 	callr	r8
10004ddc:	100d883a 	mov	r6,r2
10004de0:	00bfffc4 	movi	r2,-1
10004de4:	30801426 	beq	r6,r2,10004e38 <__sflush_r+0x1e4>
10004de8:	8880030b 	ldhu	r2,12(r17)
10004dec:	8a000a17 	ldw	r8,40(r17)
10004df0:	003fae06 	br	10004cac <__alt_data_end+0xf8004cac>
10004df4:	98c00017 	ldw	r3,0(r19)
10004df8:	183fba26 	beq	r3,zero,10004ce4 <__alt_data_end+0xf8004ce4>
10004dfc:	01000744 	movi	r4,29
10004e00:	19000626 	beq	r3,r4,10004e1c <__sflush_r+0x1c8>
10004e04:	01000584 	movi	r4,22
10004e08:	19000426 	beq	r3,r4,10004e1c <__sflush_r+0x1c8>
10004e0c:	88c0030b 	ldhu	r3,12(r17)
10004e10:	18c01014 	ori	r3,r3,64
10004e14:	88c0030d 	sth	r3,12(r17)
10004e18:	003fc306 	br	10004d28 <__alt_data_end+0xf8004d28>
10004e1c:	8880030b 	ldhu	r2,12(r17)
10004e20:	88c00417 	ldw	r3,16(r17)
10004e24:	88000115 	stw	zero,4(r17)
10004e28:	10bdffcc 	andi	r2,r2,63487
10004e2c:	8880030d 	sth	r2,12(r17)
10004e30:	88c00015 	stw	r3,0(r17)
10004e34:	003fb306 	br	10004d04 <__alt_data_end+0xf8004d04>
10004e38:	98800017 	ldw	r2,0(r19)
10004e3c:	103fea26 	beq	r2,zero,10004de8 <__alt_data_end+0xf8004de8>
10004e40:	00c00744 	movi	r3,29
10004e44:	10c00226 	beq	r2,r3,10004e50 <__sflush_r+0x1fc>
10004e48:	00c00584 	movi	r3,22
10004e4c:	10c0031e 	bne	r2,r3,10004e5c <__sflush_r+0x208>
10004e50:	9c000015 	stw	r16,0(r19)
10004e54:	0005883a 	mov	r2,zero
10004e58:	003fb306 	br	10004d28 <__alt_data_end+0xf8004d28>
10004e5c:	88c0030b 	ldhu	r3,12(r17)
10004e60:	3005883a 	mov	r2,r6
10004e64:	18c01014 	ori	r3,r3,64
10004e68:	88c0030d 	sth	r3,12(r17)
10004e6c:	003fae06 	br	10004d28 <__alt_data_end+0xf8004d28>

10004e70 <_fflush_r>:
10004e70:	defffd04 	addi	sp,sp,-12
10004e74:	dc000115 	stw	r16,4(sp)
10004e78:	dfc00215 	stw	ra,8(sp)
10004e7c:	2021883a 	mov	r16,r4
10004e80:	20000226 	beq	r4,zero,10004e8c <_fflush_r+0x1c>
10004e84:	20800e17 	ldw	r2,56(r4)
10004e88:	10000c26 	beq	r2,zero,10004ebc <_fflush_r+0x4c>
10004e8c:	2880030f 	ldh	r2,12(r5)
10004e90:	1000051e 	bne	r2,zero,10004ea8 <_fflush_r+0x38>
10004e94:	0005883a 	mov	r2,zero
10004e98:	dfc00217 	ldw	ra,8(sp)
10004e9c:	dc000117 	ldw	r16,4(sp)
10004ea0:	dec00304 	addi	sp,sp,12
10004ea4:	f800283a 	ret
10004ea8:	8009883a 	mov	r4,r16
10004eac:	dfc00217 	ldw	ra,8(sp)
10004eb0:	dc000117 	ldw	r16,4(sp)
10004eb4:	dec00304 	addi	sp,sp,12
10004eb8:	0004c541 	jmpi	10004c54 <__sflush_r>
10004ebc:	d9400015 	stw	r5,0(sp)
10004ec0:	000524c0 	call	1000524c <__sinit>
10004ec4:	d9400017 	ldw	r5,0(sp)
10004ec8:	003ff006 	br	10004e8c <__alt_data_end+0xf8004e8c>

10004ecc <fflush>:
10004ecc:	20000526 	beq	r4,zero,10004ee4 <fflush+0x18>
10004ed0:	00840074 	movhi	r2,4097
10004ed4:	1098fc04 	addi	r2,r2,25584
10004ed8:	200b883a 	mov	r5,r4
10004edc:	11000017 	ldw	r4,0(r2)
10004ee0:	0004e701 	jmpi	10004e70 <_fflush_r>
10004ee4:	00840074 	movhi	r2,4097
10004ee8:	1098fb04 	addi	r2,r2,25580
10004eec:	11000017 	ldw	r4,0(r2)
10004ef0:	01440034 	movhi	r5,4096
10004ef4:	29539c04 	addi	r5,r5,20080
10004ef8:	0005c501 	jmpi	10005c50 <_fwalk_reent>

10004efc <__fp_unlock>:
10004efc:	0005883a 	mov	r2,zero
10004f00:	f800283a 	ret

10004f04 <_cleanup_r>:
10004f04:	01440074 	movhi	r5,4097
10004f08:	29671a04 	addi	r5,r5,-25496
10004f0c:	0005c501 	jmpi	10005c50 <_fwalk_reent>

10004f10 <__sinit.part.1>:
10004f10:	defff704 	addi	sp,sp,-36
10004f14:	00c40034 	movhi	r3,4096
10004f18:	dfc00815 	stw	ra,32(sp)
10004f1c:	ddc00715 	stw	r23,28(sp)
10004f20:	dd800615 	stw	r22,24(sp)
10004f24:	dd400515 	stw	r21,20(sp)
10004f28:	dd000415 	stw	r20,16(sp)
10004f2c:	dcc00315 	stw	r19,12(sp)
10004f30:	dc800215 	stw	r18,8(sp)
10004f34:	dc400115 	stw	r17,4(sp)
10004f38:	dc000015 	stw	r16,0(sp)
10004f3c:	18d3c104 	addi	r3,r3,20228
10004f40:	24000117 	ldw	r16,4(r4)
10004f44:	20c00f15 	stw	r3,60(r4)
10004f48:	2080bb04 	addi	r2,r4,748
10004f4c:	00c000c4 	movi	r3,3
10004f50:	20c0b915 	stw	r3,740(r4)
10004f54:	2080ba15 	stw	r2,744(r4)
10004f58:	2000b815 	stw	zero,736(r4)
10004f5c:	05c00204 	movi	r23,8
10004f60:	00800104 	movi	r2,4
10004f64:	2025883a 	mov	r18,r4
10004f68:	b80d883a 	mov	r6,r23
10004f6c:	81001704 	addi	r4,r16,92
10004f70:	000b883a 	mov	r5,zero
10004f74:	80000015 	stw	zero,0(r16)
10004f78:	80000115 	stw	zero,4(r16)
10004f7c:	80000215 	stw	zero,8(r16)
10004f80:	8080030d 	sth	r2,12(r16)
10004f84:	80001915 	stw	zero,100(r16)
10004f88:	8000038d 	sth	zero,14(r16)
10004f8c:	80000415 	stw	zero,16(r16)
10004f90:	80000515 	stw	zero,20(r16)
10004f94:	80000615 	stw	zero,24(r16)
10004f98:	0006b400 	call	10006b40 <memset>
10004f9c:	05840074 	movhi	r22,4097
10004fa0:	94400217 	ldw	r17,8(r18)
10004fa4:	05440074 	movhi	r21,4097
10004fa8:	05040074 	movhi	r20,4097
10004fac:	04c40074 	movhi	r19,4097
10004fb0:	b5a0a404 	addi	r22,r22,-32112
10004fb4:	ad60bb04 	addi	r21,r21,-32020
10004fb8:	a520da04 	addi	r20,r20,-31896
10004fbc:	9ce0f104 	addi	r19,r19,-31804
10004fc0:	85800815 	stw	r22,32(r16)
10004fc4:	85400915 	stw	r21,36(r16)
10004fc8:	85000a15 	stw	r20,40(r16)
10004fcc:	84c00b15 	stw	r19,44(r16)
10004fd0:	84000715 	stw	r16,28(r16)
10004fd4:	00800284 	movi	r2,10
10004fd8:	8880030d 	sth	r2,12(r17)
10004fdc:	00800044 	movi	r2,1
10004fe0:	b80d883a 	mov	r6,r23
10004fe4:	89001704 	addi	r4,r17,92
10004fe8:	000b883a 	mov	r5,zero
10004fec:	88000015 	stw	zero,0(r17)
10004ff0:	88000115 	stw	zero,4(r17)
10004ff4:	88000215 	stw	zero,8(r17)
10004ff8:	88001915 	stw	zero,100(r17)
10004ffc:	8880038d 	sth	r2,14(r17)
10005000:	88000415 	stw	zero,16(r17)
10005004:	88000515 	stw	zero,20(r17)
10005008:	88000615 	stw	zero,24(r17)
1000500c:	0006b400 	call	10006b40 <memset>
10005010:	94000317 	ldw	r16,12(r18)
10005014:	00800484 	movi	r2,18
10005018:	8c400715 	stw	r17,28(r17)
1000501c:	8d800815 	stw	r22,32(r17)
10005020:	8d400915 	stw	r21,36(r17)
10005024:	8d000a15 	stw	r20,40(r17)
10005028:	8cc00b15 	stw	r19,44(r17)
1000502c:	8080030d 	sth	r2,12(r16)
10005030:	00800084 	movi	r2,2
10005034:	80000015 	stw	zero,0(r16)
10005038:	80000115 	stw	zero,4(r16)
1000503c:	80000215 	stw	zero,8(r16)
10005040:	80001915 	stw	zero,100(r16)
10005044:	8080038d 	sth	r2,14(r16)
10005048:	80000415 	stw	zero,16(r16)
1000504c:	80000515 	stw	zero,20(r16)
10005050:	80000615 	stw	zero,24(r16)
10005054:	b80d883a 	mov	r6,r23
10005058:	000b883a 	mov	r5,zero
1000505c:	81001704 	addi	r4,r16,92
10005060:	0006b400 	call	10006b40 <memset>
10005064:	00800044 	movi	r2,1
10005068:	84000715 	stw	r16,28(r16)
1000506c:	85800815 	stw	r22,32(r16)
10005070:	85400915 	stw	r21,36(r16)
10005074:	85000a15 	stw	r20,40(r16)
10005078:	84c00b15 	stw	r19,44(r16)
1000507c:	90800e15 	stw	r2,56(r18)
10005080:	dfc00817 	ldw	ra,32(sp)
10005084:	ddc00717 	ldw	r23,28(sp)
10005088:	dd800617 	ldw	r22,24(sp)
1000508c:	dd400517 	ldw	r21,20(sp)
10005090:	dd000417 	ldw	r20,16(sp)
10005094:	dcc00317 	ldw	r19,12(sp)
10005098:	dc800217 	ldw	r18,8(sp)
1000509c:	dc400117 	ldw	r17,4(sp)
100050a0:	dc000017 	ldw	r16,0(sp)
100050a4:	dec00904 	addi	sp,sp,36
100050a8:	f800283a 	ret

100050ac <__fp_lock>:
100050ac:	0005883a 	mov	r2,zero
100050b0:	f800283a 	ret

100050b4 <__sfmoreglue>:
100050b4:	defffc04 	addi	sp,sp,-16
100050b8:	dc400115 	stw	r17,4(sp)
100050bc:	2c7fffc4 	addi	r17,r5,-1
100050c0:	8c401a24 	muli	r17,r17,104
100050c4:	dc800215 	stw	r18,8(sp)
100050c8:	2825883a 	mov	r18,r5
100050cc:	89401d04 	addi	r5,r17,116
100050d0:	dc000015 	stw	r16,0(sp)
100050d4:	dfc00315 	stw	ra,12(sp)
100050d8:	0005fac0 	call	10005fac <_malloc_r>
100050dc:	1021883a 	mov	r16,r2
100050e0:	10000726 	beq	r2,zero,10005100 <__sfmoreglue+0x4c>
100050e4:	11000304 	addi	r4,r2,12
100050e8:	10000015 	stw	zero,0(r2)
100050ec:	14800115 	stw	r18,4(r2)
100050f0:	11000215 	stw	r4,8(r2)
100050f4:	89801a04 	addi	r6,r17,104
100050f8:	000b883a 	mov	r5,zero
100050fc:	0006b400 	call	10006b40 <memset>
10005100:	8005883a 	mov	r2,r16
10005104:	dfc00317 	ldw	ra,12(sp)
10005108:	dc800217 	ldw	r18,8(sp)
1000510c:	dc400117 	ldw	r17,4(sp)
10005110:	dc000017 	ldw	r16,0(sp)
10005114:	dec00404 	addi	sp,sp,16
10005118:	f800283a 	ret

1000511c <__sfp>:
1000511c:	defffb04 	addi	sp,sp,-20
10005120:	dc000015 	stw	r16,0(sp)
10005124:	04040074 	movhi	r16,4097
10005128:	8418fb04 	addi	r16,r16,25580
1000512c:	dcc00315 	stw	r19,12(sp)
10005130:	2027883a 	mov	r19,r4
10005134:	81000017 	ldw	r4,0(r16)
10005138:	dfc00415 	stw	ra,16(sp)
1000513c:	dc800215 	stw	r18,8(sp)
10005140:	20800e17 	ldw	r2,56(r4)
10005144:	dc400115 	stw	r17,4(sp)
10005148:	1000021e 	bne	r2,zero,10005154 <__sfp+0x38>
1000514c:	0004f100 	call	10004f10 <__sinit.part.1>
10005150:	81000017 	ldw	r4,0(r16)
10005154:	2480b804 	addi	r18,r4,736
10005158:	047fffc4 	movi	r17,-1
1000515c:	91000117 	ldw	r4,4(r18)
10005160:	94000217 	ldw	r16,8(r18)
10005164:	213fffc4 	addi	r4,r4,-1
10005168:	20000a16 	blt	r4,zero,10005194 <__sfp+0x78>
1000516c:	8080030f 	ldh	r2,12(r16)
10005170:	10000c26 	beq	r2,zero,100051a4 <__sfp+0x88>
10005174:	80c01d04 	addi	r3,r16,116
10005178:	00000206 	br	10005184 <__sfp+0x68>
1000517c:	18bfe60f 	ldh	r2,-104(r3)
10005180:	10000826 	beq	r2,zero,100051a4 <__sfp+0x88>
10005184:	213fffc4 	addi	r4,r4,-1
10005188:	1c3ffd04 	addi	r16,r3,-12
1000518c:	18c01a04 	addi	r3,r3,104
10005190:	247ffa1e 	bne	r4,r17,1000517c <__alt_data_end+0xf800517c>
10005194:	90800017 	ldw	r2,0(r18)
10005198:	10001d26 	beq	r2,zero,10005210 <__sfp+0xf4>
1000519c:	1025883a 	mov	r18,r2
100051a0:	003fee06 	br	1000515c <__alt_data_end+0xf800515c>
100051a4:	00bfffc4 	movi	r2,-1
100051a8:	8080038d 	sth	r2,14(r16)
100051ac:	00800044 	movi	r2,1
100051b0:	8080030d 	sth	r2,12(r16)
100051b4:	80001915 	stw	zero,100(r16)
100051b8:	80000015 	stw	zero,0(r16)
100051bc:	80000215 	stw	zero,8(r16)
100051c0:	80000115 	stw	zero,4(r16)
100051c4:	80000415 	stw	zero,16(r16)
100051c8:	80000515 	stw	zero,20(r16)
100051cc:	80000615 	stw	zero,24(r16)
100051d0:	01800204 	movi	r6,8
100051d4:	000b883a 	mov	r5,zero
100051d8:	81001704 	addi	r4,r16,92
100051dc:	0006b400 	call	10006b40 <memset>
100051e0:	8005883a 	mov	r2,r16
100051e4:	80000c15 	stw	zero,48(r16)
100051e8:	80000d15 	stw	zero,52(r16)
100051ec:	80001115 	stw	zero,68(r16)
100051f0:	80001215 	stw	zero,72(r16)
100051f4:	dfc00417 	ldw	ra,16(sp)
100051f8:	dcc00317 	ldw	r19,12(sp)
100051fc:	dc800217 	ldw	r18,8(sp)
10005200:	dc400117 	ldw	r17,4(sp)
10005204:	dc000017 	ldw	r16,0(sp)
10005208:	dec00504 	addi	sp,sp,20
1000520c:	f800283a 	ret
10005210:	01400104 	movi	r5,4
10005214:	9809883a 	mov	r4,r19
10005218:	00050b40 	call	100050b4 <__sfmoreglue>
1000521c:	90800015 	stw	r2,0(r18)
10005220:	103fde1e 	bne	r2,zero,1000519c <__alt_data_end+0xf800519c>
10005224:	00800304 	movi	r2,12
10005228:	98800015 	stw	r2,0(r19)
1000522c:	0005883a 	mov	r2,zero
10005230:	003ff006 	br	100051f4 <__alt_data_end+0xf80051f4>

10005234 <_cleanup>:
10005234:	00840074 	movhi	r2,4097
10005238:	1098fb04 	addi	r2,r2,25580
1000523c:	11000017 	ldw	r4,0(r2)
10005240:	01440074 	movhi	r5,4097
10005244:	29671a04 	addi	r5,r5,-25496
10005248:	0005c501 	jmpi	10005c50 <_fwalk_reent>

1000524c <__sinit>:
1000524c:	20800e17 	ldw	r2,56(r4)
10005250:	10000126 	beq	r2,zero,10005258 <__sinit+0xc>
10005254:	f800283a 	ret
10005258:	0004f101 	jmpi	10004f10 <__sinit.part.1>

1000525c <__sfp_lock_acquire>:
1000525c:	f800283a 	ret

10005260 <__sfp_lock_release>:
10005260:	f800283a 	ret

10005264 <__sinit_lock_acquire>:
10005264:	f800283a 	ret

10005268 <__sinit_lock_release>:
10005268:	f800283a 	ret

1000526c <__fp_lock_all>:
1000526c:	00840074 	movhi	r2,4097
10005270:	1098fc04 	addi	r2,r2,25584
10005274:	11000017 	ldw	r4,0(r2)
10005278:	01440034 	movhi	r5,4096
1000527c:	29542b04 	addi	r5,r5,20652
10005280:	0005b8c1 	jmpi	10005b8c <_fwalk>

10005284 <__fp_unlock_all>:
10005284:	00840074 	movhi	r2,4097
10005288:	1098fc04 	addi	r2,r2,25584
1000528c:	11000017 	ldw	r4,0(r2)
10005290:	01440034 	movhi	r5,4096
10005294:	2953bf04 	addi	r5,r5,20220
10005298:	0005b8c1 	jmpi	10005b8c <_fwalk>

1000529c <_malloc_trim_r>:
1000529c:	defffb04 	addi	sp,sp,-20
100052a0:	dcc00315 	stw	r19,12(sp)
100052a4:	04c40074 	movhi	r19,4097
100052a8:	dc800215 	stw	r18,8(sp)
100052ac:	dc400115 	stw	r17,4(sp)
100052b0:	dc000015 	stw	r16,0(sp)
100052b4:	dfc00415 	stw	ra,16(sp)
100052b8:	2821883a 	mov	r16,r5
100052bc:	9cd35704 	addi	r19,r19,19804
100052c0:	2025883a 	mov	r18,r4
100052c4:	000ddec0 	call	1000ddec <__malloc_lock>
100052c8:	98800217 	ldw	r2,8(r19)
100052cc:	14400117 	ldw	r17,4(r2)
100052d0:	00bfff04 	movi	r2,-4
100052d4:	88a2703a 	and	r17,r17,r2
100052d8:	8c21c83a 	sub	r16,r17,r16
100052dc:	8403fbc4 	addi	r16,r16,4079
100052e0:	8020d33a 	srli	r16,r16,12
100052e4:	0083ffc4 	movi	r2,4095
100052e8:	843fffc4 	addi	r16,r16,-1
100052ec:	8020933a 	slli	r16,r16,12
100052f0:	1400060e 	bge	r2,r16,1000530c <_malloc_trim_r+0x70>
100052f4:	000b883a 	mov	r5,zero
100052f8:	9009883a 	mov	r4,r18
100052fc:	000823c0 	call	1000823c <_sbrk_r>
10005300:	98c00217 	ldw	r3,8(r19)
10005304:	1c47883a 	add	r3,r3,r17
10005308:	10c00a26 	beq	r2,r3,10005334 <_malloc_trim_r+0x98>
1000530c:	9009883a 	mov	r4,r18
10005310:	000de100 	call	1000de10 <__malloc_unlock>
10005314:	0005883a 	mov	r2,zero
10005318:	dfc00417 	ldw	ra,16(sp)
1000531c:	dcc00317 	ldw	r19,12(sp)
10005320:	dc800217 	ldw	r18,8(sp)
10005324:	dc400117 	ldw	r17,4(sp)
10005328:	dc000017 	ldw	r16,0(sp)
1000532c:	dec00504 	addi	sp,sp,20
10005330:	f800283a 	ret
10005334:	040bc83a 	sub	r5,zero,r16
10005338:	9009883a 	mov	r4,r18
1000533c:	000823c0 	call	1000823c <_sbrk_r>
10005340:	00ffffc4 	movi	r3,-1
10005344:	10c00d26 	beq	r2,r3,1000537c <_malloc_trim_r+0xe0>
10005348:	00c400b4 	movhi	r3,4098
1000534c:	18e00404 	addi	r3,r3,-32752
10005350:	18800017 	ldw	r2,0(r3)
10005354:	99000217 	ldw	r4,8(r19)
10005358:	8c23c83a 	sub	r17,r17,r16
1000535c:	8c400054 	ori	r17,r17,1
10005360:	1421c83a 	sub	r16,r2,r16
10005364:	24400115 	stw	r17,4(r4)
10005368:	9009883a 	mov	r4,r18
1000536c:	1c000015 	stw	r16,0(r3)
10005370:	000de100 	call	1000de10 <__malloc_unlock>
10005374:	00800044 	movi	r2,1
10005378:	003fe706 	br	10005318 <__alt_data_end+0xf8005318>
1000537c:	000b883a 	mov	r5,zero
10005380:	9009883a 	mov	r4,r18
10005384:	000823c0 	call	1000823c <_sbrk_r>
10005388:	99000217 	ldw	r4,8(r19)
1000538c:	014003c4 	movi	r5,15
10005390:	1107c83a 	sub	r3,r2,r4
10005394:	28ffdd0e 	bge	r5,r3,1000530c <__alt_data_end+0xf800530c>
10005398:	01440074 	movhi	r5,4097
1000539c:	2958fe04 	addi	r5,r5,25592
100053a0:	29400017 	ldw	r5,0(r5)
100053a4:	18c00054 	ori	r3,r3,1
100053a8:	20c00115 	stw	r3,4(r4)
100053ac:	00c400b4 	movhi	r3,4098
100053b0:	1145c83a 	sub	r2,r2,r5
100053b4:	18e00404 	addi	r3,r3,-32752
100053b8:	18800015 	stw	r2,0(r3)
100053bc:	003fd306 	br	1000530c <__alt_data_end+0xf800530c>

100053c0 <_free_r>:
100053c0:	28004126 	beq	r5,zero,100054c8 <_free_r+0x108>
100053c4:	defffd04 	addi	sp,sp,-12
100053c8:	dc400115 	stw	r17,4(sp)
100053cc:	dc000015 	stw	r16,0(sp)
100053d0:	2023883a 	mov	r17,r4
100053d4:	2821883a 	mov	r16,r5
100053d8:	dfc00215 	stw	ra,8(sp)
100053dc:	000ddec0 	call	1000ddec <__malloc_lock>
100053e0:	81ffff17 	ldw	r7,-4(r16)
100053e4:	00bfff84 	movi	r2,-2
100053e8:	01040074 	movhi	r4,4097
100053ec:	81bffe04 	addi	r6,r16,-8
100053f0:	3884703a 	and	r2,r7,r2
100053f4:	21135704 	addi	r4,r4,19804
100053f8:	308b883a 	add	r5,r6,r2
100053fc:	2a400117 	ldw	r9,4(r5)
10005400:	22000217 	ldw	r8,8(r4)
10005404:	00ffff04 	movi	r3,-4
10005408:	48c6703a 	and	r3,r9,r3
1000540c:	2a005726 	beq	r5,r8,1000556c <_free_r+0x1ac>
10005410:	28c00115 	stw	r3,4(r5)
10005414:	39c0004c 	andi	r7,r7,1
10005418:	3800091e 	bne	r7,zero,10005440 <_free_r+0x80>
1000541c:	823ffe17 	ldw	r8,-8(r16)
10005420:	22400204 	addi	r9,r4,8
10005424:	320dc83a 	sub	r6,r6,r8
10005428:	31c00217 	ldw	r7,8(r6)
1000542c:	1205883a 	add	r2,r2,r8
10005430:	3a406526 	beq	r7,r9,100055c8 <_free_r+0x208>
10005434:	32000317 	ldw	r8,12(r6)
10005438:	3a000315 	stw	r8,12(r7)
1000543c:	41c00215 	stw	r7,8(r8)
10005440:	28cf883a 	add	r7,r5,r3
10005444:	39c00117 	ldw	r7,4(r7)
10005448:	39c0004c 	andi	r7,r7,1
1000544c:	38003a26 	beq	r7,zero,10005538 <_free_r+0x178>
10005450:	10c00054 	ori	r3,r2,1
10005454:	30c00115 	stw	r3,4(r6)
10005458:	3087883a 	add	r3,r6,r2
1000545c:	18800015 	stw	r2,0(r3)
10005460:	00c07fc4 	movi	r3,511
10005464:	18801936 	bltu	r3,r2,100054cc <_free_r+0x10c>
10005468:	1004d0fa 	srli	r2,r2,3
1000546c:	01c00044 	movi	r7,1
10005470:	21400117 	ldw	r5,4(r4)
10005474:	10c00044 	addi	r3,r2,1
10005478:	18c7883a 	add	r3,r3,r3
1000547c:	1005d0ba 	srai	r2,r2,2
10005480:	18c7883a 	add	r3,r3,r3
10005484:	18c7883a 	add	r3,r3,r3
10005488:	1907883a 	add	r3,r3,r4
1000548c:	3884983a 	sll	r2,r7,r2
10005490:	19c00017 	ldw	r7,0(r3)
10005494:	1a3ffe04 	addi	r8,r3,-8
10005498:	1144b03a 	or	r2,r2,r5
1000549c:	32000315 	stw	r8,12(r6)
100054a0:	31c00215 	stw	r7,8(r6)
100054a4:	20800115 	stw	r2,4(r4)
100054a8:	19800015 	stw	r6,0(r3)
100054ac:	39800315 	stw	r6,12(r7)
100054b0:	8809883a 	mov	r4,r17
100054b4:	dfc00217 	ldw	ra,8(sp)
100054b8:	dc400117 	ldw	r17,4(sp)
100054bc:	dc000017 	ldw	r16,0(sp)
100054c0:	dec00304 	addi	sp,sp,12
100054c4:	000de101 	jmpi	1000de10 <__malloc_unlock>
100054c8:	f800283a 	ret
100054cc:	100ad27a 	srli	r5,r2,9
100054d0:	00c00104 	movi	r3,4
100054d4:	19404a36 	bltu	r3,r5,10005600 <_free_r+0x240>
100054d8:	100ad1ba 	srli	r5,r2,6
100054dc:	28c00e44 	addi	r3,r5,57
100054e0:	18c7883a 	add	r3,r3,r3
100054e4:	29400e04 	addi	r5,r5,56
100054e8:	18c7883a 	add	r3,r3,r3
100054ec:	18c7883a 	add	r3,r3,r3
100054f0:	1909883a 	add	r4,r3,r4
100054f4:	20c00017 	ldw	r3,0(r4)
100054f8:	01c40074 	movhi	r7,4097
100054fc:	213ffe04 	addi	r4,r4,-8
10005500:	39d35704 	addi	r7,r7,19804
10005504:	20c04426 	beq	r4,r3,10005618 <_free_r+0x258>
10005508:	01ffff04 	movi	r7,-4
1000550c:	19400117 	ldw	r5,4(r3)
10005510:	29ca703a 	and	r5,r5,r7
10005514:	1140022e 	bgeu	r2,r5,10005520 <_free_r+0x160>
10005518:	18c00217 	ldw	r3,8(r3)
1000551c:	20fffb1e 	bne	r4,r3,1000550c <__alt_data_end+0xf800550c>
10005520:	19000317 	ldw	r4,12(r3)
10005524:	31000315 	stw	r4,12(r6)
10005528:	30c00215 	stw	r3,8(r6)
1000552c:	21800215 	stw	r6,8(r4)
10005530:	19800315 	stw	r6,12(r3)
10005534:	003fde06 	br	100054b0 <__alt_data_end+0xf80054b0>
10005538:	29c00217 	ldw	r7,8(r5)
1000553c:	10c5883a 	add	r2,r2,r3
10005540:	00c40074 	movhi	r3,4097
10005544:	18d35904 	addi	r3,r3,19812
10005548:	38c03b26 	beq	r7,r3,10005638 <_free_r+0x278>
1000554c:	2a000317 	ldw	r8,12(r5)
10005550:	11400054 	ori	r5,r2,1
10005554:	3087883a 	add	r3,r6,r2
10005558:	3a000315 	stw	r8,12(r7)
1000555c:	41c00215 	stw	r7,8(r8)
10005560:	31400115 	stw	r5,4(r6)
10005564:	18800015 	stw	r2,0(r3)
10005568:	003fbd06 	br	10005460 <__alt_data_end+0xf8005460>
1000556c:	39c0004c 	andi	r7,r7,1
10005570:	10c5883a 	add	r2,r2,r3
10005574:	3800071e 	bne	r7,zero,10005594 <_free_r+0x1d4>
10005578:	81fffe17 	ldw	r7,-8(r16)
1000557c:	31cdc83a 	sub	r6,r6,r7
10005580:	30c00317 	ldw	r3,12(r6)
10005584:	31400217 	ldw	r5,8(r6)
10005588:	11c5883a 	add	r2,r2,r7
1000558c:	28c00315 	stw	r3,12(r5)
10005590:	19400215 	stw	r5,8(r3)
10005594:	10c00054 	ori	r3,r2,1
10005598:	30c00115 	stw	r3,4(r6)
1000559c:	00c40074 	movhi	r3,4097
100055a0:	18d8ff04 	addi	r3,r3,25596
100055a4:	18c00017 	ldw	r3,0(r3)
100055a8:	21800215 	stw	r6,8(r4)
100055ac:	10ffc036 	bltu	r2,r3,100054b0 <__alt_data_end+0xf80054b0>
100055b0:	00840074 	movhi	r2,4097
100055b4:	109fef04 	addi	r2,r2,32700
100055b8:	11400017 	ldw	r5,0(r2)
100055bc:	8809883a 	mov	r4,r17
100055c0:	000529c0 	call	1000529c <_malloc_trim_r>
100055c4:	003fba06 	br	100054b0 <__alt_data_end+0xf80054b0>
100055c8:	28c9883a 	add	r4,r5,r3
100055cc:	21000117 	ldw	r4,4(r4)
100055d0:	2100004c 	andi	r4,r4,1
100055d4:	2000391e 	bne	r4,zero,100056bc <_free_r+0x2fc>
100055d8:	29c00217 	ldw	r7,8(r5)
100055dc:	29000317 	ldw	r4,12(r5)
100055e0:	1885883a 	add	r2,r3,r2
100055e4:	10c00054 	ori	r3,r2,1
100055e8:	39000315 	stw	r4,12(r7)
100055ec:	21c00215 	stw	r7,8(r4)
100055f0:	30c00115 	stw	r3,4(r6)
100055f4:	308d883a 	add	r6,r6,r2
100055f8:	30800015 	stw	r2,0(r6)
100055fc:	003fac06 	br	100054b0 <__alt_data_end+0xf80054b0>
10005600:	00c00504 	movi	r3,20
10005604:	19401536 	bltu	r3,r5,1000565c <_free_r+0x29c>
10005608:	28c01704 	addi	r3,r5,92
1000560c:	18c7883a 	add	r3,r3,r3
10005610:	294016c4 	addi	r5,r5,91
10005614:	003fb406 	br	100054e8 <__alt_data_end+0xf80054e8>
10005618:	280bd0ba 	srai	r5,r5,2
1000561c:	00c00044 	movi	r3,1
10005620:	38800117 	ldw	r2,4(r7)
10005624:	194a983a 	sll	r5,r3,r5
10005628:	2007883a 	mov	r3,r4
1000562c:	2884b03a 	or	r2,r5,r2
10005630:	38800115 	stw	r2,4(r7)
10005634:	003fbb06 	br	10005524 <__alt_data_end+0xf8005524>
10005638:	21800515 	stw	r6,20(r4)
1000563c:	21800415 	stw	r6,16(r4)
10005640:	10c00054 	ori	r3,r2,1
10005644:	31c00315 	stw	r7,12(r6)
10005648:	31c00215 	stw	r7,8(r6)
1000564c:	30c00115 	stw	r3,4(r6)
10005650:	308d883a 	add	r6,r6,r2
10005654:	30800015 	stw	r2,0(r6)
10005658:	003f9506 	br	100054b0 <__alt_data_end+0xf80054b0>
1000565c:	00c01504 	movi	r3,84
10005660:	19400536 	bltu	r3,r5,10005678 <_free_r+0x2b8>
10005664:	100ad33a 	srli	r5,r2,12
10005668:	28c01bc4 	addi	r3,r5,111
1000566c:	18c7883a 	add	r3,r3,r3
10005670:	29401b84 	addi	r5,r5,110
10005674:	003f9c06 	br	100054e8 <__alt_data_end+0xf80054e8>
10005678:	00c05504 	movi	r3,340
1000567c:	19400536 	bltu	r3,r5,10005694 <_free_r+0x2d4>
10005680:	100ad3fa 	srli	r5,r2,15
10005684:	28c01e04 	addi	r3,r5,120
10005688:	18c7883a 	add	r3,r3,r3
1000568c:	29401dc4 	addi	r5,r5,119
10005690:	003f9506 	br	100054e8 <__alt_data_end+0xf80054e8>
10005694:	00c15504 	movi	r3,1364
10005698:	19400536 	bltu	r3,r5,100056b0 <_free_r+0x2f0>
1000569c:	100ad4ba 	srli	r5,r2,18
100056a0:	28c01f44 	addi	r3,r5,125
100056a4:	18c7883a 	add	r3,r3,r3
100056a8:	29401f04 	addi	r5,r5,124
100056ac:	003f8e06 	br	100054e8 <__alt_data_end+0xf80054e8>
100056b0:	00c03f84 	movi	r3,254
100056b4:	01401f84 	movi	r5,126
100056b8:	003f8b06 	br	100054e8 <__alt_data_end+0xf80054e8>
100056bc:	10c00054 	ori	r3,r2,1
100056c0:	30c00115 	stw	r3,4(r6)
100056c4:	308d883a 	add	r6,r6,r2
100056c8:	30800015 	stw	r2,0(r6)
100056cc:	003f7806 	br	100054b0 <__alt_data_end+0xf80054b0>

100056d0 <__sfvwrite_r>:
100056d0:	30800217 	ldw	r2,8(r6)
100056d4:	10006726 	beq	r2,zero,10005874 <__sfvwrite_r+0x1a4>
100056d8:	28c0030b 	ldhu	r3,12(r5)
100056dc:	defff404 	addi	sp,sp,-48
100056e0:	dd400715 	stw	r21,28(sp)
100056e4:	dd000615 	stw	r20,24(sp)
100056e8:	dc000215 	stw	r16,8(sp)
100056ec:	dfc00b15 	stw	ra,44(sp)
100056f0:	df000a15 	stw	fp,40(sp)
100056f4:	ddc00915 	stw	r23,36(sp)
100056f8:	dd800815 	stw	r22,32(sp)
100056fc:	dcc00515 	stw	r19,20(sp)
10005700:	dc800415 	stw	r18,16(sp)
10005704:	dc400315 	stw	r17,12(sp)
10005708:	1880020c 	andi	r2,r3,8
1000570c:	2821883a 	mov	r16,r5
10005710:	202b883a 	mov	r21,r4
10005714:	3029883a 	mov	r20,r6
10005718:	10002726 	beq	r2,zero,100057b8 <__sfvwrite_r+0xe8>
1000571c:	28800417 	ldw	r2,16(r5)
10005720:	10002526 	beq	r2,zero,100057b8 <__sfvwrite_r+0xe8>
10005724:	1880008c 	andi	r2,r3,2
10005728:	a4400017 	ldw	r17,0(r20)
1000572c:	10002a26 	beq	r2,zero,100057d8 <__sfvwrite_r+0x108>
10005730:	05a00034 	movhi	r22,32768
10005734:	0027883a 	mov	r19,zero
10005738:	0025883a 	mov	r18,zero
1000573c:	b5bf0004 	addi	r22,r22,-1024
10005740:	980d883a 	mov	r6,r19
10005744:	a809883a 	mov	r4,r21
10005748:	90004626 	beq	r18,zero,10005864 <__sfvwrite_r+0x194>
1000574c:	900f883a 	mov	r7,r18
10005750:	b480022e 	bgeu	r22,r18,1000575c <__sfvwrite_r+0x8c>
10005754:	01e00034 	movhi	r7,32768
10005758:	39ff0004 	addi	r7,r7,-1024
1000575c:	80800917 	ldw	r2,36(r16)
10005760:	81400717 	ldw	r5,28(r16)
10005764:	103ee83a 	callr	r2
10005768:	0080570e 	bge	zero,r2,100058c8 <__sfvwrite_r+0x1f8>
1000576c:	a0c00217 	ldw	r3,8(r20)
10005770:	98a7883a 	add	r19,r19,r2
10005774:	90a5c83a 	sub	r18,r18,r2
10005778:	1885c83a 	sub	r2,r3,r2
1000577c:	a0800215 	stw	r2,8(r20)
10005780:	103fef1e 	bne	r2,zero,10005740 <__alt_data_end+0xf8005740>
10005784:	0005883a 	mov	r2,zero
10005788:	dfc00b17 	ldw	ra,44(sp)
1000578c:	df000a17 	ldw	fp,40(sp)
10005790:	ddc00917 	ldw	r23,36(sp)
10005794:	dd800817 	ldw	r22,32(sp)
10005798:	dd400717 	ldw	r21,28(sp)
1000579c:	dd000617 	ldw	r20,24(sp)
100057a0:	dcc00517 	ldw	r19,20(sp)
100057a4:	dc800417 	ldw	r18,16(sp)
100057a8:	dc400317 	ldw	r17,12(sp)
100057ac:	dc000217 	ldw	r16,8(sp)
100057b0:	dec00c04 	addi	sp,sp,48
100057b4:	f800283a 	ret
100057b8:	800b883a 	mov	r5,r16
100057bc:	a809883a 	mov	r4,r21
100057c0:	00032780 	call	10003278 <__swsetup_r>
100057c4:	1000eb1e 	bne	r2,zero,10005b74 <__sfvwrite_r+0x4a4>
100057c8:	80c0030b 	ldhu	r3,12(r16)
100057cc:	a4400017 	ldw	r17,0(r20)
100057d0:	1880008c 	andi	r2,r3,2
100057d4:	103fd61e 	bne	r2,zero,10005730 <__alt_data_end+0xf8005730>
100057d8:	1880004c 	andi	r2,r3,1
100057dc:	10003f1e 	bne	r2,zero,100058dc <__sfvwrite_r+0x20c>
100057e0:	0039883a 	mov	fp,zero
100057e4:	0025883a 	mov	r18,zero
100057e8:	90001a26 	beq	r18,zero,10005854 <__sfvwrite_r+0x184>
100057ec:	1880800c 	andi	r2,r3,512
100057f0:	84c00217 	ldw	r19,8(r16)
100057f4:	10002126 	beq	r2,zero,1000587c <__sfvwrite_r+0x1ac>
100057f8:	982f883a 	mov	r23,r19
100057fc:	94c09336 	bltu	r18,r19,10005a4c <__sfvwrite_r+0x37c>
10005800:	1881200c 	andi	r2,r3,1152
10005804:	10009e1e 	bne	r2,zero,10005a80 <__sfvwrite_r+0x3b0>
10005808:	81000017 	ldw	r4,0(r16)
1000580c:	b80d883a 	mov	r6,r23
10005810:	e00b883a 	mov	r5,fp
10005814:	00069e40 	call	100069e4 <memmove>
10005818:	80c00217 	ldw	r3,8(r16)
1000581c:	81000017 	ldw	r4,0(r16)
10005820:	9005883a 	mov	r2,r18
10005824:	1ce7c83a 	sub	r19,r3,r19
10005828:	25cf883a 	add	r7,r4,r23
1000582c:	84c00215 	stw	r19,8(r16)
10005830:	81c00015 	stw	r7,0(r16)
10005834:	a0c00217 	ldw	r3,8(r20)
10005838:	e0b9883a 	add	fp,fp,r2
1000583c:	90a5c83a 	sub	r18,r18,r2
10005840:	18a7c83a 	sub	r19,r3,r2
10005844:	a4c00215 	stw	r19,8(r20)
10005848:	983fce26 	beq	r19,zero,10005784 <__alt_data_end+0xf8005784>
1000584c:	80c0030b 	ldhu	r3,12(r16)
10005850:	903fe61e 	bne	r18,zero,100057ec <__alt_data_end+0xf80057ec>
10005854:	8f000017 	ldw	fp,0(r17)
10005858:	8c800117 	ldw	r18,4(r17)
1000585c:	8c400204 	addi	r17,r17,8
10005860:	003fe106 	br	100057e8 <__alt_data_end+0xf80057e8>
10005864:	8cc00017 	ldw	r19,0(r17)
10005868:	8c800117 	ldw	r18,4(r17)
1000586c:	8c400204 	addi	r17,r17,8
10005870:	003fb306 	br	10005740 <__alt_data_end+0xf8005740>
10005874:	0005883a 	mov	r2,zero
10005878:	f800283a 	ret
1000587c:	81000017 	ldw	r4,0(r16)
10005880:	80800417 	ldw	r2,16(r16)
10005884:	11005736 	bltu	r2,r4,100059e4 <__sfvwrite_r+0x314>
10005888:	85c00517 	ldw	r23,20(r16)
1000588c:	95c05536 	bltu	r18,r23,100059e4 <__sfvwrite_r+0x314>
10005890:	00a00034 	movhi	r2,32768
10005894:	10bfffc4 	addi	r2,r2,-1
10005898:	9009883a 	mov	r4,r18
1000589c:	1480012e 	bgeu	r2,r18,100058a4 <__sfvwrite_r+0x1d4>
100058a0:	1009883a 	mov	r4,r2
100058a4:	b80b883a 	mov	r5,r23
100058a8:	000aed40 	call	1000aed4 <__divsi3>
100058ac:	15cf383a 	mul	r7,r2,r23
100058b0:	81400717 	ldw	r5,28(r16)
100058b4:	80800917 	ldw	r2,36(r16)
100058b8:	e00d883a 	mov	r6,fp
100058bc:	a809883a 	mov	r4,r21
100058c0:	103ee83a 	callr	r2
100058c4:	00bfdb16 	blt	zero,r2,10005834 <__alt_data_end+0xf8005834>
100058c8:	8080030b 	ldhu	r2,12(r16)
100058cc:	10801014 	ori	r2,r2,64
100058d0:	8080030d 	sth	r2,12(r16)
100058d4:	00bfffc4 	movi	r2,-1
100058d8:	003fab06 	br	10005788 <__alt_data_end+0xf8005788>
100058dc:	0027883a 	mov	r19,zero
100058e0:	0011883a 	mov	r8,zero
100058e4:	0039883a 	mov	fp,zero
100058e8:	0025883a 	mov	r18,zero
100058ec:	90001f26 	beq	r18,zero,1000596c <__sfvwrite_r+0x29c>
100058f0:	40005a26 	beq	r8,zero,10005a5c <__sfvwrite_r+0x38c>
100058f4:	982d883a 	mov	r22,r19
100058f8:	94c0012e 	bgeu	r18,r19,10005900 <__sfvwrite_r+0x230>
100058fc:	902d883a 	mov	r22,r18
10005900:	81000017 	ldw	r4,0(r16)
10005904:	80800417 	ldw	r2,16(r16)
10005908:	b02f883a 	mov	r23,r22
1000590c:	81c00517 	ldw	r7,20(r16)
10005910:	1100032e 	bgeu	r2,r4,10005920 <__sfvwrite_r+0x250>
10005914:	80c00217 	ldw	r3,8(r16)
10005918:	38c7883a 	add	r3,r7,r3
1000591c:	1d801816 	blt	r3,r22,10005980 <__sfvwrite_r+0x2b0>
10005920:	b1c03e16 	blt	r22,r7,10005a1c <__sfvwrite_r+0x34c>
10005924:	80800917 	ldw	r2,36(r16)
10005928:	81400717 	ldw	r5,28(r16)
1000592c:	e00d883a 	mov	r6,fp
10005930:	da000115 	stw	r8,4(sp)
10005934:	a809883a 	mov	r4,r21
10005938:	103ee83a 	callr	r2
1000593c:	102f883a 	mov	r23,r2
10005940:	da000117 	ldw	r8,4(sp)
10005944:	00bfe00e 	bge	zero,r2,100058c8 <__alt_data_end+0xf80058c8>
10005948:	9de7c83a 	sub	r19,r19,r23
1000594c:	98001f26 	beq	r19,zero,100059cc <__sfvwrite_r+0x2fc>
10005950:	a0800217 	ldw	r2,8(r20)
10005954:	e5f9883a 	add	fp,fp,r23
10005958:	95e5c83a 	sub	r18,r18,r23
1000595c:	15efc83a 	sub	r23,r2,r23
10005960:	a5c00215 	stw	r23,8(r20)
10005964:	b83f8726 	beq	r23,zero,10005784 <__alt_data_end+0xf8005784>
10005968:	903fe11e 	bne	r18,zero,100058f0 <__alt_data_end+0xf80058f0>
1000596c:	8f000017 	ldw	fp,0(r17)
10005970:	8c800117 	ldw	r18,4(r17)
10005974:	0011883a 	mov	r8,zero
10005978:	8c400204 	addi	r17,r17,8
1000597c:	003fdb06 	br	100058ec <__alt_data_end+0xf80058ec>
10005980:	180d883a 	mov	r6,r3
10005984:	e00b883a 	mov	r5,fp
10005988:	da000115 	stw	r8,4(sp)
1000598c:	d8c00015 	stw	r3,0(sp)
10005990:	00069e40 	call	100069e4 <memmove>
10005994:	d8c00017 	ldw	r3,0(sp)
10005998:	80800017 	ldw	r2,0(r16)
1000599c:	800b883a 	mov	r5,r16
100059a0:	a809883a 	mov	r4,r21
100059a4:	10c5883a 	add	r2,r2,r3
100059a8:	80800015 	stw	r2,0(r16)
100059ac:	d8c00015 	stw	r3,0(sp)
100059b0:	0004e700 	call	10004e70 <_fflush_r>
100059b4:	d8c00017 	ldw	r3,0(sp)
100059b8:	da000117 	ldw	r8,4(sp)
100059bc:	103fc21e 	bne	r2,zero,100058c8 <__alt_data_end+0xf80058c8>
100059c0:	182f883a 	mov	r23,r3
100059c4:	9de7c83a 	sub	r19,r19,r23
100059c8:	983fe11e 	bne	r19,zero,10005950 <__alt_data_end+0xf8005950>
100059cc:	800b883a 	mov	r5,r16
100059d0:	a809883a 	mov	r4,r21
100059d4:	0004e700 	call	10004e70 <_fflush_r>
100059d8:	103fbb1e 	bne	r2,zero,100058c8 <__alt_data_end+0xf80058c8>
100059dc:	0011883a 	mov	r8,zero
100059e0:	003fdb06 	br	10005950 <__alt_data_end+0xf8005950>
100059e4:	94c0012e 	bgeu	r18,r19,100059ec <__sfvwrite_r+0x31c>
100059e8:	9027883a 	mov	r19,r18
100059ec:	980d883a 	mov	r6,r19
100059f0:	e00b883a 	mov	r5,fp
100059f4:	00069e40 	call	100069e4 <memmove>
100059f8:	80800217 	ldw	r2,8(r16)
100059fc:	80c00017 	ldw	r3,0(r16)
10005a00:	14c5c83a 	sub	r2,r2,r19
10005a04:	1cc7883a 	add	r3,r3,r19
10005a08:	80800215 	stw	r2,8(r16)
10005a0c:	80c00015 	stw	r3,0(r16)
10005a10:	10004326 	beq	r2,zero,10005b20 <__sfvwrite_r+0x450>
10005a14:	9805883a 	mov	r2,r19
10005a18:	003f8606 	br	10005834 <__alt_data_end+0xf8005834>
10005a1c:	b00d883a 	mov	r6,r22
10005a20:	e00b883a 	mov	r5,fp
10005a24:	da000115 	stw	r8,4(sp)
10005a28:	00069e40 	call	100069e4 <memmove>
10005a2c:	80800217 	ldw	r2,8(r16)
10005a30:	80c00017 	ldw	r3,0(r16)
10005a34:	da000117 	ldw	r8,4(sp)
10005a38:	1585c83a 	sub	r2,r2,r22
10005a3c:	1dad883a 	add	r22,r3,r22
10005a40:	80800215 	stw	r2,8(r16)
10005a44:	85800015 	stw	r22,0(r16)
10005a48:	003fbf06 	br	10005948 <__alt_data_end+0xf8005948>
10005a4c:	81000017 	ldw	r4,0(r16)
10005a50:	9027883a 	mov	r19,r18
10005a54:	902f883a 	mov	r23,r18
10005a58:	003f6c06 	br	1000580c <__alt_data_end+0xf800580c>
10005a5c:	900d883a 	mov	r6,r18
10005a60:	01400284 	movi	r5,10
10005a64:	e009883a 	mov	r4,fp
10005a68:	00067b80 	call	100067b8 <memchr>
10005a6c:	10003e26 	beq	r2,zero,10005b68 <__sfvwrite_r+0x498>
10005a70:	10800044 	addi	r2,r2,1
10005a74:	1727c83a 	sub	r19,r2,fp
10005a78:	02000044 	movi	r8,1
10005a7c:	003f9d06 	br	100058f4 <__alt_data_end+0xf80058f4>
10005a80:	80800517 	ldw	r2,20(r16)
10005a84:	81400417 	ldw	r5,16(r16)
10005a88:	81c00017 	ldw	r7,0(r16)
10005a8c:	10a7883a 	add	r19,r2,r2
10005a90:	9885883a 	add	r2,r19,r2
10005a94:	1026d7fa 	srli	r19,r2,31
10005a98:	396dc83a 	sub	r22,r7,r5
10005a9c:	b1000044 	addi	r4,r22,1
10005aa0:	9885883a 	add	r2,r19,r2
10005aa4:	1027d07a 	srai	r19,r2,1
10005aa8:	2485883a 	add	r2,r4,r18
10005aac:	980d883a 	mov	r6,r19
10005ab0:	9880022e 	bgeu	r19,r2,10005abc <__sfvwrite_r+0x3ec>
10005ab4:	1027883a 	mov	r19,r2
10005ab8:	100d883a 	mov	r6,r2
10005abc:	18c1000c 	andi	r3,r3,1024
10005ac0:	18001c26 	beq	r3,zero,10005b34 <__sfvwrite_r+0x464>
10005ac4:	300b883a 	mov	r5,r6
10005ac8:	a809883a 	mov	r4,r21
10005acc:	0005fac0 	call	10005fac <_malloc_r>
10005ad0:	102f883a 	mov	r23,r2
10005ad4:	10002926 	beq	r2,zero,10005b7c <__sfvwrite_r+0x4ac>
10005ad8:	81400417 	ldw	r5,16(r16)
10005adc:	b00d883a 	mov	r6,r22
10005ae0:	1009883a 	mov	r4,r2
10005ae4:	000689c0 	call	1000689c <memcpy>
10005ae8:	8080030b 	ldhu	r2,12(r16)
10005aec:	00fedfc4 	movi	r3,-1153
10005af0:	10c4703a 	and	r2,r2,r3
10005af4:	10802014 	ori	r2,r2,128
10005af8:	8080030d 	sth	r2,12(r16)
10005afc:	bd89883a 	add	r4,r23,r22
10005b00:	9d8fc83a 	sub	r7,r19,r22
10005b04:	85c00415 	stw	r23,16(r16)
10005b08:	84c00515 	stw	r19,20(r16)
10005b0c:	81000015 	stw	r4,0(r16)
10005b10:	9027883a 	mov	r19,r18
10005b14:	81c00215 	stw	r7,8(r16)
10005b18:	902f883a 	mov	r23,r18
10005b1c:	003f3b06 	br	1000580c <__alt_data_end+0xf800580c>
10005b20:	800b883a 	mov	r5,r16
10005b24:	a809883a 	mov	r4,r21
10005b28:	0004e700 	call	10004e70 <_fflush_r>
10005b2c:	103fb926 	beq	r2,zero,10005a14 <__alt_data_end+0xf8005a14>
10005b30:	003f6506 	br	100058c8 <__alt_data_end+0xf80058c8>
10005b34:	a809883a 	mov	r4,r21
10005b38:	0007c640 	call	10007c64 <_realloc_r>
10005b3c:	102f883a 	mov	r23,r2
10005b40:	103fee1e 	bne	r2,zero,10005afc <__alt_data_end+0xf8005afc>
10005b44:	81400417 	ldw	r5,16(r16)
10005b48:	a809883a 	mov	r4,r21
10005b4c:	00053c00 	call	100053c0 <_free_r>
10005b50:	8080030b 	ldhu	r2,12(r16)
10005b54:	00ffdfc4 	movi	r3,-129
10005b58:	1884703a 	and	r2,r3,r2
10005b5c:	00c00304 	movi	r3,12
10005b60:	a8c00015 	stw	r3,0(r21)
10005b64:	003f5906 	br	100058cc <__alt_data_end+0xf80058cc>
10005b68:	94c00044 	addi	r19,r18,1
10005b6c:	02000044 	movi	r8,1
10005b70:	003f6006 	br	100058f4 <__alt_data_end+0xf80058f4>
10005b74:	00bfffc4 	movi	r2,-1
10005b78:	003f0306 	br	10005788 <__alt_data_end+0xf8005788>
10005b7c:	00800304 	movi	r2,12
10005b80:	a8800015 	stw	r2,0(r21)
10005b84:	8080030b 	ldhu	r2,12(r16)
10005b88:	003f5006 	br	100058cc <__alt_data_end+0xf80058cc>

10005b8c <_fwalk>:
10005b8c:	defff704 	addi	sp,sp,-36
10005b90:	dd000415 	stw	r20,16(sp)
10005b94:	dfc00815 	stw	ra,32(sp)
10005b98:	ddc00715 	stw	r23,28(sp)
10005b9c:	dd800615 	stw	r22,24(sp)
10005ba0:	dd400515 	stw	r21,20(sp)
10005ba4:	dcc00315 	stw	r19,12(sp)
10005ba8:	dc800215 	stw	r18,8(sp)
10005bac:	dc400115 	stw	r17,4(sp)
10005bb0:	dc000015 	stw	r16,0(sp)
10005bb4:	2500b804 	addi	r20,r4,736
10005bb8:	a0002326 	beq	r20,zero,10005c48 <_fwalk+0xbc>
10005bbc:	282b883a 	mov	r21,r5
10005bc0:	002f883a 	mov	r23,zero
10005bc4:	05800044 	movi	r22,1
10005bc8:	04ffffc4 	movi	r19,-1
10005bcc:	a4400117 	ldw	r17,4(r20)
10005bd0:	a4800217 	ldw	r18,8(r20)
10005bd4:	8c7fffc4 	addi	r17,r17,-1
10005bd8:	88000d16 	blt	r17,zero,10005c10 <_fwalk+0x84>
10005bdc:	94000304 	addi	r16,r18,12
10005be0:	94800384 	addi	r18,r18,14
10005be4:	8080000b 	ldhu	r2,0(r16)
10005be8:	8c7fffc4 	addi	r17,r17,-1
10005bec:	813ffd04 	addi	r4,r16,-12
10005bf0:	b080042e 	bgeu	r22,r2,10005c04 <_fwalk+0x78>
10005bf4:	9080000f 	ldh	r2,0(r18)
10005bf8:	14c00226 	beq	r2,r19,10005c04 <_fwalk+0x78>
10005bfc:	a83ee83a 	callr	r21
10005c00:	b8aeb03a 	or	r23,r23,r2
10005c04:	84001a04 	addi	r16,r16,104
10005c08:	94801a04 	addi	r18,r18,104
10005c0c:	8cfff51e 	bne	r17,r19,10005be4 <__alt_data_end+0xf8005be4>
10005c10:	a5000017 	ldw	r20,0(r20)
10005c14:	a03fed1e 	bne	r20,zero,10005bcc <__alt_data_end+0xf8005bcc>
10005c18:	b805883a 	mov	r2,r23
10005c1c:	dfc00817 	ldw	ra,32(sp)
10005c20:	ddc00717 	ldw	r23,28(sp)
10005c24:	dd800617 	ldw	r22,24(sp)
10005c28:	dd400517 	ldw	r21,20(sp)
10005c2c:	dd000417 	ldw	r20,16(sp)
10005c30:	dcc00317 	ldw	r19,12(sp)
10005c34:	dc800217 	ldw	r18,8(sp)
10005c38:	dc400117 	ldw	r17,4(sp)
10005c3c:	dc000017 	ldw	r16,0(sp)
10005c40:	dec00904 	addi	sp,sp,36
10005c44:	f800283a 	ret
10005c48:	002f883a 	mov	r23,zero
10005c4c:	003ff206 	br	10005c18 <__alt_data_end+0xf8005c18>

10005c50 <_fwalk_reent>:
10005c50:	defff704 	addi	sp,sp,-36
10005c54:	dd000415 	stw	r20,16(sp)
10005c58:	dfc00815 	stw	ra,32(sp)
10005c5c:	ddc00715 	stw	r23,28(sp)
10005c60:	dd800615 	stw	r22,24(sp)
10005c64:	dd400515 	stw	r21,20(sp)
10005c68:	dcc00315 	stw	r19,12(sp)
10005c6c:	dc800215 	stw	r18,8(sp)
10005c70:	dc400115 	stw	r17,4(sp)
10005c74:	dc000015 	stw	r16,0(sp)
10005c78:	2500b804 	addi	r20,r4,736
10005c7c:	a0002326 	beq	r20,zero,10005d0c <_fwalk_reent+0xbc>
10005c80:	282b883a 	mov	r21,r5
10005c84:	2027883a 	mov	r19,r4
10005c88:	002f883a 	mov	r23,zero
10005c8c:	05800044 	movi	r22,1
10005c90:	04bfffc4 	movi	r18,-1
10005c94:	a4400117 	ldw	r17,4(r20)
10005c98:	a4000217 	ldw	r16,8(r20)
10005c9c:	8c7fffc4 	addi	r17,r17,-1
10005ca0:	88000c16 	blt	r17,zero,10005cd4 <_fwalk_reent+0x84>
10005ca4:	84000304 	addi	r16,r16,12
10005ca8:	8080000b 	ldhu	r2,0(r16)
10005cac:	8c7fffc4 	addi	r17,r17,-1
10005cb0:	817ffd04 	addi	r5,r16,-12
10005cb4:	b080052e 	bgeu	r22,r2,10005ccc <_fwalk_reent+0x7c>
10005cb8:	8080008f 	ldh	r2,2(r16)
10005cbc:	9809883a 	mov	r4,r19
10005cc0:	14800226 	beq	r2,r18,10005ccc <_fwalk_reent+0x7c>
10005cc4:	a83ee83a 	callr	r21
10005cc8:	b8aeb03a 	or	r23,r23,r2
10005ccc:	84001a04 	addi	r16,r16,104
10005cd0:	8cbff51e 	bne	r17,r18,10005ca8 <__alt_data_end+0xf8005ca8>
10005cd4:	a5000017 	ldw	r20,0(r20)
10005cd8:	a03fee1e 	bne	r20,zero,10005c94 <__alt_data_end+0xf8005c94>
10005cdc:	b805883a 	mov	r2,r23
10005ce0:	dfc00817 	ldw	ra,32(sp)
10005ce4:	ddc00717 	ldw	r23,28(sp)
10005ce8:	dd800617 	ldw	r22,24(sp)
10005cec:	dd400517 	ldw	r21,20(sp)
10005cf0:	dd000417 	ldw	r20,16(sp)
10005cf4:	dcc00317 	ldw	r19,12(sp)
10005cf8:	dc800217 	ldw	r18,8(sp)
10005cfc:	dc400117 	ldw	r17,4(sp)
10005d00:	dc000017 	ldw	r16,0(sp)
10005d04:	dec00904 	addi	sp,sp,36
10005d08:	f800283a 	ret
10005d0c:	002f883a 	mov	r23,zero
10005d10:	003ff206 	br	10005cdc <__alt_data_end+0xf8005cdc>

10005d14 <_setlocale_r>:
10005d14:	30001b26 	beq	r6,zero,10005d84 <_setlocale_r+0x70>
10005d18:	01440074 	movhi	r5,4097
10005d1c:	defffe04 	addi	sp,sp,-8
10005d20:	29517e04 	addi	r5,r5,17912
10005d24:	3009883a 	mov	r4,r6
10005d28:	dc000015 	stw	r16,0(sp)
10005d2c:	dfc00115 	stw	ra,4(sp)
10005d30:	3021883a 	mov	r16,r6
10005d34:	00083cc0 	call	100083cc <strcmp>
10005d38:	1000061e 	bne	r2,zero,10005d54 <_setlocale_r+0x40>
10005d3c:	00840074 	movhi	r2,4097
10005d40:	10917d04 	addi	r2,r2,17908
10005d44:	dfc00117 	ldw	ra,4(sp)
10005d48:	dc000017 	ldw	r16,0(sp)
10005d4c:	dec00204 	addi	sp,sp,8
10005d50:	f800283a 	ret
10005d54:	01440074 	movhi	r5,4097
10005d58:	29517d04 	addi	r5,r5,17908
10005d5c:	8009883a 	mov	r4,r16
10005d60:	00083cc0 	call	100083cc <strcmp>
10005d64:	103ff526 	beq	r2,zero,10005d3c <__alt_data_end+0xf8005d3c>
10005d68:	01440074 	movhi	r5,4097
10005d6c:	29516804 	addi	r5,r5,17824
10005d70:	8009883a 	mov	r4,r16
10005d74:	00083cc0 	call	100083cc <strcmp>
10005d78:	103ff026 	beq	r2,zero,10005d3c <__alt_data_end+0xf8005d3c>
10005d7c:	0005883a 	mov	r2,zero
10005d80:	003ff006 	br	10005d44 <__alt_data_end+0xf8005d44>
10005d84:	00840074 	movhi	r2,4097
10005d88:	10917d04 	addi	r2,r2,17908
10005d8c:	f800283a 	ret

10005d90 <__locale_charset>:
10005d90:	00840074 	movhi	r2,4097
10005d94:	10934104 	addi	r2,r2,19716
10005d98:	f800283a 	ret

10005d9c <__locale_mb_cur_max>:
10005d9c:	00840074 	movhi	r2,4097
10005da0:	1098fd04 	addi	r2,r2,25588
10005da4:	10800017 	ldw	r2,0(r2)
10005da8:	f800283a 	ret

10005dac <__locale_msgcharset>:
10005dac:	00840074 	movhi	r2,4097
10005db0:	10933904 	addi	r2,r2,19684
10005db4:	f800283a 	ret

10005db8 <__locale_cjk_lang>:
10005db8:	0005883a 	mov	r2,zero
10005dbc:	f800283a 	ret

10005dc0 <_localeconv_r>:
10005dc0:	00840074 	movhi	r2,4097
10005dc4:	10934904 	addi	r2,r2,19748
10005dc8:	f800283a 	ret

10005dcc <setlocale>:
10005dcc:	00840074 	movhi	r2,4097
10005dd0:	1098fc04 	addi	r2,r2,25584
10005dd4:	280d883a 	mov	r6,r5
10005dd8:	200b883a 	mov	r5,r4
10005ddc:	11000017 	ldw	r4,0(r2)
10005de0:	0005d141 	jmpi	10005d14 <_setlocale_r>

10005de4 <localeconv>:
10005de4:	00840074 	movhi	r2,4097
10005de8:	10934904 	addi	r2,r2,19748
10005dec:	f800283a 	ret

10005df0 <__smakebuf_r>:
10005df0:	2880030b 	ldhu	r2,12(r5)
10005df4:	10c0008c 	andi	r3,r2,2
10005df8:	1800411e 	bne	r3,zero,10005f00 <__smakebuf_r+0x110>
10005dfc:	deffec04 	addi	sp,sp,-80
10005e00:	dc000f15 	stw	r16,60(sp)
10005e04:	2821883a 	mov	r16,r5
10005e08:	2940038f 	ldh	r5,14(r5)
10005e0c:	dc401015 	stw	r17,64(sp)
10005e10:	dfc01315 	stw	ra,76(sp)
10005e14:	dcc01215 	stw	r19,72(sp)
10005e18:	dc801115 	stw	r18,68(sp)
10005e1c:	2023883a 	mov	r17,r4
10005e20:	28001c16 	blt	r5,zero,10005e94 <__smakebuf_r+0xa4>
10005e24:	d80d883a 	mov	r6,sp
10005e28:	0009f740 	call	10009f74 <_fstat_r>
10005e2c:	10001816 	blt	r2,zero,10005e90 <__smakebuf_r+0xa0>
10005e30:	d8800117 	ldw	r2,4(sp)
10005e34:	00e00014 	movui	r3,32768
10005e38:	10bc000c 	andi	r2,r2,61440
10005e3c:	14c80020 	cmpeqi	r19,r2,8192
10005e40:	10c03726 	beq	r2,r3,10005f20 <__smakebuf_r+0x130>
10005e44:	80c0030b 	ldhu	r3,12(r16)
10005e48:	18c20014 	ori	r3,r3,2048
10005e4c:	80c0030d 	sth	r3,12(r16)
10005e50:	00c80004 	movi	r3,8192
10005e54:	10c0521e 	bne	r2,r3,10005fa0 <__smakebuf_r+0x1b0>
10005e58:	8140038f 	ldh	r5,14(r16)
10005e5c:	8809883a 	mov	r4,r17
10005e60:	0009fd00 	call	10009fd0 <_isatty_r>
10005e64:	10004c26 	beq	r2,zero,10005f98 <__smakebuf_r+0x1a8>
10005e68:	8080030b 	ldhu	r2,12(r16)
10005e6c:	80c010c4 	addi	r3,r16,67
10005e70:	80c00015 	stw	r3,0(r16)
10005e74:	10800054 	ori	r2,r2,1
10005e78:	8080030d 	sth	r2,12(r16)
10005e7c:	00800044 	movi	r2,1
10005e80:	80c00415 	stw	r3,16(r16)
10005e84:	80800515 	stw	r2,20(r16)
10005e88:	04810004 	movi	r18,1024
10005e8c:	00000706 	br	10005eac <__smakebuf_r+0xbc>
10005e90:	8080030b 	ldhu	r2,12(r16)
10005e94:	10c0200c 	andi	r3,r2,128
10005e98:	18001f1e 	bne	r3,zero,10005f18 <__smakebuf_r+0x128>
10005e9c:	04810004 	movi	r18,1024
10005ea0:	10820014 	ori	r2,r2,2048
10005ea4:	8080030d 	sth	r2,12(r16)
10005ea8:	0027883a 	mov	r19,zero
10005eac:	900b883a 	mov	r5,r18
10005eb0:	8809883a 	mov	r4,r17
10005eb4:	0005fac0 	call	10005fac <_malloc_r>
10005eb8:	10002c26 	beq	r2,zero,10005f6c <__smakebuf_r+0x17c>
10005ebc:	80c0030b 	ldhu	r3,12(r16)
10005ec0:	01040034 	movhi	r4,4096
10005ec4:	2113c104 	addi	r4,r4,20228
10005ec8:	89000f15 	stw	r4,60(r17)
10005ecc:	18c02014 	ori	r3,r3,128
10005ed0:	80c0030d 	sth	r3,12(r16)
10005ed4:	80800015 	stw	r2,0(r16)
10005ed8:	80800415 	stw	r2,16(r16)
10005edc:	84800515 	stw	r18,20(r16)
10005ee0:	98001a1e 	bne	r19,zero,10005f4c <__smakebuf_r+0x15c>
10005ee4:	dfc01317 	ldw	ra,76(sp)
10005ee8:	dcc01217 	ldw	r19,72(sp)
10005eec:	dc801117 	ldw	r18,68(sp)
10005ef0:	dc401017 	ldw	r17,64(sp)
10005ef4:	dc000f17 	ldw	r16,60(sp)
10005ef8:	dec01404 	addi	sp,sp,80
10005efc:	f800283a 	ret
10005f00:	288010c4 	addi	r2,r5,67
10005f04:	28800015 	stw	r2,0(r5)
10005f08:	28800415 	stw	r2,16(r5)
10005f0c:	00800044 	movi	r2,1
10005f10:	28800515 	stw	r2,20(r5)
10005f14:	f800283a 	ret
10005f18:	04801004 	movi	r18,64
10005f1c:	003fe006 	br	10005ea0 <__alt_data_end+0xf8005ea0>
10005f20:	81000a17 	ldw	r4,40(r16)
10005f24:	00c40074 	movhi	r3,4097
10005f28:	18e0da04 	addi	r3,r3,-31896
10005f2c:	20ffc51e 	bne	r4,r3,10005e44 <__alt_data_end+0xf8005e44>
10005f30:	8080030b 	ldhu	r2,12(r16)
10005f34:	04810004 	movi	r18,1024
10005f38:	84801315 	stw	r18,76(r16)
10005f3c:	1484b03a 	or	r2,r2,r18
10005f40:	8080030d 	sth	r2,12(r16)
10005f44:	0027883a 	mov	r19,zero
10005f48:	003fd806 	br	10005eac <__alt_data_end+0xf8005eac>
10005f4c:	8140038f 	ldh	r5,14(r16)
10005f50:	8809883a 	mov	r4,r17
10005f54:	0009fd00 	call	10009fd0 <_isatty_r>
10005f58:	103fe226 	beq	r2,zero,10005ee4 <__alt_data_end+0xf8005ee4>
10005f5c:	8080030b 	ldhu	r2,12(r16)
10005f60:	10800054 	ori	r2,r2,1
10005f64:	8080030d 	sth	r2,12(r16)
10005f68:	003fde06 	br	10005ee4 <__alt_data_end+0xf8005ee4>
10005f6c:	8080030b 	ldhu	r2,12(r16)
10005f70:	10c0800c 	andi	r3,r2,512
10005f74:	183fdb1e 	bne	r3,zero,10005ee4 <__alt_data_end+0xf8005ee4>
10005f78:	10800094 	ori	r2,r2,2
10005f7c:	80c010c4 	addi	r3,r16,67
10005f80:	8080030d 	sth	r2,12(r16)
10005f84:	00800044 	movi	r2,1
10005f88:	80c00015 	stw	r3,0(r16)
10005f8c:	80c00415 	stw	r3,16(r16)
10005f90:	80800515 	stw	r2,20(r16)
10005f94:	003fd306 	br	10005ee4 <__alt_data_end+0xf8005ee4>
10005f98:	04810004 	movi	r18,1024
10005f9c:	003fc306 	br	10005eac <__alt_data_end+0xf8005eac>
10005fa0:	0027883a 	mov	r19,zero
10005fa4:	04810004 	movi	r18,1024
10005fa8:	003fc006 	br	10005eac <__alt_data_end+0xf8005eac>

10005fac <_malloc_r>:
10005fac:	defff504 	addi	sp,sp,-44
10005fb0:	dc800315 	stw	r18,12(sp)
10005fb4:	dfc00a15 	stw	ra,40(sp)
10005fb8:	df000915 	stw	fp,36(sp)
10005fbc:	ddc00815 	stw	r23,32(sp)
10005fc0:	dd800715 	stw	r22,28(sp)
10005fc4:	dd400615 	stw	r21,24(sp)
10005fc8:	dd000515 	stw	r20,20(sp)
10005fcc:	dcc00415 	stw	r19,16(sp)
10005fd0:	dc400215 	stw	r17,8(sp)
10005fd4:	dc000115 	stw	r16,4(sp)
10005fd8:	288002c4 	addi	r2,r5,11
10005fdc:	00c00584 	movi	r3,22
10005fe0:	2025883a 	mov	r18,r4
10005fe4:	18807f2e 	bgeu	r3,r2,100061e4 <_malloc_r+0x238>
10005fe8:	047ffe04 	movi	r17,-8
10005fec:	1462703a 	and	r17,r2,r17
10005ff0:	8800a316 	blt	r17,zero,10006280 <_malloc_r+0x2d4>
10005ff4:	8940a236 	bltu	r17,r5,10006280 <_malloc_r+0x2d4>
10005ff8:	000ddec0 	call	1000ddec <__malloc_lock>
10005ffc:	00807dc4 	movi	r2,503
10006000:	1441e92e 	bgeu	r2,r17,100067a8 <_malloc_r+0x7fc>
10006004:	8804d27a 	srli	r2,r17,9
10006008:	1000a126 	beq	r2,zero,10006290 <_malloc_r+0x2e4>
1000600c:	00c00104 	movi	r3,4
10006010:	18811e36 	bltu	r3,r2,1000648c <_malloc_r+0x4e0>
10006014:	8804d1ba 	srli	r2,r17,6
10006018:	12000e44 	addi	r8,r2,57
1000601c:	11c00e04 	addi	r7,r2,56
10006020:	4209883a 	add	r4,r8,r8
10006024:	04c40074 	movhi	r19,4097
10006028:	2109883a 	add	r4,r4,r4
1000602c:	9cd35704 	addi	r19,r19,19804
10006030:	2109883a 	add	r4,r4,r4
10006034:	9909883a 	add	r4,r19,r4
10006038:	24000117 	ldw	r16,4(r4)
1000603c:	213ffe04 	addi	r4,r4,-8
10006040:	24009726 	beq	r4,r16,100062a0 <_malloc_r+0x2f4>
10006044:	80800117 	ldw	r2,4(r16)
10006048:	01bfff04 	movi	r6,-4
1000604c:	014003c4 	movi	r5,15
10006050:	1184703a 	and	r2,r2,r6
10006054:	1447c83a 	sub	r3,r2,r17
10006058:	28c00716 	blt	r5,r3,10006078 <_malloc_r+0xcc>
1000605c:	1800920e 	bge	r3,zero,100062a8 <_malloc_r+0x2fc>
10006060:	84000317 	ldw	r16,12(r16)
10006064:	24008e26 	beq	r4,r16,100062a0 <_malloc_r+0x2f4>
10006068:	80800117 	ldw	r2,4(r16)
1000606c:	1184703a 	and	r2,r2,r6
10006070:	1447c83a 	sub	r3,r2,r17
10006074:	28fff90e 	bge	r5,r3,1000605c <__alt_data_end+0xf800605c>
10006078:	3809883a 	mov	r4,r7
1000607c:	01840074 	movhi	r6,4097
10006080:	9c000417 	ldw	r16,16(r19)
10006084:	31935704 	addi	r6,r6,19804
10006088:	32000204 	addi	r8,r6,8
1000608c:	82013426 	beq	r16,r8,10006560 <_malloc_r+0x5b4>
10006090:	80c00117 	ldw	r3,4(r16)
10006094:	00bfff04 	movi	r2,-4
10006098:	188e703a 	and	r7,r3,r2
1000609c:	3c45c83a 	sub	r2,r7,r17
100060a0:	00c003c4 	movi	r3,15
100060a4:	18811f16 	blt	r3,r2,10006524 <_malloc_r+0x578>
100060a8:	32000515 	stw	r8,20(r6)
100060ac:	32000415 	stw	r8,16(r6)
100060b0:	10007f0e 	bge	r2,zero,100062b0 <_malloc_r+0x304>
100060b4:	00807fc4 	movi	r2,511
100060b8:	11c0fd36 	bltu	r2,r7,100064b0 <_malloc_r+0x504>
100060bc:	3806d0fa 	srli	r3,r7,3
100060c0:	01c00044 	movi	r7,1
100060c4:	30800117 	ldw	r2,4(r6)
100060c8:	19400044 	addi	r5,r3,1
100060cc:	294b883a 	add	r5,r5,r5
100060d0:	1807d0ba 	srai	r3,r3,2
100060d4:	294b883a 	add	r5,r5,r5
100060d8:	294b883a 	add	r5,r5,r5
100060dc:	298b883a 	add	r5,r5,r6
100060e0:	38c6983a 	sll	r3,r7,r3
100060e4:	29c00017 	ldw	r7,0(r5)
100060e8:	2a7ffe04 	addi	r9,r5,-8
100060ec:	1886b03a 	or	r3,r3,r2
100060f0:	82400315 	stw	r9,12(r16)
100060f4:	81c00215 	stw	r7,8(r16)
100060f8:	30c00115 	stw	r3,4(r6)
100060fc:	2c000015 	stw	r16,0(r5)
10006100:	3c000315 	stw	r16,12(r7)
10006104:	2005d0ba 	srai	r2,r4,2
10006108:	01400044 	movi	r5,1
1000610c:	288a983a 	sll	r5,r5,r2
10006110:	19406f36 	bltu	r3,r5,100062d0 <_malloc_r+0x324>
10006114:	28c4703a 	and	r2,r5,r3
10006118:	10000a1e 	bne	r2,zero,10006144 <_malloc_r+0x198>
1000611c:	00bfff04 	movi	r2,-4
10006120:	294b883a 	add	r5,r5,r5
10006124:	2088703a 	and	r4,r4,r2
10006128:	28c4703a 	and	r2,r5,r3
1000612c:	21000104 	addi	r4,r4,4
10006130:	1000041e 	bne	r2,zero,10006144 <_malloc_r+0x198>
10006134:	294b883a 	add	r5,r5,r5
10006138:	28c4703a 	and	r2,r5,r3
1000613c:	21000104 	addi	r4,r4,4
10006140:	103ffc26 	beq	r2,zero,10006134 <__alt_data_end+0xf8006134>
10006144:	02bfff04 	movi	r10,-4
10006148:	024003c4 	movi	r9,15
1000614c:	21800044 	addi	r6,r4,1
10006150:	318d883a 	add	r6,r6,r6
10006154:	318d883a 	add	r6,r6,r6
10006158:	318d883a 	add	r6,r6,r6
1000615c:	998d883a 	add	r6,r19,r6
10006160:	333ffe04 	addi	r12,r6,-8
10006164:	2017883a 	mov	r11,r4
10006168:	31800104 	addi	r6,r6,4
1000616c:	34000017 	ldw	r16,0(r6)
10006170:	31fffd04 	addi	r7,r6,-12
10006174:	81c0041e 	bne	r16,r7,10006188 <_malloc_r+0x1dc>
10006178:	0000fb06 	br	10006568 <_malloc_r+0x5bc>
1000617c:	1801030e 	bge	r3,zero,1000658c <_malloc_r+0x5e0>
10006180:	84000317 	ldw	r16,12(r16)
10006184:	81c0f826 	beq	r16,r7,10006568 <_malloc_r+0x5bc>
10006188:	80800117 	ldw	r2,4(r16)
1000618c:	1284703a 	and	r2,r2,r10
10006190:	1447c83a 	sub	r3,r2,r17
10006194:	48fff90e 	bge	r9,r3,1000617c <__alt_data_end+0xf800617c>
10006198:	80800317 	ldw	r2,12(r16)
1000619c:	81000217 	ldw	r4,8(r16)
100061a0:	89400054 	ori	r5,r17,1
100061a4:	81400115 	stw	r5,4(r16)
100061a8:	20800315 	stw	r2,12(r4)
100061ac:	11000215 	stw	r4,8(r2)
100061b0:	8463883a 	add	r17,r16,r17
100061b4:	9c400515 	stw	r17,20(r19)
100061b8:	9c400415 	stw	r17,16(r19)
100061bc:	18800054 	ori	r2,r3,1
100061c0:	88800115 	stw	r2,4(r17)
100061c4:	8a000315 	stw	r8,12(r17)
100061c8:	8a000215 	stw	r8,8(r17)
100061cc:	88e3883a 	add	r17,r17,r3
100061d0:	88c00015 	stw	r3,0(r17)
100061d4:	9009883a 	mov	r4,r18
100061d8:	000de100 	call	1000de10 <__malloc_unlock>
100061dc:	80800204 	addi	r2,r16,8
100061e0:	00001b06 	br	10006250 <_malloc_r+0x2a4>
100061e4:	04400404 	movi	r17,16
100061e8:	89402536 	bltu	r17,r5,10006280 <_malloc_r+0x2d4>
100061ec:	000ddec0 	call	1000ddec <__malloc_lock>
100061f0:	00800184 	movi	r2,6
100061f4:	01000084 	movi	r4,2
100061f8:	04c40074 	movhi	r19,4097
100061fc:	1085883a 	add	r2,r2,r2
10006200:	9cd35704 	addi	r19,r19,19804
10006204:	1085883a 	add	r2,r2,r2
10006208:	9885883a 	add	r2,r19,r2
1000620c:	14000117 	ldw	r16,4(r2)
10006210:	10fffe04 	addi	r3,r2,-8
10006214:	80c0d926 	beq	r16,r3,1000657c <_malloc_r+0x5d0>
10006218:	80c00117 	ldw	r3,4(r16)
1000621c:	81000317 	ldw	r4,12(r16)
10006220:	00bfff04 	movi	r2,-4
10006224:	1884703a 	and	r2,r3,r2
10006228:	81400217 	ldw	r5,8(r16)
1000622c:	8085883a 	add	r2,r16,r2
10006230:	10c00117 	ldw	r3,4(r2)
10006234:	29000315 	stw	r4,12(r5)
10006238:	21400215 	stw	r5,8(r4)
1000623c:	18c00054 	ori	r3,r3,1
10006240:	10c00115 	stw	r3,4(r2)
10006244:	9009883a 	mov	r4,r18
10006248:	000de100 	call	1000de10 <__malloc_unlock>
1000624c:	80800204 	addi	r2,r16,8
10006250:	dfc00a17 	ldw	ra,40(sp)
10006254:	df000917 	ldw	fp,36(sp)
10006258:	ddc00817 	ldw	r23,32(sp)
1000625c:	dd800717 	ldw	r22,28(sp)
10006260:	dd400617 	ldw	r21,24(sp)
10006264:	dd000517 	ldw	r20,20(sp)
10006268:	dcc00417 	ldw	r19,16(sp)
1000626c:	dc800317 	ldw	r18,12(sp)
10006270:	dc400217 	ldw	r17,8(sp)
10006274:	dc000117 	ldw	r16,4(sp)
10006278:	dec00b04 	addi	sp,sp,44
1000627c:	f800283a 	ret
10006280:	00800304 	movi	r2,12
10006284:	90800015 	stw	r2,0(r18)
10006288:	0005883a 	mov	r2,zero
1000628c:	003ff006 	br	10006250 <__alt_data_end+0xf8006250>
10006290:	01002004 	movi	r4,128
10006294:	02001004 	movi	r8,64
10006298:	01c00fc4 	movi	r7,63
1000629c:	003f6106 	br	10006024 <__alt_data_end+0xf8006024>
100062a0:	4009883a 	mov	r4,r8
100062a4:	003f7506 	br	1000607c <__alt_data_end+0xf800607c>
100062a8:	81000317 	ldw	r4,12(r16)
100062ac:	003fde06 	br	10006228 <__alt_data_end+0xf8006228>
100062b0:	81c5883a 	add	r2,r16,r7
100062b4:	11400117 	ldw	r5,4(r2)
100062b8:	9009883a 	mov	r4,r18
100062bc:	29400054 	ori	r5,r5,1
100062c0:	11400115 	stw	r5,4(r2)
100062c4:	000de100 	call	1000de10 <__malloc_unlock>
100062c8:	80800204 	addi	r2,r16,8
100062cc:	003fe006 	br	10006250 <__alt_data_end+0xf8006250>
100062d0:	9c000217 	ldw	r16,8(r19)
100062d4:	00bfff04 	movi	r2,-4
100062d8:	85800117 	ldw	r22,4(r16)
100062dc:	b0ac703a 	and	r22,r22,r2
100062e0:	b4400336 	bltu	r22,r17,100062f0 <_malloc_r+0x344>
100062e4:	b445c83a 	sub	r2,r22,r17
100062e8:	00c003c4 	movi	r3,15
100062ec:	18805d16 	blt	r3,r2,10006464 <_malloc_r+0x4b8>
100062f0:	05c40074 	movhi	r23,4097
100062f4:	00840074 	movhi	r2,4097
100062f8:	109fef04 	addi	r2,r2,32700
100062fc:	bdd8fe04 	addi	r23,r23,25592
10006300:	15400017 	ldw	r21,0(r2)
10006304:	b8c00017 	ldw	r3,0(r23)
10006308:	00bfffc4 	movi	r2,-1
1000630c:	858d883a 	add	r6,r16,r22
10006310:	8d6b883a 	add	r21,r17,r21
10006314:	1880ea26 	beq	r3,r2,100066c0 <_malloc_r+0x714>
10006318:	ad4403c4 	addi	r21,r21,4111
1000631c:	00bc0004 	movi	r2,-4096
10006320:	a8aa703a 	and	r21,r21,r2
10006324:	a80b883a 	mov	r5,r21
10006328:	9009883a 	mov	r4,r18
1000632c:	d9800015 	stw	r6,0(sp)
10006330:	000823c0 	call	1000823c <_sbrk_r>
10006334:	1029883a 	mov	r20,r2
10006338:	00bfffc4 	movi	r2,-1
1000633c:	d9800017 	ldw	r6,0(sp)
10006340:	a080e826 	beq	r20,r2,100066e4 <_malloc_r+0x738>
10006344:	a180a636 	bltu	r20,r6,100065e0 <_malloc_r+0x634>
10006348:	070400b4 	movhi	fp,4098
1000634c:	e7200404 	addi	fp,fp,-32752
10006350:	e0800017 	ldw	r2,0(fp)
10006354:	a887883a 	add	r3,r21,r2
10006358:	e0c00015 	stw	r3,0(fp)
1000635c:	3500e626 	beq	r6,r20,100066f8 <_malloc_r+0x74c>
10006360:	b9000017 	ldw	r4,0(r23)
10006364:	00bfffc4 	movi	r2,-1
10006368:	2080ee26 	beq	r4,r2,10006724 <_malloc_r+0x778>
1000636c:	a185c83a 	sub	r2,r20,r6
10006370:	10c5883a 	add	r2,r2,r3
10006374:	e0800015 	stw	r2,0(fp)
10006378:	a0c001cc 	andi	r3,r20,7
1000637c:	1800bc26 	beq	r3,zero,10006670 <_malloc_r+0x6c4>
10006380:	a0e9c83a 	sub	r20,r20,r3
10006384:	00840204 	movi	r2,4104
10006388:	a5000204 	addi	r20,r20,8
1000638c:	10c7c83a 	sub	r3,r2,r3
10006390:	a545883a 	add	r2,r20,r21
10006394:	1083ffcc 	andi	r2,r2,4095
10006398:	18abc83a 	sub	r21,r3,r2
1000639c:	a80b883a 	mov	r5,r21
100063a0:	9009883a 	mov	r4,r18
100063a4:	000823c0 	call	1000823c <_sbrk_r>
100063a8:	00ffffc4 	movi	r3,-1
100063ac:	10c0e126 	beq	r2,r3,10006734 <_malloc_r+0x788>
100063b0:	1505c83a 	sub	r2,r2,r20
100063b4:	1545883a 	add	r2,r2,r21
100063b8:	10800054 	ori	r2,r2,1
100063bc:	e0c00017 	ldw	r3,0(fp)
100063c0:	9d000215 	stw	r20,8(r19)
100063c4:	a0800115 	stw	r2,4(r20)
100063c8:	a8c7883a 	add	r3,r21,r3
100063cc:	e0c00015 	stw	r3,0(fp)
100063d0:	84c00e26 	beq	r16,r19,1000640c <_malloc_r+0x460>
100063d4:	018003c4 	movi	r6,15
100063d8:	3580a72e 	bgeu	r6,r22,10006678 <_malloc_r+0x6cc>
100063dc:	81400117 	ldw	r5,4(r16)
100063e0:	013ffe04 	movi	r4,-8
100063e4:	b0bffd04 	addi	r2,r22,-12
100063e8:	1104703a 	and	r2,r2,r4
100063ec:	2900004c 	andi	r4,r5,1
100063f0:	2088b03a 	or	r4,r4,r2
100063f4:	81000115 	stw	r4,4(r16)
100063f8:	01400144 	movi	r5,5
100063fc:	8089883a 	add	r4,r16,r2
10006400:	21400115 	stw	r5,4(r4)
10006404:	21400215 	stw	r5,8(r4)
10006408:	3080cd36 	bltu	r6,r2,10006740 <_malloc_r+0x794>
1000640c:	00840074 	movhi	r2,4097
10006410:	109fee04 	addi	r2,r2,32696
10006414:	11000017 	ldw	r4,0(r2)
10006418:	20c0012e 	bgeu	r4,r3,10006420 <_malloc_r+0x474>
1000641c:	10c00015 	stw	r3,0(r2)
10006420:	00840074 	movhi	r2,4097
10006424:	109fed04 	addi	r2,r2,32692
10006428:	11000017 	ldw	r4,0(r2)
1000642c:	9c000217 	ldw	r16,8(r19)
10006430:	20c0012e 	bgeu	r4,r3,10006438 <_malloc_r+0x48c>
10006434:	10c00015 	stw	r3,0(r2)
10006438:	80c00117 	ldw	r3,4(r16)
1000643c:	00bfff04 	movi	r2,-4
10006440:	1886703a 	and	r3,r3,r2
10006444:	1c45c83a 	sub	r2,r3,r17
10006448:	1c400236 	bltu	r3,r17,10006454 <_malloc_r+0x4a8>
1000644c:	00c003c4 	movi	r3,15
10006450:	18800416 	blt	r3,r2,10006464 <_malloc_r+0x4b8>
10006454:	9009883a 	mov	r4,r18
10006458:	000de100 	call	1000de10 <__malloc_unlock>
1000645c:	0005883a 	mov	r2,zero
10006460:	003f7b06 	br	10006250 <__alt_data_end+0xf8006250>
10006464:	88c00054 	ori	r3,r17,1
10006468:	80c00115 	stw	r3,4(r16)
1000646c:	8463883a 	add	r17,r16,r17
10006470:	10800054 	ori	r2,r2,1
10006474:	9c400215 	stw	r17,8(r19)
10006478:	88800115 	stw	r2,4(r17)
1000647c:	9009883a 	mov	r4,r18
10006480:	000de100 	call	1000de10 <__malloc_unlock>
10006484:	80800204 	addi	r2,r16,8
10006488:	003f7106 	br	10006250 <__alt_data_end+0xf8006250>
1000648c:	00c00504 	movi	r3,20
10006490:	18804a2e 	bgeu	r3,r2,100065bc <_malloc_r+0x610>
10006494:	00c01504 	movi	r3,84
10006498:	18806e36 	bltu	r3,r2,10006654 <_malloc_r+0x6a8>
1000649c:	8804d33a 	srli	r2,r17,12
100064a0:	12001bc4 	addi	r8,r2,111
100064a4:	11c01b84 	addi	r7,r2,110
100064a8:	4209883a 	add	r4,r8,r8
100064ac:	003edd06 	br	10006024 <__alt_data_end+0xf8006024>
100064b0:	3804d27a 	srli	r2,r7,9
100064b4:	00c00104 	movi	r3,4
100064b8:	1880442e 	bgeu	r3,r2,100065cc <_malloc_r+0x620>
100064bc:	00c00504 	movi	r3,20
100064c0:	18808136 	bltu	r3,r2,100066c8 <_malloc_r+0x71c>
100064c4:	11401704 	addi	r5,r2,92
100064c8:	10c016c4 	addi	r3,r2,91
100064cc:	294b883a 	add	r5,r5,r5
100064d0:	294b883a 	add	r5,r5,r5
100064d4:	294b883a 	add	r5,r5,r5
100064d8:	994b883a 	add	r5,r19,r5
100064dc:	28800017 	ldw	r2,0(r5)
100064e0:	01840074 	movhi	r6,4097
100064e4:	297ffe04 	addi	r5,r5,-8
100064e8:	31935704 	addi	r6,r6,19804
100064ec:	28806526 	beq	r5,r2,10006684 <_malloc_r+0x6d8>
100064f0:	01bfff04 	movi	r6,-4
100064f4:	10c00117 	ldw	r3,4(r2)
100064f8:	1986703a 	and	r3,r3,r6
100064fc:	38c0022e 	bgeu	r7,r3,10006508 <_malloc_r+0x55c>
10006500:	10800217 	ldw	r2,8(r2)
10006504:	28bffb1e 	bne	r5,r2,100064f4 <__alt_data_end+0xf80064f4>
10006508:	11400317 	ldw	r5,12(r2)
1000650c:	98c00117 	ldw	r3,4(r19)
10006510:	81400315 	stw	r5,12(r16)
10006514:	80800215 	stw	r2,8(r16)
10006518:	2c000215 	stw	r16,8(r5)
1000651c:	14000315 	stw	r16,12(r2)
10006520:	003ef806 	br	10006104 <__alt_data_end+0xf8006104>
10006524:	88c00054 	ori	r3,r17,1
10006528:	80c00115 	stw	r3,4(r16)
1000652c:	8463883a 	add	r17,r16,r17
10006530:	34400515 	stw	r17,20(r6)
10006534:	34400415 	stw	r17,16(r6)
10006538:	10c00054 	ori	r3,r2,1
1000653c:	8a000315 	stw	r8,12(r17)
10006540:	8a000215 	stw	r8,8(r17)
10006544:	88c00115 	stw	r3,4(r17)
10006548:	88a3883a 	add	r17,r17,r2
1000654c:	88800015 	stw	r2,0(r17)
10006550:	9009883a 	mov	r4,r18
10006554:	000de100 	call	1000de10 <__malloc_unlock>
10006558:	80800204 	addi	r2,r16,8
1000655c:	003f3c06 	br	10006250 <__alt_data_end+0xf8006250>
10006560:	30c00117 	ldw	r3,4(r6)
10006564:	003ee706 	br	10006104 <__alt_data_end+0xf8006104>
10006568:	5ac00044 	addi	r11,r11,1
1000656c:	588000cc 	andi	r2,r11,3
10006570:	31800204 	addi	r6,r6,8
10006574:	103efd1e 	bne	r2,zero,1000616c <__alt_data_end+0xf800616c>
10006578:	00002406 	br	1000660c <_malloc_r+0x660>
1000657c:	14000317 	ldw	r16,12(r2)
10006580:	143f251e 	bne	r2,r16,10006218 <__alt_data_end+0xf8006218>
10006584:	21000084 	addi	r4,r4,2
10006588:	003ebc06 	br	1000607c <__alt_data_end+0xf800607c>
1000658c:	8085883a 	add	r2,r16,r2
10006590:	10c00117 	ldw	r3,4(r2)
10006594:	81000317 	ldw	r4,12(r16)
10006598:	81400217 	ldw	r5,8(r16)
1000659c:	18c00054 	ori	r3,r3,1
100065a0:	10c00115 	stw	r3,4(r2)
100065a4:	29000315 	stw	r4,12(r5)
100065a8:	21400215 	stw	r5,8(r4)
100065ac:	9009883a 	mov	r4,r18
100065b0:	000de100 	call	1000de10 <__malloc_unlock>
100065b4:	80800204 	addi	r2,r16,8
100065b8:	003f2506 	br	10006250 <__alt_data_end+0xf8006250>
100065bc:	12001704 	addi	r8,r2,92
100065c0:	11c016c4 	addi	r7,r2,91
100065c4:	4209883a 	add	r4,r8,r8
100065c8:	003e9606 	br	10006024 <__alt_data_end+0xf8006024>
100065cc:	3804d1ba 	srli	r2,r7,6
100065d0:	11400e44 	addi	r5,r2,57
100065d4:	10c00e04 	addi	r3,r2,56
100065d8:	294b883a 	add	r5,r5,r5
100065dc:	003fbc06 	br	100064d0 <__alt_data_end+0xf80064d0>
100065e0:	84ff5926 	beq	r16,r19,10006348 <__alt_data_end+0xf8006348>
100065e4:	00840074 	movhi	r2,4097
100065e8:	10935704 	addi	r2,r2,19804
100065ec:	14000217 	ldw	r16,8(r2)
100065f0:	00bfff04 	movi	r2,-4
100065f4:	80c00117 	ldw	r3,4(r16)
100065f8:	1886703a 	and	r3,r3,r2
100065fc:	003f9106 	br	10006444 <__alt_data_end+0xf8006444>
10006600:	60800217 	ldw	r2,8(r12)
10006604:	213fffc4 	addi	r4,r4,-1
10006608:	1300651e 	bne	r2,r12,100067a0 <_malloc_r+0x7f4>
1000660c:	208000cc 	andi	r2,r4,3
10006610:	633ffe04 	addi	r12,r12,-8
10006614:	103ffa1e 	bne	r2,zero,10006600 <__alt_data_end+0xf8006600>
10006618:	98800117 	ldw	r2,4(r19)
1000661c:	0146303a 	nor	r3,zero,r5
10006620:	1884703a 	and	r2,r3,r2
10006624:	98800115 	stw	r2,4(r19)
10006628:	294b883a 	add	r5,r5,r5
1000662c:	117f2836 	bltu	r2,r5,100062d0 <__alt_data_end+0xf80062d0>
10006630:	283f2726 	beq	r5,zero,100062d0 <__alt_data_end+0xf80062d0>
10006634:	2886703a 	and	r3,r5,r2
10006638:	5809883a 	mov	r4,r11
1000663c:	183ec31e 	bne	r3,zero,1000614c <__alt_data_end+0xf800614c>
10006640:	294b883a 	add	r5,r5,r5
10006644:	2886703a 	and	r3,r5,r2
10006648:	21000104 	addi	r4,r4,4
1000664c:	183ffc26 	beq	r3,zero,10006640 <__alt_data_end+0xf8006640>
10006650:	003ebe06 	br	1000614c <__alt_data_end+0xf800614c>
10006654:	00c05504 	movi	r3,340
10006658:	18801236 	bltu	r3,r2,100066a4 <_malloc_r+0x6f8>
1000665c:	8804d3fa 	srli	r2,r17,15
10006660:	12001e04 	addi	r8,r2,120
10006664:	11c01dc4 	addi	r7,r2,119
10006668:	4209883a 	add	r4,r8,r8
1000666c:	003e6d06 	br	10006024 <__alt_data_end+0xf8006024>
10006670:	00c40004 	movi	r3,4096
10006674:	003f4606 	br	10006390 <__alt_data_end+0xf8006390>
10006678:	00800044 	movi	r2,1
1000667c:	a0800115 	stw	r2,4(r20)
10006680:	003f7406 	br	10006454 <__alt_data_end+0xf8006454>
10006684:	1805d0ba 	srai	r2,r3,2
10006688:	01c00044 	movi	r7,1
1000668c:	30c00117 	ldw	r3,4(r6)
10006690:	388e983a 	sll	r7,r7,r2
10006694:	2805883a 	mov	r2,r5
10006698:	38c6b03a 	or	r3,r7,r3
1000669c:	30c00115 	stw	r3,4(r6)
100066a0:	003f9b06 	br	10006510 <__alt_data_end+0xf8006510>
100066a4:	00c15504 	movi	r3,1364
100066a8:	18801a36 	bltu	r3,r2,10006714 <_malloc_r+0x768>
100066ac:	8804d4ba 	srli	r2,r17,18
100066b0:	12001f44 	addi	r8,r2,125
100066b4:	11c01f04 	addi	r7,r2,124
100066b8:	4209883a 	add	r4,r8,r8
100066bc:	003e5906 	br	10006024 <__alt_data_end+0xf8006024>
100066c0:	ad400404 	addi	r21,r21,16
100066c4:	003f1706 	br	10006324 <__alt_data_end+0xf8006324>
100066c8:	00c01504 	movi	r3,84
100066cc:	18802336 	bltu	r3,r2,1000675c <_malloc_r+0x7b0>
100066d0:	3804d33a 	srli	r2,r7,12
100066d4:	11401bc4 	addi	r5,r2,111
100066d8:	10c01b84 	addi	r3,r2,110
100066dc:	294b883a 	add	r5,r5,r5
100066e0:	003f7b06 	br	100064d0 <__alt_data_end+0xf80064d0>
100066e4:	9c000217 	ldw	r16,8(r19)
100066e8:	00bfff04 	movi	r2,-4
100066ec:	80c00117 	ldw	r3,4(r16)
100066f0:	1886703a 	and	r3,r3,r2
100066f4:	003f5306 	br	10006444 <__alt_data_end+0xf8006444>
100066f8:	3083ffcc 	andi	r2,r6,4095
100066fc:	103f181e 	bne	r2,zero,10006360 <__alt_data_end+0xf8006360>
10006700:	99000217 	ldw	r4,8(r19)
10006704:	b545883a 	add	r2,r22,r21
10006708:	10800054 	ori	r2,r2,1
1000670c:	20800115 	stw	r2,4(r4)
10006710:	003f3e06 	br	1000640c <__alt_data_end+0xf800640c>
10006714:	01003f84 	movi	r4,254
10006718:	02001fc4 	movi	r8,127
1000671c:	01c01f84 	movi	r7,126
10006720:	003e4006 	br	10006024 <__alt_data_end+0xf8006024>
10006724:	00840074 	movhi	r2,4097
10006728:	1098fe04 	addi	r2,r2,25592
1000672c:	15000015 	stw	r20,0(r2)
10006730:	003f1106 	br	10006378 <__alt_data_end+0xf8006378>
10006734:	00800044 	movi	r2,1
10006738:	002b883a 	mov	r21,zero
1000673c:	003f1f06 	br	100063bc <__alt_data_end+0xf80063bc>
10006740:	81400204 	addi	r5,r16,8
10006744:	9009883a 	mov	r4,r18
10006748:	00053c00 	call	100053c0 <_free_r>
1000674c:	008400b4 	movhi	r2,4098
10006750:	10a00404 	addi	r2,r2,-32752
10006754:	10c00017 	ldw	r3,0(r2)
10006758:	003f2c06 	br	1000640c <__alt_data_end+0xf800640c>
1000675c:	00c05504 	movi	r3,340
10006760:	18800536 	bltu	r3,r2,10006778 <_malloc_r+0x7cc>
10006764:	3804d3fa 	srli	r2,r7,15
10006768:	11401e04 	addi	r5,r2,120
1000676c:	10c01dc4 	addi	r3,r2,119
10006770:	294b883a 	add	r5,r5,r5
10006774:	003f5606 	br	100064d0 <__alt_data_end+0xf80064d0>
10006778:	00c15504 	movi	r3,1364
1000677c:	18800536 	bltu	r3,r2,10006794 <_malloc_r+0x7e8>
10006780:	3804d4ba 	srli	r2,r7,18
10006784:	11401f44 	addi	r5,r2,125
10006788:	10c01f04 	addi	r3,r2,124
1000678c:	294b883a 	add	r5,r5,r5
10006790:	003f4f06 	br	100064d0 <__alt_data_end+0xf80064d0>
10006794:	01403f84 	movi	r5,254
10006798:	00c01f84 	movi	r3,126
1000679c:	003f4c06 	br	100064d0 <__alt_data_end+0xf80064d0>
100067a0:	98800117 	ldw	r2,4(r19)
100067a4:	003fa006 	br	10006628 <__alt_data_end+0xf8006628>
100067a8:	8808d0fa 	srli	r4,r17,3
100067ac:	20800044 	addi	r2,r4,1
100067b0:	1085883a 	add	r2,r2,r2
100067b4:	003e9006 	br	100061f8 <__alt_data_end+0xf80061f8>

100067b8 <memchr>:
100067b8:	208000cc 	andi	r2,r4,3
100067bc:	280f883a 	mov	r7,r5
100067c0:	10003426 	beq	r2,zero,10006894 <memchr+0xdc>
100067c4:	30bfffc4 	addi	r2,r6,-1
100067c8:	30001a26 	beq	r6,zero,10006834 <memchr+0x7c>
100067cc:	20c00003 	ldbu	r3,0(r4)
100067d0:	29803fcc 	andi	r6,r5,255
100067d4:	30c0051e 	bne	r6,r3,100067ec <memchr+0x34>
100067d8:	00001806 	br	1000683c <memchr+0x84>
100067dc:	10001526 	beq	r2,zero,10006834 <memchr+0x7c>
100067e0:	20c00003 	ldbu	r3,0(r4)
100067e4:	10bfffc4 	addi	r2,r2,-1
100067e8:	30c01426 	beq	r6,r3,1000683c <memchr+0x84>
100067ec:	21000044 	addi	r4,r4,1
100067f0:	20c000cc 	andi	r3,r4,3
100067f4:	183ff91e 	bne	r3,zero,100067dc <__alt_data_end+0xf80067dc>
100067f8:	020000c4 	movi	r8,3
100067fc:	40801136 	bltu	r8,r2,10006844 <memchr+0x8c>
10006800:	10000c26 	beq	r2,zero,10006834 <memchr+0x7c>
10006804:	20c00003 	ldbu	r3,0(r4)
10006808:	29403fcc 	andi	r5,r5,255
1000680c:	28c00b26 	beq	r5,r3,1000683c <memchr+0x84>
10006810:	20c00044 	addi	r3,r4,1
10006814:	39803fcc 	andi	r6,r7,255
10006818:	2089883a 	add	r4,r4,r2
1000681c:	00000306 	br	1000682c <memchr+0x74>
10006820:	18c00044 	addi	r3,r3,1
10006824:	197fffc3 	ldbu	r5,-1(r3)
10006828:	31400526 	beq	r6,r5,10006840 <memchr+0x88>
1000682c:	1805883a 	mov	r2,r3
10006830:	20fffb1e 	bne	r4,r3,10006820 <__alt_data_end+0xf8006820>
10006834:	0005883a 	mov	r2,zero
10006838:	f800283a 	ret
1000683c:	2005883a 	mov	r2,r4
10006840:	f800283a 	ret
10006844:	28c03fcc 	andi	r3,r5,255
10006848:	1812923a 	slli	r9,r3,8
1000684c:	02ffbff4 	movhi	r11,65279
10006850:	02a02074 	movhi	r10,32897
10006854:	48d2b03a 	or	r9,r9,r3
10006858:	4806943a 	slli	r3,r9,16
1000685c:	5affbfc4 	addi	r11,r11,-257
10006860:	52a02004 	addi	r10,r10,-32640
10006864:	48d2b03a 	or	r9,r9,r3
10006868:	20c00017 	ldw	r3,0(r4)
1000686c:	48c6f03a 	xor	r3,r9,r3
10006870:	1acd883a 	add	r6,r3,r11
10006874:	00c6303a 	nor	r3,zero,r3
10006878:	30c6703a 	and	r3,r6,r3
1000687c:	1a86703a 	and	r3,r3,r10
10006880:	183fe01e 	bne	r3,zero,10006804 <__alt_data_end+0xf8006804>
10006884:	10bfff04 	addi	r2,r2,-4
10006888:	21000104 	addi	r4,r4,4
1000688c:	40bff636 	bltu	r8,r2,10006868 <__alt_data_end+0xf8006868>
10006890:	003fdb06 	br	10006800 <__alt_data_end+0xf8006800>
10006894:	3005883a 	mov	r2,r6
10006898:	003fd706 	br	100067f8 <__alt_data_end+0xf80067f8>

1000689c <memcpy>:
1000689c:	defffd04 	addi	sp,sp,-12
100068a0:	dfc00215 	stw	ra,8(sp)
100068a4:	dc400115 	stw	r17,4(sp)
100068a8:	dc000015 	stw	r16,0(sp)
100068ac:	00c003c4 	movi	r3,15
100068b0:	2005883a 	mov	r2,r4
100068b4:	1980452e 	bgeu	r3,r6,100069cc <memcpy+0x130>
100068b8:	2906b03a 	or	r3,r5,r4
100068bc:	18c000cc 	andi	r3,r3,3
100068c0:	1800441e 	bne	r3,zero,100069d4 <memcpy+0x138>
100068c4:	347ffc04 	addi	r17,r6,-16
100068c8:	8822d13a 	srli	r17,r17,4
100068cc:	28c00104 	addi	r3,r5,4
100068d0:	23400104 	addi	r13,r4,4
100068d4:	8820913a 	slli	r16,r17,4
100068d8:	2b000204 	addi	r12,r5,8
100068dc:	22c00204 	addi	r11,r4,8
100068e0:	84000504 	addi	r16,r16,20
100068e4:	2a800304 	addi	r10,r5,12
100068e8:	22400304 	addi	r9,r4,12
100068ec:	2c21883a 	add	r16,r5,r16
100068f0:	2811883a 	mov	r8,r5
100068f4:	200f883a 	mov	r7,r4
100068f8:	41000017 	ldw	r4,0(r8)
100068fc:	1fc00017 	ldw	ra,0(r3)
10006900:	63c00017 	ldw	r15,0(r12)
10006904:	39000015 	stw	r4,0(r7)
10006908:	53800017 	ldw	r14,0(r10)
1000690c:	6fc00015 	stw	ra,0(r13)
10006910:	5bc00015 	stw	r15,0(r11)
10006914:	4b800015 	stw	r14,0(r9)
10006918:	18c00404 	addi	r3,r3,16
1000691c:	39c00404 	addi	r7,r7,16
10006920:	42000404 	addi	r8,r8,16
10006924:	6b400404 	addi	r13,r13,16
10006928:	63000404 	addi	r12,r12,16
1000692c:	5ac00404 	addi	r11,r11,16
10006930:	52800404 	addi	r10,r10,16
10006934:	4a400404 	addi	r9,r9,16
10006938:	1c3fef1e 	bne	r3,r16,100068f8 <__alt_data_end+0xf80068f8>
1000693c:	89c00044 	addi	r7,r17,1
10006940:	380e913a 	slli	r7,r7,4
10006944:	310003cc 	andi	r4,r6,15
10006948:	02c000c4 	movi	r11,3
1000694c:	11c7883a 	add	r3,r2,r7
10006950:	29cb883a 	add	r5,r5,r7
10006954:	5900212e 	bgeu	r11,r4,100069dc <memcpy+0x140>
10006958:	1813883a 	mov	r9,r3
1000695c:	2811883a 	mov	r8,r5
10006960:	200f883a 	mov	r7,r4
10006964:	42800017 	ldw	r10,0(r8)
10006968:	4a400104 	addi	r9,r9,4
1000696c:	39ffff04 	addi	r7,r7,-4
10006970:	4abfff15 	stw	r10,-4(r9)
10006974:	42000104 	addi	r8,r8,4
10006978:	59fffa36 	bltu	r11,r7,10006964 <__alt_data_end+0xf8006964>
1000697c:	213fff04 	addi	r4,r4,-4
10006980:	2008d0ba 	srli	r4,r4,2
10006984:	318000cc 	andi	r6,r6,3
10006988:	21000044 	addi	r4,r4,1
1000698c:	2109883a 	add	r4,r4,r4
10006990:	2109883a 	add	r4,r4,r4
10006994:	1907883a 	add	r3,r3,r4
10006998:	290b883a 	add	r5,r5,r4
1000699c:	30000626 	beq	r6,zero,100069b8 <memcpy+0x11c>
100069a0:	198d883a 	add	r6,r3,r6
100069a4:	29c00003 	ldbu	r7,0(r5)
100069a8:	18c00044 	addi	r3,r3,1
100069ac:	29400044 	addi	r5,r5,1
100069b0:	19ffffc5 	stb	r7,-1(r3)
100069b4:	19bffb1e 	bne	r3,r6,100069a4 <__alt_data_end+0xf80069a4>
100069b8:	dfc00217 	ldw	ra,8(sp)
100069bc:	dc400117 	ldw	r17,4(sp)
100069c0:	dc000017 	ldw	r16,0(sp)
100069c4:	dec00304 	addi	sp,sp,12
100069c8:	f800283a 	ret
100069cc:	2007883a 	mov	r3,r4
100069d0:	003ff206 	br	1000699c <__alt_data_end+0xf800699c>
100069d4:	2007883a 	mov	r3,r4
100069d8:	003ff106 	br	100069a0 <__alt_data_end+0xf80069a0>
100069dc:	200d883a 	mov	r6,r4
100069e0:	003fee06 	br	1000699c <__alt_data_end+0xf800699c>

100069e4 <memmove>:
100069e4:	2005883a 	mov	r2,r4
100069e8:	29000b2e 	bgeu	r5,r4,10006a18 <memmove+0x34>
100069ec:	298f883a 	add	r7,r5,r6
100069f0:	21c0092e 	bgeu	r4,r7,10006a18 <memmove+0x34>
100069f4:	2187883a 	add	r3,r4,r6
100069f8:	198bc83a 	sub	r5,r3,r6
100069fc:	30004826 	beq	r6,zero,10006b20 <memmove+0x13c>
10006a00:	39ffffc4 	addi	r7,r7,-1
10006a04:	39000003 	ldbu	r4,0(r7)
10006a08:	18ffffc4 	addi	r3,r3,-1
10006a0c:	19000005 	stb	r4,0(r3)
10006a10:	28fffb1e 	bne	r5,r3,10006a00 <__alt_data_end+0xf8006a00>
10006a14:	f800283a 	ret
10006a18:	00c003c4 	movi	r3,15
10006a1c:	1980412e 	bgeu	r3,r6,10006b24 <memmove+0x140>
10006a20:	2886b03a 	or	r3,r5,r2
10006a24:	18c000cc 	andi	r3,r3,3
10006a28:	1800401e 	bne	r3,zero,10006b2c <memmove+0x148>
10006a2c:	33fffc04 	addi	r15,r6,-16
10006a30:	781ed13a 	srli	r15,r15,4
10006a34:	28c00104 	addi	r3,r5,4
10006a38:	13400104 	addi	r13,r2,4
10006a3c:	781c913a 	slli	r14,r15,4
10006a40:	2b000204 	addi	r12,r5,8
10006a44:	12c00204 	addi	r11,r2,8
10006a48:	73800504 	addi	r14,r14,20
10006a4c:	2a800304 	addi	r10,r5,12
10006a50:	12400304 	addi	r9,r2,12
10006a54:	2b9d883a 	add	r14,r5,r14
10006a58:	2811883a 	mov	r8,r5
10006a5c:	100f883a 	mov	r7,r2
10006a60:	41000017 	ldw	r4,0(r8)
10006a64:	39c00404 	addi	r7,r7,16
10006a68:	18c00404 	addi	r3,r3,16
10006a6c:	393ffc15 	stw	r4,-16(r7)
10006a70:	193ffc17 	ldw	r4,-16(r3)
10006a74:	6b400404 	addi	r13,r13,16
10006a78:	5ac00404 	addi	r11,r11,16
10006a7c:	693ffc15 	stw	r4,-16(r13)
10006a80:	61000017 	ldw	r4,0(r12)
10006a84:	4a400404 	addi	r9,r9,16
10006a88:	42000404 	addi	r8,r8,16
10006a8c:	593ffc15 	stw	r4,-16(r11)
10006a90:	51000017 	ldw	r4,0(r10)
10006a94:	63000404 	addi	r12,r12,16
10006a98:	52800404 	addi	r10,r10,16
10006a9c:	493ffc15 	stw	r4,-16(r9)
10006aa0:	1bbfef1e 	bne	r3,r14,10006a60 <__alt_data_end+0xf8006a60>
10006aa4:	79000044 	addi	r4,r15,1
10006aa8:	2008913a 	slli	r4,r4,4
10006aac:	328003cc 	andi	r10,r6,15
10006ab0:	02c000c4 	movi	r11,3
10006ab4:	1107883a 	add	r3,r2,r4
10006ab8:	290b883a 	add	r5,r5,r4
10006abc:	5a801e2e 	bgeu	r11,r10,10006b38 <memmove+0x154>
10006ac0:	1813883a 	mov	r9,r3
10006ac4:	2811883a 	mov	r8,r5
10006ac8:	500f883a 	mov	r7,r10
10006acc:	41000017 	ldw	r4,0(r8)
10006ad0:	4a400104 	addi	r9,r9,4
10006ad4:	39ffff04 	addi	r7,r7,-4
10006ad8:	493fff15 	stw	r4,-4(r9)
10006adc:	42000104 	addi	r8,r8,4
10006ae0:	59fffa36 	bltu	r11,r7,10006acc <__alt_data_end+0xf8006acc>
10006ae4:	513fff04 	addi	r4,r10,-4
10006ae8:	2008d0ba 	srli	r4,r4,2
10006aec:	318000cc 	andi	r6,r6,3
10006af0:	21000044 	addi	r4,r4,1
10006af4:	2109883a 	add	r4,r4,r4
10006af8:	2109883a 	add	r4,r4,r4
10006afc:	1907883a 	add	r3,r3,r4
10006b00:	290b883a 	add	r5,r5,r4
10006b04:	30000b26 	beq	r6,zero,10006b34 <memmove+0x150>
10006b08:	198d883a 	add	r6,r3,r6
10006b0c:	29c00003 	ldbu	r7,0(r5)
10006b10:	18c00044 	addi	r3,r3,1
10006b14:	29400044 	addi	r5,r5,1
10006b18:	19ffffc5 	stb	r7,-1(r3)
10006b1c:	19bffb1e 	bne	r3,r6,10006b0c <__alt_data_end+0xf8006b0c>
10006b20:	f800283a 	ret
10006b24:	1007883a 	mov	r3,r2
10006b28:	003ff606 	br	10006b04 <__alt_data_end+0xf8006b04>
10006b2c:	1007883a 	mov	r3,r2
10006b30:	003ff506 	br	10006b08 <__alt_data_end+0xf8006b08>
10006b34:	f800283a 	ret
10006b38:	500d883a 	mov	r6,r10
10006b3c:	003ff106 	br	10006b04 <__alt_data_end+0xf8006b04>

10006b40 <memset>:
10006b40:	20c000cc 	andi	r3,r4,3
10006b44:	2005883a 	mov	r2,r4
10006b48:	18004426 	beq	r3,zero,10006c5c <memset+0x11c>
10006b4c:	31ffffc4 	addi	r7,r6,-1
10006b50:	30004026 	beq	r6,zero,10006c54 <memset+0x114>
10006b54:	2813883a 	mov	r9,r5
10006b58:	200d883a 	mov	r6,r4
10006b5c:	2007883a 	mov	r3,r4
10006b60:	00000406 	br	10006b74 <memset+0x34>
10006b64:	3a3fffc4 	addi	r8,r7,-1
10006b68:	31800044 	addi	r6,r6,1
10006b6c:	38003926 	beq	r7,zero,10006c54 <memset+0x114>
10006b70:	400f883a 	mov	r7,r8
10006b74:	18c00044 	addi	r3,r3,1
10006b78:	32400005 	stb	r9,0(r6)
10006b7c:	1a0000cc 	andi	r8,r3,3
10006b80:	403ff81e 	bne	r8,zero,10006b64 <__alt_data_end+0xf8006b64>
10006b84:	010000c4 	movi	r4,3
10006b88:	21c02d2e 	bgeu	r4,r7,10006c40 <memset+0x100>
10006b8c:	29003fcc 	andi	r4,r5,255
10006b90:	200c923a 	slli	r6,r4,8
10006b94:	3108b03a 	or	r4,r6,r4
10006b98:	200c943a 	slli	r6,r4,16
10006b9c:	218cb03a 	or	r6,r4,r6
10006ba0:	010003c4 	movi	r4,15
10006ba4:	21c0182e 	bgeu	r4,r7,10006c08 <memset+0xc8>
10006ba8:	3b3ffc04 	addi	r12,r7,-16
10006bac:	6018d13a 	srli	r12,r12,4
10006bb0:	1a000104 	addi	r8,r3,4
10006bb4:	1ac00204 	addi	r11,r3,8
10006bb8:	6008913a 	slli	r4,r12,4
10006bbc:	1a800304 	addi	r10,r3,12
10006bc0:	1813883a 	mov	r9,r3
10006bc4:	21000504 	addi	r4,r4,20
10006bc8:	1909883a 	add	r4,r3,r4
10006bcc:	49800015 	stw	r6,0(r9)
10006bd0:	41800015 	stw	r6,0(r8)
10006bd4:	59800015 	stw	r6,0(r11)
10006bd8:	51800015 	stw	r6,0(r10)
10006bdc:	42000404 	addi	r8,r8,16
10006be0:	4a400404 	addi	r9,r9,16
10006be4:	5ac00404 	addi	r11,r11,16
10006be8:	52800404 	addi	r10,r10,16
10006bec:	413ff71e 	bne	r8,r4,10006bcc <__alt_data_end+0xf8006bcc>
10006bf0:	63000044 	addi	r12,r12,1
10006bf4:	6018913a 	slli	r12,r12,4
10006bf8:	39c003cc 	andi	r7,r7,15
10006bfc:	010000c4 	movi	r4,3
10006c00:	1b07883a 	add	r3,r3,r12
10006c04:	21c00e2e 	bgeu	r4,r7,10006c40 <memset+0x100>
10006c08:	1813883a 	mov	r9,r3
10006c0c:	3811883a 	mov	r8,r7
10006c10:	010000c4 	movi	r4,3
10006c14:	49800015 	stw	r6,0(r9)
10006c18:	423fff04 	addi	r8,r8,-4
10006c1c:	4a400104 	addi	r9,r9,4
10006c20:	223ffc36 	bltu	r4,r8,10006c14 <__alt_data_end+0xf8006c14>
10006c24:	393fff04 	addi	r4,r7,-4
10006c28:	2008d0ba 	srli	r4,r4,2
10006c2c:	39c000cc 	andi	r7,r7,3
10006c30:	21000044 	addi	r4,r4,1
10006c34:	2109883a 	add	r4,r4,r4
10006c38:	2109883a 	add	r4,r4,r4
10006c3c:	1907883a 	add	r3,r3,r4
10006c40:	38000526 	beq	r7,zero,10006c58 <memset+0x118>
10006c44:	19cf883a 	add	r7,r3,r7
10006c48:	19400005 	stb	r5,0(r3)
10006c4c:	18c00044 	addi	r3,r3,1
10006c50:	38fffd1e 	bne	r7,r3,10006c48 <__alt_data_end+0xf8006c48>
10006c54:	f800283a 	ret
10006c58:	f800283a 	ret
10006c5c:	2007883a 	mov	r3,r4
10006c60:	300f883a 	mov	r7,r6
10006c64:	003fc706 	br	10006b84 <__alt_data_end+0xf8006b84>

10006c68 <_Balloc>:
10006c68:	20801317 	ldw	r2,76(r4)
10006c6c:	defffc04 	addi	sp,sp,-16
10006c70:	dc400115 	stw	r17,4(sp)
10006c74:	dc000015 	stw	r16,0(sp)
10006c78:	dfc00315 	stw	ra,12(sp)
10006c7c:	dc800215 	stw	r18,8(sp)
10006c80:	2023883a 	mov	r17,r4
10006c84:	2821883a 	mov	r16,r5
10006c88:	10000f26 	beq	r2,zero,10006cc8 <_Balloc+0x60>
10006c8c:	8407883a 	add	r3,r16,r16
10006c90:	18c7883a 	add	r3,r3,r3
10006c94:	10c7883a 	add	r3,r2,r3
10006c98:	18800017 	ldw	r2,0(r3)
10006c9c:	10001126 	beq	r2,zero,10006ce4 <_Balloc+0x7c>
10006ca0:	11000017 	ldw	r4,0(r2)
10006ca4:	19000015 	stw	r4,0(r3)
10006ca8:	10000415 	stw	zero,16(r2)
10006cac:	10000315 	stw	zero,12(r2)
10006cb0:	dfc00317 	ldw	ra,12(sp)
10006cb4:	dc800217 	ldw	r18,8(sp)
10006cb8:	dc400117 	ldw	r17,4(sp)
10006cbc:	dc000017 	ldw	r16,0(sp)
10006cc0:	dec00404 	addi	sp,sp,16
10006cc4:	f800283a 	ret
10006cc8:	01800844 	movi	r6,33
10006ccc:	01400104 	movi	r5,4
10006cd0:	0009ba40 	call	10009ba4 <_calloc_r>
10006cd4:	88801315 	stw	r2,76(r17)
10006cd8:	103fec1e 	bne	r2,zero,10006c8c <__alt_data_end+0xf8006c8c>
10006cdc:	0005883a 	mov	r2,zero
10006ce0:	003ff306 	br	10006cb0 <__alt_data_end+0xf8006cb0>
10006ce4:	01400044 	movi	r5,1
10006ce8:	2c24983a 	sll	r18,r5,r16
10006cec:	8809883a 	mov	r4,r17
10006cf0:	91800144 	addi	r6,r18,5
10006cf4:	318d883a 	add	r6,r6,r6
10006cf8:	318d883a 	add	r6,r6,r6
10006cfc:	0009ba40 	call	10009ba4 <_calloc_r>
10006d00:	103ff626 	beq	r2,zero,10006cdc <__alt_data_end+0xf8006cdc>
10006d04:	14000115 	stw	r16,4(r2)
10006d08:	14800215 	stw	r18,8(r2)
10006d0c:	003fe606 	br	10006ca8 <__alt_data_end+0xf8006ca8>

10006d10 <_Bfree>:
10006d10:	28000826 	beq	r5,zero,10006d34 <_Bfree+0x24>
10006d14:	28c00117 	ldw	r3,4(r5)
10006d18:	20801317 	ldw	r2,76(r4)
10006d1c:	18c7883a 	add	r3,r3,r3
10006d20:	18c7883a 	add	r3,r3,r3
10006d24:	10c5883a 	add	r2,r2,r3
10006d28:	10c00017 	ldw	r3,0(r2)
10006d2c:	28c00015 	stw	r3,0(r5)
10006d30:	11400015 	stw	r5,0(r2)
10006d34:	f800283a 	ret

10006d38 <__multadd>:
10006d38:	defffa04 	addi	sp,sp,-24
10006d3c:	dc800315 	stw	r18,12(sp)
10006d40:	dc400215 	stw	r17,8(sp)
10006d44:	dc000115 	stw	r16,4(sp)
10006d48:	2823883a 	mov	r17,r5
10006d4c:	2c000417 	ldw	r16,16(r5)
10006d50:	dfc00515 	stw	ra,20(sp)
10006d54:	dcc00415 	stw	r19,16(sp)
10006d58:	2025883a 	mov	r18,r4
10006d5c:	29400504 	addi	r5,r5,20
10006d60:	0011883a 	mov	r8,zero
10006d64:	28c00017 	ldw	r3,0(r5)
10006d68:	29400104 	addi	r5,r5,4
10006d6c:	42000044 	addi	r8,r8,1
10006d70:	18bfffcc 	andi	r2,r3,65535
10006d74:	1185383a 	mul	r2,r2,r6
10006d78:	1806d43a 	srli	r3,r3,16
10006d7c:	11cf883a 	add	r7,r2,r7
10006d80:	3808d43a 	srli	r4,r7,16
10006d84:	1987383a 	mul	r3,r3,r6
10006d88:	38bfffcc 	andi	r2,r7,65535
10006d8c:	1907883a 	add	r3,r3,r4
10006d90:	1808943a 	slli	r4,r3,16
10006d94:	180ed43a 	srli	r7,r3,16
10006d98:	2085883a 	add	r2,r4,r2
10006d9c:	28bfff15 	stw	r2,-4(r5)
10006da0:	443ff016 	blt	r8,r16,10006d64 <__alt_data_end+0xf8006d64>
10006da4:	38000926 	beq	r7,zero,10006dcc <__multadd+0x94>
10006da8:	88800217 	ldw	r2,8(r17)
10006dac:	80800f0e 	bge	r16,r2,10006dec <__multadd+0xb4>
10006db0:	80800144 	addi	r2,r16,5
10006db4:	1085883a 	add	r2,r2,r2
10006db8:	1085883a 	add	r2,r2,r2
10006dbc:	8885883a 	add	r2,r17,r2
10006dc0:	11c00015 	stw	r7,0(r2)
10006dc4:	84000044 	addi	r16,r16,1
10006dc8:	8c000415 	stw	r16,16(r17)
10006dcc:	8805883a 	mov	r2,r17
10006dd0:	dfc00517 	ldw	ra,20(sp)
10006dd4:	dcc00417 	ldw	r19,16(sp)
10006dd8:	dc800317 	ldw	r18,12(sp)
10006ddc:	dc400217 	ldw	r17,8(sp)
10006de0:	dc000117 	ldw	r16,4(sp)
10006de4:	dec00604 	addi	sp,sp,24
10006de8:	f800283a 	ret
10006dec:	89400117 	ldw	r5,4(r17)
10006df0:	9009883a 	mov	r4,r18
10006df4:	d9c00015 	stw	r7,0(sp)
10006df8:	29400044 	addi	r5,r5,1
10006dfc:	0006c680 	call	10006c68 <_Balloc>
10006e00:	89800417 	ldw	r6,16(r17)
10006e04:	89400304 	addi	r5,r17,12
10006e08:	11000304 	addi	r4,r2,12
10006e0c:	31800084 	addi	r6,r6,2
10006e10:	318d883a 	add	r6,r6,r6
10006e14:	318d883a 	add	r6,r6,r6
10006e18:	1027883a 	mov	r19,r2
10006e1c:	000689c0 	call	1000689c <memcpy>
10006e20:	d9c00017 	ldw	r7,0(sp)
10006e24:	88000a26 	beq	r17,zero,10006e50 <__multadd+0x118>
10006e28:	88c00117 	ldw	r3,4(r17)
10006e2c:	90801317 	ldw	r2,76(r18)
10006e30:	18c7883a 	add	r3,r3,r3
10006e34:	18c7883a 	add	r3,r3,r3
10006e38:	10c5883a 	add	r2,r2,r3
10006e3c:	10c00017 	ldw	r3,0(r2)
10006e40:	88c00015 	stw	r3,0(r17)
10006e44:	14400015 	stw	r17,0(r2)
10006e48:	9823883a 	mov	r17,r19
10006e4c:	003fd806 	br	10006db0 <__alt_data_end+0xf8006db0>
10006e50:	9823883a 	mov	r17,r19
10006e54:	003fd606 	br	10006db0 <__alt_data_end+0xf8006db0>

10006e58 <__s2b>:
10006e58:	defff904 	addi	sp,sp,-28
10006e5c:	dc400115 	stw	r17,4(sp)
10006e60:	dc000015 	stw	r16,0(sp)
10006e64:	2023883a 	mov	r17,r4
10006e68:	2821883a 	mov	r16,r5
10006e6c:	39000204 	addi	r4,r7,8
10006e70:	01400244 	movi	r5,9
10006e74:	dcc00315 	stw	r19,12(sp)
10006e78:	dc800215 	stw	r18,8(sp)
10006e7c:	dfc00615 	stw	ra,24(sp)
10006e80:	dd400515 	stw	r21,20(sp)
10006e84:	dd000415 	stw	r20,16(sp)
10006e88:	3825883a 	mov	r18,r7
10006e8c:	3027883a 	mov	r19,r6
10006e90:	000aed40 	call	1000aed4 <__divsi3>
10006e94:	00c00044 	movi	r3,1
10006e98:	000b883a 	mov	r5,zero
10006e9c:	1880030e 	bge	r3,r2,10006eac <__s2b+0x54>
10006ea0:	18c7883a 	add	r3,r3,r3
10006ea4:	29400044 	addi	r5,r5,1
10006ea8:	18bffd16 	blt	r3,r2,10006ea0 <__alt_data_end+0xf8006ea0>
10006eac:	8809883a 	mov	r4,r17
10006eb0:	0006c680 	call	10006c68 <_Balloc>
10006eb4:	d8c00717 	ldw	r3,28(sp)
10006eb8:	10c00515 	stw	r3,20(r2)
10006ebc:	00c00044 	movi	r3,1
10006ec0:	10c00415 	stw	r3,16(r2)
10006ec4:	00c00244 	movi	r3,9
10006ec8:	1cc0210e 	bge	r3,r19,10006f50 <__s2b+0xf8>
10006ecc:	80eb883a 	add	r21,r16,r3
10006ed0:	a829883a 	mov	r20,r21
10006ed4:	84e1883a 	add	r16,r16,r19
10006ed8:	a1c00007 	ldb	r7,0(r20)
10006edc:	01800284 	movi	r6,10
10006ee0:	a5000044 	addi	r20,r20,1
10006ee4:	100b883a 	mov	r5,r2
10006ee8:	39fff404 	addi	r7,r7,-48
10006eec:	8809883a 	mov	r4,r17
10006ef0:	0006d380 	call	10006d38 <__multadd>
10006ef4:	a43ff81e 	bne	r20,r16,10006ed8 <__alt_data_end+0xf8006ed8>
10006ef8:	ace1883a 	add	r16,r21,r19
10006efc:	843ffe04 	addi	r16,r16,-8
10006f00:	9c800a0e 	bge	r19,r18,10006f2c <__s2b+0xd4>
10006f04:	94e5c83a 	sub	r18,r18,r19
10006f08:	84a5883a 	add	r18,r16,r18
10006f0c:	81c00007 	ldb	r7,0(r16)
10006f10:	01800284 	movi	r6,10
10006f14:	84000044 	addi	r16,r16,1
10006f18:	100b883a 	mov	r5,r2
10006f1c:	39fff404 	addi	r7,r7,-48
10006f20:	8809883a 	mov	r4,r17
10006f24:	0006d380 	call	10006d38 <__multadd>
10006f28:	84bff81e 	bne	r16,r18,10006f0c <__alt_data_end+0xf8006f0c>
10006f2c:	dfc00617 	ldw	ra,24(sp)
10006f30:	dd400517 	ldw	r21,20(sp)
10006f34:	dd000417 	ldw	r20,16(sp)
10006f38:	dcc00317 	ldw	r19,12(sp)
10006f3c:	dc800217 	ldw	r18,8(sp)
10006f40:	dc400117 	ldw	r17,4(sp)
10006f44:	dc000017 	ldw	r16,0(sp)
10006f48:	dec00704 	addi	sp,sp,28
10006f4c:	f800283a 	ret
10006f50:	84000284 	addi	r16,r16,10
10006f54:	1827883a 	mov	r19,r3
10006f58:	003fe906 	br	10006f00 <__alt_data_end+0xf8006f00>

10006f5c <__hi0bits>:
10006f5c:	20bfffec 	andhi	r2,r4,65535
10006f60:	1000141e 	bne	r2,zero,10006fb4 <__hi0bits+0x58>
10006f64:	2008943a 	slli	r4,r4,16
10006f68:	00800404 	movi	r2,16
10006f6c:	20ffc02c 	andhi	r3,r4,65280
10006f70:	1800021e 	bne	r3,zero,10006f7c <__hi0bits+0x20>
10006f74:	2008923a 	slli	r4,r4,8
10006f78:	10800204 	addi	r2,r2,8
10006f7c:	20fc002c 	andhi	r3,r4,61440
10006f80:	1800021e 	bne	r3,zero,10006f8c <__hi0bits+0x30>
10006f84:	2008913a 	slli	r4,r4,4
10006f88:	10800104 	addi	r2,r2,4
10006f8c:	20f0002c 	andhi	r3,r4,49152
10006f90:	1800031e 	bne	r3,zero,10006fa0 <__hi0bits+0x44>
10006f94:	2109883a 	add	r4,r4,r4
10006f98:	10800084 	addi	r2,r2,2
10006f9c:	2109883a 	add	r4,r4,r4
10006fa0:	20000316 	blt	r4,zero,10006fb0 <__hi0bits+0x54>
10006fa4:	2110002c 	andhi	r4,r4,16384
10006fa8:	2000041e 	bne	r4,zero,10006fbc <__hi0bits+0x60>
10006fac:	00800804 	movi	r2,32
10006fb0:	f800283a 	ret
10006fb4:	0005883a 	mov	r2,zero
10006fb8:	003fec06 	br	10006f6c <__alt_data_end+0xf8006f6c>
10006fbc:	10800044 	addi	r2,r2,1
10006fc0:	f800283a 	ret

10006fc4 <__lo0bits>:
10006fc4:	20c00017 	ldw	r3,0(r4)
10006fc8:	188001cc 	andi	r2,r3,7
10006fcc:	10000826 	beq	r2,zero,10006ff0 <__lo0bits+0x2c>
10006fd0:	1880004c 	andi	r2,r3,1
10006fd4:	1000211e 	bne	r2,zero,1000705c <__lo0bits+0x98>
10006fd8:	1880008c 	andi	r2,r3,2
10006fdc:	1000211e 	bne	r2,zero,10007064 <__lo0bits+0xa0>
10006fe0:	1806d0ba 	srli	r3,r3,2
10006fe4:	00800084 	movi	r2,2
10006fe8:	20c00015 	stw	r3,0(r4)
10006fec:	f800283a 	ret
10006ff0:	18bfffcc 	andi	r2,r3,65535
10006ff4:	10001326 	beq	r2,zero,10007044 <__lo0bits+0x80>
10006ff8:	0005883a 	mov	r2,zero
10006ffc:	19403fcc 	andi	r5,r3,255
10007000:	2800021e 	bne	r5,zero,1000700c <__lo0bits+0x48>
10007004:	1806d23a 	srli	r3,r3,8
10007008:	10800204 	addi	r2,r2,8
1000700c:	194003cc 	andi	r5,r3,15
10007010:	2800021e 	bne	r5,zero,1000701c <__lo0bits+0x58>
10007014:	1806d13a 	srli	r3,r3,4
10007018:	10800104 	addi	r2,r2,4
1000701c:	194000cc 	andi	r5,r3,3
10007020:	2800021e 	bne	r5,zero,1000702c <__lo0bits+0x68>
10007024:	1806d0ba 	srli	r3,r3,2
10007028:	10800084 	addi	r2,r2,2
1000702c:	1940004c 	andi	r5,r3,1
10007030:	2800081e 	bne	r5,zero,10007054 <__lo0bits+0x90>
10007034:	1806d07a 	srli	r3,r3,1
10007038:	1800051e 	bne	r3,zero,10007050 <__lo0bits+0x8c>
1000703c:	00800804 	movi	r2,32
10007040:	f800283a 	ret
10007044:	1806d43a 	srli	r3,r3,16
10007048:	00800404 	movi	r2,16
1000704c:	003feb06 	br	10006ffc <__alt_data_end+0xf8006ffc>
10007050:	10800044 	addi	r2,r2,1
10007054:	20c00015 	stw	r3,0(r4)
10007058:	f800283a 	ret
1000705c:	0005883a 	mov	r2,zero
10007060:	f800283a 	ret
10007064:	1806d07a 	srli	r3,r3,1
10007068:	00800044 	movi	r2,1
1000706c:	20c00015 	stw	r3,0(r4)
10007070:	f800283a 	ret

10007074 <__i2b>:
10007074:	defffd04 	addi	sp,sp,-12
10007078:	dc000015 	stw	r16,0(sp)
1000707c:	04000044 	movi	r16,1
10007080:	dc400115 	stw	r17,4(sp)
10007084:	2823883a 	mov	r17,r5
10007088:	800b883a 	mov	r5,r16
1000708c:	dfc00215 	stw	ra,8(sp)
10007090:	0006c680 	call	10006c68 <_Balloc>
10007094:	14400515 	stw	r17,20(r2)
10007098:	14000415 	stw	r16,16(r2)
1000709c:	dfc00217 	ldw	ra,8(sp)
100070a0:	dc400117 	ldw	r17,4(sp)
100070a4:	dc000017 	ldw	r16,0(sp)
100070a8:	dec00304 	addi	sp,sp,12
100070ac:	f800283a 	ret

100070b0 <__multiply>:
100070b0:	defffa04 	addi	sp,sp,-24
100070b4:	dcc00315 	stw	r19,12(sp)
100070b8:	dc800215 	stw	r18,8(sp)
100070bc:	34c00417 	ldw	r19,16(r6)
100070c0:	2c800417 	ldw	r18,16(r5)
100070c4:	dd000415 	stw	r20,16(sp)
100070c8:	dc400115 	stw	r17,4(sp)
100070cc:	dfc00515 	stw	ra,20(sp)
100070d0:	dc000015 	stw	r16,0(sp)
100070d4:	2829883a 	mov	r20,r5
100070d8:	3023883a 	mov	r17,r6
100070dc:	94c0050e 	bge	r18,r19,100070f4 <__multiply+0x44>
100070e0:	9007883a 	mov	r3,r18
100070e4:	3029883a 	mov	r20,r6
100070e8:	9825883a 	mov	r18,r19
100070ec:	2823883a 	mov	r17,r5
100070f0:	1827883a 	mov	r19,r3
100070f4:	a0800217 	ldw	r2,8(r20)
100070f8:	94e1883a 	add	r16,r18,r19
100070fc:	a1400117 	ldw	r5,4(r20)
10007100:	1400010e 	bge	r2,r16,10007108 <__multiply+0x58>
10007104:	29400044 	addi	r5,r5,1
10007108:	0006c680 	call	10006c68 <_Balloc>
1000710c:	8415883a 	add	r10,r16,r16
10007110:	12c00504 	addi	r11,r2,20
10007114:	5295883a 	add	r10,r10,r10
10007118:	5a95883a 	add	r10,r11,r10
1000711c:	5807883a 	mov	r3,r11
10007120:	5a80032e 	bgeu	r11,r10,10007130 <__multiply+0x80>
10007124:	18000015 	stw	zero,0(r3)
10007128:	18c00104 	addi	r3,r3,4
1000712c:	1abffd36 	bltu	r3,r10,10007124 <__alt_data_end+0xf8007124>
10007130:	9ce7883a 	add	r19,r19,r19
10007134:	94a5883a 	add	r18,r18,r18
10007138:	89800504 	addi	r6,r17,20
1000713c:	9ce7883a 	add	r19,r19,r19
10007140:	a3400504 	addi	r13,r20,20
10007144:	94a5883a 	add	r18,r18,r18
10007148:	34d9883a 	add	r12,r6,r19
1000714c:	6c93883a 	add	r9,r13,r18
10007150:	3300422e 	bgeu	r6,r12,1000725c <__multiply+0x1ac>
10007154:	37c00017 	ldw	ra,0(r6)
10007158:	fbffffcc 	andi	r15,ra,65535
1000715c:	78001b26 	beq	r15,zero,100071cc <__multiply+0x11c>
10007160:	5811883a 	mov	r8,r11
10007164:	681d883a 	mov	r14,r13
10007168:	000f883a 	mov	r7,zero
1000716c:	71000017 	ldw	r4,0(r14)
10007170:	40c00017 	ldw	r3,0(r8)
10007174:	73800104 	addi	r14,r14,4
10007178:	217fffcc 	andi	r5,r4,65535
1000717c:	2bcb383a 	mul	r5,r5,r15
10007180:	2008d43a 	srli	r4,r4,16
10007184:	1c7fffcc 	andi	r17,r3,65535
10007188:	2c4b883a 	add	r5,r5,r17
1000718c:	29cb883a 	add	r5,r5,r7
10007190:	23c9383a 	mul	r4,r4,r15
10007194:	1806d43a 	srli	r3,r3,16
10007198:	280ed43a 	srli	r7,r5,16
1000719c:	297fffcc 	andi	r5,r5,65535
100071a0:	20c7883a 	add	r3,r4,r3
100071a4:	19c7883a 	add	r3,r3,r7
100071a8:	1808943a 	slli	r4,r3,16
100071ac:	4023883a 	mov	r17,r8
100071b0:	180ed43a 	srli	r7,r3,16
100071b4:	214ab03a 	or	r5,r4,r5
100071b8:	41400015 	stw	r5,0(r8)
100071bc:	42000104 	addi	r8,r8,4
100071c0:	727fea36 	bltu	r14,r9,1000716c <__alt_data_end+0xf800716c>
100071c4:	89c00115 	stw	r7,4(r17)
100071c8:	37c00017 	ldw	ra,0(r6)
100071cc:	f83ed43a 	srli	ra,ra,16
100071d0:	f8001f26 	beq	ra,zero,10007250 <__multiply+0x1a0>
100071d4:	58c00017 	ldw	r3,0(r11)
100071d8:	681d883a 	mov	r14,r13
100071dc:	581f883a 	mov	r15,r11
100071e0:	1811883a 	mov	r8,r3
100071e4:	5825883a 	mov	r18,r11
100071e8:	000f883a 	mov	r7,zero
100071ec:	00000106 	br	100071f4 <__multiply+0x144>
100071f0:	8825883a 	mov	r18,r17
100071f4:	7140000b 	ldhu	r5,0(r14)
100071f8:	4010d43a 	srli	r8,r8,16
100071fc:	193fffcc 	andi	r4,r3,65535
10007200:	2fcb383a 	mul	r5,r5,ra
10007204:	7bc00104 	addi	r15,r15,4
10007208:	73800104 	addi	r14,r14,4
1000720c:	2a0b883a 	add	r5,r5,r8
10007210:	29cb883a 	add	r5,r5,r7
10007214:	2806943a 	slli	r3,r5,16
10007218:	94400104 	addi	r17,r18,4
1000721c:	280ad43a 	srli	r5,r5,16
10007220:	1908b03a 	or	r4,r3,r4
10007224:	793fff15 	stw	r4,-4(r15)
10007228:	70ffff17 	ldw	r3,-4(r14)
1000722c:	8a000017 	ldw	r8,0(r17)
10007230:	1806d43a 	srli	r3,r3,16
10007234:	413fffcc 	andi	r4,r8,65535
10007238:	1fc7383a 	mul	r3,r3,ra
1000723c:	1907883a 	add	r3,r3,r4
10007240:	1947883a 	add	r3,r3,r5
10007244:	180ed43a 	srli	r7,r3,16
10007248:	727fe936 	bltu	r14,r9,100071f0 <__alt_data_end+0xf80071f0>
1000724c:	90c00115 	stw	r3,4(r18)
10007250:	31800104 	addi	r6,r6,4
10007254:	5ac00104 	addi	r11,r11,4
10007258:	333fbe36 	bltu	r6,r12,10007154 <__alt_data_end+0xf8007154>
1000725c:	0400090e 	bge	zero,r16,10007284 <__multiply+0x1d4>
10007260:	50ffff17 	ldw	r3,-4(r10)
10007264:	52bfff04 	addi	r10,r10,-4
10007268:	18000326 	beq	r3,zero,10007278 <__multiply+0x1c8>
1000726c:	00000506 	br	10007284 <__multiply+0x1d4>
10007270:	50c00017 	ldw	r3,0(r10)
10007274:	1800031e 	bne	r3,zero,10007284 <__multiply+0x1d4>
10007278:	843fffc4 	addi	r16,r16,-1
1000727c:	52bfff04 	addi	r10,r10,-4
10007280:	803ffb1e 	bne	r16,zero,10007270 <__alt_data_end+0xf8007270>
10007284:	14000415 	stw	r16,16(r2)
10007288:	dfc00517 	ldw	ra,20(sp)
1000728c:	dd000417 	ldw	r20,16(sp)
10007290:	dcc00317 	ldw	r19,12(sp)
10007294:	dc800217 	ldw	r18,8(sp)
10007298:	dc400117 	ldw	r17,4(sp)
1000729c:	dc000017 	ldw	r16,0(sp)
100072a0:	dec00604 	addi	sp,sp,24
100072a4:	f800283a 	ret

100072a8 <__pow5mult>:
100072a8:	defffa04 	addi	sp,sp,-24
100072ac:	dcc00315 	stw	r19,12(sp)
100072b0:	dc000015 	stw	r16,0(sp)
100072b4:	dfc00515 	stw	ra,20(sp)
100072b8:	dd000415 	stw	r20,16(sp)
100072bc:	dc800215 	stw	r18,8(sp)
100072c0:	dc400115 	stw	r17,4(sp)
100072c4:	308000cc 	andi	r2,r6,3
100072c8:	3021883a 	mov	r16,r6
100072cc:	2027883a 	mov	r19,r4
100072d0:	10002f1e 	bne	r2,zero,10007390 <__pow5mult+0xe8>
100072d4:	2825883a 	mov	r18,r5
100072d8:	8021d0ba 	srai	r16,r16,2
100072dc:	80001a26 	beq	r16,zero,10007348 <__pow5mult+0xa0>
100072e0:	9c401217 	ldw	r17,72(r19)
100072e4:	8800061e 	bne	r17,zero,10007300 <__pow5mult+0x58>
100072e8:	00003406 	br	100073bc <__pow5mult+0x114>
100072ec:	8021d07a 	srai	r16,r16,1
100072f0:	80001526 	beq	r16,zero,10007348 <__pow5mult+0xa0>
100072f4:	88800017 	ldw	r2,0(r17)
100072f8:	10001c26 	beq	r2,zero,1000736c <__pow5mult+0xc4>
100072fc:	1023883a 	mov	r17,r2
10007300:	8080004c 	andi	r2,r16,1
10007304:	103ff926 	beq	r2,zero,100072ec <__alt_data_end+0xf80072ec>
10007308:	880d883a 	mov	r6,r17
1000730c:	900b883a 	mov	r5,r18
10007310:	9809883a 	mov	r4,r19
10007314:	00070b00 	call	100070b0 <__multiply>
10007318:	90001b26 	beq	r18,zero,10007388 <__pow5mult+0xe0>
1000731c:	91000117 	ldw	r4,4(r18)
10007320:	98c01317 	ldw	r3,76(r19)
10007324:	8021d07a 	srai	r16,r16,1
10007328:	2109883a 	add	r4,r4,r4
1000732c:	2109883a 	add	r4,r4,r4
10007330:	1907883a 	add	r3,r3,r4
10007334:	19000017 	ldw	r4,0(r3)
10007338:	91000015 	stw	r4,0(r18)
1000733c:	1c800015 	stw	r18,0(r3)
10007340:	1025883a 	mov	r18,r2
10007344:	803feb1e 	bne	r16,zero,100072f4 <__alt_data_end+0xf80072f4>
10007348:	9005883a 	mov	r2,r18
1000734c:	dfc00517 	ldw	ra,20(sp)
10007350:	dd000417 	ldw	r20,16(sp)
10007354:	dcc00317 	ldw	r19,12(sp)
10007358:	dc800217 	ldw	r18,8(sp)
1000735c:	dc400117 	ldw	r17,4(sp)
10007360:	dc000017 	ldw	r16,0(sp)
10007364:	dec00604 	addi	sp,sp,24
10007368:	f800283a 	ret
1000736c:	880d883a 	mov	r6,r17
10007370:	880b883a 	mov	r5,r17
10007374:	9809883a 	mov	r4,r19
10007378:	00070b00 	call	100070b0 <__multiply>
1000737c:	88800015 	stw	r2,0(r17)
10007380:	10000015 	stw	zero,0(r2)
10007384:	003fdd06 	br	100072fc <__alt_data_end+0xf80072fc>
10007388:	1025883a 	mov	r18,r2
1000738c:	003fd706 	br	100072ec <__alt_data_end+0xf80072ec>
10007390:	10bfffc4 	addi	r2,r2,-1
10007394:	1085883a 	add	r2,r2,r2
10007398:	00c40074 	movhi	r3,4097
1000739c:	18d18104 	addi	r3,r3,17924
100073a0:	1085883a 	add	r2,r2,r2
100073a4:	1885883a 	add	r2,r3,r2
100073a8:	11800017 	ldw	r6,0(r2)
100073ac:	000f883a 	mov	r7,zero
100073b0:	0006d380 	call	10006d38 <__multadd>
100073b4:	1025883a 	mov	r18,r2
100073b8:	003fc706 	br	100072d8 <__alt_data_end+0xf80072d8>
100073bc:	05000044 	movi	r20,1
100073c0:	a00b883a 	mov	r5,r20
100073c4:	9809883a 	mov	r4,r19
100073c8:	0006c680 	call	10006c68 <_Balloc>
100073cc:	1023883a 	mov	r17,r2
100073d0:	00809c44 	movi	r2,625
100073d4:	88800515 	stw	r2,20(r17)
100073d8:	8d000415 	stw	r20,16(r17)
100073dc:	9c401215 	stw	r17,72(r19)
100073e0:	88000015 	stw	zero,0(r17)
100073e4:	003fc606 	br	10007300 <__alt_data_end+0xf8007300>

100073e8 <__lshift>:
100073e8:	defff904 	addi	sp,sp,-28
100073ec:	dd400515 	stw	r21,20(sp)
100073f0:	dcc00315 	stw	r19,12(sp)
100073f4:	302bd17a 	srai	r21,r6,5
100073f8:	2cc00417 	ldw	r19,16(r5)
100073fc:	28800217 	ldw	r2,8(r5)
10007400:	dd000415 	stw	r20,16(sp)
10007404:	ace7883a 	add	r19,r21,r19
10007408:	dc800215 	stw	r18,8(sp)
1000740c:	dc400115 	stw	r17,4(sp)
10007410:	dc000015 	stw	r16,0(sp)
10007414:	dfc00615 	stw	ra,24(sp)
10007418:	9c000044 	addi	r16,r19,1
1000741c:	2823883a 	mov	r17,r5
10007420:	3029883a 	mov	r20,r6
10007424:	2025883a 	mov	r18,r4
10007428:	29400117 	ldw	r5,4(r5)
1000742c:	1400030e 	bge	r2,r16,1000743c <__lshift+0x54>
10007430:	1085883a 	add	r2,r2,r2
10007434:	29400044 	addi	r5,r5,1
10007438:	143ffd16 	blt	r2,r16,10007430 <__alt_data_end+0xf8007430>
1000743c:	9009883a 	mov	r4,r18
10007440:	0006c680 	call	10006c68 <_Balloc>
10007444:	10c00504 	addi	r3,r2,20
10007448:	0540070e 	bge	zero,r21,10007468 <__lshift+0x80>
1000744c:	ad6b883a 	add	r21,r21,r21
10007450:	ad6b883a 	add	r21,r21,r21
10007454:	1809883a 	mov	r4,r3
10007458:	1d47883a 	add	r3,r3,r21
1000745c:	20000015 	stw	zero,0(r4)
10007460:	21000104 	addi	r4,r4,4
10007464:	193ffd1e 	bne	r3,r4,1000745c <__alt_data_end+0xf800745c>
10007468:	8a000417 	ldw	r8,16(r17)
1000746c:	89000504 	addi	r4,r17,20
10007470:	a18007cc 	andi	r6,r20,31
10007474:	4211883a 	add	r8,r8,r8
10007478:	4211883a 	add	r8,r8,r8
1000747c:	2211883a 	add	r8,r4,r8
10007480:	30002326 	beq	r6,zero,10007510 <__lshift+0x128>
10007484:	02400804 	movi	r9,32
10007488:	4993c83a 	sub	r9,r9,r6
1000748c:	000b883a 	mov	r5,zero
10007490:	21c00017 	ldw	r7,0(r4)
10007494:	1815883a 	mov	r10,r3
10007498:	18c00104 	addi	r3,r3,4
1000749c:	398e983a 	sll	r7,r7,r6
100074a0:	21000104 	addi	r4,r4,4
100074a4:	394ab03a 	or	r5,r7,r5
100074a8:	197fff15 	stw	r5,-4(r3)
100074ac:	217fff17 	ldw	r5,-4(r4)
100074b0:	2a4ad83a 	srl	r5,r5,r9
100074b4:	223ff636 	bltu	r4,r8,10007490 <__alt_data_end+0xf8007490>
100074b8:	51400115 	stw	r5,4(r10)
100074bc:	28001a1e 	bne	r5,zero,10007528 <__lshift+0x140>
100074c0:	843fffc4 	addi	r16,r16,-1
100074c4:	14000415 	stw	r16,16(r2)
100074c8:	88000826 	beq	r17,zero,100074ec <__lshift+0x104>
100074cc:	89000117 	ldw	r4,4(r17)
100074d0:	90c01317 	ldw	r3,76(r18)
100074d4:	2109883a 	add	r4,r4,r4
100074d8:	2109883a 	add	r4,r4,r4
100074dc:	1907883a 	add	r3,r3,r4
100074e0:	19000017 	ldw	r4,0(r3)
100074e4:	89000015 	stw	r4,0(r17)
100074e8:	1c400015 	stw	r17,0(r3)
100074ec:	dfc00617 	ldw	ra,24(sp)
100074f0:	dd400517 	ldw	r21,20(sp)
100074f4:	dd000417 	ldw	r20,16(sp)
100074f8:	dcc00317 	ldw	r19,12(sp)
100074fc:	dc800217 	ldw	r18,8(sp)
10007500:	dc400117 	ldw	r17,4(sp)
10007504:	dc000017 	ldw	r16,0(sp)
10007508:	dec00704 	addi	sp,sp,28
1000750c:	f800283a 	ret
10007510:	21400017 	ldw	r5,0(r4)
10007514:	18c00104 	addi	r3,r3,4
10007518:	21000104 	addi	r4,r4,4
1000751c:	197fff15 	stw	r5,-4(r3)
10007520:	223ffb36 	bltu	r4,r8,10007510 <__alt_data_end+0xf8007510>
10007524:	003fe606 	br	100074c0 <__alt_data_end+0xf80074c0>
10007528:	9c000084 	addi	r16,r19,2
1000752c:	003fe406 	br	100074c0 <__alt_data_end+0xf80074c0>

10007530 <__mcmp>:
10007530:	20800417 	ldw	r2,16(r4)
10007534:	28c00417 	ldw	r3,16(r5)
10007538:	10c5c83a 	sub	r2,r2,r3
1000753c:	1000111e 	bne	r2,zero,10007584 <__mcmp+0x54>
10007540:	18c7883a 	add	r3,r3,r3
10007544:	18c7883a 	add	r3,r3,r3
10007548:	21000504 	addi	r4,r4,20
1000754c:	29400504 	addi	r5,r5,20
10007550:	20c5883a 	add	r2,r4,r3
10007554:	28cb883a 	add	r5,r5,r3
10007558:	00000106 	br	10007560 <__mcmp+0x30>
1000755c:	20800a2e 	bgeu	r4,r2,10007588 <__mcmp+0x58>
10007560:	10bfff04 	addi	r2,r2,-4
10007564:	297fff04 	addi	r5,r5,-4
10007568:	11800017 	ldw	r6,0(r2)
1000756c:	28c00017 	ldw	r3,0(r5)
10007570:	30fffa26 	beq	r6,r3,1000755c <__alt_data_end+0xf800755c>
10007574:	30c00236 	bltu	r6,r3,10007580 <__mcmp+0x50>
10007578:	00800044 	movi	r2,1
1000757c:	f800283a 	ret
10007580:	00bfffc4 	movi	r2,-1
10007584:	f800283a 	ret
10007588:	0005883a 	mov	r2,zero
1000758c:	f800283a 	ret

10007590 <__mdiff>:
10007590:	28c00417 	ldw	r3,16(r5)
10007594:	30800417 	ldw	r2,16(r6)
10007598:	defffa04 	addi	sp,sp,-24
1000759c:	dcc00315 	stw	r19,12(sp)
100075a0:	dc800215 	stw	r18,8(sp)
100075a4:	dfc00515 	stw	ra,20(sp)
100075a8:	dd000415 	stw	r20,16(sp)
100075ac:	dc400115 	stw	r17,4(sp)
100075b0:	dc000015 	stw	r16,0(sp)
100075b4:	1887c83a 	sub	r3,r3,r2
100075b8:	2825883a 	mov	r18,r5
100075bc:	3027883a 	mov	r19,r6
100075c0:	1800141e 	bne	r3,zero,10007614 <__mdiff+0x84>
100075c4:	1085883a 	add	r2,r2,r2
100075c8:	1085883a 	add	r2,r2,r2
100075cc:	2a000504 	addi	r8,r5,20
100075d0:	34000504 	addi	r16,r6,20
100075d4:	4087883a 	add	r3,r8,r2
100075d8:	8085883a 	add	r2,r16,r2
100075dc:	00000106 	br	100075e4 <__mdiff+0x54>
100075e0:	40c0592e 	bgeu	r8,r3,10007748 <__mdiff+0x1b8>
100075e4:	18ffff04 	addi	r3,r3,-4
100075e8:	10bfff04 	addi	r2,r2,-4
100075ec:	19c00017 	ldw	r7,0(r3)
100075f0:	11400017 	ldw	r5,0(r2)
100075f4:	397ffa26 	beq	r7,r5,100075e0 <__alt_data_end+0xf80075e0>
100075f8:	3940592e 	bgeu	r7,r5,10007760 <__mdiff+0x1d0>
100075fc:	9005883a 	mov	r2,r18
10007600:	4023883a 	mov	r17,r8
10007604:	9825883a 	mov	r18,r19
10007608:	05000044 	movi	r20,1
1000760c:	1027883a 	mov	r19,r2
10007610:	00000406 	br	10007624 <__mdiff+0x94>
10007614:	18005616 	blt	r3,zero,10007770 <__mdiff+0x1e0>
10007618:	34400504 	addi	r17,r6,20
1000761c:	2c000504 	addi	r16,r5,20
10007620:	0029883a 	mov	r20,zero
10007624:	91400117 	ldw	r5,4(r18)
10007628:	0006c680 	call	10006c68 <_Balloc>
1000762c:	92400417 	ldw	r9,16(r18)
10007630:	9b000417 	ldw	r12,16(r19)
10007634:	12c00504 	addi	r11,r2,20
10007638:	4a51883a 	add	r8,r9,r9
1000763c:	6319883a 	add	r12,r12,r12
10007640:	4211883a 	add	r8,r8,r8
10007644:	6319883a 	add	r12,r12,r12
10007648:	15000315 	stw	r20,12(r2)
1000764c:	8211883a 	add	r8,r16,r8
10007650:	8b19883a 	add	r12,r17,r12
10007654:	0007883a 	mov	r3,zero
10007658:	81400017 	ldw	r5,0(r16)
1000765c:	89c00017 	ldw	r7,0(r17)
10007660:	59800104 	addi	r6,r11,4
10007664:	293fffcc 	andi	r4,r5,65535
10007668:	20c7883a 	add	r3,r4,r3
1000766c:	393fffcc 	andi	r4,r7,65535
10007670:	1909c83a 	sub	r4,r3,r4
10007674:	280ad43a 	srli	r5,r5,16
10007678:	380ed43a 	srli	r7,r7,16
1000767c:	2007d43a 	srai	r3,r4,16
10007680:	213fffcc 	andi	r4,r4,65535
10007684:	29cbc83a 	sub	r5,r5,r7
10007688:	28c7883a 	add	r3,r5,r3
1000768c:	180a943a 	slli	r5,r3,16
10007690:	8c400104 	addi	r17,r17,4
10007694:	84000104 	addi	r16,r16,4
10007698:	2908b03a 	or	r4,r5,r4
1000769c:	59000015 	stw	r4,0(r11)
100076a0:	1807d43a 	srai	r3,r3,16
100076a4:	3015883a 	mov	r10,r6
100076a8:	3017883a 	mov	r11,r6
100076ac:	8b3fea36 	bltu	r17,r12,10007658 <__alt_data_end+0xf8007658>
100076b0:	8200162e 	bgeu	r16,r8,1000770c <__mdiff+0x17c>
100076b4:	8017883a 	mov	r11,r16
100076b8:	59400017 	ldw	r5,0(r11)
100076bc:	31800104 	addi	r6,r6,4
100076c0:	5ac00104 	addi	r11,r11,4
100076c4:	293fffcc 	andi	r4,r5,65535
100076c8:	20c7883a 	add	r3,r4,r3
100076cc:	280ed43a 	srli	r7,r5,16
100076d0:	180bd43a 	srai	r5,r3,16
100076d4:	193fffcc 	andi	r4,r3,65535
100076d8:	3947883a 	add	r3,r7,r5
100076dc:	180a943a 	slli	r5,r3,16
100076e0:	1807d43a 	srai	r3,r3,16
100076e4:	2908b03a 	or	r4,r5,r4
100076e8:	313fff15 	stw	r4,-4(r6)
100076ec:	5a3ff236 	bltu	r11,r8,100076b8 <__alt_data_end+0xf80076b8>
100076f0:	0406303a 	nor	r3,zero,r16
100076f4:	1a07883a 	add	r3,r3,r8
100076f8:	1806d0ba 	srli	r3,r3,2
100076fc:	18c00044 	addi	r3,r3,1
10007700:	18c7883a 	add	r3,r3,r3
10007704:	18c7883a 	add	r3,r3,r3
10007708:	50d5883a 	add	r10,r10,r3
1000770c:	50ffff04 	addi	r3,r10,-4
10007710:	2000041e 	bne	r4,zero,10007724 <__mdiff+0x194>
10007714:	18ffff04 	addi	r3,r3,-4
10007718:	19000017 	ldw	r4,0(r3)
1000771c:	4a7fffc4 	addi	r9,r9,-1
10007720:	203ffc26 	beq	r4,zero,10007714 <__alt_data_end+0xf8007714>
10007724:	12400415 	stw	r9,16(r2)
10007728:	dfc00517 	ldw	ra,20(sp)
1000772c:	dd000417 	ldw	r20,16(sp)
10007730:	dcc00317 	ldw	r19,12(sp)
10007734:	dc800217 	ldw	r18,8(sp)
10007738:	dc400117 	ldw	r17,4(sp)
1000773c:	dc000017 	ldw	r16,0(sp)
10007740:	dec00604 	addi	sp,sp,24
10007744:	f800283a 	ret
10007748:	000b883a 	mov	r5,zero
1000774c:	0006c680 	call	10006c68 <_Balloc>
10007750:	00c00044 	movi	r3,1
10007754:	10c00415 	stw	r3,16(r2)
10007758:	10000515 	stw	zero,20(r2)
1000775c:	003ff206 	br	10007728 <__alt_data_end+0xf8007728>
10007760:	8023883a 	mov	r17,r16
10007764:	0029883a 	mov	r20,zero
10007768:	4021883a 	mov	r16,r8
1000776c:	003fad06 	br	10007624 <__alt_data_end+0xf8007624>
10007770:	9005883a 	mov	r2,r18
10007774:	94400504 	addi	r17,r18,20
10007778:	9c000504 	addi	r16,r19,20
1000777c:	9825883a 	mov	r18,r19
10007780:	05000044 	movi	r20,1
10007784:	1027883a 	mov	r19,r2
10007788:	003fa606 	br	10007624 <__alt_data_end+0xf8007624>

1000778c <__ulp>:
1000778c:	295ffc2c 	andhi	r5,r5,32752
10007790:	00bf3034 	movhi	r2,64704
10007794:	2887883a 	add	r3,r5,r2
10007798:	00c0020e 	bge	zero,r3,100077a4 <__ulp+0x18>
1000779c:	0005883a 	mov	r2,zero
100077a0:	f800283a 	ret
100077a4:	00c7c83a 	sub	r3,zero,r3
100077a8:	1807d53a 	srai	r3,r3,20
100077ac:	008004c4 	movi	r2,19
100077b0:	10c00b0e 	bge	r2,r3,100077e0 <__ulp+0x54>
100077b4:	18bffb04 	addi	r2,r3,-20
100077b8:	01000784 	movi	r4,30
100077bc:	0007883a 	mov	r3,zero
100077c0:	20800516 	blt	r4,r2,100077d8 <__ulp+0x4c>
100077c4:	010007c4 	movi	r4,31
100077c8:	2089c83a 	sub	r4,r4,r2
100077cc:	00800044 	movi	r2,1
100077d0:	1104983a 	sll	r2,r2,r4
100077d4:	f800283a 	ret
100077d8:	00800044 	movi	r2,1
100077dc:	f800283a 	ret
100077e0:	01400234 	movhi	r5,8
100077e4:	28c7d83a 	sra	r3,r5,r3
100077e8:	0005883a 	mov	r2,zero
100077ec:	f800283a 	ret

100077f0 <__b2d>:
100077f0:	defffa04 	addi	sp,sp,-24
100077f4:	dc000015 	stw	r16,0(sp)
100077f8:	24000417 	ldw	r16,16(r4)
100077fc:	dc400115 	stw	r17,4(sp)
10007800:	24400504 	addi	r17,r4,20
10007804:	8421883a 	add	r16,r16,r16
10007808:	8421883a 	add	r16,r16,r16
1000780c:	8c21883a 	add	r16,r17,r16
10007810:	dc800215 	stw	r18,8(sp)
10007814:	84bfff17 	ldw	r18,-4(r16)
10007818:	dd000415 	stw	r20,16(sp)
1000781c:	dcc00315 	stw	r19,12(sp)
10007820:	9009883a 	mov	r4,r18
10007824:	2829883a 	mov	r20,r5
10007828:	dfc00515 	stw	ra,20(sp)
1000782c:	0006f5c0 	call	10006f5c <__hi0bits>
10007830:	00c00804 	movi	r3,32
10007834:	1889c83a 	sub	r4,r3,r2
10007838:	a1000015 	stw	r4,0(r20)
1000783c:	01000284 	movi	r4,10
10007840:	84ffff04 	addi	r19,r16,-4
10007844:	20801216 	blt	r4,r2,10007890 <__b2d+0xa0>
10007848:	018002c4 	movi	r6,11
1000784c:	308dc83a 	sub	r6,r6,r2
10007850:	9186d83a 	srl	r3,r18,r6
10007854:	18cffc34 	orhi	r3,r3,16368
10007858:	8cc0212e 	bgeu	r17,r19,100078e0 <__b2d+0xf0>
1000785c:	813ffe17 	ldw	r4,-8(r16)
10007860:	218cd83a 	srl	r6,r4,r6
10007864:	10800544 	addi	r2,r2,21
10007868:	9084983a 	sll	r2,r18,r2
1000786c:	1184b03a 	or	r2,r2,r6
10007870:	dfc00517 	ldw	ra,20(sp)
10007874:	dd000417 	ldw	r20,16(sp)
10007878:	dcc00317 	ldw	r19,12(sp)
1000787c:	dc800217 	ldw	r18,8(sp)
10007880:	dc400117 	ldw	r17,4(sp)
10007884:	dc000017 	ldw	r16,0(sp)
10007888:	dec00604 	addi	sp,sp,24
1000788c:	f800283a 	ret
10007890:	8cc00f2e 	bgeu	r17,r19,100078d0 <__b2d+0xe0>
10007894:	117ffd44 	addi	r5,r2,-11
10007898:	80bffe17 	ldw	r2,-8(r16)
1000789c:	28000e26 	beq	r5,zero,100078d8 <__b2d+0xe8>
100078a0:	1949c83a 	sub	r4,r3,r5
100078a4:	9164983a 	sll	r18,r18,r5
100078a8:	1106d83a 	srl	r3,r2,r4
100078ac:	81bffe04 	addi	r6,r16,-8
100078b0:	948ffc34 	orhi	r18,r18,16368
100078b4:	90c6b03a 	or	r3,r18,r3
100078b8:	89800e2e 	bgeu	r17,r6,100078f4 <__b2d+0x104>
100078bc:	81bffd17 	ldw	r6,-12(r16)
100078c0:	1144983a 	sll	r2,r2,r5
100078c4:	310ad83a 	srl	r5,r6,r4
100078c8:	2884b03a 	or	r2,r5,r2
100078cc:	003fe806 	br	10007870 <__alt_data_end+0xf8007870>
100078d0:	10bffd44 	addi	r2,r2,-11
100078d4:	1000041e 	bne	r2,zero,100078e8 <__b2d+0xf8>
100078d8:	90cffc34 	orhi	r3,r18,16368
100078dc:	003fe406 	br	10007870 <__alt_data_end+0xf8007870>
100078e0:	000d883a 	mov	r6,zero
100078e4:	003fdf06 	br	10007864 <__alt_data_end+0xf8007864>
100078e8:	90a4983a 	sll	r18,r18,r2
100078ec:	0005883a 	mov	r2,zero
100078f0:	003ff906 	br	100078d8 <__alt_data_end+0xf80078d8>
100078f4:	1144983a 	sll	r2,r2,r5
100078f8:	003fdd06 	br	10007870 <__alt_data_end+0xf8007870>

100078fc <__d2b>:
100078fc:	defff804 	addi	sp,sp,-32
10007900:	dc000215 	stw	r16,8(sp)
10007904:	3021883a 	mov	r16,r6
10007908:	dc400315 	stw	r17,12(sp)
1000790c:	8022907a 	slli	r17,r16,1
10007910:	dd000615 	stw	r20,24(sp)
10007914:	2829883a 	mov	r20,r5
10007918:	01400044 	movi	r5,1
1000791c:	dcc00515 	stw	r19,20(sp)
10007920:	dc800415 	stw	r18,16(sp)
10007924:	dfc00715 	stw	ra,28(sp)
10007928:	3825883a 	mov	r18,r7
1000792c:	8822d57a 	srli	r17,r17,21
10007930:	0006c680 	call	10006c68 <_Balloc>
10007934:	1027883a 	mov	r19,r2
10007938:	00800434 	movhi	r2,16
1000793c:	10bfffc4 	addi	r2,r2,-1
10007940:	808c703a 	and	r6,r16,r2
10007944:	88000126 	beq	r17,zero,1000794c <__d2b+0x50>
10007948:	31800434 	orhi	r6,r6,16
1000794c:	d9800015 	stw	r6,0(sp)
10007950:	a0002426 	beq	r20,zero,100079e4 <__d2b+0xe8>
10007954:	d9000104 	addi	r4,sp,4
10007958:	dd000115 	stw	r20,4(sp)
1000795c:	0006fc40 	call	10006fc4 <__lo0bits>
10007960:	d8c00017 	ldw	r3,0(sp)
10007964:	10002f1e 	bne	r2,zero,10007a24 <__d2b+0x128>
10007968:	d9000117 	ldw	r4,4(sp)
1000796c:	99000515 	stw	r4,20(r19)
10007970:	1821003a 	cmpeq	r16,r3,zero
10007974:	01000084 	movi	r4,2
10007978:	2421c83a 	sub	r16,r4,r16
1000797c:	98c00615 	stw	r3,24(r19)
10007980:	9c000415 	stw	r16,16(r19)
10007984:	88001f1e 	bne	r17,zero,10007a04 <__d2b+0x108>
10007988:	10bef384 	addi	r2,r2,-1074
1000798c:	90800015 	stw	r2,0(r18)
10007990:	00900034 	movhi	r2,16384
10007994:	10bfffc4 	addi	r2,r2,-1
10007998:	8085883a 	add	r2,r16,r2
1000799c:	1085883a 	add	r2,r2,r2
100079a0:	1085883a 	add	r2,r2,r2
100079a4:	9885883a 	add	r2,r19,r2
100079a8:	11000517 	ldw	r4,20(r2)
100079ac:	8020917a 	slli	r16,r16,5
100079b0:	0006f5c0 	call	10006f5c <__hi0bits>
100079b4:	d8c00817 	ldw	r3,32(sp)
100079b8:	8085c83a 	sub	r2,r16,r2
100079bc:	18800015 	stw	r2,0(r3)
100079c0:	9805883a 	mov	r2,r19
100079c4:	dfc00717 	ldw	ra,28(sp)
100079c8:	dd000617 	ldw	r20,24(sp)
100079cc:	dcc00517 	ldw	r19,20(sp)
100079d0:	dc800417 	ldw	r18,16(sp)
100079d4:	dc400317 	ldw	r17,12(sp)
100079d8:	dc000217 	ldw	r16,8(sp)
100079dc:	dec00804 	addi	sp,sp,32
100079e0:	f800283a 	ret
100079e4:	d809883a 	mov	r4,sp
100079e8:	0006fc40 	call	10006fc4 <__lo0bits>
100079ec:	d8c00017 	ldw	r3,0(sp)
100079f0:	04000044 	movi	r16,1
100079f4:	9c000415 	stw	r16,16(r19)
100079f8:	98c00515 	stw	r3,20(r19)
100079fc:	10800804 	addi	r2,r2,32
10007a00:	883fe126 	beq	r17,zero,10007988 <__alt_data_end+0xf8007988>
10007a04:	00c00d44 	movi	r3,53
10007a08:	8c7ef344 	addi	r17,r17,-1075
10007a0c:	88a3883a 	add	r17,r17,r2
10007a10:	1885c83a 	sub	r2,r3,r2
10007a14:	d8c00817 	ldw	r3,32(sp)
10007a18:	94400015 	stw	r17,0(r18)
10007a1c:	18800015 	stw	r2,0(r3)
10007a20:	003fe706 	br	100079c0 <__alt_data_end+0xf80079c0>
10007a24:	01000804 	movi	r4,32
10007a28:	2089c83a 	sub	r4,r4,r2
10007a2c:	1908983a 	sll	r4,r3,r4
10007a30:	d9400117 	ldw	r5,4(sp)
10007a34:	1886d83a 	srl	r3,r3,r2
10007a38:	2148b03a 	or	r4,r4,r5
10007a3c:	99000515 	stw	r4,20(r19)
10007a40:	d8c00015 	stw	r3,0(sp)
10007a44:	003fca06 	br	10007970 <__alt_data_end+0xf8007970>

10007a48 <__ratio>:
10007a48:	defff904 	addi	sp,sp,-28
10007a4c:	dc400315 	stw	r17,12(sp)
10007a50:	2823883a 	mov	r17,r5
10007a54:	d9400104 	addi	r5,sp,4
10007a58:	dfc00615 	stw	ra,24(sp)
10007a5c:	dcc00515 	stw	r19,20(sp)
10007a60:	dc800415 	stw	r18,16(sp)
10007a64:	2027883a 	mov	r19,r4
10007a68:	dc000215 	stw	r16,8(sp)
10007a6c:	00077f00 	call	100077f0 <__b2d>
10007a70:	d80b883a 	mov	r5,sp
10007a74:	8809883a 	mov	r4,r17
10007a78:	1025883a 	mov	r18,r2
10007a7c:	1821883a 	mov	r16,r3
10007a80:	00077f00 	call	100077f0 <__b2d>
10007a84:	8a000417 	ldw	r8,16(r17)
10007a88:	99000417 	ldw	r4,16(r19)
10007a8c:	d9400117 	ldw	r5,4(sp)
10007a90:	2209c83a 	sub	r4,r4,r8
10007a94:	2010917a 	slli	r8,r4,5
10007a98:	d9000017 	ldw	r4,0(sp)
10007a9c:	2909c83a 	sub	r4,r5,r4
10007aa0:	4109883a 	add	r4,r8,r4
10007aa4:	01000e0e 	bge	zero,r4,10007ae0 <__ratio+0x98>
10007aa8:	2008953a 	slli	r4,r4,20
10007aac:	2421883a 	add	r16,r4,r16
10007ab0:	100d883a 	mov	r6,r2
10007ab4:	180f883a 	mov	r7,r3
10007ab8:	9009883a 	mov	r4,r18
10007abc:	800b883a 	mov	r5,r16
10007ac0:	000b9340 	call	1000b934 <__divdf3>
10007ac4:	dfc00617 	ldw	ra,24(sp)
10007ac8:	dcc00517 	ldw	r19,20(sp)
10007acc:	dc800417 	ldw	r18,16(sp)
10007ad0:	dc400317 	ldw	r17,12(sp)
10007ad4:	dc000217 	ldw	r16,8(sp)
10007ad8:	dec00704 	addi	sp,sp,28
10007adc:	f800283a 	ret
10007ae0:	2008953a 	slli	r4,r4,20
10007ae4:	1907c83a 	sub	r3,r3,r4
10007ae8:	003ff106 	br	10007ab0 <__alt_data_end+0xf8007ab0>

10007aec <_mprec_log10>:
10007aec:	defffe04 	addi	sp,sp,-8
10007af0:	dc000015 	stw	r16,0(sp)
10007af4:	dfc00115 	stw	ra,4(sp)
10007af8:	008005c4 	movi	r2,23
10007afc:	2021883a 	mov	r16,r4
10007b00:	11000d0e 	bge	r2,r4,10007b38 <_mprec_log10+0x4c>
10007b04:	0005883a 	mov	r2,zero
10007b08:	00cffc34 	movhi	r3,16368
10007b0c:	843fffc4 	addi	r16,r16,-1
10007b10:	000d883a 	mov	r6,zero
10007b14:	01d00934 	movhi	r7,16420
10007b18:	1009883a 	mov	r4,r2
10007b1c:	180b883a 	mov	r5,r3
10007b20:	000c4740 	call	1000c474 <__muldf3>
10007b24:	803ff91e 	bne	r16,zero,10007b0c <__alt_data_end+0xf8007b0c>
10007b28:	dfc00117 	ldw	ra,4(sp)
10007b2c:	dc000017 	ldw	r16,0(sp)
10007b30:	dec00204 	addi	sp,sp,8
10007b34:	f800283a 	ret
10007b38:	202090fa 	slli	r16,r4,3
10007b3c:	00840074 	movhi	r2,4097
10007b40:	10919804 	addi	r2,r2,18016
10007b44:	1421883a 	add	r16,r2,r16
10007b48:	80800017 	ldw	r2,0(r16)
10007b4c:	80c00117 	ldw	r3,4(r16)
10007b50:	dfc00117 	ldw	ra,4(sp)
10007b54:	dc000017 	ldw	r16,0(sp)
10007b58:	dec00204 	addi	sp,sp,8
10007b5c:	f800283a 	ret

10007b60 <__copybits>:
10007b60:	297fffc4 	addi	r5,r5,-1
10007b64:	280fd17a 	srai	r7,r5,5
10007b68:	30c00417 	ldw	r3,16(r6)
10007b6c:	30800504 	addi	r2,r6,20
10007b70:	39c00044 	addi	r7,r7,1
10007b74:	18c7883a 	add	r3,r3,r3
10007b78:	39cf883a 	add	r7,r7,r7
10007b7c:	18c7883a 	add	r3,r3,r3
10007b80:	39cf883a 	add	r7,r7,r7
10007b84:	10c7883a 	add	r3,r2,r3
10007b88:	21cf883a 	add	r7,r4,r7
10007b8c:	10c00d2e 	bgeu	r2,r3,10007bc4 <__copybits+0x64>
10007b90:	200b883a 	mov	r5,r4
10007b94:	12000017 	ldw	r8,0(r2)
10007b98:	29400104 	addi	r5,r5,4
10007b9c:	10800104 	addi	r2,r2,4
10007ba0:	2a3fff15 	stw	r8,-4(r5)
10007ba4:	10fffb36 	bltu	r2,r3,10007b94 <__alt_data_end+0xf8007b94>
10007ba8:	1985c83a 	sub	r2,r3,r6
10007bac:	10bffac4 	addi	r2,r2,-21
10007bb0:	1004d0ba 	srli	r2,r2,2
10007bb4:	10800044 	addi	r2,r2,1
10007bb8:	1085883a 	add	r2,r2,r2
10007bbc:	1085883a 	add	r2,r2,r2
10007bc0:	2089883a 	add	r4,r4,r2
10007bc4:	21c0032e 	bgeu	r4,r7,10007bd4 <__copybits+0x74>
10007bc8:	20000015 	stw	zero,0(r4)
10007bcc:	21000104 	addi	r4,r4,4
10007bd0:	21fffd36 	bltu	r4,r7,10007bc8 <__alt_data_end+0xf8007bc8>
10007bd4:	f800283a 	ret

10007bd8 <__any_on>:
10007bd8:	20c00417 	ldw	r3,16(r4)
10007bdc:	2805d17a 	srai	r2,r5,5
10007be0:	21000504 	addi	r4,r4,20
10007be4:	18800d0e 	bge	r3,r2,10007c1c <__any_on+0x44>
10007be8:	18c7883a 	add	r3,r3,r3
10007bec:	18c7883a 	add	r3,r3,r3
10007bf0:	20c7883a 	add	r3,r4,r3
10007bf4:	20c0192e 	bgeu	r4,r3,10007c5c <__any_on+0x84>
10007bf8:	18bfff17 	ldw	r2,-4(r3)
10007bfc:	18ffff04 	addi	r3,r3,-4
10007c00:	1000041e 	bne	r2,zero,10007c14 <__any_on+0x3c>
10007c04:	20c0142e 	bgeu	r4,r3,10007c58 <__any_on+0x80>
10007c08:	18ffff04 	addi	r3,r3,-4
10007c0c:	19400017 	ldw	r5,0(r3)
10007c10:	283ffc26 	beq	r5,zero,10007c04 <__alt_data_end+0xf8007c04>
10007c14:	00800044 	movi	r2,1
10007c18:	f800283a 	ret
10007c1c:	10c00a0e 	bge	r2,r3,10007c48 <__any_on+0x70>
10007c20:	1085883a 	add	r2,r2,r2
10007c24:	1085883a 	add	r2,r2,r2
10007c28:	294007cc 	andi	r5,r5,31
10007c2c:	2087883a 	add	r3,r4,r2
10007c30:	283ff026 	beq	r5,zero,10007bf4 <__alt_data_end+0xf8007bf4>
10007c34:	19800017 	ldw	r6,0(r3)
10007c38:	3144d83a 	srl	r2,r6,r5
10007c3c:	114a983a 	sll	r5,r2,r5
10007c40:	317ff41e 	bne	r6,r5,10007c14 <__alt_data_end+0xf8007c14>
10007c44:	003feb06 	br	10007bf4 <__alt_data_end+0xf8007bf4>
10007c48:	1085883a 	add	r2,r2,r2
10007c4c:	1085883a 	add	r2,r2,r2
10007c50:	2087883a 	add	r3,r4,r2
10007c54:	003fe706 	br	10007bf4 <__alt_data_end+0xf8007bf4>
10007c58:	f800283a 	ret
10007c5c:	0005883a 	mov	r2,zero
10007c60:	f800283a 	ret

10007c64 <_realloc_r>:
10007c64:	defff604 	addi	sp,sp,-40
10007c68:	dc800215 	stw	r18,8(sp)
10007c6c:	dfc00915 	stw	ra,36(sp)
10007c70:	df000815 	stw	fp,32(sp)
10007c74:	ddc00715 	stw	r23,28(sp)
10007c78:	dd800615 	stw	r22,24(sp)
10007c7c:	dd400515 	stw	r21,20(sp)
10007c80:	dd000415 	stw	r20,16(sp)
10007c84:	dcc00315 	stw	r19,12(sp)
10007c88:	dc400115 	stw	r17,4(sp)
10007c8c:	dc000015 	stw	r16,0(sp)
10007c90:	3025883a 	mov	r18,r6
10007c94:	2800b726 	beq	r5,zero,10007f74 <_realloc_r+0x310>
10007c98:	282b883a 	mov	r21,r5
10007c9c:	2029883a 	mov	r20,r4
10007ca0:	000ddec0 	call	1000ddec <__malloc_lock>
10007ca4:	a8bfff17 	ldw	r2,-4(r21)
10007ca8:	043fff04 	movi	r16,-4
10007cac:	90c002c4 	addi	r3,r18,11
10007cb0:	01000584 	movi	r4,22
10007cb4:	acfffe04 	addi	r19,r21,-8
10007cb8:	1420703a 	and	r16,r2,r16
10007cbc:	20c0332e 	bgeu	r4,r3,10007d8c <_realloc_r+0x128>
10007cc0:	047ffe04 	movi	r17,-8
10007cc4:	1c62703a 	and	r17,r3,r17
10007cc8:	8807883a 	mov	r3,r17
10007ccc:	88005816 	blt	r17,zero,10007e30 <_realloc_r+0x1cc>
10007cd0:	8c805736 	bltu	r17,r18,10007e30 <_realloc_r+0x1cc>
10007cd4:	80c0300e 	bge	r16,r3,10007d98 <_realloc_r+0x134>
10007cd8:	07040074 	movhi	fp,4097
10007cdc:	e7135704 	addi	fp,fp,19804
10007ce0:	e1c00217 	ldw	r7,8(fp)
10007ce4:	9c09883a 	add	r4,r19,r16
10007ce8:	22000117 	ldw	r8,4(r4)
10007cec:	21c06326 	beq	r4,r7,10007e7c <_realloc_r+0x218>
10007cf0:	017fff84 	movi	r5,-2
10007cf4:	414a703a 	and	r5,r8,r5
10007cf8:	214b883a 	add	r5,r4,r5
10007cfc:	29800117 	ldw	r6,4(r5)
10007d00:	3180004c 	andi	r6,r6,1
10007d04:	30003f26 	beq	r6,zero,10007e04 <_realloc_r+0x1a0>
10007d08:	1080004c 	andi	r2,r2,1
10007d0c:	10008326 	beq	r2,zero,10007f1c <_realloc_r+0x2b8>
10007d10:	900b883a 	mov	r5,r18
10007d14:	a009883a 	mov	r4,r20
10007d18:	0005fac0 	call	10005fac <_malloc_r>
10007d1c:	1025883a 	mov	r18,r2
10007d20:	10011e26 	beq	r2,zero,1000819c <_realloc_r+0x538>
10007d24:	a93fff17 	ldw	r4,-4(r21)
10007d28:	10fffe04 	addi	r3,r2,-8
10007d2c:	00bfff84 	movi	r2,-2
10007d30:	2084703a 	and	r2,r4,r2
10007d34:	9885883a 	add	r2,r19,r2
10007d38:	1880ee26 	beq	r3,r2,100080f4 <_realloc_r+0x490>
10007d3c:	81bfff04 	addi	r6,r16,-4
10007d40:	00800904 	movi	r2,36
10007d44:	1180b836 	bltu	r2,r6,10008028 <_realloc_r+0x3c4>
10007d48:	00c004c4 	movi	r3,19
10007d4c:	19809636 	bltu	r3,r6,10007fa8 <_realloc_r+0x344>
10007d50:	9005883a 	mov	r2,r18
10007d54:	a807883a 	mov	r3,r21
10007d58:	19000017 	ldw	r4,0(r3)
10007d5c:	11000015 	stw	r4,0(r2)
10007d60:	19000117 	ldw	r4,4(r3)
10007d64:	11000115 	stw	r4,4(r2)
10007d68:	18c00217 	ldw	r3,8(r3)
10007d6c:	10c00215 	stw	r3,8(r2)
10007d70:	a80b883a 	mov	r5,r21
10007d74:	a009883a 	mov	r4,r20
10007d78:	00053c00 	call	100053c0 <_free_r>
10007d7c:	a009883a 	mov	r4,r20
10007d80:	000de100 	call	1000de10 <__malloc_unlock>
10007d84:	9005883a 	mov	r2,r18
10007d88:	00001206 	br	10007dd4 <_realloc_r+0x170>
10007d8c:	00c00404 	movi	r3,16
10007d90:	1823883a 	mov	r17,r3
10007d94:	003fce06 	br	10007cd0 <__alt_data_end+0xf8007cd0>
10007d98:	a825883a 	mov	r18,r21
10007d9c:	8445c83a 	sub	r2,r16,r17
10007da0:	00c003c4 	movi	r3,15
10007da4:	18802636 	bltu	r3,r2,10007e40 <_realloc_r+0x1dc>
10007da8:	99800117 	ldw	r6,4(r19)
10007dac:	9c07883a 	add	r3,r19,r16
10007db0:	3180004c 	andi	r6,r6,1
10007db4:	3420b03a 	or	r16,r6,r16
10007db8:	9c000115 	stw	r16,4(r19)
10007dbc:	18800117 	ldw	r2,4(r3)
10007dc0:	10800054 	ori	r2,r2,1
10007dc4:	18800115 	stw	r2,4(r3)
10007dc8:	a009883a 	mov	r4,r20
10007dcc:	000de100 	call	1000de10 <__malloc_unlock>
10007dd0:	9005883a 	mov	r2,r18
10007dd4:	dfc00917 	ldw	ra,36(sp)
10007dd8:	df000817 	ldw	fp,32(sp)
10007ddc:	ddc00717 	ldw	r23,28(sp)
10007de0:	dd800617 	ldw	r22,24(sp)
10007de4:	dd400517 	ldw	r21,20(sp)
10007de8:	dd000417 	ldw	r20,16(sp)
10007dec:	dcc00317 	ldw	r19,12(sp)
10007df0:	dc800217 	ldw	r18,8(sp)
10007df4:	dc400117 	ldw	r17,4(sp)
10007df8:	dc000017 	ldw	r16,0(sp)
10007dfc:	dec00a04 	addi	sp,sp,40
10007e00:	f800283a 	ret
10007e04:	017fff04 	movi	r5,-4
10007e08:	414a703a 	and	r5,r8,r5
10007e0c:	814d883a 	add	r6,r16,r5
10007e10:	30c01f16 	blt	r6,r3,10007e90 <_realloc_r+0x22c>
10007e14:	20800317 	ldw	r2,12(r4)
10007e18:	20c00217 	ldw	r3,8(r4)
10007e1c:	a825883a 	mov	r18,r21
10007e20:	3021883a 	mov	r16,r6
10007e24:	18800315 	stw	r2,12(r3)
10007e28:	10c00215 	stw	r3,8(r2)
10007e2c:	003fdb06 	br	10007d9c <__alt_data_end+0xf8007d9c>
10007e30:	00800304 	movi	r2,12
10007e34:	a0800015 	stw	r2,0(r20)
10007e38:	0005883a 	mov	r2,zero
10007e3c:	003fe506 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10007e40:	98c00117 	ldw	r3,4(r19)
10007e44:	9c4b883a 	add	r5,r19,r17
10007e48:	11000054 	ori	r4,r2,1
10007e4c:	18c0004c 	andi	r3,r3,1
10007e50:	1c62b03a 	or	r17,r3,r17
10007e54:	9c400115 	stw	r17,4(r19)
10007e58:	29000115 	stw	r4,4(r5)
10007e5c:	2885883a 	add	r2,r5,r2
10007e60:	10c00117 	ldw	r3,4(r2)
10007e64:	29400204 	addi	r5,r5,8
10007e68:	a009883a 	mov	r4,r20
10007e6c:	18c00054 	ori	r3,r3,1
10007e70:	10c00115 	stw	r3,4(r2)
10007e74:	00053c00 	call	100053c0 <_free_r>
10007e78:	003fd306 	br	10007dc8 <__alt_data_end+0xf8007dc8>
10007e7c:	017fff04 	movi	r5,-4
10007e80:	414a703a 	and	r5,r8,r5
10007e84:	89800404 	addi	r6,r17,16
10007e88:	8151883a 	add	r8,r16,r5
10007e8c:	4180590e 	bge	r8,r6,10007ff4 <_realloc_r+0x390>
10007e90:	1080004c 	andi	r2,r2,1
10007e94:	103f9e1e 	bne	r2,zero,10007d10 <__alt_data_end+0xf8007d10>
10007e98:	adbffe17 	ldw	r22,-8(r21)
10007e9c:	00bfff04 	movi	r2,-4
10007ea0:	9dadc83a 	sub	r22,r19,r22
10007ea4:	b1800117 	ldw	r6,4(r22)
10007ea8:	3084703a 	and	r2,r6,r2
10007eac:	20002026 	beq	r4,zero,10007f30 <_realloc_r+0x2cc>
10007eb0:	80af883a 	add	r23,r16,r2
10007eb4:	b96f883a 	add	r23,r23,r5
10007eb8:	21c05f26 	beq	r4,r7,10008038 <_realloc_r+0x3d4>
10007ebc:	b8c01c16 	blt	r23,r3,10007f30 <_realloc_r+0x2cc>
10007ec0:	20800317 	ldw	r2,12(r4)
10007ec4:	20c00217 	ldw	r3,8(r4)
10007ec8:	81bfff04 	addi	r6,r16,-4
10007ecc:	01000904 	movi	r4,36
10007ed0:	18800315 	stw	r2,12(r3)
10007ed4:	10c00215 	stw	r3,8(r2)
10007ed8:	b0c00217 	ldw	r3,8(r22)
10007edc:	b0800317 	ldw	r2,12(r22)
10007ee0:	b4800204 	addi	r18,r22,8
10007ee4:	18800315 	stw	r2,12(r3)
10007ee8:	10c00215 	stw	r3,8(r2)
10007eec:	21801b36 	bltu	r4,r6,10007f5c <_realloc_r+0x2f8>
10007ef0:	008004c4 	movi	r2,19
10007ef4:	1180352e 	bgeu	r2,r6,10007fcc <_realloc_r+0x368>
10007ef8:	a8800017 	ldw	r2,0(r21)
10007efc:	b0800215 	stw	r2,8(r22)
10007f00:	a8800117 	ldw	r2,4(r21)
10007f04:	b0800315 	stw	r2,12(r22)
10007f08:	008006c4 	movi	r2,27
10007f0c:	11807f36 	bltu	r2,r6,1000810c <_realloc_r+0x4a8>
10007f10:	b0800404 	addi	r2,r22,16
10007f14:	ad400204 	addi	r21,r21,8
10007f18:	00002d06 	br	10007fd0 <_realloc_r+0x36c>
10007f1c:	adbffe17 	ldw	r22,-8(r21)
10007f20:	00bfff04 	movi	r2,-4
10007f24:	9dadc83a 	sub	r22,r19,r22
10007f28:	b1000117 	ldw	r4,4(r22)
10007f2c:	2084703a 	and	r2,r4,r2
10007f30:	b03f7726 	beq	r22,zero,10007d10 <__alt_data_end+0xf8007d10>
10007f34:	80af883a 	add	r23,r16,r2
10007f38:	b8ff7516 	blt	r23,r3,10007d10 <__alt_data_end+0xf8007d10>
10007f3c:	b0800317 	ldw	r2,12(r22)
10007f40:	b0c00217 	ldw	r3,8(r22)
10007f44:	81bfff04 	addi	r6,r16,-4
10007f48:	01000904 	movi	r4,36
10007f4c:	18800315 	stw	r2,12(r3)
10007f50:	10c00215 	stw	r3,8(r2)
10007f54:	b4800204 	addi	r18,r22,8
10007f58:	21bfe52e 	bgeu	r4,r6,10007ef0 <__alt_data_end+0xf8007ef0>
10007f5c:	a80b883a 	mov	r5,r21
10007f60:	9009883a 	mov	r4,r18
10007f64:	00069e40 	call	100069e4 <memmove>
10007f68:	b821883a 	mov	r16,r23
10007f6c:	b027883a 	mov	r19,r22
10007f70:	003f8a06 	br	10007d9c <__alt_data_end+0xf8007d9c>
10007f74:	300b883a 	mov	r5,r6
10007f78:	dfc00917 	ldw	ra,36(sp)
10007f7c:	df000817 	ldw	fp,32(sp)
10007f80:	ddc00717 	ldw	r23,28(sp)
10007f84:	dd800617 	ldw	r22,24(sp)
10007f88:	dd400517 	ldw	r21,20(sp)
10007f8c:	dd000417 	ldw	r20,16(sp)
10007f90:	dcc00317 	ldw	r19,12(sp)
10007f94:	dc800217 	ldw	r18,8(sp)
10007f98:	dc400117 	ldw	r17,4(sp)
10007f9c:	dc000017 	ldw	r16,0(sp)
10007fa0:	dec00a04 	addi	sp,sp,40
10007fa4:	0005fac1 	jmpi	10005fac <_malloc_r>
10007fa8:	a8c00017 	ldw	r3,0(r21)
10007fac:	90c00015 	stw	r3,0(r18)
10007fb0:	a8c00117 	ldw	r3,4(r21)
10007fb4:	90c00115 	stw	r3,4(r18)
10007fb8:	00c006c4 	movi	r3,27
10007fbc:	19804536 	bltu	r3,r6,100080d4 <_realloc_r+0x470>
10007fc0:	90800204 	addi	r2,r18,8
10007fc4:	a8c00204 	addi	r3,r21,8
10007fc8:	003f6306 	br	10007d58 <__alt_data_end+0xf8007d58>
10007fcc:	9005883a 	mov	r2,r18
10007fd0:	a8c00017 	ldw	r3,0(r21)
10007fd4:	b821883a 	mov	r16,r23
10007fd8:	b027883a 	mov	r19,r22
10007fdc:	10c00015 	stw	r3,0(r2)
10007fe0:	a8c00117 	ldw	r3,4(r21)
10007fe4:	10c00115 	stw	r3,4(r2)
10007fe8:	a8c00217 	ldw	r3,8(r21)
10007fec:	10c00215 	stw	r3,8(r2)
10007ff0:	003f6a06 	br	10007d9c <__alt_data_end+0xf8007d9c>
10007ff4:	9c67883a 	add	r19,r19,r17
10007ff8:	4445c83a 	sub	r2,r8,r17
10007ffc:	e4c00215 	stw	r19,8(fp)
10008000:	10800054 	ori	r2,r2,1
10008004:	98800115 	stw	r2,4(r19)
10008008:	a8bfff17 	ldw	r2,-4(r21)
1000800c:	a009883a 	mov	r4,r20
10008010:	1080004c 	andi	r2,r2,1
10008014:	1462b03a 	or	r17,r2,r17
10008018:	ac7fff15 	stw	r17,-4(r21)
1000801c:	000de100 	call	1000de10 <__malloc_unlock>
10008020:	a805883a 	mov	r2,r21
10008024:	003f6b06 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008028:	a80b883a 	mov	r5,r21
1000802c:	9009883a 	mov	r4,r18
10008030:	00069e40 	call	100069e4 <memmove>
10008034:	003f4e06 	br	10007d70 <__alt_data_end+0xf8007d70>
10008038:	89000404 	addi	r4,r17,16
1000803c:	b93fbc16 	blt	r23,r4,10007f30 <__alt_data_end+0xf8007f30>
10008040:	b0800317 	ldw	r2,12(r22)
10008044:	b0c00217 	ldw	r3,8(r22)
10008048:	81bfff04 	addi	r6,r16,-4
1000804c:	01000904 	movi	r4,36
10008050:	18800315 	stw	r2,12(r3)
10008054:	10c00215 	stw	r3,8(r2)
10008058:	b4800204 	addi	r18,r22,8
1000805c:	21804336 	bltu	r4,r6,1000816c <_realloc_r+0x508>
10008060:	008004c4 	movi	r2,19
10008064:	11803f2e 	bgeu	r2,r6,10008164 <_realloc_r+0x500>
10008068:	a8800017 	ldw	r2,0(r21)
1000806c:	b0800215 	stw	r2,8(r22)
10008070:	a8800117 	ldw	r2,4(r21)
10008074:	b0800315 	stw	r2,12(r22)
10008078:	008006c4 	movi	r2,27
1000807c:	11803f36 	bltu	r2,r6,1000817c <_realloc_r+0x518>
10008080:	b0800404 	addi	r2,r22,16
10008084:	ad400204 	addi	r21,r21,8
10008088:	a8c00017 	ldw	r3,0(r21)
1000808c:	10c00015 	stw	r3,0(r2)
10008090:	a8c00117 	ldw	r3,4(r21)
10008094:	10c00115 	stw	r3,4(r2)
10008098:	a8c00217 	ldw	r3,8(r21)
1000809c:	10c00215 	stw	r3,8(r2)
100080a0:	b447883a 	add	r3,r22,r17
100080a4:	bc45c83a 	sub	r2,r23,r17
100080a8:	e0c00215 	stw	r3,8(fp)
100080ac:	10800054 	ori	r2,r2,1
100080b0:	18800115 	stw	r2,4(r3)
100080b4:	b0800117 	ldw	r2,4(r22)
100080b8:	a009883a 	mov	r4,r20
100080bc:	1080004c 	andi	r2,r2,1
100080c0:	1462b03a 	or	r17,r2,r17
100080c4:	b4400115 	stw	r17,4(r22)
100080c8:	000de100 	call	1000de10 <__malloc_unlock>
100080cc:	9005883a 	mov	r2,r18
100080d0:	003f4006 	br	10007dd4 <__alt_data_end+0xf8007dd4>
100080d4:	a8c00217 	ldw	r3,8(r21)
100080d8:	90c00215 	stw	r3,8(r18)
100080dc:	a8c00317 	ldw	r3,12(r21)
100080e0:	90c00315 	stw	r3,12(r18)
100080e4:	30801126 	beq	r6,r2,1000812c <_realloc_r+0x4c8>
100080e8:	90800404 	addi	r2,r18,16
100080ec:	a8c00404 	addi	r3,r21,16
100080f0:	003f1906 	br	10007d58 <__alt_data_end+0xf8007d58>
100080f4:	90ffff17 	ldw	r3,-4(r18)
100080f8:	00bfff04 	movi	r2,-4
100080fc:	a825883a 	mov	r18,r21
10008100:	1884703a 	and	r2,r3,r2
10008104:	80a1883a 	add	r16,r16,r2
10008108:	003f2406 	br	10007d9c <__alt_data_end+0xf8007d9c>
1000810c:	a8800217 	ldw	r2,8(r21)
10008110:	b0800415 	stw	r2,16(r22)
10008114:	a8800317 	ldw	r2,12(r21)
10008118:	b0800515 	stw	r2,20(r22)
1000811c:	31000a26 	beq	r6,r4,10008148 <_realloc_r+0x4e4>
10008120:	b0800604 	addi	r2,r22,24
10008124:	ad400404 	addi	r21,r21,16
10008128:	003fa906 	br	10007fd0 <__alt_data_end+0xf8007fd0>
1000812c:	a9000417 	ldw	r4,16(r21)
10008130:	90800604 	addi	r2,r18,24
10008134:	a8c00604 	addi	r3,r21,24
10008138:	91000415 	stw	r4,16(r18)
1000813c:	a9000517 	ldw	r4,20(r21)
10008140:	91000515 	stw	r4,20(r18)
10008144:	003f0406 	br	10007d58 <__alt_data_end+0xf8007d58>
10008148:	a8c00417 	ldw	r3,16(r21)
1000814c:	ad400604 	addi	r21,r21,24
10008150:	b0800804 	addi	r2,r22,32
10008154:	b0c00615 	stw	r3,24(r22)
10008158:	a8ffff17 	ldw	r3,-4(r21)
1000815c:	b0c00715 	stw	r3,28(r22)
10008160:	003f9b06 	br	10007fd0 <__alt_data_end+0xf8007fd0>
10008164:	9005883a 	mov	r2,r18
10008168:	003fc706 	br	10008088 <__alt_data_end+0xf8008088>
1000816c:	a80b883a 	mov	r5,r21
10008170:	9009883a 	mov	r4,r18
10008174:	00069e40 	call	100069e4 <memmove>
10008178:	003fc906 	br	100080a0 <__alt_data_end+0xf80080a0>
1000817c:	a8800217 	ldw	r2,8(r21)
10008180:	b0800415 	stw	r2,16(r22)
10008184:	a8800317 	ldw	r2,12(r21)
10008188:	b0800515 	stw	r2,20(r22)
1000818c:	31000726 	beq	r6,r4,100081ac <_realloc_r+0x548>
10008190:	b0800604 	addi	r2,r22,24
10008194:	ad400404 	addi	r21,r21,16
10008198:	003fbb06 	br	10008088 <__alt_data_end+0xf8008088>
1000819c:	a009883a 	mov	r4,r20
100081a0:	000de100 	call	1000de10 <__malloc_unlock>
100081a4:	0005883a 	mov	r2,zero
100081a8:	003f0a06 	br	10007dd4 <__alt_data_end+0xf8007dd4>
100081ac:	a8c00417 	ldw	r3,16(r21)
100081b0:	ad400604 	addi	r21,r21,24
100081b4:	b0800804 	addi	r2,r22,32
100081b8:	b0c00615 	stw	r3,24(r22)
100081bc:	a8ffff17 	ldw	r3,-4(r21)
100081c0:	b0c00715 	stw	r3,28(r22)
100081c4:	003fb006 	br	10008088 <__alt_data_end+0xf8008088>

100081c8 <__fpclassifyd>:
100081c8:	00a00034 	movhi	r2,32768
100081cc:	10bfffc4 	addi	r2,r2,-1
100081d0:	2884703a 	and	r2,r5,r2
100081d4:	10000726 	beq	r2,zero,100081f4 <__fpclassifyd+0x2c>
100081d8:	00fffc34 	movhi	r3,65520
100081dc:	019ff834 	movhi	r6,32736
100081e0:	28c7883a 	add	r3,r5,r3
100081e4:	31bfffc4 	addi	r6,r6,-1
100081e8:	30c00536 	bltu	r6,r3,10008200 <__fpclassifyd+0x38>
100081ec:	00800104 	movi	r2,4
100081f0:	f800283a 	ret
100081f4:	2000021e 	bne	r4,zero,10008200 <__fpclassifyd+0x38>
100081f8:	00800084 	movi	r2,2
100081fc:	f800283a 	ret
10008200:	00dffc34 	movhi	r3,32752
10008204:	019ff834 	movhi	r6,32736
10008208:	28cb883a 	add	r5,r5,r3
1000820c:	31bfffc4 	addi	r6,r6,-1
10008210:	317ff62e 	bgeu	r6,r5,100081ec <__alt_data_end+0xf80081ec>
10008214:	01400434 	movhi	r5,16
10008218:	297fffc4 	addi	r5,r5,-1
1000821c:	28800236 	bltu	r5,r2,10008228 <__fpclassifyd+0x60>
10008220:	008000c4 	movi	r2,3
10008224:	f800283a 	ret
10008228:	10c00226 	beq	r2,r3,10008234 <__fpclassifyd+0x6c>
1000822c:	0005883a 	mov	r2,zero
10008230:	f800283a 	ret
10008234:	2005003a 	cmpeq	r2,r4,zero
10008238:	f800283a 	ret

1000823c <_sbrk_r>:
1000823c:	defffd04 	addi	sp,sp,-12
10008240:	dc000015 	stw	r16,0(sp)
10008244:	04040074 	movhi	r16,4097
10008248:	dc400115 	stw	r17,4(sp)
1000824c:	841ff004 	addi	r16,r16,32704
10008250:	2023883a 	mov	r17,r4
10008254:	2809883a 	mov	r4,r5
10008258:	dfc00215 	stw	ra,8(sp)
1000825c:	80000015 	stw	zero,0(r16)
10008260:	000dfd00 	call	1000dfd0 <sbrk>
10008264:	00ffffc4 	movi	r3,-1
10008268:	10c00526 	beq	r2,r3,10008280 <_sbrk_r+0x44>
1000826c:	dfc00217 	ldw	ra,8(sp)
10008270:	dc400117 	ldw	r17,4(sp)
10008274:	dc000017 	ldw	r16,0(sp)
10008278:	dec00304 	addi	sp,sp,12
1000827c:	f800283a 	ret
10008280:	80c00017 	ldw	r3,0(r16)
10008284:	183ff926 	beq	r3,zero,1000826c <__alt_data_end+0xf800826c>
10008288:	88c00015 	stw	r3,0(r17)
1000828c:	003ff706 	br	1000826c <__alt_data_end+0xf800826c>

10008290 <__sread>:
10008290:	defffe04 	addi	sp,sp,-8
10008294:	dc000015 	stw	r16,0(sp)
10008298:	2821883a 	mov	r16,r5
1000829c:	2940038f 	ldh	r5,14(r5)
100082a0:	dfc00115 	stw	ra,4(sp)
100082a4:	000a0840 	call	1000a084 <_read_r>
100082a8:	10000716 	blt	r2,zero,100082c8 <__sread+0x38>
100082ac:	80c01417 	ldw	r3,80(r16)
100082b0:	1887883a 	add	r3,r3,r2
100082b4:	80c01415 	stw	r3,80(r16)
100082b8:	dfc00117 	ldw	ra,4(sp)
100082bc:	dc000017 	ldw	r16,0(sp)
100082c0:	dec00204 	addi	sp,sp,8
100082c4:	f800283a 	ret
100082c8:	80c0030b 	ldhu	r3,12(r16)
100082cc:	18fbffcc 	andi	r3,r3,61439
100082d0:	80c0030d 	sth	r3,12(r16)
100082d4:	dfc00117 	ldw	ra,4(sp)
100082d8:	dc000017 	ldw	r16,0(sp)
100082dc:	dec00204 	addi	sp,sp,8
100082e0:	f800283a 	ret

100082e4 <__seofread>:
100082e4:	0005883a 	mov	r2,zero
100082e8:	f800283a 	ret

100082ec <__swrite>:
100082ec:	2880030b 	ldhu	r2,12(r5)
100082f0:	defffb04 	addi	sp,sp,-20
100082f4:	dcc00315 	stw	r19,12(sp)
100082f8:	dc800215 	stw	r18,8(sp)
100082fc:	dc400115 	stw	r17,4(sp)
10008300:	dc000015 	stw	r16,0(sp)
10008304:	dfc00415 	stw	ra,16(sp)
10008308:	10c0400c 	andi	r3,r2,256
1000830c:	2821883a 	mov	r16,r5
10008310:	2023883a 	mov	r17,r4
10008314:	3025883a 	mov	r18,r6
10008318:	3827883a 	mov	r19,r7
1000831c:	18000526 	beq	r3,zero,10008334 <__swrite+0x48>
10008320:	2940038f 	ldh	r5,14(r5)
10008324:	01c00084 	movi	r7,2
10008328:	000d883a 	mov	r6,zero
1000832c:	000a0240 	call	1000a024 <_lseek_r>
10008330:	8080030b 	ldhu	r2,12(r16)
10008334:	8140038f 	ldh	r5,14(r16)
10008338:	10bbffcc 	andi	r2,r2,61439
1000833c:	980f883a 	mov	r7,r19
10008340:	900d883a 	mov	r6,r18
10008344:	8809883a 	mov	r4,r17
10008348:	8080030d 	sth	r2,12(r16)
1000834c:	dfc00417 	ldw	ra,16(sp)
10008350:	dcc00317 	ldw	r19,12(sp)
10008354:	dc800217 	ldw	r18,8(sp)
10008358:	dc400117 	ldw	r17,4(sp)
1000835c:	dc000017 	ldw	r16,0(sp)
10008360:	dec00504 	addi	sp,sp,20
10008364:	0009af01 	jmpi	10009af0 <_write_r>

10008368 <__sseek>:
10008368:	defffe04 	addi	sp,sp,-8
1000836c:	dc000015 	stw	r16,0(sp)
10008370:	2821883a 	mov	r16,r5
10008374:	2940038f 	ldh	r5,14(r5)
10008378:	dfc00115 	stw	ra,4(sp)
1000837c:	000a0240 	call	1000a024 <_lseek_r>
10008380:	00ffffc4 	movi	r3,-1
10008384:	10c00826 	beq	r2,r3,100083a8 <__sseek+0x40>
10008388:	80c0030b 	ldhu	r3,12(r16)
1000838c:	80801415 	stw	r2,80(r16)
10008390:	18c40014 	ori	r3,r3,4096
10008394:	80c0030d 	sth	r3,12(r16)
10008398:	dfc00117 	ldw	ra,4(sp)
1000839c:	dc000017 	ldw	r16,0(sp)
100083a0:	dec00204 	addi	sp,sp,8
100083a4:	f800283a 	ret
100083a8:	80c0030b 	ldhu	r3,12(r16)
100083ac:	18fbffcc 	andi	r3,r3,61439
100083b0:	80c0030d 	sth	r3,12(r16)
100083b4:	dfc00117 	ldw	ra,4(sp)
100083b8:	dc000017 	ldw	r16,0(sp)
100083bc:	dec00204 	addi	sp,sp,8
100083c0:	f800283a 	ret

100083c4 <__sclose>:
100083c4:	2940038f 	ldh	r5,14(r5)
100083c8:	0009b501 	jmpi	10009b50 <_close_r>

100083cc <strcmp>:
100083cc:	2144b03a 	or	r2,r4,r5
100083d0:	108000cc 	andi	r2,r2,3
100083d4:	1000171e 	bne	r2,zero,10008434 <strcmp+0x68>
100083d8:	20800017 	ldw	r2,0(r4)
100083dc:	28c00017 	ldw	r3,0(r5)
100083e0:	10c0141e 	bne	r2,r3,10008434 <strcmp+0x68>
100083e4:	027fbff4 	movhi	r9,65279
100083e8:	4a7fbfc4 	addi	r9,r9,-257
100083ec:	0086303a 	nor	r3,zero,r2
100083f0:	02202074 	movhi	r8,32897
100083f4:	1245883a 	add	r2,r2,r9
100083f8:	42202004 	addi	r8,r8,-32640
100083fc:	10c4703a 	and	r2,r2,r3
10008400:	1204703a 	and	r2,r2,r8
10008404:	10000226 	beq	r2,zero,10008410 <strcmp+0x44>
10008408:	00002306 	br	10008498 <strcmp+0xcc>
1000840c:	1000221e 	bne	r2,zero,10008498 <strcmp+0xcc>
10008410:	21000104 	addi	r4,r4,4
10008414:	20c00017 	ldw	r3,0(r4)
10008418:	29400104 	addi	r5,r5,4
1000841c:	29800017 	ldw	r6,0(r5)
10008420:	1a4f883a 	add	r7,r3,r9
10008424:	00c4303a 	nor	r2,zero,r3
10008428:	3884703a 	and	r2,r7,r2
1000842c:	1204703a 	and	r2,r2,r8
10008430:	19bff626 	beq	r3,r6,1000840c <__alt_data_end+0xf800840c>
10008434:	20800003 	ldbu	r2,0(r4)
10008438:	10c03fcc 	andi	r3,r2,255
1000843c:	18c0201c 	xori	r3,r3,128
10008440:	18ffe004 	addi	r3,r3,-128
10008444:	18000c26 	beq	r3,zero,10008478 <strcmp+0xac>
10008448:	29800007 	ldb	r6,0(r5)
1000844c:	19800326 	beq	r3,r6,1000845c <strcmp+0x90>
10008450:	00001306 	br	100084a0 <strcmp+0xd4>
10008454:	29800007 	ldb	r6,0(r5)
10008458:	11800b1e 	bne	r2,r6,10008488 <strcmp+0xbc>
1000845c:	21000044 	addi	r4,r4,1
10008460:	20c00003 	ldbu	r3,0(r4)
10008464:	29400044 	addi	r5,r5,1
10008468:	18803fcc 	andi	r2,r3,255
1000846c:	1080201c 	xori	r2,r2,128
10008470:	10bfe004 	addi	r2,r2,-128
10008474:	103ff71e 	bne	r2,zero,10008454 <__alt_data_end+0xf8008454>
10008478:	0007883a 	mov	r3,zero
1000847c:	28800003 	ldbu	r2,0(r5)
10008480:	1885c83a 	sub	r2,r3,r2
10008484:	f800283a 	ret
10008488:	28800003 	ldbu	r2,0(r5)
1000848c:	18c03fcc 	andi	r3,r3,255
10008490:	1885c83a 	sub	r2,r3,r2
10008494:	f800283a 	ret
10008498:	0005883a 	mov	r2,zero
1000849c:	f800283a 	ret
100084a0:	10c03fcc 	andi	r3,r2,255
100084a4:	003ff506 	br	1000847c <__alt_data_end+0xf800847c>

100084a8 <__sprint_r.part.0>:
100084a8:	28801917 	ldw	r2,100(r5)
100084ac:	defff604 	addi	sp,sp,-40
100084b0:	dd400515 	stw	r21,20(sp)
100084b4:	dfc00915 	stw	ra,36(sp)
100084b8:	df000815 	stw	fp,32(sp)
100084bc:	ddc00715 	stw	r23,28(sp)
100084c0:	dd800615 	stw	r22,24(sp)
100084c4:	dd000415 	stw	r20,16(sp)
100084c8:	dcc00315 	stw	r19,12(sp)
100084cc:	dc800215 	stw	r18,8(sp)
100084d0:	dc400115 	stw	r17,4(sp)
100084d4:	dc000015 	stw	r16,0(sp)
100084d8:	1088000c 	andi	r2,r2,8192
100084dc:	302b883a 	mov	r21,r6
100084e0:	10002e26 	beq	r2,zero,1000859c <__sprint_r.part.0+0xf4>
100084e4:	30800217 	ldw	r2,8(r6)
100084e8:	35800017 	ldw	r22,0(r6)
100084ec:	10002926 	beq	r2,zero,10008594 <__sprint_r.part.0+0xec>
100084f0:	2827883a 	mov	r19,r5
100084f4:	2029883a 	mov	r20,r4
100084f8:	b5c00104 	addi	r23,r22,4
100084fc:	04bfffc4 	movi	r18,-1
10008500:	bc400017 	ldw	r17,0(r23)
10008504:	b4000017 	ldw	r16,0(r22)
10008508:	0039883a 	mov	fp,zero
1000850c:	8822d0ba 	srli	r17,r17,2
10008510:	8800031e 	bne	r17,zero,10008520 <__sprint_r.part.0+0x78>
10008514:	00001806 	br	10008578 <__sprint_r.part.0+0xd0>
10008518:	84000104 	addi	r16,r16,4
1000851c:	8f001526 	beq	r17,fp,10008574 <__sprint_r.part.0+0xcc>
10008520:	81400017 	ldw	r5,0(r16)
10008524:	980d883a 	mov	r6,r19
10008528:	a009883a 	mov	r4,r20
1000852c:	0009ed00 	call	10009ed0 <_fputwc_r>
10008530:	e7000044 	addi	fp,fp,1
10008534:	14bff81e 	bne	r2,r18,10008518 <__alt_data_end+0xf8008518>
10008538:	9005883a 	mov	r2,r18
1000853c:	a8000215 	stw	zero,8(r21)
10008540:	a8000115 	stw	zero,4(r21)
10008544:	dfc00917 	ldw	ra,36(sp)
10008548:	df000817 	ldw	fp,32(sp)
1000854c:	ddc00717 	ldw	r23,28(sp)
10008550:	dd800617 	ldw	r22,24(sp)
10008554:	dd400517 	ldw	r21,20(sp)
10008558:	dd000417 	ldw	r20,16(sp)
1000855c:	dcc00317 	ldw	r19,12(sp)
10008560:	dc800217 	ldw	r18,8(sp)
10008564:	dc400117 	ldw	r17,4(sp)
10008568:	dc000017 	ldw	r16,0(sp)
1000856c:	dec00a04 	addi	sp,sp,40
10008570:	f800283a 	ret
10008574:	a8800217 	ldw	r2,8(r21)
10008578:	8c63883a 	add	r17,r17,r17
1000857c:	8c63883a 	add	r17,r17,r17
10008580:	1445c83a 	sub	r2,r2,r17
10008584:	a8800215 	stw	r2,8(r21)
10008588:	b5800204 	addi	r22,r22,8
1000858c:	bdc00204 	addi	r23,r23,8
10008590:	103fdb1e 	bne	r2,zero,10008500 <__alt_data_end+0xf8008500>
10008594:	0005883a 	mov	r2,zero
10008598:	003fe806 	br	1000853c <__alt_data_end+0xf800853c>
1000859c:	00056d00 	call	100056d0 <__sfvwrite_r>
100085a0:	003fe606 	br	1000853c <__alt_data_end+0xf800853c>

100085a4 <__sprint_r>:
100085a4:	30c00217 	ldw	r3,8(r6)
100085a8:	18000126 	beq	r3,zero,100085b0 <__sprint_r+0xc>
100085ac:	00084a81 	jmpi	100084a8 <__sprint_r.part.0>
100085b0:	30000115 	stw	zero,4(r6)
100085b4:	0005883a 	mov	r2,zero
100085b8:	f800283a 	ret

100085bc <___vfiprintf_internal_r>:
100085bc:	deffc904 	addi	sp,sp,-220
100085c0:	df003515 	stw	fp,212(sp)
100085c4:	dd003115 	stw	r20,196(sp)
100085c8:	dfc03615 	stw	ra,216(sp)
100085cc:	ddc03415 	stw	r23,208(sp)
100085d0:	dd803315 	stw	r22,204(sp)
100085d4:	dd403215 	stw	r21,200(sp)
100085d8:	dcc03015 	stw	r19,192(sp)
100085dc:	dc802f15 	stw	r18,188(sp)
100085e0:	dc402e15 	stw	r17,184(sp)
100085e4:	dc002d15 	stw	r16,180(sp)
100085e8:	d9002015 	stw	r4,128(sp)
100085ec:	d9c02215 	stw	r7,136(sp)
100085f0:	2829883a 	mov	r20,r5
100085f4:	3039883a 	mov	fp,r6
100085f8:	20000226 	beq	r4,zero,10008604 <___vfiprintf_internal_r+0x48>
100085fc:	20800e17 	ldw	r2,56(r4)
10008600:	1000cf26 	beq	r2,zero,10008940 <___vfiprintf_internal_r+0x384>
10008604:	a080030b 	ldhu	r2,12(r20)
10008608:	10c8000c 	andi	r3,r2,8192
1000860c:	1800061e 	bne	r3,zero,10008628 <___vfiprintf_internal_r+0x6c>
10008610:	a1001917 	ldw	r4,100(r20)
10008614:	00f7ffc4 	movi	r3,-8193
10008618:	10880014 	ori	r2,r2,8192
1000861c:	20c6703a 	and	r3,r4,r3
10008620:	a080030d 	sth	r2,12(r20)
10008624:	a0c01915 	stw	r3,100(r20)
10008628:	10c0020c 	andi	r3,r2,8
1000862c:	1800a926 	beq	r3,zero,100088d4 <___vfiprintf_internal_r+0x318>
10008630:	a0c00417 	ldw	r3,16(r20)
10008634:	1800a726 	beq	r3,zero,100088d4 <___vfiprintf_internal_r+0x318>
10008638:	1080068c 	andi	r2,r2,26
1000863c:	00c00284 	movi	r3,10
10008640:	10c0ac26 	beq	r2,r3,100088f4 <___vfiprintf_internal_r+0x338>
10008644:	da801a04 	addi	r10,sp,104
10008648:	da801e15 	stw	r10,120(sp)
1000864c:	d8801e17 	ldw	r2,120(sp)
10008650:	da8019c4 	addi	r10,sp,103
10008654:	05840074 	movhi	r22,4097
10008658:	05c40074 	movhi	r23,4097
1000865c:	da801f15 	stw	r10,124(sp)
10008660:	1295c83a 	sub	r10,r2,r10
10008664:	b591ce04 	addi	r22,r22,18232
10008668:	bdd1ca04 	addi	r23,r23,18216
1000866c:	dec01a15 	stw	sp,104(sp)
10008670:	d8001c15 	stw	zero,112(sp)
10008674:	d8001b15 	stw	zero,108(sp)
10008678:	d8002615 	stw	zero,152(sp)
1000867c:	d8002315 	stw	zero,140(sp)
10008680:	da802715 	stw	r10,156(sp)
10008684:	d811883a 	mov	r8,sp
10008688:	dd002115 	stw	r20,132(sp)
1000868c:	e021883a 	mov	r16,fp
10008690:	80800007 	ldb	r2,0(r16)
10008694:	1003ea26 	beq	r2,zero,10009640 <___vfiprintf_internal_r+0x1084>
10008698:	00c00944 	movi	r3,37
1000869c:	8025883a 	mov	r18,r16
100086a0:	10c0021e 	bne	r2,r3,100086ac <___vfiprintf_internal_r+0xf0>
100086a4:	00001606 	br	10008700 <___vfiprintf_internal_r+0x144>
100086a8:	10c00326 	beq	r2,r3,100086b8 <___vfiprintf_internal_r+0xfc>
100086ac:	94800044 	addi	r18,r18,1
100086b0:	90800007 	ldb	r2,0(r18)
100086b4:	103ffc1e 	bne	r2,zero,100086a8 <__alt_data_end+0xf80086a8>
100086b8:	9423c83a 	sub	r17,r18,r16
100086bc:	88001026 	beq	r17,zero,10008700 <___vfiprintf_internal_r+0x144>
100086c0:	d8c01c17 	ldw	r3,112(sp)
100086c4:	d8801b17 	ldw	r2,108(sp)
100086c8:	44000015 	stw	r16,0(r8)
100086cc:	88c7883a 	add	r3,r17,r3
100086d0:	10800044 	addi	r2,r2,1
100086d4:	44400115 	stw	r17,4(r8)
100086d8:	d8c01c15 	stw	r3,112(sp)
100086dc:	d8801b15 	stw	r2,108(sp)
100086e0:	010001c4 	movi	r4,7
100086e4:	2080760e 	bge	r4,r2,100088c0 <___vfiprintf_internal_r+0x304>
100086e8:	1803821e 	bne	r3,zero,100094f4 <___vfiprintf_internal_r+0xf38>
100086ec:	da802317 	ldw	r10,140(sp)
100086f0:	d8001b15 	stw	zero,108(sp)
100086f4:	d811883a 	mov	r8,sp
100086f8:	5455883a 	add	r10,r10,r17
100086fc:	da802315 	stw	r10,140(sp)
10008700:	90800007 	ldb	r2,0(r18)
10008704:	10044626 	beq	r2,zero,10009820 <___vfiprintf_internal_r+0x1264>
10008708:	90c00047 	ldb	r3,1(r18)
1000870c:	94000044 	addi	r16,r18,1
10008710:	d8001d85 	stb	zero,118(sp)
10008714:	0009883a 	mov	r4,zero
10008718:	000f883a 	mov	r7,zero
1000871c:	027fffc4 	movi	r9,-1
10008720:	0023883a 	mov	r17,zero
10008724:	0029883a 	mov	r20,zero
10008728:	01401604 	movi	r5,88
1000872c:	01800244 	movi	r6,9
10008730:	03400a84 	movi	r13,42
10008734:	03001b04 	movi	r12,108
10008738:	84000044 	addi	r16,r16,1
1000873c:	18bff804 	addi	r2,r3,-32
10008740:	28827336 	bltu	r5,r2,10009110 <___vfiprintf_internal_r+0xb54>
10008744:	100490ba 	slli	r2,r2,2
10008748:	02840074 	movhi	r10,4097
1000874c:	52a1d704 	addi	r10,r10,-30884
10008750:	1285883a 	add	r2,r2,r10
10008754:	10800017 	ldw	r2,0(r2)
10008758:	1000683a 	jmp	r2
1000875c:	10008e44 	addi	zero,r2,569
10008760:	10009110 	cmplti	zero,r2,580
10008764:	10009110 	cmplti	zero,r2,580
10008768:	10008e64 	muli	zero,r2,569
1000876c:	10009110 	cmplti	zero,r2,580
10008770:	10009110 	cmplti	zero,r2,580
10008774:	10009110 	cmplti	zero,r2,580
10008778:	10009110 	cmplti	zero,r2,580
1000877c:	10009110 	cmplti	zero,r2,580
10008780:	10009110 	cmplti	zero,r2,580
10008784:	1000904c 	andi	zero,r2,577
10008788:	10009068 	cmpgeui	zero,r2,577
1000878c:	10009110 	cmplti	zero,r2,580
10008790:	10008950 	cmplti	zero,r2,549
10008794:	10009078 	rdprs	zero,r2,577
10008798:	10009110 	cmplti	zero,r2,580
1000879c:	10008e70 	cmpltui	zero,r2,569
100087a0:	10008e7c 	xorhi	zero,r2,569
100087a4:	10008e7c 	xorhi	zero,r2,569
100087a8:	10008e7c 	xorhi	zero,r2,569
100087ac:	10008e7c 	xorhi	zero,r2,569
100087b0:	10008e7c 	xorhi	zero,r2,569
100087b4:	10008e7c 	xorhi	zero,r2,569
100087b8:	10008e7c 	xorhi	zero,r2,569
100087bc:	10008e7c 	xorhi	zero,r2,569
100087c0:	10008e7c 	xorhi	zero,r2,569
100087c4:	10009110 	cmplti	zero,r2,580
100087c8:	10009110 	cmplti	zero,r2,580
100087cc:	10009110 	cmplti	zero,r2,580
100087d0:	10009110 	cmplti	zero,r2,580
100087d4:	10009110 	cmplti	zero,r2,580
100087d8:	10009110 	cmplti	zero,r2,580
100087dc:	10009110 	cmplti	zero,r2,580
100087e0:	10009110 	cmplti	zero,r2,580
100087e4:	10009110 	cmplti	zero,r2,580
100087e8:	10009110 	cmplti	zero,r2,580
100087ec:	10008ea8 	cmpgeui	zero,r2,570
100087f0:	10009110 	cmplti	zero,r2,580
100087f4:	10009110 	cmplti	zero,r2,580
100087f8:	10009110 	cmplti	zero,r2,580
100087fc:	10009110 	cmplti	zero,r2,580
10008800:	10009110 	cmplti	zero,r2,580
10008804:	10009110 	cmplti	zero,r2,580
10008808:	10009110 	cmplti	zero,r2,580
1000880c:	10009110 	cmplti	zero,r2,580
10008810:	10009110 	cmplti	zero,r2,580
10008814:	10009110 	cmplti	zero,r2,580
10008818:	10008ee0 	cmpeqi	zero,r2,571
1000881c:	10009110 	cmplti	zero,r2,580
10008820:	10009110 	cmplti	zero,r2,580
10008824:	10009110 	cmplti	zero,r2,580
10008828:	10009110 	cmplti	zero,r2,580
1000882c:	10009110 	cmplti	zero,r2,580
10008830:	10008f38 	rdprs	zero,r2,572
10008834:	10009110 	cmplti	zero,r2,580
10008838:	10009110 	cmplti	zero,r2,580
1000883c:	10008fa8 	cmpgeui	zero,r2,574
10008840:	10009110 	cmplti	zero,r2,580
10008844:	10009110 	cmplti	zero,r2,580
10008848:	10009110 	cmplti	zero,r2,580
1000884c:	10009110 	cmplti	zero,r2,580
10008850:	10009110 	cmplti	zero,r2,580
10008854:	10009110 	cmplti	zero,r2,580
10008858:	10009110 	cmplti	zero,r2,580
1000885c:	10009110 	cmplti	zero,r2,580
10008860:	10009110 	cmplti	zero,r2,580
10008864:	10009110 	cmplti	zero,r2,580
10008868:	10008d54 	ori	zero,r2,565
1000886c:	10008d80 	call	110008d8 <_gp+0xfe24ec>
10008870:	10009110 	cmplti	zero,r2,580
10008874:	10009110 	cmplti	zero,r2,580
10008878:	10009110 	cmplti	zero,r2,580
1000887c:	100090b8 	rdprs	zero,r2,578
10008880:	10008d80 	call	110008d8 <_gp+0xfe24ec>
10008884:	10009110 	cmplti	zero,r2,580
10008888:	10009110 	cmplti	zero,r2,580
1000888c:	10008c14 	ori	zero,r2,560
10008890:	10009110 	cmplti	zero,r2,580
10008894:	10008c24 	muli	zero,r2,560
10008898:	10008c60 	cmpeqi	zero,r2,561
1000889c:	1000895c 	xori	zero,r2,549
100088a0:	10008c08 	cmpgei	zero,r2,560
100088a4:	10009110 	cmplti	zero,r2,580
100088a8:	10008fe4 	muli	zero,r2,575
100088ac:	10009110 	cmplti	zero,r2,580
100088b0:	1000903c 	xorhi	zero,r2,576
100088b4:	10009110 	cmplti	zero,r2,580
100088b8:	10009110 	cmplti	zero,r2,580
100088bc:	10008d00 	call	110008d0 <_gp+0xfe24e4>
100088c0:	42000204 	addi	r8,r8,8
100088c4:	da802317 	ldw	r10,140(sp)
100088c8:	5455883a 	add	r10,r10,r17
100088cc:	da802315 	stw	r10,140(sp)
100088d0:	003f8b06 	br	10008700 <__alt_data_end+0xf8008700>
100088d4:	d9002017 	ldw	r4,128(sp)
100088d8:	a00b883a 	mov	r5,r20
100088dc:	00032780 	call	10003278 <__swsetup_r>
100088e0:	1003b11e 	bne	r2,zero,100097a8 <___vfiprintf_internal_r+0x11ec>
100088e4:	a080030b 	ldhu	r2,12(r20)
100088e8:	00c00284 	movi	r3,10
100088ec:	1080068c 	andi	r2,r2,26
100088f0:	10ff541e 	bne	r2,r3,10008644 <__alt_data_end+0xf8008644>
100088f4:	a080038f 	ldh	r2,14(r20)
100088f8:	103f5216 	blt	r2,zero,10008644 <__alt_data_end+0xf8008644>
100088fc:	d9c02217 	ldw	r7,136(sp)
10008900:	d9002017 	ldw	r4,128(sp)
10008904:	e00d883a 	mov	r6,fp
10008908:	a00b883a 	mov	r5,r20
1000890c:	0009a340 	call	10009a34 <__sbprintf>
10008910:	dfc03617 	ldw	ra,216(sp)
10008914:	df003517 	ldw	fp,212(sp)
10008918:	ddc03417 	ldw	r23,208(sp)
1000891c:	dd803317 	ldw	r22,204(sp)
10008920:	dd403217 	ldw	r21,200(sp)
10008924:	dd003117 	ldw	r20,196(sp)
10008928:	dcc03017 	ldw	r19,192(sp)
1000892c:	dc802f17 	ldw	r18,188(sp)
10008930:	dc402e17 	ldw	r17,184(sp)
10008934:	dc002d17 	ldw	r16,180(sp)
10008938:	dec03704 	addi	sp,sp,220
1000893c:	f800283a 	ret
10008940:	000524c0 	call	1000524c <__sinit>
10008944:	003f2f06 	br	10008604 <__alt_data_end+0xf8008604>
10008948:	0463c83a 	sub	r17,zero,r17
1000894c:	d8802215 	stw	r2,136(sp)
10008950:	a5000114 	ori	r20,r20,4
10008954:	80c00007 	ldb	r3,0(r16)
10008958:	003f7706 	br	10008738 <__alt_data_end+0xf8008738>
1000895c:	00800c04 	movi	r2,48
10008960:	da802217 	ldw	r10,136(sp)
10008964:	d8801d05 	stb	r2,116(sp)
10008968:	00801e04 	movi	r2,120
1000896c:	d8801d45 	stb	r2,117(sp)
10008970:	d8001d85 	stb	zero,118(sp)
10008974:	50c00104 	addi	r3,r10,4
10008978:	54800017 	ldw	r18,0(r10)
1000897c:	0027883a 	mov	r19,zero
10008980:	a0800094 	ori	r2,r20,2
10008984:	48030b16 	blt	r9,zero,100095b4 <___vfiprintf_internal_r+0xff8>
10008988:	00bfdfc4 	movi	r2,-129
1000898c:	a096703a 	and	r11,r20,r2
10008990:	d8c02215 	stw	r3,136(sp)
10008994:	5d000094 	ori	r20,r11,2
10008998:	90032b1e 	bne	r18,zero,10009648 <___vfiprintf_internal_r+0x108c>
1000899c:	00840074 	movhi	r2,4097
100089a0:	10916904 	addi	r2,r2,17828
100089a4:	d8802615 	stw	r2,152(sp)
100089a8:	0039883a 	mov	fp,zero
100089ac:	48017b1e 	bne	r9,zero,10008f9c <___vfiprintf_internal_r+0x9e0>
100089b0:	0013883a 	mov	r9,zero
100089b4:	0027883a 	mov	r19,zero
100089b8:	dd401a04 	addi	r21,sp,104
100089bc:	4825883a 	mov	r18,r9
100089c0:	4cc0010e 	bge	r9,r19,100089c8 <___vfiprintf_internal_r+0x40c>
100089c4:	9825883a 	mov	r18,r19
100089c8:	e7003fcc 	andi	fp,fp,255
100089cc:	e700201c 	xori	fp,fp,128
100089d0:	e73fe004 	addi	fp,fp,-128
100089d4:	e0000126 	beq	fp,zero,100089dc <___vfiprintf_internal_r+0x420>
100089d8:	94800044 	addi	r18,r18,1
100089dc:	a380008c 	andi	r14,r20,2
100089e0:	70000126 	beq	r14,zero,100089e8 <___vfiprintf_internal_r+0x42c>
100089e4:	94800084 	addi	r18,r18,2
100089e8:	a700210c 	andi	fp,r20,132
100089ec:	e001df1e 	bne	fp,zero,1000916c <___vfiprintf_internal_r+0xbb0>
100089f0:	8c87c83a 	sub	r3,r17,r18
100089f4:	00c1dd0e 	bge	zero,r3,1000916c <___vfiprintf_internal_r+0xbb0>
100089f8:	01c00404 	movi	r7,16
100089fc:	d8801c17 	ldw	r2,112(sp)
10008a00:	38c3ad0e 	bge	r7,r3,100098b8 <___vfiprintf_internal_r+0x12fc>
10008a04:	02840074 	movhi	r10,4097
10008a08:	5291ce04 	addi	r10,r10,18232
10008a0c:	dc002915 	stw	r16,164(sp)
10008a10:	d9801b17 	ldw	r6,108(sp)
10008a14:	da802415 	stw	r10,144(sp)
10008a18:	03c001c4 	movi	r15,7
10008a1c:	da402515 	stw	r9,148(sp)
10008a20:	db802815 	stw	r14,160(sp)
10008a24:	1821883a 	mov	r16,r3
10008a28:	00000506 	br	10008a40 <___vfiprintf_internal_r+0x484>
10008a2c:	31400084 	addi	r5,r6,2
10008a30:	42000204 	addi	r8,r8,8
10008a34:	200d883a 	mov	r6,r4
10008a38:	843ffc04 	addi	r16,r16,-16
10008a3c:	3c000d0e 	bge	r7,r16,10008a74 <___vfiprintf_internal_r+0x4b8>
10008a40:	10800404 	addi	r2,r2,16
10008a44:	31000044 	addi	r4,r6,1
10008a48:	45800015 	stw	r22,0(r8)
10008a4c:	41c00115 	stw	r7,4(r8)
10008a50:	d8801c15 	stw	r2,112(sp)
10008a54:	d9001b15 	stw	r4,108(sp)
10008a58:	793ff40e 	bge	r15,r4,10008a2c <__alt_data_end+0xf8008a2c>
10008a5c:	1001b51e 	bne	r2,zero,10009134 <___vfiprintf_internal_r+0xb78>
10008a60:	843ffc04 	addi	r16,r16,-16
10008a64:	000d883a 	mov	r6,zero
10008a68:	01400044 	movi	r5,1
10008a6c:	d811883a 	mov	r8,sp
10008a70:	3c3ff316 	blt	r7,r16,10008a40 <__alt_data_end+0xf8008a40>
10008a74:	8007883a 	mov	r3,r16
10008a78:	da402517 	ldw	r9,148(sp)
10008a7c:	db802817 	ldw	r14,160(sp)
10008a80:	dc002917 	ldw	r16,164(sp)
10008a84:	da802417 	ldw	r10,144(sp)
10008a88:	1885883a 	add	r2,r3,r2
10008a8c:	40c00115 	stw	r3,4(r8)
10008a90:	42800015 	stw	r10,0(r8)
10008a94:	d8801c15 	stw	r2,112(sp)
10008a98:	d9401b15 	stw	r5,108(sp)
10008a9c:	00c001c4 	movi	r3,7
10008aa0:	19426016 	blt	r3,r5,10009424 <___vfiprintf_internal_r+0xe68>
10008aa4:	d8c01d87 	ldb	r3,118(sp)
10008aa8:	42000204 	addi	r8,r8,8
10008aac:	29000044 	addi	r4,r5,1
10008ab0:	1801b31e 	bne	r3,zero,10009180 <___vfiprintf_internal_r+0xbc4>
10008ab4:	7001c026 	beq	r14,zero,100091b8 <___vfiprintf_internal_r+0xbfc>
10008ab8:	d8c01d04 	addi	r3,sp,116
10008abc:	10800084 	addi	r2,r2,2
10008ac0:	40c00015 	stw	r3,0(r8)
10008ac4:	00c00084 	movi	r3,2
10008ac8:	40c00115 	stw	r3,4(r8)
10008acc:	d8801c15 	stw	r2,112(sp)
10008ad0:	d9001b15 	stw	r4,108(sp)
10008ad4:	00c001c4 	movi	r3,7
10008ad8:	1902650e 	bge	r3,r4,10009470 <___vfiprintf_internal_r+0xeb4>
10008adc:	10029a1e 	bne	r2,zero,10009548 <___vfiprintf_internal_r+0xf8c>
10008ae0:	00c02004 	movi	r3,128
10008ae4:	01000044 	movi	r4,1
10008ae8:	000b883a 	mov	r5,zero
10008aec:	d811883a 	mov	r8,sp
10008af0:	e0c1b31e 	bne	fp,r3,100091c0 <___vfiprintf_internal_r+0xc04>
10008af4:	8cb9c83a 	sub	fp,r17,r18
10008af8:	0701b10e 	bge	zero,fp,100091c0 <___vfiprintf_internal_r+0xc04>
10008afc:	01c00404 	movi	r7,16
10008b00:	3f03890e 	bge	r7,fp,10009928 <___vfiprintf_internal_r+0x136c>
10008b04:	00c40074 	movhi	r3,4097
10008b08:	18d1ca04 	addi	r3,r3,18216
10008b0c:	d8c02415 	stw	r3,144(sp)
10008b10:	8007883a 	mov	r3,r16
10008b14:	034001c4 	movi	r13,7
10008b18:	e021883a 	mov	r16,fp
10008b1c:	da402515 	stw	r9,148(sp)
10008b20:	1839883a 	mov	fp,r3
10008b24:	00000506 	br	10008b3c <___vfiprintf_internal_r+0x580>
10008b28:	29800084 	addi	r6,r5,2
10008b2c:	42000204 	addi	r8,r8,8
10008b30:	180b883a 	mov	r5,r3
10008b34:	843ffc04 	addi	r16,r16,-16
10008b38:	3c000d0e 	bge	r7,r16,10008b70 <___vfiprintf_internal_r+0x5b4>
10008b3c:	10800404 	addi	r2,r2,16
10008b40:	28c00044 	addi	r3,r5,1
10008b44:	45c00015 	stw	r23,0(r8)
10008b48:	41c00115 	stw	r7,4(r8)
10008b4c:	d8801c15 	stw	r2,112(sp)
10008b50:	d8c01b15 	stw	r3,108(sp)
10008b54:	68fff40e 	bge	r13,r3,10008b28 <__alt_data_end+0xf8008b28>
10008b58:	1002241e 	bne	r2,zero,100093ec <___vfiprintf_internal_r+0xe30>
10008b5c:	843ffc04 	addi	r16,r16,-16
10008b60:	01800044 	movi	r6,1
10008b64:	000b883a 	mov	r5,zero
10008b68:	d811883a 	mov	r8,sp
10008b6c:	3c3ff316 	blt	r7,r16,10008b3c <__alt_data_end+0xf8008b3c>
10008b70:	da402517 	ldw	r9,148(sp)
10008b74:	e007883a 	mov	r3,fp
10008b78:	8039883a 	mov	fp,r16
10008b7c:	1821883a 	mov	r16,r3
10008b80:	d8c02417 	ldw	r3,144(sp)
10008b84:	1705883a 	add	r2,r2,fp
10008b88:	47000115 	stw	fp,4(r8)
10008b8c:	40c00015 	stw	r3,0(r8)
10008b90:	d8801c15 	stw	r2,112(sp)
10008b94:	d9801b15 	stw	r6,108(sp)
10008b98:	00c001c4 	movi	r3,7
10008b9c:	19827616 	blt	r3,r6,10009578 <___vfiprintf_internal_r+0xfbc>
10008ba0:	4cf9c83a 	sub	fp,r9,r19
10008ba4:	42000204 	addi	r8,r8,8
10008ba8:	31000044 	addi	r4,r6,1
10008bac:	300b883a 	mov	r5,r6
10008bb0:	07018516 	blt	zero,fp,100091c8 <___vfiprintf_internal_r+0xc0c>
10008bb4:	9885883a 	add	r2,r19,r2
10008bb8:	45400015 	stw	r21,0(r8)
10008bbc:	44c00115 	stw	r19,4(r8)
10008bc0:	d8801c15 	stw	r2,112(sp)
10008bc4:	d9001b15 	stw	r4,108(sp)
10008bc8:	00c001c4 	movi	r3,7
10008bcc:	1901dd0e 	bge	r3,r4,10009344 <___vfiprintf_internal_r+0xd88>
10008bd0:	1002401e 	bne	r2,zero,100094d4 <___vfiprintf_internal_r+0xf18>
10008bd4:	d8001b15 	stw	zero,108(sp)
10008bd8:	a2c0010c 	andi	r11,r20,4
10008bdc:	58000226 	beq	r11,zero,10008be8 <___vfiprintf_internal_r+0x62c>
10008be0:	8ca7c83a 	sub	r19,r17,r18
10008be4:	04c2f216 	blt	zero,r19,100097b0 <___vfiprintf_internal_r+0x11f4>
10008be8:	8c80010e 	bge	r17,r18,10008bf0 <___vfiprintf_internal_r+0x634>
10008bec:	9023883a 	mov	r17,r18
10008bf0:	da802317 	ldw	r10,140(sp)
10008bf4:	5455883a 	add	r10,r10,r17
10008bf8:	da802315 	stw	r10,140(sp)
10008bfc:	d8001b15 	stw	zero,108(sp)
10008c00:	d811883a 	mov	r8,sp
10008c04:	003ea206 	br	10008690 <__alt_data_end+0xf8008690>
10008c08:	a5000814 	ori	r20,r20,32
10008c0c:	80c00007 	ldb	r3,0(r16)
10008c10:	003ec906 	br	10008738 <__alt_data_end+0xf8008738>
10008c14:	80c00007 	ldb	r3,0(r16)
10008c18:	1b030926 	beq	r3,r12,10009840 <___vfiprintf_internal_r+0x1284>
10008c1c:	a5000414 	ori	r20,r20,16
10008c20:	003ec506 	br	10008738 <__alt_data_end+0xf8008738>
10008c24:	21003fcc 	andi	r4,r4,255
10008c28:	20035e1e 	bne	r4,zero,100099a4 <___vfiprintf_internal_r+0x13e8>
10008c2c:	a080080c 	andi	r2,r20,32
10008c30:	1002a526 	beq	r2,zero,100096c8 <___vfiprintf_internal_r+0x110c>
10008c34:	da802217 	ldw	r10,136(sp)
10008c38:	50800017 	ldw	r2,0(r10)
10008c3c:	da802317 	ldw	r10,140(sp)
10008c40:	5007d7fa 	srai	r3,r10,31
10008c44:	da802217 	ldw	r10,136(sp)
10008c48:	10c00115 	stw	r3,4(r2)
10008c4c:	52800104 	addi	r10,r10,4
10008c50:	da802215 	stw	r10,136(sp)
10008c54:	da802317 	ldw	r10,140(sp)
10008c58:	12800015 	stw	r10,0(r2)
10008c5c:	003e8c06 	br	10008690 <__alt_data_end+0xf8008690>
10008c60:	21003fcc 	andi	r4,r4,255
10008c64:	2003511e 	bne	r4,zero,100099ac <___vfiprintf_internal_r+0x13f0>
10008c68:	a080080c 	andi	r2,r20,32
10008c6c:	1000a126 	beq	r2,zero,10008ef4 <___vfiprintf_internal_r+0x938>
10008c70:	da802217 	ldw	r10,136(sp)
10008c74:	d8001d85 	stb	zero,118(sp)
10008c78:	50800204 	addi	r2,r10,8
10008c7c:	54800017 	ldw	r18,0(r10)
10008c80:	54c00117 	ldw	r19,4(r10)
10008c84:	4802b416 	blt	r9,zero,10009758 <___vfiprintf_internal_r+0x119c>
10008c88:	013fdfc4 	movi	r4,-129
10008c8c:	94c6b03a 	or	r3,r18,r19
10008c90:	d8802215 	stw	r2,136(sp)
10008c94:	a128703a 	and	r20,r20,r4
10008c98:	1800a226 	beq	r3,zero,10008f24 <___vfiprintf_internal_r+0x968>
10008c9c:	0039883a 	mov	fp,zero
10008ca0:	dd401a04 	addi	r21,sp,104
10008ca4:	9006d0fa 	srli	r3,r18,3
10008ca8:	9808977a 	slli	r4,r19,29
10008cac:	9826d0fa 	srli	r19,r19,3
10008cb0:	948001cc 	andi	r18,r18,7
10008cb4:	90800c04 	addi	r2,r18,48
10008cb8:	ad7fffc4 	addi	r21,r21,-1
10008cbc:	20e4b03a 	or	r18,r4,r3
10008cc0:	a8800005 	stb	r2,0(r21)
10008cc4:	94c6b03a 	or	r3,r18,r19
10008cc8:	183ff61e 	bne	r3,zero,10008ca4 <__alt_data_end+0xf8008ca4>
10008ccc:	a0c0004c 	andi	r3,r20,1
10008cd0:	18005926 	beq	r3,zero,10008e38 <___vfiprintf_internal_r+0x87c>
10008cd4:	10803fcc 	andi	r2,r2,255
10008cd8:	1080201c 	xori	r2,r2,128
10008cdc:	10bfe004 	addi	r2,r2,-128
10008ce0:	00c00c04 	movi	r3,48
10008ce4:	10c05426 	beq	r2,r3,10008e38 <___vfiprintf_internal_r+0x87c>
10008ce8:	da801e17 	ldw	r10,120(sp)
10008cec:	a8bfffc4 	addi	r2,r21,-1
10008cf0:	a8ffffc5 	stb	r3,-1(r21)
10008cf4:	50a7c83a 	sub	r19,r10,r2
10008cf8:	102b883a 	mov	r21,r2
10008cfc:	003f2f06 	br	100089bc <__alt_data_end+0xf80089bc>
10008d00:	21003fcc 	andi	r4,r4,255
10008d04:	2003421e 	bne	r4,zero,10009a10 <___vfiprintf_internal_r+0x1454>
10008d08:	00840074 	movhi	r2,4097
10008d0c:	10916904 	addi	r2,r2,17828
10008d10:	d8802615 	stw	r2,152(sp)
10008d14:	a080080c 	andi	r2,r20,32
10008d18:	1000aa26 	beq	r2,zero,10008fc4 <___vfiprintf_internal_r+0xa08>
10008d1c:	da802217 	ldw	r10,136(sp)
10008d20:	54800017 	ldw	r18,0(r10)
10008d24:	54c00117 	ldw	r19,4(r10)
10008d28:	52800204 	addi	r10,r10,8
10008d2c:	da802215 	stw	r10,136(sp)
10008d30:	a080004c 	andi	r2,r20,1
10008d34:	1001d226 	beq	r2,zero,10009480 <___vfiprintf_internal_r+0xec4>
10008d38:	94c4b03a 	or	r2,r18,r19
10008d3c:	1002351e 	bne	r2,zero,10009614 <___vfiprintf_internal_r+0x1058>
10008d40:	d8001d85 	stb	zero,118(sp)
10008d44:	48022216 	blt	r9,zero,100095d0 <___vfiprintf_internal_r+0x1014>
10008d48:	00bfdfc4 	movi	r2,-129
10008d4c:	a0a8703a 	and	r20,r20,r2
10008d50:	003f1506 	br	100089a8 <__alt_data_end+0xf80089a8>
10008d54:	da802217 	ldw	r10,136(sp)
10008d58:	04800044 	movi	r18,1
10008d5c:	d8001d85 	stb	zero,118(sp)
10008d60:	50800017 	ldw	r2,0(r10)
10008d64:	52800104 	addi	r10,r10,4
10008d68:	da802215 	stw	r10,136(sp)
10008d6c:	d8801005 	stb	r2,64(sp)
10008d70:	9027883a 	mov	r19,r18
10008d74:	dd401004 	addi	r21,sp,64
10008d78:	0013883a 	mov	r9,zero
10008d7c:	003f1706 	br	100089dc <__alt_data_end+0xf80089dc>
10008d80:	21003fcc 	andi	r4,r4,255
10008d84:	2003201e 	bne	r4,zero,10009a08 <___vfiprintf_internal_r+0x144c>
10008d88:	a080080c 	andi	r2,r20,32
10008d8c:	10004b26 	beq	r2,zero,10008ebc <___vfiprintf_internal_r+0x900>
10008d90:	da802217 	ldw	r10,136(sp)
10008d94:	50800117 	ldw	r2,4(r10)
10008d98:	54800017 	ldw	r18,0(r10)
10008d9c:	52800204 	addi	r10,r10,8
10008da0:	da802215 	stw	r10,136(sp)
10008da4:	1027883a 	mov	r19,r2
10008da8:	10022c16 	blt	r2,zero,1000965c <___vfiprintf_internal_r+0x10a0>
10008dac:	df001d83 	ldbu	fp,118(sp)
10008db0:	48007216 	blt	r9,zero,10008f7c <___vfiprintf_internal_r+0x9c0>
10008db4:	00ffdfc4 	movi	r3,-129
10008db8:	94c4b03a 	or	r2,r18,r19
10008dbc:	a0e8703a 	and	r20,r20,r3
10008dc0:	1000cc26 	beq	r2,zero,100090f4 <___vfiprintf_internal_r+0xb38>
10008dc4:	98021026 	beq	r19,zero,10009608 <___vfiprintf_internal_r+0x104c>
10008dc8:	dc402415 	stw	r17,144(sp)
10008dcc:	dc002515 	stw	r16,148(sp)
10008dd0:	9823883a 	mov	r17,r19
10008dd4:	9021883a 	mov	r16,r18
10008dd8:	dd401a04 	addi	r21,sp,104
10008ddc:	4825883a 	mov	r18,r9
10008de0:	4027883a 	mov	r19,r8
10008de4:	8009883a 	mov	r4,r16
10008de8:	880b883a 	mov	r5,r17
10008dec:	01800284 	movi	r6,10
10008df0:	000f883a 	mov	r7,zero
10008df4:	000a99c0 	call	1000a99c <__umoddi3>
10008df8:	10800c04 	addi	r2,r2,48
10008dfc:	ad7fffc4 	addi	r21,r21,-1
10008e00:	8009883a 	mov	r4,r16
10008e04:	880b883a 	mov	r5,r17
10008e08:	a8800005 	stb	r2,0(r21)
10008e0c:	01800284 	movi	r6,10
10008e10:	000f883a 	mov	r7,zero
10008e14:	000a4240 	call	1000a424 <__udivdi3>
10008e18:	1021883a 	mov	r16,r2
10008e1c:	10c4b03a 	or	r2,r2,r3
10008e20:	1823883a 	mov	r17,r3
10008e24:	103fef1e 	bne	r2,zero,10008de4 <__alt_data_end+0xf8008de4>
10008e28:	dc402417 	ldw	r17,144(sp)
10008e2c:	dc002517 	ldw	r16,148(sp)
10008e30:	9013883a 	mov	r9,r18
10008e34:	9811883a 	mov	r8,r19
10008e38:	da801e17 	ldw	r10,120(sp)
10008e3c:	5567c83a 	sub	r19,r10,r21
10008e40:	003ede06 	br	100089bc <__alt_data_end+0xf80089bc>
10008e44:	38803fcc 	andi	r2,r7,255
10008e48:	1080201c 	xori	r2,r2,128
10008e4c:	10bfe004 	addi	r2,r2,-128
10008e50:	1002371e 	bne	r2,zero,10009730 <___vfiprintf_internal_r+0x1174>
10008e54:	01000044 	movi	r4,1
10008e58:	01c00804 	movi	r7,32
10008e5c:	80c00007 	ldb	r3,0(r16)
10008e60:	003e3506 	br	10008738 <__alt_data_end+0xf8008738>
10008e64:	a5000054 	ori	r20,r20,1
10008e68:	80c00007 	ldb	r3,0(r16)
10008e6c:	003e3206 	br	10008738 <__alt_data_end+0xf8008738>
10008e70:	a5002014 	ori	r20,r20,128
10008e74:	80c00007 	ldb	r3,0(r16)
10008e78:	003e2f06 	br	10008738 <__alt_data_end+0xf8008738>
10008e7c:	8015883a 	mov	r10,r16
10008e80:	0023883a 	mov	r17,zero
10008e84:	18bff404 	addi	r2,r3,-48
10008e88:	50c00007 	ldb	r3,0(r10)
10008e8c:	8c4002a4 	muli	r17,r17,10
10008e90:	84000044 	addi	r16,r16,1
10008e94:	8015883a 	mov	r10,r16
10008e98:	1463883a 	add	r17,r2,r17
10008e9c:	18bff404 	addi	r2,r3,-48
10008ea0:	30bff92e 	bgeu	r6,r2,10008e88 <__alt_data_end+0xf8008e88>
10008ea4:	003e2506 	br	1000873c <__alt_data_end+0xf800873c>
10008ea8:	21003fcc 	andi	r4,r4,255
10008eac:	2002d41e 	bne	r4,zero,10009a00 <___vfiprintf_internal_r+0x1444>
10008eb0:	a5000414 	ori	r20,r20,16
10008eb4:	a080080c 	andi	r2,r20,32
10008eb8:	103fb51e 	bne	r2,zero,10008d90 <__alt_data_end+0xf8008d90>
10008ebc:	a080040c 	andi	r2,r20,16
10008ec0:	1001f826 	beq	r2,zero,100096a4 <___vfiprintf_internal_r+0x10e8>
10008ec4:	da802217 	ldw	r10,136(sp)
10008ec8:	54800017 	ldw	r18,0(r10)
10008ecc:	52800104 	addi	r10,r10,4
10008ed0:	da802215 	stw	r10,136(sp)
10008ed4:	9027d7fa 	srai	r19,r18,31
10008ed8:	9805883a 	mov	r2,r19
10008edc:	003fb206 	br	10008da8 <__alt_data_end+0xf8008da8>
10008ee0:	21003fcc 	andi	r4,r4,255
10008ee4:	2002c41e 	bne	r4,zero,100099f8 <___vfiprintf_internal_r+0x143c>
10008ee8:	a5000414 	ori	r20,r20,16
10008eec:	a080080c 	andi	r2,r20,32
10008ef0:	103f5f1e 	bne	r2,zero,10008c70 <__alt_data_end+0xf8008c70>
10008ef4:	a080040c 	andi	r2,r20,16
10008ef8:	10020f26 	beq	r2,zero,10009738 <___vfiprintf_internal_r+0x117c>
10008efc:	da802217 	ldw	r10,136(sp)
10008f00:	d8001d85 	stb	zero,118(sp)
10008f04:	0027883a 	mov	r19,zero
10008f08:	50800104 	addi	r2,r10,4
10008f0c:	54800017 	ldw	r18,0(r10)
10008f10:	48021116 	blt	r9,zero,10009758 <___vfiprintf_internal_r+0x119c>
10008f14:	00ffdfc4 	movi	r3,-129
10008f18:	d8802215 	stw	r2,136(sp)
10008f1c:	a0e8703a 	and	r20,r20,r3
10008f20:	903f5e1e 	bne	r18,zero,10008c9c <__alt_data_end+0xf8008c9c>
10008f24:	0039883a 	mov	fp,zero
10008f28:	4802a626 	beq	r9,zero,100099c4 <___vfiprintf_internal_r+0x1408>
10008f2c:	0025883a 	mov	r18,zero
10008f30:	0027883a 	mov	r19,zero
10008f34:	003f5a06 	br	10008ca0 <__alt_data_end+0xf8008ca0>
10008f38:	21003fcc 	andi	r4,r4,255
10008f3c:	20029f1e 	bne	r4,zero,100099bc <___vfiprintf_internal_r+0x1400>
10008f40:	a5000414 	ori	r20,r20,16
10008f44:	a080080c 	andi	r2,r20,32
10008f48:	10005e1e 	bne	r2,zero,100090c4 <___vfiprintf_internal_r+0xb08>
10008f4c:	a080040c 	andi	r2,r20,16
10008f50:	1001a21e 	bne	r2,zero,100095dc <___vfiprintf_internal_r+0x1020>
10008f54:	a080100c 	andi	r2,r20,64
10008f58:	d8001d85 	stb	zero,118(sp)
10008f5c:	da802217 	ldw	r10,136(sp)
10008f60:	1002231e 	bne	r2,zero,100097f0 <___vfiprintf_internal_r+0x1234>
10008f64:	50800104 	addi	r2,r10,4
10008f68:	54800017 	ldw	r18,0(r10)
10008f6c:	0027883a 	mov	r19,zero
10008f70:	4801a00e 	bge	r9,zero,100095f4 <___vfiprintf_internal_r+0x1038>
10008f74:	d8802215 	stw	r2,136(sp)
10008f78:	0039883a 	mov	fp,zero
10008f7c:	94c4b03a 	or	r2,r18,r19
10008f80:	103f901e 	bne	r2,zero,10008dc4 <__alt_data_end+0xf8008dc4>
10008f84:	00800044 	movi	r2,1
10008f88:	10803fcc 	andi	r2,r2,255
10008f8c:	00c00044 	movi	r3,1
10008f90:	10c05926 	beq	r2,r3,100090f8 <___vfiprintf_internal_r+0xb3c>
10008f94:	00c00084 	movi	r3,2
10008f98:	10ffe41e 	bne	r2,r3,10008f2c <__alt_data_end+0xf8008f2c>
10008f9c:	0025883a 	mov	r18,zero
10008fa0:	0027883a 	mov	r19,zero
10008fa4:	00013d06 	br	1000949c <___vfiprintf_internal_r+0xee0>
10008fa8:	21003fcc 	andi	r4,r4,255
10008fac:	2002811e 	bne	r4,zero,100099b4 <___vfiprintf_internal_r+0x13f8>
10008fb0:	00840074 	movhi	r2,4097
10008fb4:	10916404 	addi	r2,r2,17808
10008fb8:	d8802615 	stw	r2,152(sp)
10008fbc:	a080080c 	andi	r2,r20,32
10008fc0:	103f561e 	bne	r2,zero,10008d1c <__alt_data_end+0xf8008d1c>
10008fc4:	a080040c 	andi	r2,r20,16
10008fc8:	1001d126 	beq	r2,zero,10009710 <___vfiprintf_internal_r+0x1154>
10008fcc:	da802217 	ldw	r10,136(sp)
10008fd0:	0027883a 	mov	r19,zero
10008fd4:	54800017 	ldw	r18,0(r10)
10008fd8:	52800104 	addi	r10,r10,4
10008fdc:	da802215 	stw	r10,136(sp)
10008fe0:	003f5306 	br	10008d30 <__alt_data_end+0xf8008d30>
10008fe4:	da802217 	ldw	r10,136(sp)
10008fe8:	d8001d85 	stb	zero,118(sp)
10008fec:	55400017 	ldw	r21,0(r10)
10008ff0:	50c00104 	addi	r3,r10,4
10008ff4:	a8024226 	beq	r21,zero,10009900 <___vfiprintf_internal_r+0x1344>
10008ff8:	48021816 	blt	r9,zero,1000985c <___vfiprintf_internal_r+0x12a0>
10008ffc:	480d883a 	mov	r6,r9
10009000:	000b883a 	mov	r5,zero
10009004:	a809883a 	mov	r4,r21
10009008:	d8c02a15 	stw	r3,168(sp)
1000900c:	da002b15 	stw	r8,172(sp)
10009010:	da402c15 	stw	r9,176(sp)
10009014:	00067b80 	call	100067b8 <memchr>
10009018:	d8c02a17 	ldw	r3,168(sp)
1000901c:	da002b17 	ldw	r8,172(sp)
10009020:	da402c17 	ldw	r9,176(sp)
10009024:	10024826 	beq	r2,zero,10009948 <___vfiprintf_internal_r+0x138c>
10009028:	1567c83a 	sub	r19,r2,r21
1000902c:	df001d83 	ldbu	fp,118(sp)
10009030:	d8c02215 	stw	r3,136(sp)
10009034:	0013883a 	mov	r9,zero
10009038:	003e6006 	br	100089bc <__alt_data_end+0xf80089bc>
1000903c:	21003fcc 	andi	r4,r4,255
10009040:	203fc026 	beq	r4,zero,10008f44 <__alt_data_end+0xf8008f44>
10009044:	d9c01d85 	stb	r7,118(sp)
10009048:	003fbe06 	br	10008f44 <__alt_data_end+0xf8008f44>
1000904c:	da802217 	ldw	r10,136(sp)
10009050:	54400017 	ldw	r17,0(r10)
10009054:	50800104 	addi	r2,r10,4
10009058:	883e3b16 	blt	r17,zero,10008948 <__alt_data_end+0xf8008948>
1000905c:	d8802215 	stw	r2,136(sp)
10009060:	80c00007 	ldb	r3,0(r16)
10009064:	003db406 	br	10008738 <__alt_data_end+0xf8008738>
10009068:	01000044 	movi	r4,1
1000906c:	01c00ac4 	movi	r7,43
10009070:	80c00007 	ldb	r3,0(r16)
10009074:	003db006 	br	10008738 <__alt_data_end+0xf8008738>
10009078:	80c00007 	ldb	r3,0(r16)
1000907c:	82800044 	addi	r10,r16,1
10009080:	1b423c26 	beq	r3,r13,10009974 <___vfiprintf_internal_r+0x13b8>
10009084:	18bff404 	addi	r2,r3,-48
10009088:	0013883a 	mov	r9,zero
1000908c:	30822b36 	bltu	r6,r2,1000993c <___vfiprintf_internal_r+0x1380>
10009090:	50c00007 	ldb	r3,0(r10)
10009094:	4a4002a4 	muli	r9,r9,10
10009098:	54000044 	addi	r16,r10,1
1000909c:	8015883a 	mov	r10,r16
100090a0:	4893883a 	add	r9,r9,r2
100090a4:	18bff404 	addi	r2,r3,-48
100090a8:	30bff92e 	bgeu	r6,r2,10009090 <__alt_data_end+0xf8009090>
100090ac:	483da30e 	bge	r9,zero,1000873c <__alt_data_end+0xf800873c>
100090b0:	027fffc4 	movi	r9,-1
100090b4:	003da106 	br	1000873c <__alt_data_end+0xf800873c>
100090b8:	a5001014 	ori	r20,r20,64
100090bc:	80c00007 	ldb	r3,0(r16)
100090c0:	003d9d06 	br	10008738 <__alt_data_end+0xf8008738>
100090c4:	da802217 	ldw	r10,136(sp)
100090c8:	d8001d85 	stb	zero,118(sp)
100090cc:	50c00204 	addi	r3,r10,8
100090d0:	54800017 	ldw	r18,0(r10)
100090d4:	54c00117 	ldw	r19,4(r10)
100090d8:	4801ca16 	blt	r9,zero,10009804 <___vfiprintf_internal_r+0x1248>
100090dc:	013fdfc4 	movi	r4,-129
100090e0:	94c4b03a 	or	r2,r18,r19
100090e4:	d8c02215 	stw	r3,136(sp)
100090e8:	a128703a 	and	r20,r20,r4
100090ec:	0039883a 	mov	fp,zero
100090f0:	103f341e 	bne	r2,zero,10008dc4 <__alt_data_end+0xf8008dc4>
100090f4:	483e2e26 	beq	r9,zero,100089b0 <__alt_data_end+0xf80089b0>
100090f8:	0025883a 	mov	r18,zero
100090fc:	94800c04 	addi	r18,r18,48
10009100:	dc8019c5 	stb	r18,103(sp)
10009104:	dcc02717 	ldw	r19,156(sp)
10009108:	dd4019c4 	addi	r21,sp,103
1000910c:	003e2b06 	br	100089bc <__alt_data_end+0xf80089bc>
10009110:	21003fcc 	andi	r4,r4,255
10009114:	2002361e 	bne	r4,zero,100099f0 <___vfiprintf_internal_r+0x1434>
10009118:	1801c126 	beq	r3,zero,10009820 <___vfiprintf_internal_r+0x1264>
1000911c:	04800044 	movi	r18,1
10009120:	d8c01005 	stb	r3,64(sp)
10009124:	d8001d85 	stb	zero,118(sp)
10009128:	9027883a 	mov	r19,r18
1000912c:	dd401004 	addi	r21,sp,64
10009130:	003f1106 	br	10008d78 <__alt_data_end+0xf8008d78>
10009134:	d9402117 	ldw	r5,132(sp)
10009138:	d9002017 	ldw	r4,128(sp)
1000913c:	d9801a04 	addi	r6,sp,104
10009140:	d9c02b15 	stw	r7,172(sp)
10009144:	dbc02a15 	stw	r15,168(sp)
10009148:	00084a80 	call	100084a8 <__sprint_r.part.0>
1000914c:	d9c02b17 	ldw	r7,172(sp)
10009150:	dbc02a17 	ldw	r15,168(sp)
10009154:	10006d1e 	bne	r2,zero,1000930c <___vfiprintf_internal_r+0xd50>
10009158:	d9801b17 	ldw	r6,108(sp)
1000915c:	d8801c17 	ldw	r2,112(sp)
10009160:	d811883a 	mov	r8,sp
10009164:	31400044 	addi	r5,r6,1
10009168:	003e3306 	br	10008a38 <__alt_data_end+0xf8008a38>
1000916c:	d9401b17 	ldw	r5,108(sp)
10009170:	d8801c17 	ldw	r2,112(sp)
10009174:	29000044 	addi	r4,r5,1
10009178:	d8c01d87 	ldb	r3,118(sp)
1000917c:	183e4d26 	beq	r3,zero,10008ab4 <__alt_data_end+0xf8008ab4>
10009180:	00c00044 	movi	r3,1
10009184:	d9401d84 	addi	r5,sp,118
10009188:	10c5883a 	add	r2,r2,r3
1000918c:	41400015 	stw	r5,0(r8)
10009190:	40c00115 	stw	r3,4(r8)
10009194:	d8801c15 	stw	r2,112(sp)
10009198:	d9001b15 	stw	r4,108(sp)
1000919c:	014001c4 	movi	r5,7
100091a0:	2900a90e 	bge	r5,r4,10009448 <___vfiprintf_internal_r+0xe8c>
100091a4:	1000da1e 	bne	r2,zero,10009510 <___vfiprintf_internal_r+0xf54>
100091a8:	7000ab1e 	bne	r14,zero,10009458 <___vfiprintf_internal_r+0xe9c>
100091ac:	000b883a 	mov	r5,zero
100091b0:	1809883a 	mov	r4,r3
100091b4:	d811883a 	mov	r8,sp
100091b8:	00c02004 	movi	r3,128
100091bc:	e0fe4d26 	beq	fp,r3,10008af4 <__alt_data_end+0xf8008af4>
100091c0:	4cf9c83a 	sub	fp,r9,r19
100091c4:	073e7b0e 	bge	zero,fp,10008bb4 <__alt_data_end+0xf8008bb4>
100091c8:	01c00404 	movi	r7,16
100091cc:	3f01900e 	bge	r7,fp,10009810 <___vfiprintf_internal_r+0x1254>
100091d0:	00c40074 	movhi	r3,4097
100091d4:	18d1ca04 	addi	r3,r3,18216
100091d8:	d8c02415 	stw	r3,144(sp)
100091dc:	034001c4 	movi	r13,7
100091e0:	00000506 	br	100091f8 <___vfiprintf_internal_r+0xc3c>
100091e4:	29000084 	addi	r4,r5,2
100091e8:	42000204 	addi	r8,r8,8
100091ec:	180b883a 	mov	r5,r3
100091f0:	e73ffc04 	addi	fp,fp,-16
100091f4:	3f000d0e 	bge	r7,fp,1000922c <___vfiprintf_internal_r+0xc70>
100091f8:	10800404 	addi	r2,r2,16
100091fc:	28c00044 	addi	r3,r5,1
10009200:	45c00015 	stw	r23,0(r8)
10009204:	41c00115 	stw	r7,4(r8)
10009208:	d8801c15 	stw	r2,112(sp)
1000920c:	d8c01b15 	stw	r3,108(sp)
10009210:	68fff40e 	bge	r13,r3,100091e4 <__alt_data_end+0xf80091e4>
10009214:	1000101e 	bne	r2,zero,10009258 <___vfiprintf_internal_r+0xc9c>
10009218:	e73ffc04 	addi	fp,fp,-16
1000921c:	01000044 	movi	r4,1
10009220:	000b883a 	mov	r5,zero
10009224:	d811883a 	mov	r8,sp
10009228:	3f3ff316 	blt	r7,fp,100091f8 <__alt_data_end+0xf80091f8>
1000922c:	da802417 	ldw	r10,144(sp)
10009230:	1705883a 	add	r2,r2,fp
10009234:	47000115 	stw	fp,4(r8)
10009238:	42800015 	stw	r10,0(r8)
1000923c:	d8801c15 	stw	r2,112(sp)
10009240:	d9001b15 	stw	r4,108(sp)
10009244:	00c001c4 	movi	r3,7
10009248:	19003616 	blt	r3,r4,10009324 <___vfiprintf_internal_r+0xd68>
1000924c:	42000204 	addi	r8,r8,8
10009250:	21000044 	addi	r4,r4,1
10009254:	003e5706 	br	10008bb4 <__alt_data_end+0xf8008bb4>
10009258:	d9402117 	ldw	r5,132(sp)
1000925c:	d9002017 	ldw	r4,128(sp)
10009260:	d9801a04 	addi	r6,sp,104
10009264:	d9c02b15 	stw	r7,172(sp)
10009268:	db402a15 	stw	r13,168(sp)
1000926c:	00084a80 	call	100084a8 <__sprint_r.part.0>
10009270:	d9c02b17 	ldw	r7,172(sp)
10009274:	db402a17 	ldw	r13,168(sp)
10009278:	1000241e 	bne	r2,zero,1000930c <___vfiprintf_internal_r+0xd50>
1000927c:	d9401b17 	ldw	r5,108(sp)
10009280:	d8801c17 	ldw	r2,112(sp)
10009284:	d811883a 	mov	r8,sp
10009288:	29000044 	addi	r4,r5,1
1000928c:	003fd806 	br	100091f0 <__alt_data_end+0xf80091f0>
10009290:	d9401b17 	ldw	r5,108(sp)
10009294:	00c40074 	movhi	r3,4097
10009298:	18d1ce04 	addi	r3,r3,18232
1000929c:	d8c02415 	stw	r3,144(sp)
100092a0:	29400044 	addi	r5,r5,1
100092a4:	d8c02417 	ldw	r3,144(sp)
100092a8:	14c5883a 	add	r2,r2,r19
100092ac:	44c00115 	stw	r19,4(r8)
100092b0:	40c00015 	stw	r3,0(r8)
100092b4:	d8801c15 	stw	r2,112(sp)
100092b8:	d9401b15 	stw	r5,108(sp)
100092bc:	00c001c4 	movi	r3,7
100092c0:	1940070e 	bge	r3,r5,100092e0 <___vfiprintf_internal_r+0xd24>
100092c4:	103e4826 	beq	r2,zero,10008be8 <__alt_data_end+0xf8008be8>
100092c8:	d9402117 	ldw	r5,132(sp)
100092cc:	d9002017 	ldw	r4,128(sp)
100092d0:	d9801a04 	addi	r6,sp,104
100092d4:	00084a80 	call	100084a8 <__sprint_r.part.0>
100092d8:	10000c1e 	bne	r2,zero,1000930c <___vfiprintf_internal_r+0xd50>
100092dc:	d8801c17 	ldw	r2,112(sp)
100092e0:	8c80010e 	bge	r17,r18,100092e8 <___vfiprintf_internal_r+0xd2c>
100092e4:	9023883a 	mov	r17,r18
100092e8:	da802317 	ldw	r10,140(sp)
100092ec:	5455883a 	add	r10,r10,r17
100092f0:	da802315 	stw	r10,140(sp)
100092f4:	103e4126 	beq	r2,zero,10008bfc <__alt_data_end+0xf8008bfc>
100092f8:	d9402117 	ldw	r5,132(sp)
100092fc:	d9002017 	ldw	r4,128(sp)
10009300:	d9801a04 	addi	r6,sp,104
10009304:	00084a80 	call	100084a8 <__sprint_r.part.0>
10009308:	103e3c26 	beq	r2,zero,10008bfc <__alt_data_end+0xf8008bfc>
1000930c:	dd002117 	ldw	r20,132(sp)
10009310:	a080030b 	ldhu	r2,12(r20)
10009314:	1080100c 	andi	r2,r2,64
10009318:	1001231e 	bne	r2,zero,100097a8 <___vfiprintf_internal_r+0x11ec>
1000931c:	d8802317 	ldw	r2,140(sp)
10009320:	003d7b06 	br	10008910 <__alt_data_end+0xf8008910>
10009324:	1000991e 	bne	r2,zero,1000958c <___vfiprintf_internal_r+0xfd0>
10009328:	00c00044 	movi	r3,1
1000932c:	9805883a 	mov	r2,r19
10009330:	dd400015 	stw	r21,0(sp)
10009334:	dcc00115 	stw	r19,4(sp)
10009338:	dcc01c15 	stw	r19,112(sp)
1000933c:	d8c01b15 	stw	r3,108(sp)
10009340:	d811883a 	mov	r8,sp
10009344:	42000204 	addi	r8,r8,8
10009348:	a2c0010c 	andi	r11,r20,4
1000934c:	583fe426 	beq	r11,zero,100092e0 <__alt_data_end+0xf80092e0>
10009350:	8ca7c83a 	sub	r19,r17,r18
10009354:	04ffe20e 	bge	zero,r19,100092e0 <__alt_data_end+0xf80092e0>
10009358:	01c00404 	movi	r7,16
1000935c:	3cffcc0e 	bge	r7,r19,10009290 <__alt_data_end+0xf8009290>
10009360:	02840074 	movhi	r10,4097
10009364:	5291ce04 	addi	r10,r10,18232
10009368:	d9001b17 	ldw	r4,108(sp)
1000936c:	da802415 	stw	r10,144(sp)
10009370:	382b883a 	mov	r21,r7
10009374:	050001c4 	movi	r20,7
10009378:	df002017 	ldw	fp,128(sp)
1000937c:	00000506 	br	10009394 <___vfiprintf_internal_r+0xdd8>
10009380:	21400084 	addi	r5,r4,2
10009384:	42000204 	addi	r8,r8,8
10009388:	1809883a 	mov	r4,r3
1000938c:	9cfffc04 	addi	r19,r19,-16
10009390:	acffc40e 	bge	r21,r19,100092a4 <__alt_data_end+0xf80092a4>
10009394:	10800404 	addi	r2,r2,16
10009398:	20c00044 	addi	r3,r4,1
1000939c:	45800015 	stw	r22,0(r8)
100093a0:	45400115 	stw	r21,4(r8)
100093a4:	d8801c15 	stw	r2,112(sp)
100093a8:	d8c01b15 	stw	r3,108(sp)
100093ac:	a0fff40e 	bge	r20,r3,10009380 <__alt_data_end+0xf8009380>
100093b0:	1000041e 	bne	r2,zero,100093c4 <___vfiprintf_internal_r+0xe08>
100093b4:	01400044 	movi	r5,1
100093b8:	0009883a 	mov	r4,zero
100093bc:	d811883a 	mov	r8,sp
100093c0:	003ff206 	br	1000938c <__alt_data_end+0xf800938c>
100093c4:	d9402117 	ldw	r5,132(sp)
100093c8:	d9801a04 	addi	r6,sp,104
100093cc:	e009883a 	mov	r4,fp
100093d0:	00084a80 	call	100084a8 <__sprint_r.part.0>
100093d4:	103fcd1e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
100093d8:	d9001b17 	ldw	r4,108(sp)
100093dc:	d8801c17 	ldw	r2,112(sp)
100093e0:	d811883a 	mov	r8,sp
100093e4:	21400044 	addi	r5,r4,1
100093e8:	003fe806 	br	1000938c <__alt_data_end+0xf800938c>
100093ec:	d9402117 	ldw	r5,132(sp)
100093f0:	d9002017 	ldw	r4,128(sp)
100093f4:	d9801a04 	addi	r6,sp,104
100093f8:	d9c02b15 	stw	r7,172(sp)
100093fc:	db402a15 	stw	r13,168(sp)
10009400:	00084a80 	call	100084a8 <__sprint_r.part.0>
10009404:	d9c02b17 	ldw	r7,172(sp)
10009408:	db402a17 	ldw	r13,168(sp)
1000940c:	103fbf1e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
10009410:	d9401b17 	ldw	r5,108(sp)
10009414:	d8801c17 	ldw	r2,112(sp)
10009418:	d811883a 	mov	r8,sp
1000941c:	29800044 	addi	r6,r5,1
10009420:	003dc406 	br	10008b34 <__alt_data_end+0xf8008b34>
10009424:	1000d21e 	bne	r2,zero,10009770 <___vfiprintf_internal_r+0x11b4>
10009428:	d8c01d87 	ldb	r3,118(sp)
1000942c:	18009526 	beq	r3,zero,10009684 <___vfiprintf_internal_r+0x10c8>
10009430:	00800044 	movi	r2,1
10009434:	d8c01d84 	addi	r3,sp,118
10009438:	1009883a 	mov	r4,r2
1000943c:	d8c00015 	stw	r3,0(sp)
10009440:	d8800115 	stw	r2,4(sp)
10009444:	d811883a 	mov	r8,sp
10009448:	200b883a 	mov	r5,r4
1000944c:	42000204 	addi	r8,r8,8
10009450:	21000044 	addi	r4,r4,1
10009454:	003d9706 	br	10008ab4 <__alt_data_end+0xf8008ab4>
10009458:	d9001d04 	addi	r4,sp,116
1000945c:	00800084 	movi	r2,2
10009460:	d9000015 	stw	r4,0(sp)
10009464:	d8800115 	stw	r2,4(sp)
10009468:	1809883a 	mov	r4,r3
1000946c:	d811883a 	mov	r8,sp
10009470:	200b883a 	mov	r5,r4
10009474:	42000204 	addi	r8,r8,8
10009478:	21000044 	addi	r4,r4,1
1000947c:	003f4e06 	br	100091b8 <__alt_data_end+0xf80091b8>
10009480:	d8001d85 	stb	zero,118(sp)
10009484:	48005016 	blt	r9,zero,100095c8 <___vfiprintf_internal_r+0x100c>
10009488:	00ffdfc4 	movi	r3,-129
1000948c:	94c4b03a 	or	r2,r18,r19
10009490:	a0e8703a 	and	r20,r20,r3
10009494:	103d4426 	beq	r2,zero,100089a8 <__alt_data_end+0xf80089a8>
10009498:	0039883a 	mov	fp,zero
1000949c:	d9002617 	ldw	r4,152(sp)
100094a0:	dd401a04 	addi	r21,sp,104
100094a4:	908003cc 	andi	r2,r18,15
100094a8:	9806973a 	slli	r3,r19,28
100094ac:	2085883a 	add	r2,r4,r2
100094b0:	9024d13a 	srli	r18,r18,4
100094b4:	10800003 	ldbu	r2,0(r2)
100094b8:	9826d13a 	srli	r19,r19,4
100094bc:	ad7fffc4 	addi	r21,r21,-1
100094c0:	1ca4b03a 	or	r18,r3,r18
100094c4:	a8800005 	stb	r2,0(r21)
100094c8:	94c4b03a 	or	r2,r18,r19
100094cc:	103ff51e 	bne	r2,zero,100094a4 <__alt_data_end+0xf80094a4>
100094d0:	003e5906 	br	10008e38 <__alt_data_end+0xf8008e38>
100094d4:	d9402117 	ldw	r5,132(sp)
100094d8:	d9002017 	ldw	r4,128(sp)
100094dc:	d9801a04 	addi	r6,sp,104
100094e0:	00084a80 	call	100084a8 <__sprint_r.part.0>
100094e4:	103f891e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
100094e8:	d8801c17 	ldw	r2,112(sp)
100094ec:	d811883a 	mov	r8,sp
100094f0:	003f9506 	br	10009348 <__alt_data_end+0xf8009348>
100094f4:	d9402117 	ldw	r5,132(sp)
100094f8:	d9002017 	ldw	r4,128(sp)
100094fc:	d9801a04 	addi	r6,sp,104
10009500:	00084a80 	call	100084a8 <__sprint_r.part.0>
10009504:	103f811e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
10009508:	d811883a 	mov	r8,sp
1000950c:	003ced06 	br	100088c4 <__alt_data_end+0xf80088c4>
10009510:	d9402117 	ldw	r5,132(sp)
10009514:	d9002017 	ldw	r4,128(sp)
10009518:	d9801a04 	addi	r6,sp,104
1000951c:	da402c15 	stw	r9,176(sp)
10009520:	db802a15 	stw	r14,168(sp)
10009524:	00084a80 	call	100084a8 <__sprint_r.part.0>
10009528:	da402c17 	ldw	r9,176(sp)
1000952c:	db802a17 	ldw	r14,168(sp)
10009530:	103f761e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
10009534:	d9401b17 	ldw	r5,108(sp)
10009538:	d8801c17 	ldw	r2,112(sp)
1000953c:	d811883a 	mov	r8,sp
10009540:	29000044 	addi	r4,r5,1
10009544:	003d5b06 	br	10008ab4 <__alt_data_end+0xf8008ab4>
10009548:	d9402117 	ldw	r5,132(sp)
1000954c:	d9002017 	ldw	r4,128(sp)
10009550:	d9801a04 	addi	r6,sp,104
10009554:	da402c15 	stw	r9,176(sp)
10009558:	00084a80 	call	100084a8 <__sprint_r.part.0>
1000955c:	da402c17 	ldw	r9,176(sp)
10009560:	103f6a1e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
10009564:	d9401b17 	ldw	r5,108(sp)
10009568:	d8801c17 	ldw	r2,112(sp)
1000956c:	d811883a 	mov	r8,sp
10009570:	29000044 	addi	r4,r5,1
10009574:	003f1006 	br	100091b8 <__alt_data_end+0xf80091b8>
10009578:	1000c31e 	bne	r2,zero,10009888 <___vfiprintf_internal_r+0x12cc>
1000957c:	01000044 	movi	r4,1
10009580:	000b883a 	mov	r5,zero
10009584:	d811883a 	mov	r8,sp
10009588:	003f0d06 	br	100091c0 <__alt_data_end+0xf80091c0>
1000958c:	d9402117 	ldw	r5,132(sp)
10009590:	d9002017 	ldw	r4,128(sp)
10009594:	d9801a04 	addi	r6,sp,104
10009598:	00084a80 	call	100084a8 <__sprint_r.part.0>
1000959c:	103f5b1e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
100095a0:	d9001b17 	ldw	r4,108(sp)
100095a4:	d8801c17 	ldw	r2,112(sp)
100095a8:	d811883a 	mov	r8,sp
100095ac:	21000044 	addi	r4,r4,1
100095b0:	003d8006 	br	10008bb4 <__alt_data_end+0xf8008bb4>
100095b4:	01040074 	movhi	r4,4097
100095b8:	21116904 	addi	r4,r4,17828
100095bc:	d9002615 	stw	r4,152(sp)
100095c0:	d8c02215 	stw	r3,136(sp)
100095c4:	1029883a 	mov	r20,r2
100095c8:	94c4b03a 	or	r2,r18,r19
100095cc:	103fb21e 	bne	r2,zero,10009498 <__alt_data_end+0xf8009498>
100095d0:	0039883a 	mov	fp,zero
100095d4:	00800084 	movi	r2,2
100095d8:	003e6b06 	br	10008f88 <__alt_data_end+0xf8008f88>
100095dc:	da802217 	ldw	r10,136(sp)
100095e0:	d8001d85 	stb	zero,118(sp)
100095e4:	0027883a 	mov	r19,zero
100095e8:	50800104 	addi	r2,r10,4
100095ec:	54800017 	ldw	r18,0(r10)
100095f0:	483e6016 	blt	r9,zero,10008f74 <__alt_data_end+0xf8008f74>
100095f4:	00ffdfc4 	movi	r3,-129
100095f8:	d8802215 	stw	r2,136(sp)
100095fc:	a0e8703a 	and	r20,r20,r3
10009600:	0039883a 	mov	fp,zero
10009604:	903ebb26 	beq	r18,zero,100090f4 <__alt_data_end+0xf80090f4>
10009608:	00800244 	movi	r2,9
1000960c:	14bdee36 	bltu	r2,r18,10008dc8 <__alt_data_end+0xf8008dc8>
10009610:	003eba06 	br	100090fc <__alt_data_end+0xf80090fc>
10009614:	00800c04 	movi	r2,48
10009618:	d8c01d45 	stb	r3,117(sp)
1000961c:	d8801d05 	stb	r2,116(sp)
10009620:	d8001d85 	stb	zero,118(sp)
10009624:	a0c00094 	ori	r3,r20,2
10009628:	4800a916 	blt	r9,zero,100098d0 <___vfiprintf_internal_r+0x1314>
1000962c:	00bfdfc4 	movi	r2,-129
10009630:	a096703a 	and	r11,r20,r2
10009634:	5d000094 	ori	r20,r11,2
10009638:	0039883a 	mov	fp,zero
1000963c:	003f9706 	br	1000949c <__alt_data_end+0xf800949c>
10009640:	8025883a 	mov	r18,r16
10009644:	003c2e06 	br	10008700 <__alt_data_end+0xf8008700>
10009648:	00840074 	movhi	r2,4097
1000964c:	10916904 	addi	r2,r2,17828
10009650:	0039883a 	mov	fp,zero
10009654:	d8802615 	stw	r2,152(sp)
10009658:	003f9006 	br	1000949c <__alt_data_end+0xf800949c>
1000965c:	04a5c83a 	sub	r18,zero,r18
10009660:	07000b44 	movi	fp,45
10009664:	9004c03a 	cmpne	r2,r18,zero
10009668:	04e7c83a 	sub	r19,zero,r19
1000966c:	df001d85 	stb	fp,118(sp)
10009670:	98a7c83a 	sub	r19,r19,r2
10009674:	48009f16 	blt	r9,zero,100098f4 <___vfiprintf_internal_r+0x1338>
10009678:	00bfdfc4 	movi	r2,-129
1000967c:	a0a8703a 	and	r20,r20,r2
10009680:	003dd006 	br	10008dc4 <__alt_data_end+0xf8008dc4>
10009684:	70004c26 	beq	r14,zero,100097b8 <___vfiprintf_internal_r+0x11fc>
10009688:	00800084 	movi	r2,2
1000968c:	d8c01d04 	addi	r3,sp,116
10009690:	d8c00015 	stw	r3,0(sp)
10009694:	d8800115 	stw	r2,4(sp)
10009698:	01000044 	movi	r4,1
1000969c:	d811883a 	mov	r8,sp
100096a0:	003f7306 	br	10009470 <__alt_data_end+0xf8009470>
100096a4:	a080100c 	andi	r2,r20,64
100096a8:	da802217 	ldw	r10,136(sp)
100096ac:	103e0626 	beq	r2,zero,10008ec8 <__alt_data_end+0xf8008ec8>
100096b0:	5480000f 	ldh	r18,0(r10)
100096b4:	52800104 	addi	r10,r10,4
100096b8:	da802215 	stw	r10,136(sp)
100096bc:	9027d7fa 	srai	r19,r18,31
100096c0:	9805883a 	mov	r2,r19
100096c4:	003db806 	br	10008da8 <__alt_data_end+0xf8008da8>
100096c8:	a080040c 	andi	r2,r20,16
100096cc:	1000091e 	bne	r2,zero,100096f4 <___vfiprintf_internal_r+0x1138>
100096d0:	a2c0100c 	andi	r11,r20,64
100096d4:	58000726 	beq	r11,zero,100096f4 <___vfiprintf_internal_r+0x1138>
100096d8:	da802217 	ldw	r10,136(sp)
100096dc:	50800017 	ldw	r2,0(r10)
100096e0:	52800104 	addi	r10,r10,4
100096e4:	da802215 	stw	r10,136(sp)
100096e8:	da802317 	ldw	r10,140(sp)
100096ec:	1280000d 	sth	r10,0(r2)
100096f0:	003be706 	br	10008690 <__alt_data_end+0xf8008690>
100096f4:	da802217 	ldw	r10,136(sp)
100096f8:	50800017 	ldw	r2,0(r10)
100096fc:	52800104 	addi	r10,r10,4
10009700:	da802215 	stw	r10,136(sp)
10009704:	da802317 	ldw	r10,140(sp)
10009708:	12800015 	stw	r10,0(r2)
1000970c:	003be006 	br	10008690 <__alt_data_end+0xf8008690>
10009710:	a080100c 	andi	r2,r20,64
10009714:	da802217 	ldw	r10,136(sp)
10009718:	10003026 	beq	r2,zero,100097dc <___vfiprintf_internal_r+0x1220>
1000971c:	5480000b 	ldhu	r18,0(r10)
10009720:	52800104 	addi	r10,r10,4
10009724:	0027883a 	mov	r19,zero
10009728:	da802215 	stw	r10,136(sp)
1000972c:	003d8006 	br	10008d30 <__alt_data_end+0xf8008d30>
10009730:	80c00007 	ldb	r3,0(r16)
10009734:	003c0006 	br	10008738 <__alt_data_end+0xf8008738>
10009738:	a080100c 	andi	r2,r20,64
1000973c:	d8001d85 	stb	zero,118(sp)
10009740:	da802217 	ldw	r10,136(sp)
10009744:	1000201e 	bne	r2,zero,100097c8 <___vfiprintf_internal_r+0x120c>
10009748:	50800104 	addi	r2,r10,4
1000974c:	54800017 	ldw	r18,0(r10)
10009750:	0027883a 	mov	r19,zero
10009754:	483def0e 	bge	r9,zero,10008f14 <__alt_data_end+0xf8008f14>
10009758:	94c6b03a 	or	r3,r18,r19
1000975c:	d8802215 	stw	r2,136(sp)
10009760:	183d4e1e 	bne	r3,zero,10008c9c <__alt_data_end+0xf8008c9c>
10009764:	0039883a 	mov	fp,zero
10009768:	0005883a 	mov	r2,zero
1000976c:	003e0606 	br	10008f88 <__alt_data_end+0xf8008f88>
10009770:	d9402117 	ldw	r5,132(sp)
10009774:	d9002017 	ldw	r4,128(sp)
10009778:	d9801a04 	addi	r6,sp,104
1000977c:	da402c15 	stw	r9,176(sp)
10009780:	db802a15 	stw	r14,168(sp)
10009784:	00084a80 	call	100084a8 <__sprint_r.part.0>
10009788:	da402c17 	ldw	r9,176(sp)
1000978c:	db802a17 	ldw	r14,168(sp)
10009790:	103ede1e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
10009794:	d9401b17 	ldw	r5,108(sp)
10009798:	d8801c17 	ldw	r2,112(sp)
1000979c:	d811883a 	mov	r8,sp
100097a0:	29000044 	addi	r4,r5,1
100097a4:	003e7406 	br	10009178 <__alt_data_end+0xf8009178>
100097a8:	00bfffc4 	movi	r2,-1
100097ac:	003c5806 	br	10008910 <__alt_data_end+0xf8008910>
100097b0:	d811883a 	mov	r8,sp
100097b4:	003ee806 	br	10009358 <__alt_data_end+0xf8009358>
100097b8:	000b883a 	mov	r5,zero
100097bc:	01000044 	movi	r4,1
100097c0:	d811883a 	mov	r8,sp
100097c4:	003e7c06 	br	100091b8 <__alt_data_end+0xf80091b8>
100097c8:	50800104 	addi	r2,r10,4
100097cc:	5480000b 	ldhu	r18,0(r10)
100097d0:	0027883a 	mov	r19,zero
100097d4:	483dcf0e 	bge	r9,zero,10008f14 <__alt_data_end+0xf8008f14>
100097d8:	003fdf06 	br	10009758 <__alt_data_end+0xf8009758>
100097dc:	54800017 	ldw	r18,0(r10)
100097e0:	52800104 	addi	r10,r10,4
100097e4:	0027883a 	mov	r19,zero
100097e8:	da802215 	stw	r10,136(sp)
100097ec:	003d5006 	br	10008d30 <__alt_data_end+0xf8008d30>
100097f0:	50800104 	addi	r2,r10,4
100097f4:	5480000b 	ldhu	r18,0(r10)
100097f8:	0027883a 	mov	r19,zero
100097fc:	483f7d0e 	bge	r9,zero,100095f4 <__alt_data_end+0xf80095f4>
10009800:	003ddc06 	br	10008f74 <__alt_data_end+0xf8008f74>
10009804:	d8c02215 	stw	r3,136(sp)
10009808:	0039883a 	mov	fp,zero
1000980c:	003ddb06 	br	10008f7c <__alt_data_end+0xf8008f7c>
10009810:	02840074 	movhi	r10,4097
10009814:	5291ca04 	addi	r10,r10,18216
10009818:	da802415 	stw	r10,144(sp)
1000981c:	003e8306 	br	1000922c <__alt_data_end+0xf800922c>
10009820:	d8801c17 	ldw	r2,112(sp)
10009824:	dd002117 	ldw	r20,132(sp)
10009828:	103eb926 	beq	r2,zero,10009310 <__alt_data_end+0xf8009310>
1000982c:	d9002017 	ldw	r4,128(sp)
10009830:	d9801a04 	addi	r6,sp,104
10009834:	a00b883a 	mov	r5,r20
10009838:	00084a80 	call	100084a8 <__sprint_r.part.0>
1000983c:	003eb406 	br	10009310 <__alt_data_end+0xf8009310>
10009840:	80c00043 	ldbu	r3,1(r16)
10009844:	a5000814 	ori	r20,r20,32
10009848:	84000044 	addi	r16,r16,1
1000984c:	18c03fcc 	andi	r3,r3,255
10009850:	18c0201c 	xori	r3,r3,128
10009854:	18ffe004 	addi	r3,r3,-128
10009858:	003bb706 	br	10008738 <__alt_data_end+0xf8008738>
1000985c:	a809883a 	mov	r4,r21
10009860:	d8c02a15 	stw	r3,168(sp)
10009864:	da002b15 	stw	r8,172(sp)
10009868:	0000f100 	call	10000f10 <strlen>
1000986c:	d8c02a17 	ldw	r3,168(sp)
10009870:	1027883a 	mov	r19,r2
10009874:	df001d83 	ldbu	fp,118(sp)
10009878:	d8c02215 	stw	r3,136(sp)
1000987c:	0013883a 	mov	r9,zero
10009880:	da002b17 	ldw	r8,172(sp)
10009884:	003c4d06 	br	100089bc <__alt_data_end+0xf80089bc>
10009888:	d9402117 	ldw	r5,132(sp)
1000988c:	d9002017 	ldw	r4,128(sp)
10009890:	d9801a04 	addi	r6,sp,104
10009894:	da402c15 	stw	r9,176(sp)
10009898:	00084a80 	call	100084a8 <__sprint_r.part.0>
1000989c:	da402c17 	ldw	r9,176(sp)
100098a0:	103e9a1e 	bne	r2,zero,1000930c <__alt_data_end+0xf800930c>
100098a4:	d9401b17 	ldw	r5,108(sp)
100098a8:	d8801c17 	ldw	r2,112(sp)
100098ac:	d811883a 	mov	r8,sp
100098b0:	29000044 	addi	r4,r5,1
100098b4:	003e4206 	br	100091c0 <__alt_data_end+0xf80091c0>
100098b8:	d9401b17 	ldw	r5,108(sp)
100098bc:	01040074 	movhi	r4,4097
100098c0:	2111ce04 	addi	r4,r4,18232
100098c4:	d9002415 	stw	r4,144(sp)
100098c8:	29400044 	addi	r5,r5,1
100098cc:	003c6d06 	br	10008a84 <__alt_data_end+0xf8008a84>
100098d0:	0039883a 	mov	fp,zero
100098d4:	00800084 	movi	r2,2
100098d8:	10803fcc 	andi	r2,r2,255
100098dc:	01000044 	movi	r4,1
100098e0:	11001e26 	beq	r2,r4,1000995c <___vfiprintf_internal_r+0x13a0>
100098e4:	01000084 	movi	r4,2
100098e8:	11001e1e 	bne	r2,r4,10009964 <___vfiprintf_internal_r+0x13a8>
100098ec:	1829883a 	mov	r20,r3
100098f0:	003eea06 	br	1000949c <__alt_data_end+0xf800949c>
100098f4:	a007883a 	mov	r3,r20
100098f8:	00800044 	movi	r2,1
100098fc:	003ff606 	br	100098d8 <__alt_data_end+0xf80098d8>
10009900:	00800184 	movi	r2,6
10009904:	1240012e 	bgeu	r2,r9,1000990c <___vfiprintf_internal_r+0x1350>
10009908:	1013883a 	mov	r9,r2
1000990c:	4827883a 	mov	r19,r9
10009910:	4825883a 	mov	r18,r9
10009914:	48001516 	blt	r9,zero,1000996c <___vfiprintf_internal_r+0x13b0>
10009918:	05440074 	movhi	r21,4097
1000991c:	d8c02215 	stw	r3,136(sp)
10009920:	ad516e04 	addi	r21,r21,17848
10009924:	003d1406 	br	10008d78 <__alt_data_end+0xf8008d78>
10009928:	02840074 	movhi	r10,4097
1000992c:	5291ca04 	addi	r10,r10,18216
10009930:	da802415 	stw	r10,144(sp)
10009934:	200d883a 	mov	r6,r4
10009938:	003c9106 	br	10008b80 <__alt_data_end+0xf8008b80>
1000993c:	5021883a 	mov	r16,r10
10009940:	0013883a 	mov	r9,zero
10009944:	003b7d06 	br	1000873c <__alt_data_end+0xf800873c>
10009948:	4827883a 	mov	r19,r9
1000994c:	df001d83 	ldbu	fp,118(sp)
10009950:	d8c02215 	stw	r3,136(sp)
10009954:	0013883a 	mov	r9,zero
10009958:	003c1806 	br	100089bc <__alt_data_end+0xf80089bc>
1000995c:	1829883a 	mov	r20,r3
10009960:	003d1806 	br	10008dc4 <__alt_data_end+0xf8008dc4>
10009964:	1829883a 	mov	r20,r3
10009968:	003ccd06 	br	10008ca0 <__alt_data_end+0xf8008ca0>
1000996c:	0025883a 	mov	r18,zero
10009970:	003fe906 	br	10009918 <__alt_data_end+0xf8009918>
10009974:	d8802217 	ldw	r2,136(sp)
10009978:	80c00043 	ldbu	r3,1(r16)
1000997c:	5021883a 	mov	r16,r10
10009980:	12400017 	ldw	r9,0(r2)
10009984:	10800104 	addi	r2,r2,4
10009988:	d8802215 	stw	r2,136(sp)
1000998c:	483faf0e 	bge	r9,zero,1000984c <__alt_data_end+0xf800984c>
10009990:	18c03fcc 	andi	r3,r3,255
10009994:	18c0201c 	xori	r3,r3,128
10009998:	027fffc4 	movi	r9,-1
1000999c:	18ffe004 	addi	r3,r3,-128
100099a0:	003b6506 	br	10008738 <__alt_data_end+0xf8008738>
100099a4:	d9c01d85 	stb	r7,118(sp)
100099a8:	003ca006 	br	10008c2c <__alt_data_end+0xf8008c2c>
100099ac:	d9c01d85 	stb	r7,118(sp)
100099b0:	003cad06 	br	10008c68 <__alt_data_end+0xf8008c68>
100099b4:	d9c01d85 	stb	r7,118(sp)
100099b8:	003d7d06 	br	10008fb0 <__alt_data_end+0xf8008fb0>
100099bc:	d9c01d85 	stb	r7,118(sp)
100099c0:	003d5f06 	br	10008f40 <__alt_data_end+0xf8008f40>
100099c4:	a080004c 	andi	r2,r20,1
100099c8:	0039883a 	mov	fp,zero
100099cc:	10000526 	beq	r2,zero,100099e4 <___vfiprintf_internal_r+0x1428>
100099d0:	00800c04 	movi	r2,48
100099d4:	d88019c5 	stb	r2,103(sp)
100099d8:	dcc02717 	ldw	r19,156(sp)
100099dc:	dd4019c4 	addi	r21,sp,103
100099e0:	003bf606 	br	100089bc <__alt_data_end+0xf80089bc>
100099e4:	0027883a 	mov	r19,zero
100099e8:	dd401a04 	addi	r21,sp,104
100099ec:	003bf306 	br	100089bc <__alt_data_end+0xf80089bc>
100099f0:	d9c01d85 	stb	r7,118(sp)
100099f4:	003dc806 	br	10009118 <__alt_data_end+0xf8009118>
100099f8:	d9c01d85 	stb	r7,118(sp)
100099fc:	003d3a06 	br	10008ee8 <__alt_data_end+0xf8008ee8>
10009a00:	d9c01d85 	stb	r7,118(sp)
10009a04:	003d2a06 	br	10008eb0 <__alt_data_end+0xf8008eb0>
10009a08:	d9c01d85 	stb	r7,118(sp)
10009a0c:	003cde06 	br	10008d88 <__alt_data_end+0xf8008d88>
10009a10:	d9c01d85 	stb	r7,118(sp)
10009a14:	003cbc06 	br	10008d08 <__alt_data_end+0xf8008d08>

10009a18 <__vfiprintf_internal>:
10009a18:	00840074 	movhi	r2,4097
10009a1c:	1098fc04 	addi	r2,r2,25584
10009a20:	300f883a 	mov	r7,r6
10009a24:	280d883a 	mov	r6,r5
10009a28:	200b883a 	mov	r5,r4
10009a2c:	11000017 	ldw	r4,0(r2)
10009a30:	00085bc1 	jmpi	100085bc <___vfiprintf_internal_r>

10009a34 <__sbprintf>:
10009a34:	2880030b 	ldhu	r2,12(r5)
10009a38:	2ac01917 	ldw	r11,100(r5)
10009a3c:	2a80038b 	ldhu	r10,14(r5)
10009a40:	2a400717 	ldw	r9,28(r5)
10009a44:	2a000917 	ldw	r8,36(r5)
10009a48:	defee204 	addi	sp,sp,-1144
10009a4c:	00c10004 	movi	r3,1024
10009a50:	dc011a15 	stw	r16,1128(sp)
10009a54:	10bfff4c 	andi	r2,r2,65533
10009a58:	2821883a 	mov	r16,r5
10009a5c:	d8cb883a 	add	r5,sp,r3
10009a60:	dc811c15 	stw	r18,1136(sp)
10009a64:	dc411b15 	stw	r17,1132(sp)
10009a68:	dfc11d15 	stw	ra,1140(sp)
10009a6c:	2025883a 	mov	r18,r4
10009a70:	d881030d 	sth	r2,1036(sp)
10009a74:	dac11915 	stw	r11,1124(sp)
10009a78:	da81038d 	sth	r10,1038(sp)
10009a7c:	da410715 	stw	r9,1052(sp)
10009a80:	da010915 	stw	r8,1060(sp)
10009a84:	dec10015 	stw	sp,1024(sp)
10009a88:	dec10415 	stw	sp,1040(sp)
10009a8c:	d8c10215 	stw	r3,1032(sp)
10009a90:	d8c10515 	stw	r3,1044(sp)
10009a94:	d8010615 	stw	zero,1048(sp)
10009a98:	00085bc0 	call	100085bc <___vfiprintf_internal_r>
10009a9c:	1023883a 	mov	r17,r2
10009aa0:	10000416 	blt	r2,zero,10009ab4 <__sbprintf+0x80>
10009aa4:	d9410004 	addi	r5,sp,1024
10009aa8:	9009883a 	mov	r4,r18
10009aac:	0004e700 	call	10004e70 <_fflush_r>
10009ab0:	10000d1e 	bne	r2,zero,10009ae8 <__sbprintf+0xb4>
10009ab4:	d881030b 	ldhu	r2,1036(sp)
10009ab8:	1080100c 	andi	r2,r2,64
10009abc:	10000326 	beq	r2,zero,10009acc <__sbprintf+0x98>
10009ac0:	8080030b 	ldhu	r2,12(r16)
10009ac4:	10801014 	ori	r2,r2,64
10009ac8:	8080030d 	sth	r2,12(r16)
10009acc:	8805883a 	mov	r2,r17
10009ad0:	dfc11d17 	ldw	ra,1140(sp)
10009ad4:	dc811c17 	ldw	r18,1136(sp)
10009ad8:	dc411b17 	ldw	r17,1132(sp)
10009adc:	dc011a17 	ldw	r16,1128(sp)
10009ae0:	dec11e04 	addi	sp,sp,1144
10009ae4:	f800283a 	ret
10009ae8:	047fffc4 	movi	r17,-1
10009aec:	003ff106 	br	10009ab4 <__alt_data_end+0xf8009ab4>

10009af0 <_write_r>:
10009af0:	defffd04 	addi	sp,sp,-12
10009af4:	2805883a 	mov	r2,r5
10009af8:	dc000015 	stw	r16,0(sp)
10009afc:	04040074 	movhi	r16,4097
10009b00:	dc400115 	stw	r17,4(sp)
10009b04:	300b883a 	mov	r5,r6
10009b08:	841ff004 	addi	r16,r16,32704
10009b0c:	2023883a 	mov	r17,r4
10009b10:	380d883a 	mov	r6,r7
10009b14:	1009883a 	mov	r4,r2
10009b18:	dfc00215 	stw	ra,8(sp)
10009b1c:	80000015 	stw	zero,0(r16)
10009b20:	000e0bc0 	call	1000e0bc <write>
10009b24:	00ffffc4 	movi	r3,-1
10009b28:	10c00526 	beq	r2,r3,10009b40 <_write_r+0x50>
10009b2c:	dfc00217 	ldw	ra,8(sp)
10009b30:	dc400117 	ldw	r17,4(sp)
10009b34:	dc000017 	ldw	r16,0(sp)
10009b38:	dec00304 	addi	sp,sp,12
10009b3c:	f800283a 	ret
10009b40:	80c00017 	ldw	r3,0(r16)
10009b44:	183ff926 	beq	r3,zero,10009b2c <__alt_data_end+0xf8009b2c>
10009b48:	88c00015 	stw	r3,0(r17)
10009b4c:	003ff706 	br	10009b2c <__alt_data_end+0xf8009b2c>

10009b50 <_close_r>:
10009b50:	defffd04 	addi	sp,sp,-12
10009b54:	dc000015 	stw	r16,0(sp)
10009b58:	04040074 	movhi	r16,4097
10009b5c:	dc400115 	stw	r17,4(sp)
10009b60:	841ff004 	addi	r16,r16,32704
10009b64:	2023883a 	mov	r17,r4
10009b68:	2809883a 	mov	r4,r5
10009b6c:	dfc00215 	stw	ra,8(sp)
10009b70:	80000015 	stw	zero,0(r16)
10009b74:	000d72c0 	call	1000d72c <close>
10009b78:	00ffffc4 	movi	r3,-1
10009b7c:	10c00526 	beq	r2,r3,10009b94 <_close_r+0x44>
10009b80:	dfc00217 	ldw	ra,8(sp)
10009b84:	dc400117 	ldw	r17,4(sp)
10009b88:	dc000017 	ldw	r16,0(sp)
10009b8c:	dec00304 	addi	sp,sp,12
10009b90:	f800283a 	ret
10009b94:	80c00017 	ldw	r3,0(r16)
10009b98:	183ff926 	beq	r3,zero,10009b80 <__alt_data_end+0xf8009b80>
10009b9c:	88c00015 	stw	r3,0(r17)
10009ba0:	003ff706 	br	10009b80 <__alt_data_end+0xf8009b80>

10009ba4 <_calloc_r>:
10009ba4:	298b383a 	mul	r5,r5,r6
10009ba8:	defffe04 	addi	sp,sp,-8
10009bac:	dfc00115 	stw	ra,4(sp)
10009bb0:	dc000015 	stw	r16,0(sp)
10009bb4:	0005fac0 	call	10005fac <_malloc_r>
10009bb8:	10002926 	beq	r2,zero,10009c60 <_calloc_r+0xbc>
10009bbc:	11bfff17 	ldw	r6,-4(r2)
10009bc0:	1021883a 	mov	r16,r2
10009bc4:	00bfff04 	movi	r2,-4
10009bc8:	308c703a 	and	r6,r6,r2
10009bcc:	00c00904 	movi	r3,36
10009bd0:	308d883a 	add	r6,r6,r2
10009bd4:	19801636 	bltu	r3,r6,10009c30 <_calloc_r+0x8c>
10009bd8:	008004c4 	movi	r2,19
10009bdc:	11800b2e 	bgeu	r2,r6,10009c0c <_calloc_r+0x68>
10009be0:	80000015 	stw	zero,0(r16)
10009be4:	80000115 	stw	zero,4(r16)
10009be8:	008006c4 	movi	r2,27
10009bec:	11801a2e 	bgeu	r2,r6,10009c58 <_calloc_r+0xb4>
10009bf0:	80000215 	stw	zero,8(r16)
10009bf4:	80000315 	stw	zero,12(r16)
10009bf8:	30c0151e 	bne	r6,r3,10009c50 <_calloc_r+0xac>
10009bfc:	80000415 	stw	zero,16(r16)
10009c00:	80800604 	addi	r2,r16,24
10009c04:	80000515 	stw	zero,20(r16)
10009c08:	00000106 	br	10009c10 <_calloc_r+0x6c>
10009c0c:	8005883a 	mov	r2,r16
10009c10:	10000015 	stw	zero,0(r2)
10009c14:	10000115 	stw	zero,4(r2)
10009c18:	10000215 	stw	zero,8(r2)
10009c1c:	8005883a 	mov	r2,r16
10009c20:	dfc00117 	ldw	ra,4(sp)
10009c24:	dc000017 	ldw	r16,0(sp)
10009c28:	dec00204 	addi	sp,sp,8
10009c2c:	f800283a 	ret
10009c30:	000b883a 	mov	r5,zero
10009c34:	8009883a 	mov	r4,r16
10009c38:	0006b400 	call	10006b40 <memset>
10009c3c:	8005883a 	mov	r2,r16
10009c40:	dfc00117 	ldw	ra,4(sp)
10009c44:	dc000017 	ldw	r16,0(sp)
10009c48:	dec00204 	addi	sp,sp,8
10009c4c:	f800283a 	ret
10009c50:	80800404 	addi	r2,r16,16
10009c54:	003fee06 	br	10009c10 <__alt_data_end+0xf8009c10>
10009c58:	80800204 	addi	r2,r16,8
10009c5c:	003fec06 	br	10009c10 <__alt_data_end+0xf8009c10>
10009c60:	0005883a 	mov	r2,zero
10009c64:	003fee06 	br	10009c20 <__alt_data_end+0xf8009c20>

10009c68 <_fclose_r>:
10009c68:	28003926 	beq	r5,zero,10009d50 <_fclose_r+0xe8>
10009c6c:	defffc04 	addi	sp,sp,-16
10009c70:	dc400115 	stw	r17,4(sp)
10009c74:	dc000015 	stw	r16,0(sp)
10009c78:	dfc00315 	stw	ra,12(sp)
10009c7c:	dc800215 	stw	r18,8(sp)
10009c80:	2023883a 	mov	r17,r4
10009c84:	2821883a 	mov	r16,r5
10009c88:	20000226 	beq	r4,zero,10009c94 <_fclose_r+0x2c>
10009c8c:	20800e17 	ldw	r2,56(r4)
10009c90:	10002726 	beq	r2,zero,10009d30 <_fclose_r+0xc8>
10009c94:	8080030f 	ldh	r2,12(r16)
10009c98:	1000071e 	bne	r2,zero,10009cb8 <_fclose_r+0x50>
10009c9c:	0005883a 	mov	r2,zero
10009ca0:	dfc00317 	ldw	ra,12(sp)
10009ca4:	dc800217 	ldw	r18,8(sp)
10009ca8:	dc400117 	ldw	r17,4(sp)
10009cac:	dc000017 	ldw	r16,0(sp)
10009cb0:	dec00404 	addi	sp,sp,16
10009cb4:	f800283a 	ret
10009cb8:	800b883a 	mov	r5,r16
10009cbc:	8809883a 	mov	r4,r17
10009cc0:	0004c540 	call	10004c54 <__sflush_r>
10009cc4:	1025883a 	mov	r18,r2
10009cc8:	80800b17 	ldw	r2,44(r16)
10009ccc:	10000426 	beq	r2,zero,10009ce0 <_fclose_r+0x78>
10009cd0:	81400717 	ldw	r5,28(r16)
10009cd4:	8809883a 	mov	r4,r17
10009cd8:	103ee83a 	callr	r2
10009cdc:	10001616 	blt	r2,zero,10009d38 <_fclose_r+0xd0>
10009ce0:	8080030b 	ldhu	r2,12(r16)
10009ce4:	1080200c 	andi	r2,r2,128
10009ce8:	1000151e 	bne	r2,zero,10009d40 <_fclose_r+0xd8>
10009cec:	81400c17 	ldw	r5,48(r16)
10009cf0:	28000526 	beq	r5,zero,10009d08 <_fclose_r+0xa0>
10009cf4:	80801004 	addi	r2,r16,64
10009cf8:	28800226 	beq	r5,r2,10009d04 <_fclose_r+0x9c>
10009cfc:	8809883a 	mov	r4,r17
10009d00:	00053c00 	call	100053c0 <_free_r>
10009d04:	80000c15 	stw	zero,48(r16)
10009d08:	81401117 	ldw	r5,68(r16)
10009d0c:	28000326 	beq	r5,zero,10009d1c <_fclose_r+0xb4>
10009d10:	8809883a 	mov	r4,r17
10009d14:	00053c00 	call	100053c0 <_free_r>
10009d18:	80001115 	stw	zero,68(r16)
10009d1c:	000525c0 	call	1000525c <__sfp_lock_acquire>
10009d20:	8000030d 	sth	zero,12(r16)
10009d24:	00052600 	call	10005260 <__sfp_lock_release>
10009d28:	9005883a 	mov	r2,r18
10009d2c:	003fdc06 	br	10009ca0 <__alt_data_end+0xf8009ca0>
10009d30:	000524c0 	call	1000524c <__sinit>
10009d34:	003fd706 	br	10009c94 <__alt_data_end+0xf8009c94>
10009d38:	04bfffc4 	movi	r18,-1
10009d3c:	003fe806 	br	10009ce0 <__alt_data_end+0xf8009ce0>
10009d40:	81400417 	ldw	r5,16(r16)
10009d44:	8809883a 	mov	r4,r17
10009d48:	00053c00 	call	100053c0 <_free_r>
10009d4c:	003fe706 	br	10009cec <__alt_data_end+0xf8009cec>
10009d50:	0005883a 	mov	r2,zero
10009d54:	f800283a 	ret

10009d58 <fclose>:
10009d58:	00840074 	movhi	r2,4097
10009d5c:	1098fc04 	addi	r2,r2,25584
10009d60:	200b883a 	mov	r5,r4
10009d64:	11000017 	ldw	r4,0(r2)
10009d68:	0009c681 	jmpi	10009c68 <_fclose_r>

10009d6c <__fputwc>:
10009d6c:	defff804 	addi	sp,sp,-32
10009d70:	dcc00415 	stw	r19,16(sp)
10009d74:	dc800315 	stw	r18,12(sp)
10009d78:	dc000115 	stw	r16,4(sp)
10009d7c:	dfc00715 	stw	ra,28(sp)
10009d80:	dd400615 	stw	r21,24(sp)
10009d84:	dd000515 	stw	r20,20(sp)
10009d88:	dc400215 	stw	r17,8(sp)
10009d8c:	2027883a 	mov	r19,r4
10009d90:	2825883a 	mov	r18,r5
10009d94:	3021883a 	mov	r16,r6
10009d98:	0005d9c0 	call	10005d9c <__locale_mb_cur_max>
10009d9c:	00c00044 	movi	r3,1
10009da0:	10c03e26 	beq	r2,r3,10009e9c <__fputwc+0x130>
10009da4:	81c01704 	addi	r7,r16,92
10009da8:	900d883a 	mov	r6,r18
10009dac:	d80b883a 	mov	r5,sp
10009db0:	9809883a 	mov	r4,r19
10009db4:	000a23c0 	call	1000a23c <_wcrtomb_r>
10009db8:	1029883a 	mov	r20,r2
10009dbc:	00bfffc4 	movi	r2,-1
10009dc0:	a0802026 	beq	r20,r2,10009e44 <__fputwc+0xd8>
10009dc4:	d9400003 	ldbu	r5,0(sp)
10009dc8:	a0001c26 	beq	r20,zero,10009e3c <__fputwc+0xd0>
10009dcc:	0023883a 	mov	r17,zero
10009dd0:	05400284 	movi	r21,10
10009dd4:	00000906 	br	10009dfc <__fputwc+0x90>
10009dd8:	80800017 	ldw	r2,0(r16)
10009ddc:	11400005 	stb	r5,0(r2)
10009de0:	80c00017 	ldw	r3,0(r16)
10009de4:	18c00044 	addi	r3,r3,1
10009de8:	80c00015 	stw	r3,0(r16)
10009dec:	8c400044 	addi	r17,r17,1
10009df0:	dc45883a 	add	r2,sp,r17
10009df4:	8d00112e 	bgeu	r17,r20,10009e3c <__fputwc+0xd0>
10009df8:	11400003 	ldbu	r5,0(r2)
10009dfc:	80c00217 	ldw	r3,8(r16)
10009e00:	18ffffc4 	addi	r3,r3,-1
10009e04:	80c00215 	stw	r3,8(r16)
10009e08:	183ff30e 	bge	r3,zero,10009dd8 <__alt_data_end+0xf8009dd8>
10009e0c:	80800617 	ldw	r2,24(r16)
10009e10:	18801916 	blt	r3,r2,10009e78 <__fputwc+0x10c>
10009e14:	80800017 	ldw	r2,0(r16)
10009e18:	11400005 	stb	r5,0(r2)
10009e1c:	80800017 	ldw	r2,0(r16)
10009e20:	10c00003 	ldbu	r3,0(r2)
10009e24:	10800044 	addi	r2,r2,1
10009e28:	1d402326 	beq	r3,r21,10009eb8 <__fputwc+0x14c>
10009e2c:	80800015 	stw	r2,0(r16)
10009e30:	8c400044 	addi	r17,r17,1
10009e34:	dc45883a 	add	r2,sp,r17
10009e38:	8d3fef36 	bltu	r17,r20,10009df8 <__alt_data_end+0xf8009df8>
10009e3c:	9005883a 	mov	r2,r18
10009e40:	00000406 	br	10009e54 <__fputwc+0xe8>
10009e44:	80c0030b 	ldhu	r3,12(r16)
10009e48:	a005883a 	mov	r2,r20
10009e4c:	18c01014 	ori	r3,r3,64
10009e50:	80c0030d 	sth	r3,12(r16)
10009e54:	dfc00717 	ldw	ra,28(sp)
10009e58:	dd400617 	ldw	r21,24(sp)
10009e5c:	dd000517 	ldw	r20,20(sp)
10009e60:	dcc00417 	ldw	r19,16(sp)
10009e64:	dc800317 	ldw	r18,12(sp)
10009e68:	dc400217 	ldw	r17,8(sp)
10009e6c:	dc000117 	ldw	r16,4(sp)
10009e70:	dec00804 	addi	sp,sp,32
10009e74:	f800283a 	ret
10009e78:	800d883a 	mov	r6,r16
10009e7c:	29403fcc 	andi	r5,r5,255
10009e80:	9809883a 	mov	r4,r19
10009e84:	000a0e40 	call	1000a0e4 <__swbuf_r>
10009e88:	10bfffe0 	cmpeqi	r2,r2,-1
10009e8c:	10803fcc 	andi	r2,r2,255
10009e90:	103fd626 	beq	r2,zero,10009dec <__alt_data_end+0xf8009dec>
10009e94:	00bfffc4 	movi	r2,-1
10009e98:	003fee06 	br	10009e54 <__alt_data_end+0xf8009e54>
10009e9c:	90ffffc4 	addi	r3,r18,-1
10009ea0:	01003f84 	movi	r4,254
10009ea4:	20ffbf36 	bltu	r4,r3,10009da4 <__alt_data_end+0xf8009da4>
10009ea8:	900b883a 	mov	r5,r18
10009eac:	dc800005 	stb	r18,0(sp)
10009eb0:	1029883a 	mov	r20,r2
10009eb4:	003fc506 	br	10009dcc <__alt_data_end+0xf8009dcc>
10009eb8:	800d883a 	mov	r6,r16
10009ebc:	a80b883a 	mov	r5,r21
10009ec0:	9809883a 	mov	r4,r19
10009ec4:	000a0e40 	call	1000a0e4 <__swbuf_r>
10009ec8:	10bfffe0 	cmpeqi	r2,r2,-1
10009ecc:	003fef06 	br	10009e8c <__alt_data_end+0xf8009e8c>

10009ed0 <_fputwc_r>:
10009ed0:	3080030b 	ldhu	r2,12(r6)
10009ed4:	10c8000c 	andi	r3,r2,8192
10009ed8:	1800051e 	bne	r3,zero,10009ef0 <_fputwc_r+0x20>
10009edc:	30c01917 	ldw	r3,100(r6)
10009ee0:	10880014 	ori	r2,r2,8192
10009ee4:	3080030d 	sth	r2,12(r6)
10009ee8:	18880014 	ori	r2,r3,8192
10009eec:	30801915 	stw	r2,100(r6)
10009ef0:	0009d6c1 	jmpi	10009d6c <__fputwc>

10009ef4 <fputwc>:
10009ef4:	00840074 	movhi	r2,4097
10009ef8:	defffc04 	addi	sp,sp,-16
10009efc:	1098fc04 	addi	r2,r2,25584
10009f00:	dc000115 	stw	r16,4(sp)
10009f04:	14000017 	ldw	r16,0(r2)
10009f08:	dc400215 	stw	r17,8(sp)
10009f0c:	dfc00315 	stw	ra,12(sp)
10009f10:	2023883a 	mov	r17,r4
10009f14:	80000226 	beq	r16,zero,10009f20 <fputwc+0x2c>
10009f18:	80800e17 	ldw	r2,56(r16)
10009f1c:	10001026 	beq	r2,zero,10009f60 <fputwc+0x6c>
10009f20:	2880030b 	ldhu	r2,12(r5)
10009f24:	10c8000c 	andi	r3,r2,8192
10009f28:	1800051e 	bne	r3,zero,10009f40 <fputwc+0x4c>
10009f2c:	28c01917 	ldw	r3,100(r5)
10009f30:	10880014 	ori	r2,r2,8192
10009f34:	2880030d 	sth	r2,12(r5)
10009f38:	18880014 	ori	r2,r3,8192
10009f3c:	28801915 	stw	r2,100(r5)
10009f40:	280d883a 	mov	r6,r5
10009f44:	8009883a 	mov	r4,r16
10009f48:	880b883a 	mov	r5,r17
10009f4c:	dfc00317 	ldw	ra,12(sp)
10009f50:	dc400217 	ldw	r17,8(sp)
10009f54:	dc000117 	ldw	r16,4(sp)
10009f58:	dec00404 	addi	sp,sp,16
10009f5c:	0009d6c1 	jmpi	10009d6c <__fputwc>
10009f60:	8009883a 	mov	r4,r16
10009f64:	d9400015 	stw	r5,0(sp)
10009f68:	000524c0 	call	1000524c <__sinit>
10009f6c:	d9400017 	ldw	r5,0(sp)
10009f70:	003feb06 	br	10009f20 <__alt_data_end+0xf8009f20>

10009f74 <_fstat_r>:
10009f74:	defffd04 	addi	sp,sp,-12
10009f78:	2805883a 	mov	r2,r5
10009f7c:	dc000015 	stw	r16,0(sp)
10009f80:	04040074 	movhi	r16,4097
10009f84:	dc400115 	stw	r17,4(sp)
10009f88:	841ff004 	addi	r16,r16,32704
10009f8c:	2023883a 	mov	r17,r4
10009f90:	300b883a 	mov	r5,r6
10009f94:	1009883a 	mov	r4,r2
10009f98:	dfc00215 	stw	ra,8(sp)
10009f9c:	80000015 	stw	zero,0(r16)
10009fa0:	000d8640 	call	1000d864 <fstat>
10009fa4:	00ffffc4 	movi	r3,-1
10009fa8:	10c00526 	beq	r2,r3,10009fc0 <_fstat_r+0x4c>
10009fac:	dfc00217 	ldw	ra,8(sp)
10009fb0:	dc400117 	ldw	r17,4(sp)
10009fb4:	dc000017 	ldw	r16,0(sp)
10009fb8:	dec00304 	addi	sp,sp,12
10009fbc:	f800283a 	ret
10009fc0:	80c00017 	ldw	r3,0(r16)
10009fc4:	183ff926 	beq	r3,zero,10009fac <__alt_data_end+0xf8009fac>
10009fc8:	88c00015 	stw	r3,0(r17)
10009fcc:	003ff706 	br	10009fac <__alt_data_end+0xf8009fac>

10009fd0 <_isatty_r>:
10009fd0:	defffd04 	addi	sp,sp,-12
10009fd4:	dc000015 	stw	r16,0(sp)
10009fd8:	04040074 	movhi	r16,4097
10009fdc:	dc400115 	stw	r17,4(sp)
10009fe0:	841ff004 	addi	r16,r16,32704
10009fe4:	2023883a 	mov	r17,r4
10009fe8:	2809883a 	mov	r4,r5
10009fec:	dfc00215 	stw	ra,8(sp)
10009ff0:	80000015 	stw	zero,0(r16)
10009ff4:	000dad00 	call	1000dad0 <isatty>
10009ff8:	00ffffc4 	movi	r3,-1
10009ffc:	10c00526 	beq	r2,r3,1000a014 <_isatty_r+0x44>
1000a000:	dfc00217 	ldw	ra,8(sp)
1000a004:	dc400117 	ldw	r17,4(sp)
1000a008:	dc000017 	ldw	r16,0(sp)
1000a00c:	dec00304 	addi	sp,sp,12
1000a010:	f800283a 	ret
1000a014:	80c00017 	ldw	r3,0(r16)
1000a018:	183ff926 	beq	r3,zero,1000a000 <__alt_data_end+0xf800a000>
1000a01c:	88c00015 	stw	r3,0(r17)
1000a020:	003ff706 	br	1000a000 <__alt_data_end+0xf800a000>

1000a024 <_lseek_r>:
1000a024:	defffd04 	addi	sp,sp,-12
1000a028:	2805883a 	mov	r2,r5
1000a02c:	dc000015 	stw	r16,0(sp)
1000a030:	04040074 	movhi	r16,4097
1000a034:	dc400115 	stw	r17,4(sp)
1000a038:	300b883a 	mov	r5,r6
1000a03c:	841ff004 	addi	r16,r16,32704
1000a040:	2023883a 	mov	r17,r4
1000a044:	380d883a 	mov	r6,r7
1000a048:	1009883a 	mov	r4,r2
1000a04c:	dfc00215 	stw	ra,8(sp)
1000a050:	80000015 	stw	zero,0(r16)
1000a054:	000dc9c0 	call	1000dc9c <lseek>
1000a058:	00ffffc4 	movi	r3,-1
1000a05c:	10c00526 	beq	r2,r3,1000a074 <_lseek_r+0x50>
1000a060:	dfc00217 	ldw	ra,8(sp)
1000a064:	dc400117 	ldw	r17,4(sp)
1000a068:	dc000017 	ldw	r16,0(sp)
1000a06c:	dec00304 	addi	sp,sp,12
1000a070:	f800283a 	ret
1000a074:	80c00017 	ldw	r3,0(r16)
1000a078:	183ff926 	beq	r3,zero,1000a060 <__alt_data_end+0xf800a060>
1000a07c:	88c00015 	stw	r3,0(r17)
1000a080:	003ff706 	br	1000a060 <__alt_data_end+0xf800a060>

1000a084 <_read_r>:
1000a084:	defffd04 	addi	sp,sp,-12
1000a088:	2805883a 	mov	r2,r5
1000a08c:	dc000015 	stw	r16,0(sp)
1000a090:	04040074 	movhi	r16,4097
1000a094:	dc400115 	stw	r17,4(sp)
1000a098:	300b883a 	mov	r5,r6
1000a09c:	841ff004 	addi	r16,r16,32704
1000a0a0:	2023883a 	mov	r17,r4
1000a0a4:	380d883a 	mov	r6,r7
1000a0a8:	1009883a 	mov	r4,r2
1000a0ac:	dfc00215 	stw	ra,8(sp)
1000a0b0:	80000015 	stw	zero,0(r16)
1000a0b4:	000de700 	call	1000de70 <read>
1000a0b8:	00ffffc4 	movi	r3,-1
1000a0bc:	10c00526 	beq	r2,r3,1000a0d4 <_read_r+0x50>
1000a0c0:	dfc00217 	ldw	ra,8(sp)
1000a0c4:	dc400117 	ldw	r17,4(sp)
1000a0c8:	dc000017 	ldw	r16,0(sp)
1000a0cc:	dec00304 	addi	sp,sp,12
1000a0d0:	f800283a 	ret
1000a0d4:	80c00017 	ldw	r3,0(r16)
1000a0d8:	183ff926 	beq	r3,zero,1000a0c0 <__alt_data_end+0xf800a0c0>
1000a0dc:	88c00015 	stw	r3,0(r17)
1000a0e0:	003ff706 	br	1000a0c0 <__alt_data_end+0xf800a0c0>

1000a0e4 <__swbuf_r>:
1000a0e4:	defffb04 	addi	sp,sp,-20
1000a0e8:	dcc00315 	stw	r19,12(sp)
1000a0ec:	dc800215 	stw	r18,8(sp)
1000a0f0:	dc000015 	stw	r16,0(sp)
1000a0f4:	dfc00415 	stw	ra,16(sp)
1000a0f8:	dc400115 	stw	r17,4(sp)
1000a0fc:	2025883a 	mov	r18,r4
1000a100:	2827883a 	mov	r19,r5
1000a104:	3021883a 	mov	r16,r6
1000a108:	20000226 	beq	r4,zero,1000a114 <__swbuf_r+0x30>
1000a10c:	20800e17 	ldw	r2,56(r4)
1000a110:	10004226 	beq	r2,zero,1000a21c <__swbuf_r+0x138>
1000a114:	80800617 	ldw	r2,24(r16)
1000a118:	8100030b 	ldhu	r4,12(r16)
1000a11c:	80800215 	stw	r2,8(r16)
1000a120:	2080020c 	andi	r2,r4,8
1000a124:	10003626 	beq	r2,zero,1000a200 <__swbuf_r+0x11c>
1000a128:	80c00417 	ldw	r3,16(r16)
1000a12c:	18003426 	beq	r3,zero,1000a200 <__swbuf_r+0x11c>
1000a130:	2088000c 	andi	r2,r4,8192
1000a134:	9c403fcc 	andi	r17,r19,255
1000a138:	10001a26 	beq	r2,zero,1000a1a4 <__swbuf_r+0xc0>
1000a13c:	80800017 	ldw	r2,0(r16)
1000a140:	81000517 	ldw	r4,20(r16)
1000a144:	10c7c83a 	sub	r3,r2,r3
1000a148:	1900200e 	bge	r3,r4,1000a1cc <__swbuf_r+0xe8>
1000a14c:	18c00044 	addi	r3,r3,1
1000a150:	81000217 	ldw	r4,8(r16)
1000a154:	11400044 	addi	r5,r2,1
1000a158:	81400015 	stw	r5,0(r16)
1000a15c:	213fffc4 	addi	r4,r4,-1
1000a160:	81000215 	stw	r4,8(r16)
1000a164:	14c00005 	stb	r19,0(r2)
1000a168:	80800517 	ldw	r2,20(r16)
1000a16c:	10c01e26 	beq	r2,r3,1000a1e8 <__swbuf_r+0x104>
1000a170:	8080030b 	ldhu	r2,12(r16)
1000a174:	1080004c 	andi	r2,r2,1
1000a178:	10000226 	beq	r2,zero,1000a184 <__swbuf_r+0xa0>
1000a17c:	00800284 	movi	r2,10
1000a180:	88801926 	beq	r17,r2,1000a1e8 <__swbuf_r+0x104>
1000a184:	8805883a 	mov	r2,r17
1000a188:	dfc00417 	ldw	ra,16(sp)
1000a18c:	dcc00317 	ldw	r19,12(sp)
1000a190:	dc800217 	ldw	r18,8(sp)
1000a194:	dc400117 	ldw	r17,4(sp)
1000a198:	dc000017 	ldw	r16,0(sp)
1000a19c:	dec00504 	addi	sp,sp,20
1000a1a0:	f800283a 	ret
1000a1a4:	81401917 	ldw	r5,100(r16)
1000a1a8:	00b7ffc4 	movi	r2,-8193
1000a1ac:	21080014 	ori	r4,r4,8192
1000a1b0:	2884703a 	and	r2,r5,r2
1000a1b4:	80801915 	stw	r2,100(r16)
1000a1b8:	80800017 	ldw	r2,0(r16)
1000a1bc:	8100030d 	sth	r4,12(r16)
1000a1c0:	81000517 	ldw	r4,20(r16)
1000a1c4:	10c7c83a 	sub	r3,r2,r3
1000a1c8:	193fe016 	blt	r3,r4,1000a14c <__alt_data_end+0xf800a14c>
1000a1cc:	800b883a 	mov	r5,r16
1000a1d0:	9009883a 	mov	r4,r18
1000a1d4:	0004e700 	call	10004e70 <_fflush_r>
1000a1d8:	1000071e 	bne	r2,zero,1000a1f8 <__swbuf_r+0x114>
1000a1dc:	80800017 	ldw	r2,0(r16)
1000a1e0:	00c00044 	movi	r3,1
1000a1e4:	003fda06 	br	1000a150 <__alt_data_end+0xf800a150>
1000a1e8:	800b883a 	mov	r5,r16
1000a1ec:	9009883a 	mov	r4,r18
1000a1f0:	0004e700 	call	10004e70 <_fflush_r>
1000a1f4:	103fe326 	beq	r2,zero,1000a184 <__alt_data_end+0xf800a184>
1000a1f8:	00bfffc4 	movi	r2,-1
1000a1fc:	003fe206 	br	1000a188 <__alt_data_end+0xf800a188>
1000a200:	800b883a 	mov	r5,r16
1000a204:	9009883a 	mov	r4,r18
1000a208:	00032780 	call	10003278 <__swsetup_r>
1000a20c:	103ffa1e 	bne	r2,zero,1000a1f8 <__alt_data_end+0xf800a1f8>
1000a210:	8100030b 	ldhu	r4,12(r16)
1000a214:	80c00417 	ldw	r3,16(r16)
1000a218:	003fc506 	br	1000a130 <__alt_data_end+0xf800a130>
1000a21c:	000524c0 	call	1000524c <__sinit>
1000a220:	003fbc06 	br	1000a114 <__alt_data_end+0xf800a114>

1000a224 <__swbuf>:
1000a224:	00840074 	movhi	r2,4097
1000a228:	1098fc04 	addi	r2,r2,25584
1000a22c:	280d883a 	mov	r6,r5
1000a230:	200b883a 	mov	r5,r4
1000a234:	11000017 	ldw	r4,0(r2)
1000a238:	000a0e41 	jmpi	1000a0e4 <__swbuf_r>

1000a23c <_wcrtomb_r>:
1000a23c:	defff604 	addi	sp,sp,-40
1000a240:	00840074 	movhi	r2,4097
1000a244:	dc800815 	stw	r18,32(sp)
1000a248:	dc400715 	stw	r17,28(sp)
1000a24c:	dc000615 	stw	r16,24(sp)
1000a250:	10990004 	addi	r2,r2,25600
1000a254:	dfc00915 	stw	ra,36(sp)
1000a258:	2021883a 	mov	r16,r4
1000a25c:	3823883a 	mov	r17,r7
1000a260:	14800017 	ldw	r18,0(r2)
1000a264:	28001426 	beq	r5,zero,1000a2b8 <_wcrtomb_r+0x7c>
1000a268:	d9400415 	stw	r5,16(sp)
1000a26c:	d9800515 	stw	r6,20(sp)
1000a270:	0005d900 	call	10005d90 <__locale_charset>
1000a274:	d9800517 	ldw	r6,20(sp)
1000a278:	d9400417 	ldw	r5,16(sp)
1000a27c:	100f883a 	mov	r7,r2
1000a280:	dc400015 	stw	r17,0(sp)
1000a284:	8009883a 	mov	r4,r16
1000a288:	903ee83a 	callr	r18
1000a28c:	00ffffc4 	movi	r3,-1
1000a290:	10c0031e 	bne	r2,r3,1000a2a0 <_wcrtomb_r+0x64>
1000a294:	88000015 	stw	zero,0(r17)
1000a298:	00c02284 	movi	r3,138
1000a29c:	80c00015 	stw	r3,0(r16)
1000a2a0:	dfc00917 	ldw	ra,36(sp)
1000a2a4:	dc800817 	ldw	r18,32(sp)
1000a2a8:	dc400717 	ldw	r17,28(sp)
1000a2ac:	dc000617 	ldw	r16,24(sp)
1000a2b0:	dec00a04 	addi	sp,sp,40
1000a2b4:	f800283a 	ret
1000a2b8:	0005d900 	call	10005d90 <__locale_charset>
1000a2bc:	100f883a 	mov	r7,r2
1000a2c0:	dc400015 	stw	r17,0(sp)
1000a2c4:	000d883a 	mov	r6,zero
1000a2c8:	d9400104 	addi	r5,sp,4
1000a2cc:	8009883a 	mov	r4,r16
1000a2d0:	903ee83a 	callr	r18
1000a2d4:	003fed06 	br	1000a28c <__alt_data_end+0xf800a28c>

1000a2d8 <wcrtomb>:
1000a2d8:	defff604 	addi	sp,sp,-40
1000a2dc:	00840074 	movhi	r2,4097
1000a2e0:	dc800615 	stw	r18,24(sp)
1000a2e4:	dc400515 	stw	r17,20(sp)
1000a2e8:	1098fc04 	addi	r2,r2,25584
1000a2ec:	dfc00915 	stw	ra,36(sp)
1000a2f0:	dd000815 	stw	r20,32(sp)
1000a2f4:	dcc00715 	stw	r19,28(sp)
1000a2f8:	dc000415 	stw	r16,16(sp)
1000a2fc:	3025883a 	mov	r18,r6
1000a300:	14400017 	ldw	r17,0(r2)
1000a304:	20001926 	beq	r4,zero,1000a36c <wcrtomb+0x94>
1000a308:	00840074 	movhi	r2,4097
1000a30c:	10990004 	addi	r2,r2,25600
1000a310:	15000017 	ldw	r20,0(r2)
1000a314:	2021883a 	mov	r16,r4
1000a318:	2827883a 	mov	r19,r5
1000a31c:	0005d900 	call	10005d90 <__locale_charset>
1000a320:	100f883a 	mov	r7,r2
1000a324:	dc800015 	stw	r18,0(sp)
1000a328:	980d883a 	mov	r6,r19
1000a32c:	800b883a 	mov	r5,r16
1000a330:	8809883a 	mov	r4,r17
1000a334:	a03ee83a 	callr	r20
1000a338:	00ffffc4 	movi	r3,-1
1000a33c:	10c0031e 	bne	r2,r3,1000a34c <wcrtomb+0x74>
1000a340:	90000015 	stw	zero,0(r18)
1000a344:	00c02284 	movi	r3,138
1000a348:	88c00015 	stw	r3,0(r17)
1000a34c:	dfc00917 	ldw	ra,36(sp)
1000a350:	dd000817 	ldw	r20,32(sp)
1000a354:	dcc00717 	ldw	r19,28(sp)
1000a358:	dc800617 	ldw	r18,24(sp)
1000a35c:	dc400517 	ldw	r17,20(sp)
1000a360:	dc000417 	ldw	r16,16(sp)
1000a364:	dec00a04 	addi	sp,sp,40
1000a368:	f800283a 	ret
1000a36c:	00840074 	movhi	r2,4097
1000a370:	10990004 	addi	r2,r2,25600
1000a374:	14000017 	ldw	r16,0(r2)
1000a378:	0005d900 	call	10005d90 <__locale_charset>
1000a37c:	100f883a 	mov	r7,r2
1000a380:	dc800015 	stw	r18,0(sp)
1000a384:	000d883a 	mov	r6,zero
1000a388:	d9400104 	addi	r5,sp,4
1000a38c:	8809883a 	mov	r4,r17
1000a390:	803ee83a 	callr	r16
1000a394:	003fe806 	br	1000a338 <__alt_data_end+0xf800a338>

1000a398 <__ascii_wctomb>:
1000a398:	28000526 	beq	r5,zero,1000a3b0 <__ascii_wctomb+0x18>
1000a39c:	00803fc4 	movi	r2,255
1000a3a0:	11800536 	bltu	r2,r6,1000a3b8 <__ascii_wctomb+0x20>
1000a3a4:	29800005 	stb	r6,0(r5)
1000a3a8:	00800044 	movi	r2,1
1000a3ac:	f800283a 	ret
1000a3b0:	0005883a 	mov	r2,zero
1000a3b4:	f800283a 	ret
1000a3b8:	00802284 	movi	r2,138
1000a3bc:	20800015 	stw	r2,0(r4)
1000a3c0:	00bfffc4 	movi	r2,-1
1000a3c4:	f800283a 	ret

1000a3c8 <_wctomb_r>:
1000a3c8:	00840074 	movhi	r2,4097
1000a3cc:	defff904 	addi	sp,sp,-28
1000a3d0:	10990004 	addi	r2,r2,25600
1000a3d4:	dfc00615 	stw	ra,24(sp)
1000a3d8:	dc400515 	stw	r17,20(sp)
1000a3dc:	dc000415 	stw	r16,16(sp)
1000a3e0:	3823883a 	mov	r17,r7
1000a3e4:	14000017 	ldw	r16,0(r2)
1000a3e8:	d9000115 	stw	r4,4(sp)
1000a3ec:	d9400215 	stw	r5,8(sp)
1000a3f0:	d9800315 	stw	r6,12(sp)
1000a3f4:	0005d900 	call	10005d90 <__locale_charset>
1000a3f8:	d9800317 	ldw	r6,12(sp)
1000a3fc:	d9400217 	ldw	r5,8(sp)
1000a400:	d9000117 	ldw	r4,4(sp)
1000a404:	100f883a 	mov	r7,r2
1000a408:	dc400015 	stw	r17,0(sp)
1000a40c:	803ee83a 	callr	r16
1000a410:	dfc00617 	ldw	ra,24(sp)
1000a414:	dc400517 	ldw	r17,20(sp)
1000a418:	dc000417 	ldw	r16,16(sp)
1000a41c:	dec00704 	addi	sp,sp,28
1000a420:	f800283a 	ret

1000a424 <__udivdi3>:
1000a424:	defff504 	addi	sp,sp,-44
1000a428:	dcc00415 	stw	r19,16(sp)
1000a42c:	dc000115 	stw	r16,4(sp)
1000a430:	dfc00a15 	stw	ra,40(sp)
1000a434:	df000915 	stw	fp,36(sp)
1000a438:	ddc00815 	stw	r23,32(sp)
1000a43c:	dd800715 	stw	r22,28(sp)
1000a440:	dd400615 	stw	r21,24(sp)
1000a444:	dd000515 	stw	r20,20(sp)
1000a448:	dc800315 	stw	r18,12(sp)
1000a44c:	dc400215 	stw	r17,8(sp)
1000a450:	2027883a 	mov	r19,r4
1000a454:	2821883a 	mov	r16,r5
1000a458:	3800411e 	bne	r7,zero,1000a560 <__udivdi3+0x13c>
1000a45c:	3023883a 	mov	r17,r6
1000a460:	2025883a 	mov	r18,r4
1000a464:	2980522e 	bgeu	r5,r6,1000a5b0 <__udivdi3+0x18c>
1000a468:	00bfffd4 	movui	r2,65535
1000a46c:	282d883a 	mov	r22,r5
1000a470:	1180a836 	bltu	r2,r6,1000a714 <__udivdi3+0x2f0>
1000a474:	00803fc4 	movi	r2,255
1000a478:	1185803a 	cmpltu	r2,r2,r6
1000a47c:	100490fa 	slli	r2,r2,3
1000a480:	3086d83a 	srl	r3,r6,r2
1000a484:	01040074 	movhi	r4,4097
1000a488:	2111d204 	addi	r4,r4,18248
1000a48c:	20c7883a 	add	r3,r4,r3
1000a490:	18c00003 	ldbu	r3,0(r3)
1000a494:	1885883a 	add	r2,r3,r2
1000a498:	00c00804 	movi	r3,32
1000a49c:	1887c83a 	sub	r3,r3,r2
1000a4a0:	18000526 	beq	r3,zero,1000a4b8 <__udivdi3+0x94>
1000a4a4:	80e0983a 	sll	r16,r16,r3
1000a4a8:	9884d83a 	srl	r2,r19,r2
1000a4ac:	30e2983a 	sll	r17,r6,r3
1000a4b0:	98e4983a 	sll	r18,r19,r3
1000a4b4:	142cb03a 	or	r22,r2,r16
1000a4b8:	882ad43a 	srli	r21,r17,16
1000a4bc:	b009883a 	mov	r4,r22
1000a4c0:	8d3fffcc 	andi	r20,r17,65535
1000a4c4:	a80b883a 	mov	r5,r21
1000a4c8:	000b0300 	call	1000b030 <__umodsi3>
1000a4cc:	b009883a 	mov	r4,r22
1000a4d0:	a80b883a 	mov	r5,r21
1000a4d4:	1027883a 	mov	r19,r2
1000a4d8:	000afcc0 	call	1000afcc <__udivsi3>
1000a4dc:	102d883a 	mov	r22,r2
1000a4e0:	9826943a 	slli	r19,r19,16
1000a4e4:	9004d43a 	srli	r2,r18,16
1000a4e8:	a5a1383a 	mul	r16,r20,r22
1000a4ec:	14c4b03a 	or	r2,r2,r19
1000a4f0:	1400052e 	bgeu	r2,r16,1000a508 <__udivdi3+0xe4>
1000a4f4:	1445883a 	add	r2,r2,r17
1000a4f8:	b0ffffc4 	addi	r3,r22,-1
1000a4fc:	14400136 	bltu	r2,r17,1000a504 <__udivdi3+0xe0>
1000a500:	14012336 	bltu	r2,r16,1000a990 <__udivdi3+0x56c>
1000a504:	182d883a 	mov	r22,r3
1000a508:	1421c83a 	sub	r16,r2,r16
1000a50c:	a80b883a 	mov	r5,r21
1000a510:	8009883a 	mov	r4,r16
1000a514:	000b0300 	call	1000b030 <__umodsi3>
1000a518:	1027883a 	mov	r19,r2
1000a51c:	a80b883a 	mov	r5,r21
1000a520:	8009883a 	mov	r4,r16
1000a524:	000afcc0 	call	1000afcc <__udivsi3>
1000a528:	9826943a 	slli	r19,r19,16
1000a52c:	a0a9383a 	mul	r20,r20,r2
1000a530:	94bfffcc 	andi	r18,r18,65535
1000a534:	94e4b03a 	or	r18,r18,r19
1000a538:	9500052e 	bgeu	r18,r20,1000a550 <__udivdi3+0x12c>
1000a53c:	8ca5883a 	add	r18,r17,r18
1000a540:	10ffffc4 	addi	r3,r2,-1
1000a544:	9440f136 	bltu	r18,r17,1000a90c <__udivdi3+0x4e8>
1000a548:	9500f02e 	bgeu	r18,r20,1000a90c <__udivdi3+0x4e8>
1000a54c:	10bfff84 	addi	r2,r2,-2
1000a550:	b00c943a 	slli	r6,r22,16
1000a554:	0007883a 	mov	r3,zero
1000a558:	3084b03a 	or	r2,r6,r2
1000a55c:	00005906 	br	1000a6c4 <__udivdi3+0x2a0>
1000a560:	29c05636 	bltu	r5,r7,1000a6bc <__udivdi3+0x298>
1000a564:	00bfffd4 	movui	r2,65535
1000a568:	11c0622e 	bgeu	r2,r7,1000a6f4 <__udivdi3+0x2d0>
1000a56c:	00804034 	movhi	r2,256
1000a570:	10bfffc4 	addi	r2,r2,-1
1000a574:	11c0ee36 	bltu	r2,r7,1000a930 <__udivdi3+0x50c>
1000a578:	00800404 	movi	r2,16
1000a57c:	3886d83a 	srl	r3,r7,r2
1000a580:	01040074 	movhi	r4,4097
1000a584:	2111d204 	addi	r4,r4,18248
1000a588:	20c7883a 	add	r3,r4,r3
1000a58c:	18c00003 	ldbu	r3,0(r3)
1000a590:	05400804 	movi	r21,32
1000a594:	1885883a 	add	r2,r3,r2
1000a598:	a8abc83a 	sub	r21,r21,r2
1000a59c:	a800621e 	bne	r21,zero,1000a728 <__udivdi3+0x304>
1000a5a0:	3c00e936 	bltu	r7,r16,1000a948 <__udivdi3+0x524>
1000a5a4:	9985403a 	cmpgeu	r2,r19,r6
1000a5a8:	0007883a 	mov	r3,zero
1000a5ac:	00004506 	br	1000a6c4 <__udivdi3+0x2a0>
1000a5b0:	3000041e 	bne	r6,zero,1000a5c4 <__udivdi3+0x1a0>
1000a5b4:	000b883a 	mov	r5,zero
1000a5b8:	01000044 	movi	r4,1
1000a5bc:	000afcc0 	call	1000afcc <__udivsi3>
1000a5c0:	1023883a 	mov	r17,r2
1000a5c4:	00bfffd4 	movui	r2,65535
1000a5c8:	14404e2e 	bgeu	r2,r17,1000a704 <__udivdi3+0x2e0>
1000a5cc:	00804034 	movhi	r2,256
1000a5d0:	10bfffc4 	addi	r2,r2,-1
1000a5d4:	1440d836 	bltu	r2,r17,1000a938 <__udivdi3+0x514>
1000a5d8:	00800404 	movi	r2,16
1000a5dc:	8886d83a 	srl	r3,r17,r2
1000a5e0:	01040074 	movhi	r4,4097
1000a5e4:	2111d204 	addi	r4,r4,18248
1000a5e8:	20c7883a 	add	r3,r4,r3
1000a5ec:	18c00003 	ldbu	r3,0(r3)
1000a5f0:	1885883a 	add	r2,r3,r2
1000a5f4:	00c00804 	movi	r3,32
1000a5f8:	1887c83a 	sub	r3,r3,r2
1000a5fc:	18008f1e 	bne	r3,zero,1000a83c <__udivdi3+0x418>
1000a600:	882ad43a 	srli	r21,r17,16
1000a604:	8461c83a 	sub	r16,r16,r17
1000a608:	8d3fffcc 	andi	r20,r17,65535
1000a60c:	00c00044 	movi	r3,1
1000a610:	8009883a 	mov	r4,r16
1000a614:	a80b883a 	mov	r5,r21
1000a618:	d8c00015 	stw	r3,0(sp)
1000a61c:	000b0300 	call	1000b030 <__umodsi3>
1000a620:	8009883a 	mov	r4,r16
1000a624:	a80b883a 	mov	r5,r21
1000a628:	1027883a 	mov	r19,r2
1000a62c:	000afcc0 	call	1000afcc <__udivsi3>
1000a630:	9826943a 	slli	r19,r19,16
1000a634:	9008d43a 	srli	r4,r18,16
1000a638:	1521383a 	mul	r16,r2,r20
1000a63c:	102d883a 	mov	r22,r2
1000a640:	24c8b03a 	or	r4,r4,r19
1000a644:	d8c00017 	ldw	r3,0(sp)
1000a648:	2400052e 	bgeu	r4,r16,1000a660 <__udivdi3+0x23c>
1000a64c:	2449883a 	add	r4,r4,r17
1000a650:	b0bfffc4 	addi	r2,r22,-1
1000a654:	24400136 	bltu	r4,r17,1000a65c <__udivdi3+0x238>
1000a658:	2400ca36 	bltu	r4,r16,1000a984 <__udivdi3+0x560>
1000a65c:	102d883a 	mov	r22,r2
1000a660:	2421c83a 	sub	r16,r4,r16
1000a664:	a80b883a 	mov	r5,r21
1000a668:	8009883a 	mov	r4,r16
1000a66c:	d8c00015 	stw	r3,0(sp)
1000a670:	000b0300 	call	1000b030 <__umodsi3>
1000a674:	1027883a 	mov	r19,r2
1000a678:	a80b883a 	mov	r5,r21
1000a67c:	8009883a 	mov	r4,r16
1000a680:	000afcc0 	call	1000afcc <__udivsi3>
1000a684:	9826943a 	slli	r19,r19,16
1000a688:	1529383a 	mul	r20,r2,r20
1000a68c:	94bfffcc 	andi	r18,r18,65535
1000a690:	94e4b03a 	or	r18,r18,r19
1000a694:	d8c00017 	ldw	r3,0(sp)
1000a698:	9500052e 	bgeu	r18,r20,1000a6b0 <__udivdi3+0x28c>
1000a69c:	8ca5883a 	add	r18,r17,r18
1000a6a0:	113fffc4 	addi	r4,r2,-1
1000a6a4:	94409736 	bltu	r18,r17,1000a904 <__udivdi3+0x4e0>
1000a6a8:	9500962e 	bgeu	r18,r20,1000a904 <__udivdi3+0x4e0>
1000a6ac:	10bfff84 	addi	r2,r2,-2
1000a6b0:	b00c943a 	slli	r6,r22,16
1000a6b4:	3084b03a 	or	r2,r6,r2
1000a6b8:	00000206 	br	1000a6c4 <__udivdi3+0x2a0>
1000a6bc:	0007883a 	mov	r3,zero
1000a6c0:	0005883a 	mov	r2,zero
1000a6c4:	dfc00a17 	ldw	ra,40(sp)
1000a6c8:	df000917 	ldw	fp,36(sp)
1000a6cc:	ddc00817 	ldw	r23,32(sp)
1000a6d0:	dd800717 	ldw	r22,28(sp)
1000a6d4:	dd400617 	ldw	r21,24(sp)
1000a6d8:	dd000517 	ldw	r20,20(sp)
1000a6dc:	dcc00417 	ldw	r19,16(sp)
1000a6e0:	dc800317 	ldw	r18,12(sp)
1000a6e4:	dc400217 	ldw	r17,8(sp)
1000a6e8:	dc000117 	ldw	r16,4(sp)
1000a6ec:	dec00b04 	addi	sp,sp,44
1000a6f0:	f800283a 	ret
1000a6f4:	00803fc4 	movi	r2,255
1000a6f8:	11c5803a 	cmpltu	r2,r2,r7
1000a6fc:	100490fa 	slli	r2,r2,3
1000a700:	003f9e06 	br	1000a57c <__alt_data_end+0xf800a57c>
1000a704:	00803fc4 	movi	r2,255
1000a708:	1445803a 	cmpltu	r2,r2,r17
1000a70c:	100490fa 	slli	r2,r2,3
1000a710:	003fb206 	br	1000a5dc <__alt_data_end+0xf800a5dc>
1000a714:	00804034 	movhi	r2,256
1000a718:	10bfffc4 	addi	r2,r2,-1
1000a71c:	11808836 	bltu	r2,r6,1000a940 <__udivdi3+0x51c>
1000a720:	00800404 	movi	r2,16
1000a724:	003f5606 	br	1000a480 <__alt_data_end+0xf800a480>
1000a728:	30aed83a 	srl	r23,r6,r2
1000a72c:	3d4e983a 	sll	r7,r7,r21
1000a730:	80acd83a 	srl	r22,r16,r2
1000a734:	9884d83a 	srl	r2,r19,r2
1000a738:	3deeb03a 	or	r23,r7,r23
1000a73c:	b824d43a 	srli	r18,r23,16
1000a740:	8560983a 	sll	r16,r16,r21
1000a744:	b009883a 	mov	r4,r22
1000a748:	900b883a 	mov	r5,r18
1000a74c:	3568983a 	sll	r20,r6,r21
1000a750:	1420b03a 	or	r16,r2,r16
1000a754:	000b0300 	call	1000b030 <__umodsi3>
1000a758:	b009883a 	mov	r4,r22
1000a75c:	900b883a 	mov	r5,r18
1000a760:	1023883a 	mov	r17,r2
1000a764:	000afcc0 	call	1000afcc <__udivsi3>
1000a768:	8808943a 	slli	r4,r17,16
1000a76c:	bf3fffcc 	andi	fp,r23,65535
1000a770:	8006d43a 	srli	r3,r16,16
1000a774:	e0a3383a 	mul	r17,fp,r2
1000a778:	100d883a 	mov	r6,r2
1000a77c:	1906b03a 	or	r3,r3,r4
1000a780:	1c40042e 	bgeu	r3,r17,1000a794 <__udivdi3+0x370>
1000a784:	1dc7883a 	add	r3,r3,r23
1000a788:	10bfffc4 	addi	r2,r2,-1
1000a78c:	1dc0752e 	bgeu	r3,r23,1000a964 <__udivdi3+0x540>
1000a790:	100d883a 	mov	r6,r2
1000a794:	1c63c83a 	sub	r17,r3,r17
1000a798:	900b883a 	mov	r5,r18
1000a79c:	8809883a 	mov	r4,r17
1000a7a0:	d9800015 	stw	r6,0(sp)
1000a7a4:	000b0300 	call	1000b030 <__umodsi3>
1000a7a8:	102d883a 	mov	r22,r2
1000a7ac:	8809883a 	mov	r4,r17
1000a7b0:	900b883a 	mov	r5,r18
1000a7b4:	000afcc0 	call	1000afcc <__udivsi3>
1000a7b8:	b02c943a 	slli	r22,r22,16
1000a7bc:	e089383a 	mul	r4,fp,r2
1000a7c0:	843fffcc 	andi	r16,r16,65535
1000a7c4:	85a0b03a 	or	r16,r16,r22
1000a7c8:	d9800017 	ldw	r6,0(sp)
1000a7cc:	8100042e 	bgeu	r16,r4,1000a7e0 <__udivdi3+0x3bc>
1000a7d0:	85e1883a 	add	r16,r16,r23
1000a7d4:	10ffffc4 	addi	r3,r2,-1
1000a7d8:	85c05e2e 	bgeu	r16,r23,1000a954 <__udivdi3+0x530>
1000a7dc:	1805883a 	mov	r2,r3
1000a7e0:	300c943a 	slli	r6,r6,16
1000a7e4:	a17fffcc 	andi	r5,r20,65535
1000a7e8:	a028d43a 	srli	r20,r20,16
1000a7ec:	3084b03a 	or	r2,r6,r2
1000a7f0:	10ffffcc 	andi	r3,r2,65535
1000a7f4:	100cd43a 	srli	r6,r2,16
1000a7f8:	194f383a 	mul	r7,r3,r5
1000a7fc:	1d07383a 	mul	r3,r3,r20
1000a800:	314b383a 	mul	r5,r6,r5
1000a804:	3810d43a 	srli	r8,r7,16
1000a808:	8121c83a 	sub	r16,r16,r4
1000a80c:	1947883a 	add	r3,r3,r5
1000a810:	40c7883a 	add	r3,r8,r3
1000a814:	350d383a 	mul	r6,r6,r20
1000a818:	1940022e 	bgeu	r3,r5,1000a824 <__udivdi3+0x400>
1000a81c:	01000074 	movhi	r4,1
1000a820:	310d883a 	add	r6,r6,r4
1000a824:	1828d43a 	srli	r20,r3,16
1000a828:	a18d883a 	add	r6,r20,r6
1000a82c:	81803e36 	bltu	r16,r6,1000a928 <__udivdi3+0x504>
1000a830:	81803826 	beq	r16,r6,1000a914 <__udivdi3+0x4f0>
1000a834:	0007883a 	mov	r3,zero
1000a838:	003fa206 	br	1000a6c4 <__alt_data_end+0xf800a6c4>
1000a83c:	88e2983a 	sll	r17,r17,r3
1000a840:	80a8d83a 	srl	r20,r16,r2
1000a844:	80e0983a 	sll	r16,r16,r3
1000a848:	882ad43a 	srli	r21,r17,16
1000a84c:	9884d83a 	srl	r2,r19,r2
1000a850:	a009883a 	mov	r4,r20
1000a854:	a80b883a 	mov	r5,r21
1000a858:	142eb03a 	or	r23,r2,r16
1000a85c:	98e4983a 	sll	r18,r19,r3
1000a860:	000b0300 	call	1000b030 <__umodsi3>
1000a864:	a009883a 	mov	r4,r20
1000a868:	a80b883a 	mov	r5,r21
1000a86c:	1021883a 	mov	r16,r2
1000a870:	000afcc0 	call	1000afcc <__udivsi3>
1000a874:	1039883a 	mov	fp,r2
1000a878:	8d3fffcc 	andi	r20,r17,65535
1000a87c:	8020943a 	slli	r16,r16,16
1000a880:	b804d43a 	srli	r2,r23,16
1000a884:	a72d383a 	mul	r22,r20,fp
1000a888:	1404b03a 	or	r2,r2,r16
1000a88c:	1580062e 	bgeu	r2,r22,1000a8a8 <__udivdi3+0x484>
1000a890:	1445883a 	add	r2,r2,r17
1000a894:	e0ffffc4 	addi	r3,fp,-1
1000a898:	14403836 	bltu	r2,r17,1000a97c <__udivdi3+0x558>
1000a89c:	1580372e 	bgeu	r2,r22,1000a97c <__udivdi3+0x558>
1000a8a0:	e73fff84 	addi	fp,fp,-2
1000a8a4:	1445883a 	add	r2,r2,r17
1000a8a8:	15adc83a 	sub	r22,r2,r22
1000a8ac:	a80b883a 	mov	r5,r21
1000a8b0:	b009883a 	mov	r4,r22
1000a8b4:	000b0300 	call	1000b030 <__umodsi3>
1000a8b8:	1027883a 	mov	r19,r2
1000a8bc:	b009883a 	mov	r4,r22
1000a8c0:	a80b883a 	mov	r5,r21
1000a8c4:	000afcc0 	call	1000afcc <__udivsi3>
1000a8c8:	9826943a 	slli	r19,r19,16
1000a8cc:	a0a1383a 	mul	r16,r20,r2
1000a8d0:	b93fffcc 	andi	r4,r23,65535
1000a8d4:	24c8b03a 	or	r4,r4,r19
1000a8d8:	2400062e 	bgeu	r4,r16,1000a8f4 <__udivdi3+0x4d0>
1000a8dc:	2449883a 	add	r4,r4,r17
1000a8e0:	10ffffc4 	addi	r3,r2,-1
1000a8e4:	24402336 	bltu	r4,r17,1000a974 <__udivdi3+0x550>
1000a8e8:	2400222e 	bgeu	r4,r16,1000a974 <__udivdi3+0x550>
1000a8ec:	10bfff84 	addi	r2,r2,-2
1000a8f0:	2449883a 	add	r4,r4,r17
1000a8f4:	e038943a 	slli	fp,fp,16
1000a8f8:	2421c83a 	sub	r16,r4,r16
1000a8fc:	e086b03a 	or	r3,fp,r2
1000a900:	003f4306 	br	1000a610 <__alt_data_end+0xf800a610>
1000a904:	2005883a 	mov	r2,r4
1000a908:	003f6906 	br	1000a6b0 <__alt_data_end+0xf800a6b0>
1000a90c:	1805883a 	mov	r2,r3
1000a910:	003f0f06 	br	1000a550 <__alt_data_end+0xf800a550>
1000a914:	1806943a 	slli	r3,r3,16
1000a918:	9d66983a 	sll	r19,r19,r21
1000a91c:	39ffffcc 	andi	r7,r7,65535
1000a920:	19c7883a 	add	r3,r3,r7
1000a924:	98ffc32e 	bgeu	r19,r3,1000a834 <__alt_data_end+0xf800a834>
1000a928:	10bfffc4 	addi	r2,r2,-1
1000a92c:	003fc106 	br	1000a834 <__alt_data_end+0xf800a834>
1000a930:	00800604 	movi	r2,24
1000a934:	003f1106 	br	1000a57c <__alt_data_end+0xf800a57c>
1000a938:	00800604 	movi	r2,24
1000a93c:	003f2706 	br	1000a5dc <__alt_data_end+0xf800a5dc>
1000a940:	00800604 	movi	r2,24
1000a944:	003ece06 	br	1000a480 <__alt_data_end+0xf800a480>
1000a948:	0007883a 	mov	r3,zero
1000a94c:	00800044 	movi	r2,1
1000a950:	003f5c06 	br	1000a6c4 <__alt_data_end+0xf800a6c4>
1000a954:	813fa12e 	bgeu	r16,r4,1000a7dc <__alt_data_end+0xf800a7dc>
1000a958:	10bfff84 	addi	r2,r2,-2
1000a95c:	85e1883a 	add	r16,r16,r23
1000a960:	003f9f06 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000a964:	1c7f8a2e 	bgeu	r3,r17,1000a790 <__alt_data_end+0xf800a790>
1000a968:	31bfff84 	addi	r6,r6,-2
1000a96c:	1dc7883a 	add	r3,r3,r23
1000a970:	003f8806 	br	1000a794 <__alt_data_end+0xf800a794>
1000a974:	1805883a 	mov	r2,r3
1000a978:	003fde06 	br	1000a8f4 <__alt_data_end+0xf800a8f4>
1000a97c:	1839883a 	mov	fp,r3
1000a980:	003fc906 	br	1000a8a8 <__alt_data_end+0xf800a8a8>
1000a984:	b5bfff84 	addi	r22,r22,-2
1000a988:	2449883a 	add	r4,r4,r17
1000a98c:	003f3406 	br	1000a660 <__alt_data_end+0xf800a660>
1000a990:	b5bfff84 	addi	r22,r22,-2
1000a994:	1445883a 	add	r2,r2,r17
1000a998:	003edb06 	br	1000a508 <__alt_data_end+0xf800a508>

1000a99c <__umoddi3>:
1000a99c:	defff404 	addi	sp,sp,-48
1000a9a0:	df000a15 	stw	fp,40(sp)
1000a9a4:	dc400315 	stw	r17,12(sp)
1000a9a8:	dc000215 	stw	r16,8(sp)
1000a9ac:	dfc00b15 	stw	ra,44(sp)
1000a9b0:	ddc00915 	stw	r23,36(sp)
1000a9b4:	dd800815 	stw	r22,32(sp)
1000a9b8:	dd400715 	stw	r21,28(sp)
1000a9bc:	dd000615 	stw	r20,24(sp)
1000a9c0:	dcc00515 	stw	r19,20(sp)
1000a9c4:	dc800415 	stw	r18,16(sp)
1000a9c8:	2021883a 	mov	r16,r4
1000a9cc:	2823883a 	mov	r17,r5
1000a9d0:	2839883a 	mov	fp,r5
1000a9d4:	38003c1e 	bne	r7,zero,1000aac8 <__umoddi3+0x12c>
1000a9d8:	3027883a 	mov	r19,r6
1000a9dc:	2029883a 	mov	r20,r4
1000a9e0:	2980512e 	bgeu	r5,r6,1000ab28 <__umoddi3+0x18c>
1000a9e4:	00bfffd4 	movui	r2,65535
1000a9e8:	11809a36 	bltu	r2,r6,1000ac54 <__umoddi3+0x2b8>
1000a9ec:	01003fc4 	movi	r4,255
1000a9f0:	2189803a 	cmpltu	r4,r4,r6
1000a9f4:	200890fa 	slli	r4,r4,3
1000a9f8:	3104d83a 	srl	r2,r6,r4
1000a9fc:	00c40074 	movhi	r3,4097
1000aa00:	18d1d204 	addi	r3,r3,18248
1000aa04:	1885883a 	add	r2,r3,r2
1000aa08:	10c00003 	ldbu	r3,0(r2)
1000aa0c:	00800804 	movi	r2,32
1000aa10:	1909883a 	add	r4,r3,r4
1000aa14:	1125c83a 	sub	r18,r2,r4
1000aa18:	90000526 	beq	r18,zero,1000aa30 <__umoddi3+0x94>
1000aa1c:	8ca2983a 	sll	r17,r17,r18
1000aa20:	8108d83a 	srl	r4,r16,r4
1000aa24:	34a6983a 	sll	r19,r6,r18
1000aa28:	84a8983a 	sll	r20,r16,r18
1000aa2c:	2478b03a 	or	fp,r4,r17
1000aa30:	982ed43a 	srli	r23,r19,16
1000aa34:	e009883a 	mov	r4,fp
1000aa38:	9dbfffcc 	andi	r22,r19,65535
1000aa3c:	b80b883a 	mov	r5,r23
1000aa40:	000b0300 	call	1000b030 <__umodsi3>
1000aa44:	e009883a 	mov	r4,fp
1000aa48:	b80b883a 	mov	r5,r23
1000aa4c:	102b883a 	mov	r21,r2
1000aa50:	000afcc0 	call	1000afcc <__udivsi3>
1000aa54:	a806943a 	slli	r3,r21,16
1000aa58:	a008d43a 	srli	r4,r20,16
1000aa5c:	b085383a 	mul	r2,r22,r2
1000aa60:	20c8b03a 	or	r4,r4,r3
1000aa64:	2080032e 	bgeu	r4,r2,1000aa74 <__umoddi3+0xd8>
1000aa68:	24c9883a 	add	r4,r4,r19
1000aa6c:	24c00136 	bltu	r4,r19,1000aa74 <__umoddi3+0xd8>
1000aa70:	20811036 	bltu	r4,r2,1000aeb4 <__umoddi3+0x518>
1000aa74:	20abc83a 	sub	r21,r4,r2
1000aa78:	b80b883a 	mov	r5,r23
1000aa7c:	a809883a 	mov	r4,r21
1000aa80:	000b0300 	call	1000b030 <__umodsi3>
1000aa84:	1023883a 	mov	r17,r2
1000aa88:	b80b883a 	mov	r5,r23
1000aa8c:	a809883a 	mov	r4,r21
1000aa90:	000afcc0 	call	1000afcc <__udivsi3>
1000aa94:	8822943a 	slli	r17,r17,16
1000aa98:	b085383a 	mul	r2,r22,r2
1000aa9c:	a0ffffcc 	andi	r3,r20,65535
1000aaa0:	1c46b03a 	or	r3,r3,r17
1000aaa4:	1880042e 	bgeu	r3,r2,1000aab8 <__umoddi3+0x11c>
1000aaa8:	1cc7883a 	add	r3,r3,r19
1000aaac:	1cc00236 	bltu	r3,r19,1000aab8 <__umoddi3+0x11c>
1000aab0:	1880012e 	bgeu	r3,r2,1000aab8 <__umoddi3+0x11c>
1000aab4:	1cc7883a 	add	r3,r3,r19
1000aab8:	1885c83a 	sub	r2,r3,r2
1000aabc:	1484d83a 	srl	r2,r2,r18
1000aac0:	0007883a 	mov	r3,zero
1000aac4:	00004f06 	br	1000ac04 <__umoddi3+0x268>
1000aac8:	29c04c36 	bltu	r5,r7,1000abfc <__umoddi3+0x260>
1000aacc:	00bfffd4 	movui	r2,65535
1000aad0:	11c0582e 	bgeu	r2,r7,1000ac34 <__umoddi3+0x298>
1000aad4:	00804034 	movhi	r2,256
1000aad8:	10bfffc4 	addi	r2,r2,-1
1000aadc:	11c0e736 	bltu	r2,r7,1000ae7c <__umoddi3+0x4e0>
1000aae0:	01000404 	movi	r4,16
1000aae4:	3904d83a 	srl	r2,r7,r4
1000aae8:	00c40074 	movhi	r3,4097
1000aaec:	18d1d204 	addi	r3,r3,18248
1000aaf0:	1885883a 	add	r2,r3,r2
1000aaf4:	14c00003 	ldbu	r19,0(r2)
1000aaf8:	00c00804 	movi	r3,32
1000aafc:	9927883a 	add	r19,r19,r4
1000ab00:	1ce9c83a 	sub	r20,r3,r19
1000ab04:	a000581e 	bne	r20,zero,1000ac68 <__umoddi3+0x2cc>
1000ab08:	3c400136 	bltu	r7,r17,1000ab10 <__umoddi3+0x174>
1000ab0c:	8180eb36 	bltu	r16,r6,1000aebc <__umoddi3+0x520>
1000ab10:	8185c83a 	sub	r2,r16,r6
1000ab14:	89e3c83a 	sub	r17,r17,r7
1000ab18:	8089803a 	cmpltu	r4,r16,r2
1000ab1c:	8939c83a 	sub	fp,r17,r4
1000ab20:	e007883a 	mov	r3,fp
1000ab24:	00003706 	br	1000ac04 <__umoddi3+0x268>
1000ab28:	3000041e 	bne	r6,zero,1000ab3c <__umoddi3+0x1a0>
1000ab2c:	000b883a 	mov	r5,zero
1000ab30:	01000044 	movi	r4,1
1000ab34:	000afcc0 	call	1000afcc <__udivsi3>
1000ab38:	1027883a 	mov	r19,r2
1000ab3c:	00bfffd4 	movui	r2,65535
1000ab40:	14c0402e 	bgeu	r2,r19,1000ac44 <__umoddi3+0x2a8>
1000ab44:	00804034 	movhi	r2,256
1000ab48:	10bfffc4 	addi	r2,r2,-1
1000ab4c:	14c0cd36 	bltu	r2,r19,1000ae84 <__umoddi3+0x4e8>
1000ab50:	00800404 	movi	r2,16
1000ab54:	9886d83a 	srl	r3,r19,r2
1000ab58:	01040074 	movhi	r4,4097
1000ab5c:	2111d204 	addi	r4,r4,18248
1000ab60:	20c7883a 	add	r3,r4,r3
1000ab64:	18c00003 	ldbu	r3,0(r3)
1000ab68:	1887883a 	add	r3,r3,r2
1000ab6c:	00800804 	movi	r2,32
1000ab70:	10e5c83a 	sub	r18,r2,r3
1000ab74:	9000901e 	bne	r18,zero,1000adb8 <__umoddi3+0x41c>
1000ab78:	982cd43a 	srli	r22,r19,16
1000ab7c:	8ce3c83a 	sub	r17,r17,r19
1000ab80:	9d7fffcc 	andi	r21,r19,65535
1000ab84:	b00b883a 	mov	r5,r22
1000ab88:	8809883a 	mov	r4,r17
1000ab8c:	000b0300 	call	1000b030 <__umodsi3>
1000ab90:	8809883a 	mov	r4,r17
1000ab94:	b00b883a 	mov	r5,r22
1000ab98:	1021883a 	mov	r16,r2
1000ab9c:	000afcc0 	call	1000afcc <__udivsi3>
1000aba0:	8006943a 	slli	r3,r16,16
1000aba4:	a008d43a 	srli	r4,r20,16
1000aba8:	1545383a 	mul	r2,r2,r21
1000abac:	20c8b03a 	or	r4,r4,r3
1000abb0:	2080042e 	bgeu	r4,r2,1000abc4 <__umoddi3+0x228>
1000abb4:	24c9883a 	add	r4,r4,r19
1000abb8:	24c00236 	bltu	r4,r19,1000abc4 <__umoddi3+0x228>
1000abbc:	2080012e 	bgeu	r4,r2,1000abc4 <__umoddi3+0x228>
1000abc0:	24c9883a 	add	r4,r4,r19
1000abc4:	20a1c83a 	sub	r16,r4,r2
1000abc8:	b00b883a 	mov	r5,r22
1000abcc:	8009883a 	mov	r4,r16
1000abd0:	000b0300 	call	1000b030 <__umodsi3>
1000abd4:	1023883a 	mov	r17,r2
1000abd8:	b00b883a 	mov	r5,r22
1000abdc:	8009883a 	mov	r4,r16
1000abe0:	000afcc0 	call	1000afcc <__udivsi3>
1000abe4:	8822943a 	slli	r17,r17,16
1000abe8:	1545383a 	mul	r2,r2,r21
1000abec:	a53fffcc 	andi	r20,r20,65535
1000abf0:	a446b03a 	or	r3,r20,r17
1000abf4:	18bfb02e 	bgeu	r3,r2,1000aab8 <__alt_data_end+0xf800aab8>
1000abf8:	003fab06 	br	1000aaa8 <__alt_data_end+0xf800aaa8>
1000abfc:	2005883a 	mov	r2,r4
1000ac00:	2807883a 	mov	r3,r5
1000ac04:	dfc00b17 	ldw	ra,44(sp)
1000ac08:	df000a17 	ldw	fp,40(sp)
1000ac0c:	ddc00917 	ldw	r23,36(sp)
1000ac10:	dd800817 	ldw	r22,32(sp)
1000ac14:	dd400717 	ldw	r21,28(sp)
1000ac18:	dd000617 	ldw	r20,24(sp)
1000ac1c:	dcc00517 	ldw	r19,20(sp)
1000ac20:	dc800417 	ldw	r18,16(sp)
1000ac24:	dc400317 	ldw	r17,12(sp)
1000ac28:	dc000217 	ldw	r16,8(sp)
1000ac2c:	dec00c04 	addi	sp,sp,48
1000ac30:	f800283a 	ret
1000ac34:	04c03fc4 	movi	r19,255
1000ac38:	99c9803a 	cmpltu	r4,r19,r7
1000ac3c:	200890fa 	slli	r4,r4,3
1000ac40:	003fa806 	br	1000aae4 <__alt_data_end+0xf800aae4>
1000ac44:	00803fc4 	movi	r2,255
1000ac48:	14c5803a 	cmpltu	r2,r2,r19
1000ac4c:	100490fa 	slli	r2,r2,3
1000ac50:	003fc006 	br	1000ab54 <__alt_data_end+0xf800ab54>
1000ac54:	00804034 	movhi	r2,256
1000ac58:	10bfffc4 	addi	r2,r2,-1
1000ac5c:	11808b36 	bltu	r2,r6,1000ae8c <__umoddi3+0x4f0>
1000ac60:	01000404 	movi	r4,16
1000ac64:	003f6406 	br	1000a9f8 <__alt_data_end+0xf800a9f8>
1000ac68:	34c4d83a 	srl	r2,r6,r19
1000ac6c:	3d0e983a 	sll	r7,r7,r20
1000ac70:	8cf8d83a 	srl	fp,r17,r19
1000ac74:	8d10983a 	sll	r8,r17,r20
1000ac78:	38aab03a 	or	r21,r7,r2
1000ac7c:	a82cd43a 	srli	r22,r21,16
1000ac80:	84e2d83a 	srl	r17,r16,r19
1000ac84:	e009883a 	mov	r4,fp
1000ac88:	b00b883a 	mov	r5,r22
1000ac8c:	8a22b03a 	or	r17,r17,r8
1000ac90:	3524983a 	sll	r18,r6,r20
1000ac94:	000b0300 	call	1000b030 <__umodsi3>
1000ac98:	e009883a 	mov	r4,fp
1000ac9c:	b00b883a 	mov	r5,r22
1000aca0:	102f883a 	mov	r23,r2
1000aca4:	000afcc0 	call	1000afcc <__udivsi3>
1000aca8:	100d883a 	mov	r6,r2
1000acac:	b808943a 	slli	r4,r23,16
1000acb0:	aa3fffcc 	andi	r8,r21,65535
1000acb4:	8804d43a 	srli	r2,r17,16
1000acb8:	41af383a 	mul	r23,r8,r6
1000acbc:	8520983a 	sll	r16,r16,r20
1000acc0:	1104b03a 	or	r2,r2,r4
1000acc4:	15c0042e 	bgeu	r2,r23,1000acd8 <__umoddi3+0x33c>
1000acc8:	1545883a 	add	r2,r2,r21
1000accc:	30ffffc4 	addi	r3,r6,-1
1000acd0:	1540742e 	bgeu	r2,r21,1000aea4 <__umoddi3+0x508>
1000acd4:	180d883a 	mov	r6,r3
1000acd8:	15efc83a 	sub	r23,r2,r23
1000acdc:	b00b883a 	mov	r5,r22
1000ace0:	b809883a 	mov	r4,r23
1000ace4:	d9800115 	stw	r6,4(sp)
1000ace8:	da000015 	stw	r8,0(sp)
1000acec:	000b0300 	call	1000b030 <__umodsi3>
1000acf0:	b00b883a 	mov	r5,r22
1000acf4:	b809883a 	mov	r4,r23
1000acf8:	1039883a 	mov	fp,r2
1000acfc:	000afcc0 	call	1000afcc <__udivsi3>
1000ad00:	da000017 	ldw	r8,0(sp)
1000ad04:	e038943a 	slli	fp,fp,16
1000ad08:	100b883a 	mov	r5,r2
1000ad0c:	4089383a 	mul	r4,r8,r2
1000ad10:	8a3fffcc 	andi	r8,r17,65535
1000ad14:	4710b03a 	or	r8,r8,fp
1000ad18:	d9800117 	ldw	r6,4(sp)
1000ad1c:	4100042e 	bgeu	r8,r4,1000ad30 <__umoddi3+0x394>
1000ad20:	4551883a 	add	r8,r8,r21
1000ad24:	10bfffc4 	addi	r2,r2,-1
1000ad28:	45405a2e 	bgeu	r8,r21,1000ae94 <__umoddi3+0x4f8>
1000ad2c:	100b883a 	mov	r5,r2
1000ad30:	300c943a 	slli	r6,r6,16
1000ad34:	91ffffcc 	andi	r7,r18,65535
1000ad38:	9004d43a 	srli	r2,r18,16
1000ad3c:	314cb03a 	or	r6,r6,r5
1000ad40:	317fffcc 	andi	r5,r6,65535
1000ad44:	300cd43a 	srli	r6,r6,16
1000ad48:	29d3383a 	mul	r9,r5,r7
1000ad4c:	288b383a 	mul	r5,r5,r2
1000ad50:	31cf383a 	mul	r7,r6,r7
1000ad54:	4806d43a 	srli	r3,r9,16
1000ad58:	4111c83a 	sub	r8,r8,r4
1000ad5c:	29cb883a 	add	r5,r5,r7
1000ad60:	194b883a 	add	r5,r3,r5
1000ad64:	3085383a 	mul	r2,r6,r2
1000ad68:	29c0022e 	bgeu	r5,r7,1000ad74 <__umoddi3+0x3d8>
1000ad6c:	00c00074 	movhi	r3,1
1000ad70:	10c5883a 	add	r2,r2,r3
1000ad74:	2808d43a 	srli	r4,r5,16
1000ad78:	280a943a 	slli	r5,r5,16
1000ad7c:	4a7fffcc 	andi	r9,r9,65535
1000ad80:	2085883a 	add	r2,r4,r2
1000ad84:	2a4b883a 	add	r5,r5,r9
1000ad88:	40803636 	bltu	r8,r2,1000ae64 <__umoddi3+0x4c8>
1000ad8c:	40804d26 	beq	r8,r2,1000aec4 <__umoddi3+0x528>
1000ad90:	4089c83a 	sub	r4,r8,r2
1000ad94:	280f883a 	mov	r7,r5
1000ad98:	81cfc83a 	sub	r7,r16,r7
1000ad9c:	81c7803a 	cmpltu	r3,r16,r7
1000ada0:	20c7c83a 	sub	r3,r4,r3
1000ada4:	1cc4983a 	sll	r2,r3,r19
1000ada8:	3d0ed83a 	srl	r7,r7,r20
1000adac:	1d06d83a 	srl	r3,r3,r20
1000adb0:	11c4b03a 	or	r2,r2,r7
1000adb4:	003f9306 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000adb8:	9ca6983a 	sll	r19,r19,r18
1000adbc:	88e8d83a 	srl	r20,r17,r3
1000adc0:	80c4d83a 	srl	r2,r16,r3
1000adc4:	982cd43a 	srli	r22,r19,16
1000adc8:	8ca2983a 	sll	r17,r17,r18
1000adcc:	a009883a 	mov	r4,r20
1000add0:	b00b883a 	mov	r5,r22
1000add4:	1478b03a 	or	fp,r2,r17
1000add8:	000b0300 	call	1000b030 <__umodsi3>
1000addc:	a009883a 	mov	r4,r20
1000ade0:	b00b883a 	mov	r5,r22
1000ade4:	1023883a 	mov	r17,r2
1000ade8:	000afcc0 	call	1000afcc <__udivsi3>
1000adec:	9d7fffcc 	andi	r21,r19,65535
1000adf0:	880a943a 	slli	r5,r17,16
1000adf4:	e008d43a 	srli	r4,fp,16
1000adf8:	a885383a 	mul	r2,r21,r2
1000adfc:	84a8983a 	sll	r20,r16,r18
1000ae00:	2148b03a 	or	r4,r4,r5
1000ae04:	2080042e 	bgeu	r4,r2,1000ae18 <__umoddi3+0x47c>
1000ae08:	24c9883a 	add	r4,r4,r19
1000ae0c:	24c00236 	bltu	r4,r19,1000ae18 <__umoddi3+0x47c>
1000ae10:	2080012e 	bgeu	r4,r2,1000ae18 <__umoddi3+0x47c>
1000ae14:	24c9883a 	add	r4,r4,r19
1000ae18:	20a3c83a 	sub	r17,r4,r2
1000ae1c:	b00b883a 	mov	r5,r22
1000ae20:	8809883a 	mov	r4,r17
1000ae24:	000b0300 	call	1000b030 <__umodsi3>
1000ae28:	102f883a 	mov	r23,r2
1000ae2c:	8809883a 	mov	r4,r17
1000ae30:	b00b883a 	mov	r5,r22
1000ae34:	000afcc0 	call	1000afcc <__udivsi3>
1000ae38:	b82e943a 	slli	r23,r23,16
1000ae3c:	a885383a 	mul	r2,r21,r2
1000ae40:	e13fffcc 	andi	r4,fp,65535
1000ae44:	25c8b03a 	or	r4,r4,r23
1000ae48:	2080042e 	bgeu	r4,r2,1000ae5c <__umoddi3+0x4c0>
1000ae4c:	24c9883a 	add	r4,r4,r19
1000ae50:	24c00236 	bltu	r4,r19,1000ae5c <__umoddi3+0x4c0>
1000ae54:	2080012e 	bgeu	r4,r2,1000ae5c <__umoddi3+0x4c0>
1000ae58:	24c9883a 	add	r4,r4,r19
1000ae5c:	20a3c83a 	sub	r17,r4,r2
1000ae60:	003f4806 	br	1000ab84 <__alt_data_end+0xf800ab84>
1000ae64:	2c8fc83a 	sub	r7,r5,r18
1000ae68:	1545c83a 	sub	r2,r2,r21
1000ae6c:	29cb803a 	cmpltu	r5,r5,r7
1000ae70:	1145c83a 	sub	r2,r2,r5
1000ae74:	4089c83a 	sub	r4,r8,r2
1000ae78:	003fc706 	br	1000ad98 <__alt_data_end+0xf800ad98>
1000ae7c:	01000604 	movi	r4,24
1000ae80:	003f1806 	br	1000aae4 <__alt_data_end+0xf800aae4>
1000ae84:	00800604 	movi	r2,24
1000ae88:	003f3206 	br	1000ab54 <__alt_data_end+0xf800ab54>
1000ae8c:	01000604 	movi	r4,24
1000ae90:	003ed906 	br	1000a9f8 <__alt_data_end+0xf800a9f8>
1000ae94:	413fa52e 	bgeu	r8,r4,1000ad2c <__alt_data_end+0xf800ad2c>
1000ae98:	297fff84 	addi	r5,r5,-2
1000ae9c:	4551883a 	add	r8,r8,r21
1000aea0:	003fa306 	br	1000ad30 <__alt_data_end+0xf800ad30>
1000aea4:	15ff8b2e 	bgeu	r2,r23,1000acd4 <__alt_data_end+0xf800acd4>
1000aea8:	31bfff84 	addi	r6,r6,-2
1000aeac:	1545883a 	add	r2,r2,r21
1000aeb0:	003f8906 	br	1000acd8 <__alt_data_end+0xf800acd8>
1000aeb4:	24c9883a 	add	r4,r4,r19
1000aeb8:	003eee06 	br	1000aa74 <__alt_data_end+0xf800aa74>
1000aebc:	8005883a 	mov	r2,r16
1000aec0:	003f1706 	br	1000ab20 <__alt_data_end+0xf800ab20>
1000aec4:	817fe736 	bltu	r16,r5,1000ae64 <__alt_data_end+0xf800ae64>
1000aec8:	280f883a 	mov	r7,r5
1000aecc:	0009883a 	mov	r4,zero
1000aed0:	003fb106 	br	1000ad98 <__alt_data_end+0xf800ad98>

1000aed4 <__divsi3>:
1000aed4:	20001b16 	blt	r4,zero,1000af44 <__divsi3+0x70>
1000aed8:	000f883a 	mov	r7,zero
1000aedc:	28001616 	blt	r5,zero,1000af38 <__divsi3+0x64>
1000aee0:	200d883a 	mov	r6,r4
1000aee4:	29001a2e 	bgeu	r5,r4,1000af50 <__divsi3+0x7c>
1000aee8:	00800804 	movi	r2,32
1000aeec:	00c00044 	movi	r3,1
1000aef0:	00000106 	br	1000aef8 <__divsi3+0x24>
1000aef4:	10000d26 	beq	r2,zero,1000af2c <__divsi3+0x58>
1000aef8:	294b883a 	add	r5,r5,r5
1000aefc:	10bfffc4 	addi	r2,r2,-1
1000af00:	18c7883a 	add	r3,r3,r3
1000af04:	293ffb36 	bltu	r5,r4,1000aef4 <__alt_data_end+0xf800aef4>
1000af08:	0005883a 	mov	r2,zero
1000af0c:	18000726 	beq	r3,zero,1000af2c <__divsi3+0x58>
1000af10:	0005883a 	mov	r2,zero
1000af14:	31400236 	bltu	r6,r5,1000af20 <__divsi3+0x4c>
1000af18:	314dc83a 	sub	r6,r6,r5
1000af1c:	10c4b03a 	or	r2,r2,r3
1000af20:	1806d07a 	srli	r3,r3,1
1000af24:	280ad07a 	srli	r5,r5,1
1000af28:	183ffa1e 	bne	r3,zero,1000af14 <__alt_data_end+0xf800af14>
1000af2c:	38000126 	beq	r7,zero,1000af34 <__divsi3+0x60>
1000af30:	0085c83a 	sub	r2,zero,r2
1000af34:	f800283a 	ret
1000af38:	014bc83a 	sub	r5,zero,r5
1000af3c:	39c0005c 	xori	r7,r7,1
1000af40:	003fe706 	br	1000aee0 <__alt_data_end+0xf800aee0>
1000af44:	0109c83a 	sub	r4,zero,r4
1000af48:	01c00044 	movi	r7,1
1000af4c:	003fe306 	br	1000aedc <__alt_data_end+0xf800aedc>
1000af50:	00c00044 	movi	r3,1
1000af54:	003fee06 	br	1000af10 <__alt_data_end+0xf800af10>

1000af58 <__modsi3>:
1000af58:	20001716 	blt	r4,zero,1000afb8 <__modsi3+0x60>
1000af5c:	000f883a 	mov	r7,zero
1000af60:	2005883a 	mov	r2,r4
1000af64:	28001216 	blt	r5,zero,1000afb0 <__modsi3+0x58>
1000af68:	2900162e 	bgeu	r5,r4,1000afc4 <__modsi3+0x6c>
1000af6c:	01800804 	movi	r6,32
1000af70:	00c00044 	movi	r3,1
1000af74:	00000106 	br	1000af7c <__modsi3+0x24>
1000af78:	30000a26 	beq	r6,zero,1000afa4 <__modsi3+0x4c>
1000af7c:	294b883a 	add	r5,r5,r5
1000af80:	31bfffc4 	addi	r6,r6,-1
1000af84:	18c7883a 	add	r3,r3,r3
1000af88:	293ffb36 	bltu	r5,r4,1000af78 <__alt_data_end+0xf800af78>
1000af8c:	18000526 	beq	r3,zero,1000afa4 <__modsi3+0x4c>
1000af90:	1806d07a 	srli	r3,r3,1
1000af94:	11400136 	bltu	r2,r5,1000af9c <__modsi3+0x44>
1000af98:	1145c83a 	sub	r2,r2,r5
1000af9c:	280ad07a 	srli	r5,r5,1
1000afa0:	183ffb1e 	bne	r3,zero,1000af90 <__alt_data_end+0xf800af90>
1000afa4:	38000126 	beq	r7,zero,1000afac <__modsi3+0x54>
1000afa8:	0085c83a 	sub	r2,zero,r2
1000afac:	f800283a 	ret
1000afb0:	014bc83a 	sub	r5,zero,r5
1000afb4:	003fec06 	br	1000af68 <__alt_data_end+0xf800af68>
1000afb8:	0109c83a 	sub	r4,zero,r4
1000afbc:	01c00044 	movi	r7,1
1000afc0:	003fe706 	br	1000af60 <__alt_data_end+0xf800af60>
1000afc4:	00c00044 	movi	r3,1
1000afc8:	003ff106 	br	1000af90 <__alt_data_end+0xf800af90>

1000afcc <__udivsi3>:
1000afcc:	200d883a 	mov	r6,r4
1000afd0:	2900152e 	bgeu	r5,r4,1000b028 <__udivsi3+0x5c>
1000afd4:	28001416 	blt	r5,zero,1000b028 <__udivsi3+0x5c>
1000afd8:	00800804 	movi	r2,32
1000afdc:	00c00044 	movi	r3,1
1000afe0:	00000206 	br	1000afec <__udivsi3+0x20>
1000afe4:	10000e26 	beq	r2,zero,1000b020 <__udivsi3+0x54>
1000afe8:	28000516 	blt	r5,zero,1000b000 <__udivsi3+0x34>
1000afec:	294b883a 	add	r5,r5,r5
1000aff0:	10bfffc4 	addi	r2,r2,-1
1000aff4:	18c7883a 	add	r3,r3,r3
1000aff8:	293ffa36 	bltu	r5,r4,1000afe4 <__alt_data_end+0xf800afe4>
1000affc:	18000826 	beq	r3,zero,1000b020 <__udivsi3+0x54>
1000b000:	0005883a 	mov	r2,zero
1000b004:	31400236 	bltu	r6,r5,1000b010 <__udivsi3+0x44>
1000b008:	314dc83a 	sub	r6,r6,r5
1000b00c:	10c4b03a 	or	r2,r2,r3
1000b010:	1806d07a 	srli	r3,r3,1
1000b014:	280ad07a 	srli	r5,r5,1
1000b018:	183ffa1e 	bne	r3,zero,1000b004 <__alt_data_end+0xf800b004>
1000b01c:	f800283a 	ret
1000b020:	0005883a 	mov	r2,zero
1000b024:	f800283a 	ret
1000b028:	00c00044 	movi	r3,1
1000b02c:	003ff406 	br	1000b000 <__alt_data_end+0xf800b000>

1000b030 <__umodsi3>:
1000b030:	2005883a 	mov	r2,r4
1000b034:	2900122e 	bgeu	r5,r4,1000b080 <__umodsi3+0x50>
1000b038:	28001116 	blt	r5,zero,1000b080 <__umodsi3+0x50>
1000b03c:	01800804 	movi	r6,32
1000b040:	00c00044 	movi	r3,1
1000b044:	00000206 	br	1000b050 <__umodsi3+0x20>
1000b048:	30000c26 	beq	r6,zero,1000b07c <__umodsi3+0x4c>
1000b04c:	28000516 	blt	r5,zero,1000b064 <__umodsi3+0x34>
1000b050:	294b883a 	add	r5,r5,r5
1000b054:	31bfffc4 	addi	r6,r6,-1
1000b058:	18c7883a 	add	r3,r3,r3
1000b05c:	293ffa36 	bltu	r5,r4,1000b048 <__alt_data_end+0xf800b048>
1000b060:	18000626 	beq	r3,zero,1000b07c <__umodsi3+0x4c>
1000b064:	1806d07a 	srli	r3,r3,1
1000b068:	11400136 	bltu	r2,r5,1000b070 <__umodsi3+0x40>
1000b06c:	1145c83a 	sub	r2,r2,r5
1000b070:	280ad07a 	srli	r5,r5,1
1000b074:	183ffb1e 	bne	r3,zero,1000b064 <__alt_data_end+0xf800b064>
1000b078:	f800283a 	ret
1000b07c:	f800283a 	ret
1000b080:	00c00044 	movi	r3,1
1000b084:	003ff706 	br	1000b064 <__alt_data_end+0xf800b064>

1000b088 <__adddf3>:
1000b088:	02c00434 	movhi	r11,16
1000b08c:	5affffc4 	addi	r11,r11,-1
1000b090:	2806d7fa 	srli	r3,r5,31
1000b094:	2ad4703a 	and	r10,r5,r11
1000b098:	3ad2703a 	and	r9,r7,r11
1000b09c:	3804d53a 	srli	r2,r7,20
1000b0a0:	3018d77a 	srli	r12,r6,29
1000b0a4:	280ad53a 	srli	r5,r5,20
1000b0a8:	501490fa 	slli	r10,r10,3
1000b0ac:	2010d77a 	srli	r8,r4,29
1000b0b0:	481290fa 	slli	r9,r9,3
1000b0b4:	380ed7fa 	srli	r7,r7,31
1000b0b8:	defffb04 	addi	sp,sp,-20
1000b0bc:	dc800215 	stw	r18,8(sp)
1000b0c0:	dc400115 	stw	r17,4(sp)
1000b0c4:	dc000015 	stw	r16,0(sp)
1000b0c8:	dfc00415 	stw	ra,16(sp)
1000b0cc:	dcc00315 	stw	r19,12(sp)
1000b0d0:	1c803fcc 	andi	r18,r3,255
1000b0d4:	2c01ffcc 	andi	r16,r5,2047
1000b0d8:	5210b03a 	or	r8,r10,r8
1000b0dc:	202290fa 	slli	r17,r4,3
1000b0e0:	1081ffcc 	andi	r2,r2,2047
1000b0e4:	4b12b03a 	or	r9,r9,r12
1000b0e8:	300c90fa 	slli	r6,r6,3
1000b0ec:	91c07526 	beq	r18,r7,1000b2c4 <__adddf3+0x23c>
1000b0f0:	8087c83a 	sub	r3,r16,r2
1000b0f4:	00c0ab0e 	bge	zero,r3,1000b3a4 <__adddf3+0x31c>
1000b0f8:	10002a1e 	bne	r2,zero,1000b1a4 <__adddf3+0x11c>
1000b0fc:	4984b03a 	or	r2,r9,r6
1000b100:	1000961e 	bne	r2,zero,1000b35c <__adddf3+0x2d4>
1000b104:	888001cc 	andi	r2,r17,7
1000b108:	10000726 	beq	r2,zero,1000b128 <__adddf3+0xa0>
1000b10c:	888003cc 	andi	r2,r17,15
1000b110:	00c00104 	movi	r3,4
1000b114:	10c00426 	beq	r2,r3,1000b128 <__adddf3+0xa0>
1000b118:	88c7883a 	add	r3,r17,r3
1000b11c:	1c63803a 	cmpltu	r17,r3,r17
1000b120:	4451883a 	add	r8,r8,r17
1000b124:	1823883a 	mov	r17,r3
1000b128:	4080202c 	andhi	r2,r8,128
1000b12c:	10005926 	beq	r2,zero,1000b294 <__adddf3+0x20c>
1000b130:	84000044 	addi	r16,r16,1
1000b134:	0081ffc4 	movi	r2,2047
1000b138:	8080ba26 	beq	r16,r2,1000b424 <__adddf3+0x39c>
1000b13c:	00bfe034 	movhi	r2,65408
1000b140:	10bfffc4 	addi	r2,r2,-1
1000b144:	4090703a 	and	r8,r8,r2
1000b148:	4004977a 	slli	r2,r8,29
1000b14c:	4010927a 	slli	r8,r8,9
1000b150:	8822d0fa 	srli	r17,r17,3
1000b154:	8401ffcc 	andi	r16,r16,2047
1000b158:	4010d33a 	srli	r8,r8,12
1000b15c:	9007883a 	mov	r3,r18
1000b160:	1444b03a 	or	r2,r2,r17
1000b164:	8401ffcc 	andi	r16,r16,2047
1000b168:	8020953a 	slli	r16,r16,20
1000b16c:	18c03fcc 	andi	r3,r3,255
1000b170:	01000434 	movhi	r4,16
1000b174:	213fffc4 	addi	r4,r4,-1
1000b178:	180697fa 	slli	r3,r3,31
1000b17c:	4110703a 	and	r8,r8,r4
1000b180:	4410b03a 	or	r8,r8,r16
1000b184:	40c6b03a 	or	r3,r8,r3
1000b188:	dfc00417 	ldw	ra,16(sp)
1000b18c:	dcc00317 	ldw	r19,12(sp)
1000b190:	dc800217 	ldw	r18,8(sp)
1000b194:	dc400117 	ldw	r17,4(sp)
1000b198:	dc000017 	ldw	r16,0(sp)
1000b19c:	dec00504 	addi	sp,sp,20
1000b1a0:	f800283a 	ret
1000b1a4:	0081ffc4 	movi	r2,2047
1000b1a8:	80bfd626 	beq	r16,r2,1000b104 <__alt_data_end+0xf800b104>
1000b1ac:	4a402034 	orhi	r9,r9,128
1000b1b0:	00800e04 	movi	r2,56
1000b1b4:	10c09f16 	blt	r2,r3,1000b434 <__adddf3+0x3ac>
1000b1b8:	008007c4 	movi	r2,31
1000b1bc:	10c0c216 	blt	r2,r3,1000b4c8 <__adddf3+0x440>
1000b1c0:	00800804 	movi	r2,32
1000b1c4:	10c5c83a 	sub	r2,r2,r3
1000b1c8:	488a983a 	sll	r5,r9,r2
1000b1cc:	30c8d83a 	srl	r4,r6,r3
1000b1d0:	3084983a 	sll	r2,r6,r2
1000b1d4:	48c6d83a 	srl	r3,r9,r3
1000b1d8:	290cb03a 	or	r6,r5,r4
1000b1dc:	1004c03a 	cmpne	r2,r2,zero
1000b1e0:	308cb03a 	or	r6,r6,r2
1000b1e4:	898dc83a 	sub	r6,r17,r6
1000b1e8:	89a3803a 	cmpltu	r17,r17,r6
1000b1ec:	40d1c83a 	sub	r8,r8,r3
1000b1f0:	4451c83a 	sub	r8,r8,r17
1000b1f4:	3023883a 	mov	r17,r6
1000b1f8:	4080202c 	andhi	r2,r8,128
1000b1fc:	10002326 	beq	r2,zero,1000b28c <__adddf3+0x204>
1000b200:	04c02034 	movhi	r19,128
1000b204:	9cffffc4 	addi	r19,r19,-1
1000b208:	44e6703a 	and	r19,r8,r19
1000b20c:	98007626 	beq	r19,zero,1000b3e8 <__adddf3+0x360>
1000b210:	9809883a 	mov	r4,r19
1000b214:	000d68c0 	call	1000d68c <__clzsi2>
1000b218:	10fffe04 	addi	r3,r2,-8
1000b21c:	010007c4 	movi	r4,31
1000b220:	20c07716 	blt	r4,r3,1000b400 <__adddf3+0x378>
1000b224:	00800804 	movi	r2,32
1000b228:	10c5c83a 	sub	r2,r2,r3
1000b22c:	8884d83a 	srl	r2,r17,r2
1000b230:	98d0983a 	sll	r8,r19,r3
1000b234:	88e2983a 	sll	r17,r17,r3
1000b238:	1204b03a 	or	r2,r2,r8
1000b23c:	1c007416 	blt	r3,r16,1000b410 <__adddf3+0x388>
1000b240:	1c21c83a 	sub	r16,r3,r16
1000b244:	82000044 	addi	r8,r16,1
1000b248:	00c007c4 	movi	r3,31
1000b24c:	1a009116 	blt	r3,r8,1000b494 <__adddf3+0x40c>
1000b250:	00c00804 	movi	r3,32
1000b254:	1a07c83a 	sub	r3,r3,r8
1000b258:	8a08d83a 	srl	r4,r17,r8
1000b25c:	88e2983a 	sll	r17,r17,r3
1000b260:	10c6983a 	sll	r3,r2,r3
1000b264:	1210d83a 	srl	r8,r2,r8
1000b268:	8804c03a 	cmpne	r2,r17,zero
1000b26c:	1906b03a 	or	r3,r3,r4
1000b270:	18a2b03a 	or	r17,r3,r2
1000b274:	0021883a 	mov	r16,zero
1000b278:	003fa206 	br	1000b104 <__alt_data_end+0xf800b104>
1000b27c:	1890b03a 	or	r8,r3,r2
1000b280:	40017d26 	beq	r8,zero,1000b878 <__adddf3+0x7f0>
1000b284:	1011883a 	mov	r8,r2
1000b288:	1823883a 	mov	r17,r3
1000b28c:	888001cc 	andi	r2,r17,7
1000b290:	103f9e1e 	bne	r2,zero,1000b10c <__alt_data_end+0xf800b10c>
1000b294:	4004977a 	slli	r2,r8,29
1000b298:	8822d0fa 	srli	r17,r17,3
1000b29c:	4010d0fa 	srli	r8,r8,3
1000b2a0:	9007883a 	mov	r3,r18
1000b2a4:	1444b03a 	or	r2,r2,r17
1000b2a8:	0101ffc4 	movi	r4,2047
1000b2ac:	81002426 	beq	r16,r4,1000b340 <__adddf3+0x2b8>
1000b2b0:	8120703a 	and	r16,r16,r4
1000b2b4:	01000434 	movhi	r4,16
1000b2b8:	213fffc4 	addi	r4,r4,-1
1000b2bc:	4110703a 	and	r8,r8,r4
1000b2c0:	003fa806 	br	1000b164 <__alt_data_end+0xf800b164>
1000b2c4:	8089c83a 	sub	r4,r16,r2
1000b2c8:	01005e0e 	bge	zero,r4,1000b444 <__adddf3+0x3bc>
1000b2cc:	10002b26 	beq	r2,zero,1000b37c <__adddf3+0x2f4>
1000b2d0:	0081ffc4 	movi	r2,2047
1000b2d4:	80bf8b26 	beq	r16,r2,1000b104 <__alt_data_end+0xf800b104>
1000b2d8:	4a402034 	orhi	r9,r9,128
1000b2dc:	00800e04 	movi	r2,56
1000b2e0:	1100a40e 	bge	r2,r4,1000b574 <__adddf3+0x4ec>
1000b2e4:	498cb03a 	or	r6,r9,r6
1000b2e8:	300ac03a 	cmpne	r5,r6,zero
1000b2ec:	0013883a 	mov	r9,zero
1000b2f0:	2c4b883a 	add	r5,r5,r17
1000b2f4:	2c63803a 	cmpltu	r17,r5,r17
1000b2f8:	4a11883a 	add	r8,r9,r8
1000b2fc:	8a11883a 	add	r8,r17,r8
1000b300:	2823883a 	mov	r17,r5
1000b304:	4080202c 	andhi	r2,r8,128
1000b308:	103fe026 	beq	r2,zero,1000b28c <__alt_data_end+0xf800b28c>
1000b30c:	84000044 	addi	r16,r16,1
1000b310:	0081ffc4 	movi	r2,2047
1000b314:	8080d226 	beq	r16,r2,1000b660 <__adddf3+0x5d8>
1000b318:	00bfe034 	movhi	r2,65408
1000b31c:	10bfffc4 	addi	r2,r2,-1
1000b320:	4090703a 	and	r8,r8,r2
1000b324:	880ad07a 	srli	r5,r17,1
1000b328:	400897fa 	slli	r4,r8,31
1000b32c:	88c0004c 	andi	r3,r17,1
1000b330:	28e2b03a 	or	r17,r5,r3
1000b334:	4010d07a 	srli	r8,r8,1
1000b338:	2462b03a 	or	r17,r4,r17
1000b33c:	003f7106 	br	1000b104 <__alt_data_end+0xf800b104>
1000b340:	4088b03a 	or	r4,r8,r2
1000b344:	20014526 	beq	r4,zero,1000b85c <__adddf3+0x7d4>
1000b348:	01000434 	movhi	r4,16
1000b34c:	42000234 	orhi	r8,r8,8
1000b350:	213fffc4 	addi	r4,r4,-1
1000b354:	4110703a 	and	r8,r8,r4
1000b358:	003f8206 	br	1000b164 <__alt_data_end+0xf800b164>
1000b35c:	18ffffc4 	addi	r3,r3,-1
1000b360:	1800491e 	bne	r3,zero,1000b488 <__adddf3+0x400>
1000b364:	898bc83a 	sub	r5,r17,r6
1000b368:	8963803a 	cmpltu	r17,r17,r5
1000b36c:	4251c83a 	sub	r8,r8,r9
1000b370:	4451c83a 	sub	r8,r8,r17
1000b374:	2823883a 	mov	r17,r5
1000b378:	003f9f06 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b37c:	4984b03a 	or	r2,r9,r6
1000b380:	103f6026 	beq	r2,zero,1000b104 <__alt_data_end+0xf800b104>
1000b384:	213fffc4 	addi	r4,r4,-1
1000b388:	2000931e 	bne	r4,zero,1000b5d8 <__adddf3+0x550>
1000b38c:	898d883a 	add	r6,r17,r6
1000b390:	3463803a 	cmpltu	r17,r6,r17
1000b394:	4251883a 	add	r8,r8,r9
1000b398:	8a11883a 	add	r8,r17,r8
1000b39c:	3023883a 	mov	r17,r6
1000b3a0:	003fd806 	br	1000b304 <__alt_data_end+0xf800b304>
1000b3a4:	1800541e 	bne	r3,zero,1000b4f8 <__adddf3+0x470>
1000b3a8:	80800044 	addi	r2,r16,1
1000b3ac:	1081ffcc 	andi	r2,r2,2047
1000b3b0:	00c00044 	movi	r3,1
1000b3b4:	1880a00e 	bge	r3,r2,1000b638 <__adddf3+0x5b0>
1000b3b8:	8989c83a 	sub	r4,r17,r6
1000b3bc:	8905803a 	cmpltu	r2,r17,r4
1000b3c0:	4267c83a 	sub	r19,r8,r9
1000b3c4:	98a7c83a 	sub	r19,r19,r2
1000b3c8:	9880202c 	andhi	r2,r19,128
1000b3cc:	10006326 	beq	r2,zero,1000b55c <__adddf3+0x4d4>
1000b3d0:	3463c83a 	sub	r17,r6,r17
1000b3d4:	4a07c83a 	sub	r3,r9,r8
1000b3d8:	344d803a 	cmpltu	r6,r6,r17
1000b3dc:	19a7c83a 	sub	r19,r3,r6
1000b3e0:	3825883a 	mov	r18,r7
1000b3e4:	983f8a1e 	bne	r19,zero,1000b210 <__alt_data_end+0xf800b210>
1000b3e8:	8809883a 	mov	r4,r17
1000b3ec:	000d68c0 	call	1000d68c <__clzsi2>
1000b3f0:	10800804 	addi	r2,r2,32
1000b3f4:	10fffe04 	addi	r3,r2,-8
1000b3f8:	010007c4 	movi	r4,31
1000b3fc:	20ff890e 	bge	r4,r3,1000b224 <__alt_data_end+0xf800b224>
1000b400:	10bff604 	addi	r2,r2,-40
1000b404:	8884983a 	sll	r2,r17,r2
1000b408:	0023883a 	mov	r17,zero
1000b40c:	1c3f8c0e 	bge	r3,r16,1000b240 <__alt_data_end+0xf800b240>
1000b410:	023fe034 	movhi	r8,65408
1000b414:	423fffc4 	addi	r8,r8,-1
1000b418:	80e1c83a 	sub	r16,r16,r3
1000b41c:	1210703a 	and	r8,r2,r8
1000b420:	003f3806 	br	1000b104 <__alt_data_end+0xf800b104>
1000b424:	9007883a 	mov	r3,r18
1000b428:	0011883a 	mov	r8,zero
1000b42c:	0005883a 	mov	r2,zero
1000b430:	003f4c06 	br	1000b164 <__alt_data_end+0xf800b164>
1000b434:	498cb03a 	or	r6,r9,r6
1000b438:	300cc03a 	cmpne	r6,r6,zero
1000b43c:	0007883a 	mov	r3,zero
1000b440:	003f6806 	br	1000b1e4 <__alt_data_end+0xf800b1e4>
1000b444:	20009c1e 	bne	r4,zero,1000b6b8 <__adddf3+0x630>
1000b448:	80800044 	addi	r2,r16,1
1000b44c:	1141ffcc 	andi	r5,r2,2047
1000b450:	01000044 	movi	r4,1
1000b454:	2140670e 	bge	r4,r5,1000b5f4 <__adddf3+0x56c>
1000b458:	0101ffc4 	movi	r4,2047
1000b45c:	11007f26 	beq	r2,r4,1000b65c <__adddf3+0x5d4>
1000b460:	898d883a 	add	r6,r17,r6
1000b464:	4247883a 	add	r3,r8,r9
1000b468:	3451803a 	cmpltu	r8,r6,r17
1000b46c:	40d1883a 	add	r8,r8,r3
1000b470:	402297fa 	slli	r17,r8,31
1000b474:	300cd07a 	srli	r6,r6,1
1000b478:	4010d07a 	srli	r8,r8,1
1000b47c:	1021883a 	mov	r16,r2
1000b480:	89a2b03a 	or	r17,r17,r6
1000b484:	003f1f06 	br	1000b104 <__alt_data_end+0xf800b104>
1000b488:	0081ffc4 	movi	r2,2047
1000b48c:	80bf481e 	bne	r16,r2,1000b1b0 <__alt_data_end+0xf800b1b0>
1000b490:	003f1c06 	br	1000b104 <__alt_data_end+0xf800b104>
1000b494:	843ff844 	addi	r16,r16,-31
1000b498:	01000804 	movi	r4,32
1000b49c:	1406d83a 	srl	r3,r2,r16
1000b4a0:	41005026 	beq	r8,r4,1000b5e4 <__adddf3+0x55c>
1000b4a4:	01001004 	movi	r4,64
1000b4a8:	2211c83a 	sub	r8,r4,r8
1000b4ac:	1204983a 	sll	r2,r2,r8
1000b4b0:	88a2b03a 	or	r17,r17,r2
1000b4b4:	8822c03a 	cmpne	r17,r17,zero
1000b4b8:	1c62b03a 	or	r17,r3,r17
1000b4bc:	0011883a 	mov	r8,zero
1000b4c0:	0021883a 	mov	r16,zero
1000b4c4:	003f7106 	br	1000b28c <__alt_data_end+0xf800b28c>
1000b4c8:	193ff804 	addi	r4,r3,-32
1000b4cc:	00800804 	movi	r2,32
1000b4d0:	4908d83a 	srl	r4,r9,r4
1000b4d4:	18804526 	beq	r3,r2,1000b5ec <__adddf3+0x564>
1000b4d8:	00801004 	movi	r2,64
1000b4dc:	10c5c83a 	sub	r2,r2,r3
1000b4e0:	4886983a 	sll	r3,r9,r2
1000b4e4:	198cb03a 	or	r6,r3,r6
1000b4e8:	300cc03a 	cmpne	r6,r6,zero
1000b4ec:	218cb03a 	or	r6,r4,r6
1000b4f0:	0007883a 	mov	r3,zero
1000b4f4:	003f3b06 	br	1000b1e4 <__alt_data_end+0xf800b1e4>
1000b4f8:	80002a26 	beq	r16,zero,1000b5a4 <__adddf3+0x51c>
1000b4fc:	0101ffc4 	movi	r4,2047
1000b500:	11006826 	beq	r2,r4,1000b6a4 <__adddf3+0x61c>
1000b504:	00c7c83a 	sub	r3,zero,r3
1000b508:	42002034 	orhi	r8,r8,128
1000b50c:	01000e04 	movi	r4,56
1000b510:	20c07c16 	blt	r4,r3,1000b704 <__adddf3+0x67c>
1000b514:	010007c4 	movi	r4,31
1000b518:	20c0da16 	blt	r4,r3,1000b884 <__adddf3+0x7fc>
1000b51c:	01000804 	movi	r4,32
1000b520:	20c9c83a 	sub	r4,r4,r3
1000b524:	4114983a 	sll	r10,r8,r4
1000b528:	88cad83a 	srl	r5,r17,r3
1000b52c:	8908983a 	sll	r4,r17,r4
1000b530:	40c6d83a 	srl	r3,r8,r3
1000b534:	5162b03a 	or	r17,r10,r5
1000b538:	2008c03a 	cmpne	r4,r4,zero
1000b53c:	8922b03a 	or	r17,r17,r4
1000b540:	3463c83a 	sub	r17,r6,r17
1000b544:	48c7c83a 	sub	r3,r9,r3
1000b548:	344d803a 	cmpltu	r6,r6,r17
1000b54c:	1991c83a 	sub	r8,r3,r6
1000b550:	1021883a 	mov	r16,r2
1000b554:	3825883a 	mov	r18,r7
1000b558:	003f2706 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b55c:	24d0b03a 	or	r8,r4,r19
1000b560:	40001b1e 	bne	r8,zero,1000b5d0 <__adddf3+0x548>
1000b564:	0005883a 	mov	r2,zero
1000b568:	0007883a 	mov	r3,zero
1000b56c:	0021883a 	mov	r16,zero
1000b570:	003f4d06 	br	1000b2a8 <__alt_data_end+0xf800b2a8>
1000b574:	008007c4 	movi	r2,31
1000b578:	11003c16 	blt	r2,r4,1000b66c <__adddf3+0x5e4>
1000b57c:	00800804 	movi	r2,32
1000b580:	1105c83a 	sub	r2,r2,r4
1000b584:	488e983a 	sll	r7,r9,r2
1000b588:	310ad83a 	srl	r5,r6,r4
1000b58c:	3084983a 	sll	r2,r6,r2
1000b590:	4912d83a 	srl	r9,r9,r4
1000b594:	394ab03a 	or	r5,r7,r5
1000b598:	1004c03a 	cmpne	r2,r2,zero
1000b59c:	288ab03a 	or	r5,r5,r2
1000b5a0:	003f5306 	br	1000b2f0 <__alt_data_end+0xf800b2f0>
1000b5a4:	4448b03a 	or	r4,r8,r17
1000b5a8:	20003e26 	beq	r4,zero,1000b6a4 <__adddf3+0x61c>
1000b5ac:	00c6303a 	nor	r3,zero,r3
1000b5b0:	18003a1e 	bne	r3,zero,1000b69c <__adddf3+0x614>
1000b5b4:	3463c83a 	sub	r17,r6,r17
1000b5b8:	4a07c83a 	sub	r3,r9,r8
1000b5bc:	344d803a 	cmpltu	r6,r6,r17
1000b5c0:	1991c83a 	sub	r8,r3,r6
1000b5c4:	1021883a 	mov	r16,r2
1000b5c8:	3825883a 	mov	r18,r7
1000b5cc:	003f0a06 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b5d0:	2023883a 	mov	r17,r4
1000b5d4:	003f0d06 	br	1000b20c <__alt_data_end+0xf800b20c>
1000b5d8:	0081ffc4 	movi	r2,2047
1000b5dc:	80bf3f1e 	bne	r16,r2,1000b2dc <__alt_data_end+0xf800b2dc>
1000b5e0:	003ec806 	br	1000b104 <__alt_data_end+0xf800b104>
1000b5e4:	0005883a 	mov	r2,zero
1000b5e8:	003fb106 	br	1000b4b0 <__alt_data_end+0xf800b4b0>
1000b5ec:	0007883a 	mov	r3,zero
1000b5f0:	003fbc06 	br	1000b4e4 <__alt_data_end+0xf800b4e4>
1000b5f4:	4444b03a 	or	r2,r8,r17
1000b5f8:	8000871e 	bne	r16,zero,1000b818 <__adddf3+0x790>
1000b5fc:	1000ba26 	beq	r2,zero,1000b8e8 <__adddf3+0x860>
1000b600:	4984b03a 	or	r2,r9,r6
1000b604:	103ebf26 	beq	r2,zero,1000b104 <__alt_data_end+0xf800b104>
1000b608:	8985883a 	add	r2,r17,r6
1000b60c:	4247883a 	add	r3,r8,r9
1000b610:	1451803a 	cmpltu	r8,r2,r17
1000b614:	40d1883a 	add	r8,r8,r3
1000b618:	40c0202c 	andhi	r3,r8,128
1000b61c:	1023883a 	mov	r17,r2
1000b620:	183f1a26 	beq	r3,zero,1000b28c <__alt_data_end+0xf800b28c>
1000b624:	00bfe034 	movhi	r2,65408
1000b628:	10bfffc4 	addi	r2,r2,-1
1000b62c:	2021883a 	mov	r16,r4
1000b630:	4090703a 	and	r8,r8,r2
1000b634:	003eb306 	br	1000b104 <__alt_data_end+0xf800b104>
1000b638:	4444b03a 	or	r2,r8,r17
1000b63c:	8000291e 	bne	r16,zero,1000b6e4 <__adddf3+0x65c>
1000b640:	10004b1e 	bne	r2,zero,1000b770 <__adddf3+0x6e8>
1000b644:	4990b03a 	or	r8,r9,r6
1000b648:	40008b26 	beq	r8,zero,1000b878 <__adddf3+0x7f0>
1000b64c:	4811883a 	mov	r8,r9
1000b650:	3023883a 	mov	r17,r6
1000b654:	3825883a 	mov	r18,r7
1000b658:	003eaa06 	br	1000b104 <__alt_data_end+0xf800b104>
1000b65c:	1021883a 	mov	r16,r2
1000b660:	0011883a 	mov	r8,zero
1000b664:	0005883a 	mov	r2,zero
1000b668:	003f0f06 	br	1000b2a8 <__alt_data_end+0xf800b2a8>
1000b66c:	217ff804 	addi	r5,r4,-32
1000b670:	00800804 	movi	r2,32
1000b674:	494ad83a 	srl	r5,r9,r5
1000b678:	20807d26 	beq	r4,r2,1000b870 <__adddf3+0x7e8>
1000b67c:	00801004 	movi	r2,64
1000b680:	1109c83a 	sub	r4,r2,r4
1000b684:	4912983a 	sll	r9,r9,r4
1000b688:	498cb03a 	or	r6,r9,r6
1000b68c:	300cc03a 	cmpne	r6,r6,zero
1000b690:	298ab03a 	or	r5,r5,r6
1000b694:	0013883a 	mov	r9,zero
1000b698:	003f1506 	br	1000b2f0 <__alt_data_end+0xf800b2f0>
1000b69c:	0101ffc4 	movi	r4,2047
1000b6a0:	113f9a1e 	bne	r2,r4,1000b50c <__alt_data_end+0xf800b50c>
1000b6a4:	4811883a 	mov	r8,r9
1000b6a8:	3023883a 	mov	r17,r6
1000b6ac:	1021883a 	mov	r16,r2
1000b6b0:	3825883a 	mov	r18,r7
1000b6b4:	003e9306 	br	1000b104 <__alt_data_end+0xf800b104>
1000b6b8:	8000161e 	bne	r16,zero,1000b714 <__adddf3+0x68c>
1000b6bc:	444ab03a 	or	r5,r8,r17
1000b6c0:	28005126 	beq	r5,zero,1000b808 <__adddf3+0x780>
1000b6c4:	0108303a 	nor	r4,zero,r4
1000b6c8:	20004d1e 	bne	r4,zero,1000b800 <__adddf3+0x778>
1000b6cc:	89a3883a 	add	r17,r17,r6
1000b6d0:	4253883a 	add	r9,r8,r9
1000b6d4:	898d803a 	cmpltu	r6,r17,r6
1000b6d8:	3251883a 	add	r8,r6,r9
1000b6dc:	1021883a 	mov	r16,r2
1000b6e0:	003f0806 	br	1000b304 <__alt_data_end+0xf800b304>
1000b6e4:	1000301e 	bne	r2,zero,1000b7a8 <__adddf3+0x720>
1000b6e8:	4984b03a 	or	r2,r9,r6
1000b6ec:	10007126 	beq	r2,zero,1000b8b4 <__adddf3+0x82c>
1000b6f0:	4811883a 	mov	r8,r9
1000b6f4:	3023883a 	mov	r17,r6
1000b6f8:	3825883a 	mov	r18,r7
1000b6fc:	0401ffc4 	movi	r16,2047
1000b700:	003e8006 	br	1000b104 <__alt_data_end+0xf800b104>
1000b704:	4462b03a 	or	r17,r8,r17
1000b708:	8822c03a 	cmpne	r17,r17,zero
1000b70c:	0007883a 	mov	r3,zero
1000b710:	003f8b06 	br	1000b540 <__alt_data_end+0xf800b540>
1000b714:	0141ffc4 	movi	r5,2047
1000b718:	11403b26 	beq	r2,r5,1000b808 <__adddf3+0x780>
1000b71c:	0109c83a 	sub	r4,zero,r4
1000b720:	42002034 	orhi	r8,r8,128
1000b724:	01400e04 	movi	r5,56
1000b728:	29006716 	blt	r5,r4,1000b8c8 <__adddf3+0x840>
1000b72c:	014007c4 	movi	r5,31
1000b730:	29007016 	blt	r5,r4,1000b8f4 <__adddf3+0x86c>
1000b734:	01400804 	movi	r5,32
1000b738:	290bc83a 	sub	r5,r5,r4
1000b73c:	4154983a 	sll	r10,r8,r5
1000b740:	890ed83a 	srl	r7,r17,r4
1000b744:	894a983a 	sll	r5,r17,r5
1000b748:	4108d83a 	srl	r4,r8,r4
1000b74c:	51e2b03a 	or	r17,r10,r7
1000b750:	280ac03a 	cmpne	r5,r5,zero
1000b754:	8962b03a 	or	r17,r17,r5
1000b758:	89a3883a 	add	r17,r17,r6
1000b75c:	2253883a 	add	r9,r4,r9
1000b760:	898d803a 	cmpltu	r6,r17,r6
1000b764:	3251883a 	add	r8,r6,r9
1000b768:	1021883a 	mov	r16,r2
1000b76c:	003ee506 	br	1000b304 <__alt_data_end+0xf800b304>
1000b770:	4984b03a 	or	r2,r9,r6
1000b774:	103e6326 	beq	r2,zero,1000b104 <__alt_data_end+0xf800b104>
1000b778:	8987c83a 	sub	r3,r17,r6
1000b77c:	88c9803a 	cmpltu	r4,r17,r3
1000b780:	4245c83a 	sub	r2,r8,r9
1000b784:	1105c83a 	sub	r2,r2,r4
1000b788:	1100202c 	andhi	r4,r2,128
1000b78c:	203ebb26 	beq	r4,zero,1000b27c <__alt_data_end+0xf800b27c>
1000b790:	3463c83a 	sub	r17,r6,r17
1000b794:	4a07c83a 	sub	r3,r9,r8
1000b798:	344d803a 	cmpltu	r6,r6,r17
1000b79c:	1991c83a 	sub	r8,r3,r6
1000b7a0:	3825883a 	mov	r18,r7
1000b7a4:	003e5706 	br	1000b104 <__alt_data_end+0xf800b104>
1000b7a8:	4984b03a 	or	r2,r9,r6
1000b7ac:	10002e26 	beq	r2,zero,1000b868 <__adddf3+0x7e0>
1000b7b0:	4004d0fa 	srli	r2,r8,3
1000b7b4:	8822d0fa 	srli	r17,r17,3
1000b7b8:	4010977a 	slli	r8,r8,29
1000b7bc:	10c0022c 	andhi	r3,r2,8
1000b7c0:	4462b03a 	or	r17,r8,r17
1000b7c4:	18000826 	beq	r3,zero,1000b7e8 <__adddf3+0x760>
1000b7c8:	4808d0fa 	srli	r4,r9,3
1000b7cc:	20c0022c 	andhi	r3,r4,8
1000b7d0:	1800051e 	bne	r3,zero,1000b7e8 <__adddf3+0x760>
1000b7d4:	300cd0fa 	srli	r6,r6,3
1000b7d8:	4806977a 	slli	r3,r9,29
1000b7dc:	2005883a 	mov	r2,r4
1000b7e0:	3825883a 	mov	r18,r7
1000b7e4:	19a2b03a 	or	r17,r3,r6
1000b7e8:	8810d77a 	srli	r8,r17,29
1000b7ec:	100490fa 	slli	r2,r2,3
1000b7f0:	882290fa 	slli	r17,r17,3
1000b7f4:	0401ffc4 	movi	r16,2047
1000b7f8:	4090b03a 	or	r8,r8,r2
1000b7fc:	003e4106 	br	1000b104 <__alt_data_end+0xf800b104>
1000b800:	0141ffc4 	movi	r5,2047
1000b804:	117fc71e 	bne	r2,r5,1000b724 <__alt_data_end+0xf800b724>
1000b808:	4811883a 	mov	r8,r9
1000b80c:	3023883a 	mov	r17,r6
1000b810:	1021883a 	mov	r16,r2
1000b814:	003e3b06 	br	1000b104 <__alt_data_end+0xf800b104>
1000b818:	10002f26 	beq	r2,zero,1000b8d8 <__adddf3+0x850>
1000b81c:	4984b03a 	or	r2,r9,r6
1000b820:	10001126 	beq	r2,zero,1000b868 <__adddf3+0x7e0>
1000b824:	4004d0fa 	srli	r2,r8,3
1000b828:	8822d0fa 	srli	r17,r17,3
1000b82c:	4010977a 	slli	r8,r8,29
1000b830:	10c0022c 	andhi	r3,r2,8
1000b834:	4462b03a 	or	r17,r8,r17
1000b838:	183feb26 	beq	r3,zero,1000b7e8 <__alt_data_end+0xf800b7e8>
1000b83c:	4808d0fa 	srli	r4,r9,3
1000b840:	20c0022c 	andhi	r3,r4,8
1000b844:	183fe81e 	bne	r3,zero,1000b7e8 <__alt_data_end+0xf800b7e8>
1000b848:	300cd0fa 	srli	r6,r6,3
1000b84c:	4806977a 	slli	r3,r9,29
1000b850:	2005883a 	mov	r2,r4
1000b854:	19a2b03a 	or	r17,r3,r6
1000b858:	003fe306 	br	1000b7e8 <__alt_data_end+0xf800b7e8>
1000b85c:	0011883a 	mov	r8,zero
1000b860:	0005883a 	mov	r2,zero
1000b864:	003e3f06 	br	1000b164 <__alt_data_end+0xf800b164>
1000b868:	0401ffc4 	movi	r16,2047
1000b86c:	003e2506 	br	1000b104 <__alt_data_end+0xf800b104>
1000b870:	0013883a 	mov	r9,zero
1000b874:	003f8406 	br	1000b688 <__alt_data_end+0xf800b688>
1000b878:	0005883a 	mov	r2,zero
1000b87c:	0007883a 	mov	r3,zero
1000b880:	003e8906 	br	1000b2a8 <__alt_data_end+0xf800b2a8>
1000b884:	197ff804 	addi	r5,r3,-32
1000b888:	01000804 	movi	r4,32
1000b88c:	414ad83a 	srl	r5,r8,r5
1000b890:	19002426 	beq	r3,r4,1000b924 <__adddf3+0x89c>
1000b894:	01001004 	movi	r4,64
1000b898:	20c7c83a 	sub	r3,r4,r3
1000b89c:	40c6983a 	sll	r3,r8,r3
1000b8a0:	1c46b03a 	or	r3,r3,r17
1000b8a4:	1806c03a 	cmpne	r3,r3,zero
1000b8a8:	28e2b03a 	or	r17,r5,r3
1000b8ac:	0007883a 	mov	r3,zero
1000b8b0:	003f2306 	br	1000b540 <__alt_data_end+0xf800b540>
1000b8b4:	0007883a 	mov	r3,zero
1000b8b8:	5811883a 	mov	r8,r11
1000b8bc:	00bfffc4 	movi	r2,-1
1000b8c0:	0401ffc4 	movi	r16,2047
1000b8c4:	003e7806 	br	1000b2a8 <__alt_data_end+0xf800b2a8>
1000b8c8:	4462b03a 	or	r17,r8,r17
1000b8cc:	8822c03a 	cmpne	r17,r17,zero
1000b8d0:	0009883a 	mov	r4,zero
1000b8d4:	003fa006 	br	1000b758 <__alt_data_end+0xf800b758>
1000b8d8:	4811883a 	mov	r8,r9
1000b8dc:	3023883a 	mov	r17,r6
1000b8e0:	0401ffc4 	movi	r16,2047
1000b8e4:	003e0706 	br	1000b104 <__alt_data_end+0xf800b104>
1000b8e8:	4811883a 	mov	r8,r9
1000b8ec:	3023883a 	mov	r17,r6
1000b8f0:	003e0406 	br	1000b104 <__alt_data_end+0xf800b104>
1000b8f4:	21fff804 	addi	r7,r4,-32
1000b8f8:	01400804 	movi	r5,32
1000b8fc:	41ced83a 	srl	r7,r8,r7
1000b900:	21400a26 	beq	r4,r5,1000b92c <__adddf3+0x8a4>
1000b904:	01401004 	movi	r5,64
1000b908:	2909c83a 	sub	r4,r5,r4
1000b90c:	4108983a 	sll	r4,r8,r4
1000b910:	2448b03a 	or	r4,r4,r17
1000b914:	2008c03a 	cmpne	r4,r4,zero
1000b918:	3922b03a 	or	r17,r7,r4
1000b91c:	0009883a 	mov	r4,zero
1000b920:	003f8d06 	br	1000b758 <__alt_data_end+0xf800b758>
1000b924:	0007883a 	mov	r3,zero
1000b928:	003fdd06 	br	1000b8a0 <__alt_data_end+0xf800b8a0>
1000b92c:	0009883a 	mov	r4,zero
1000b930:	003ff706 	br	1000b910 <__alt_data_end+0xf800b910>

1000b934 <__divdf3>:
1000b934:	defff204 	addi	sp,sp,-56
1000b938:	dd400915 	stw	r21,36(sp)
1000b93c:	282ad53a 	srli	r21,r5,20
1000b940:	dd000815 	stw	r20,32(sp)
1000b944:	2828d7fa 	srli	r20,r5,31
1000b948:	dc000415 	stw	r16,16(sp)
1000b94c:	04000434 	movhi	r16,16
1000b950:	df000c15 	stw	fp,48(sp)
1000b954:	843fffc4 	addi	r16,r16,-1
1000b958:	dfc00d15 	stw	ra,52(sp)
1000b95c:	ddc00b15 	stw	r23,44(sp)
1000b960:	dd800a15 	stw	r22,40(sp)
1000b964:	dcc00715 	stw	r19,28(sp)
1000b968:	dc800615 	stw	r18,24(sp)
1000b96c:	dc400515 	stw	r17,20(sp)
1000b970:	ad41ffcc 	andi	r21,r21,2047
1000b974:	2c20703a 	and	r16,r5,r16
1000b978:	a7003fcc 	andi	fp,r20,255
1000b97c:	a8006126 	beq	r21,zero,1000bb04 <__divdf3+0x1d0>
1000b980:	0081ffc4 	movi	r2,2047
1000b984:	2025883a 	mov	r18,r4
1000b988:	a8803726 	beq	r21,r2,1000ba68 <__divdf3+0x134>
1000b98c:	80800434 	orhi	r2,r16,16
1000b990:	100490fa 	slli	r2,r2,3
1000b994:	2020d77a 	srli	r16,r4,29
1000b998:	202490fa 	slli	r18,r4,3
1000b99c:	ad7f0044 	addi	r21,r21,-1023
1000b9a0:	80a0b03a 	or	r16,r16,r2
1000b9a4:	0027883a 	mov	r19,zero
1000b9a8:	0013883a 	mov	r9,zero
1000b9ac:	3804d53a 	srli	r2,r7,20
1000b9b0:	382cd7fa 	srli	r22,r7,31
1000b9b4:	04400434 	movhi	r17,16
1000b9b8:	8c7fffc4 	addi	r17,r17,-1
1000b9bc:	1081ffcc 	andi	r2,r2,2047
1000b9c0:	3011883a 	mov	r8,r6
1000b9c4:	3c62703a 	and	r17,r7,r17
1000b9c8:	b5c03fcc 	andi	r23,r22,255
1000b9cc:	10006c26 	beq	r2,zero,1000bb80 <__divdf3+0x24c>
1000b9d0:	00c1ffc4 	movi	r3,2047
1000b9d4:	10c06426 	beq	r2,r3,1000bb68 <__divdf3+0x234>
1000b9d8:	88c00434 	orhi	r3,r17,16
1000b9dc:	180690fa 	slli	r3,r3,3
1000b9e0:	3022d77a 	srli	r17,r6,29
1000b9e4:	301090fa 	slli	r8,r6,3
1000b9e8:	10bf0044 	addi	r2,r2,-1023
1000b9ec:	88e2b03a 	or	r17,r17,r3
1000b9f0:	000f883a 	mov	r7,zero
1000b9f4:	a58cf03a 	xor	r6,r20,r22
1000b9f8:	3cc8b03a 	or	r4,r7,r19
1000b9fc:	a8abc83a 	sub	r21,r21,r2
1000ba00:	008003c4 	movi	r2,15
1000ba04:	3007883a 	mov	r3,r6
1000ba08:	34c03fcc 	andi	r19,r6,255
1000ba0c:	11009036 	bltu	r2,r4,1000bc50 <__divdf3+0x31c>
1000ba10:	200890ba 	slli	r4,r4,2
1000ba14:	00840074 	movhi	r2,4097
1000ba18:	10ae8a04 	addi	r2,r2,-17880
1000ba1c:	2089883a 	add	r4,r4,r2
1000ba20:	20800017 	ldw	r2,0(r4)
1000ba24:	1000683a 	jmp	r2
1000ba28:	1000bc50 	cmplti	zero,r2,753
1000ba2c:	1000baa0 	cmpeqi	zero,r2,746
1000ba30:	1000bc40 	call	11000bc4 <_gp+0xfe27d8>
1000ba34:	1000ba94 	ori	zero,r2,746
1000ba38:	1000bc40 	call	11000bc4 <_gp+0xfe27d8>
1000ba3c:	1000bc14 	ori	zero,r2,752
1000ba40:	1000bc40 	call	11000bc4 <_gp+0xfe27d8>
1000ba44:	1000ba94 	ori	zero,r2,746
1000ba48:	1000baa0 	cmpeqi	zero,r2,746
1000ba4c:	1000baa0 	cmpeqi	zero,r2,746
1000ba50:	1000bc14 	ori	zero,r2,752
1000ba54:	1000ba94 	ori	zero,r2,746
1000ba58:	1000ba84 	addi	zero,r2,746
1000ba5c:	1000ba84 	addi	zero,r2,746
1000ba60:	1000ba84 	addi	zero,r2,746
1000ba64:	1000bf34 	orhi	zero,r2,764
1000ba68:	2404b03a 	or	r2,r4,r16
1000ba6c:	1000661e 	bne	r2,zero,1000bc08 <__divdf3+0x2d4>
1000ba70:	04c00204 	movi	r19,8
1000ba74:	0021883a 	mov	r16,zero
1000ba78:	0025883a 	mov	r18,zero
1000ba7c:	02400084 	movi	r9,2
1000ba80:	003fca06 	br	1000b9ac <__alt_data_end+0xf800b9ac>
1000ba84:	8023883a 	mov	r17,r16
1000ba88:	9011883a 	mov	r8,r18
1000ba8c:	e02f883a 	mov	r23,fp
1000ba90:	480f883a 	mov	r7,r9
1000ba94:	00800084 	movi	r2,2
1000ba98:	3881311e 	bne	r7,r2,1000bf60 <__divdf3+0x62c>
1000ba9c:	b827883a 	mov	r19,r23
1000baa0:	98c0004c 	andi	r3,r19,1
1000baa4:	0081ffc4 	movi	r2,2047
1000baa8:	000b883a 	mov	r5,zero
1000baac:	0025883a 	mov	r18,zero
1000bab0:	1004953a 	slli	r2,r2,20
1000bab4:	18c03fcc 	andi	r3,r3,255
1000bab8:	04400434 	movhi	r17,16
1000babc:	8c7fffc4 	addi	r17,r17,-1
1000bac0:	180697fa 	slli	r3,r3,31
1000bac4:	2c4a703a 	and	r5,r5,r17
1000bac8:	288ab03a 	or	r5,r5,r2
1000bacc:	28c6b03a 	or	r3,r5,r3
1000bad0:	9005883a 	mov	r2,r18
1000bad4:	dfc00d17 	ldw	ra,52(sp)
1000bad8:	df000c17 	ldw	fp,48(sp)
1000badc:	ddc00b17 	ldw	r23,44(sp)
1000bae0:	dd800a17 	ldw	r22,40(sp)
1000bae4:	dd400917 	ldw	r21,36(sp)
1000bae8:	dd000817 	ldw	r20,32(sp)
1000baec:	dcc00717 	ldw	r19,28(sp)
1000baf0:	dc800617 	ldw	r18,24(sp)
1000baf4:	dc400517 	ldw	r17,20(sp)
1000baf8:	dc000417 	ldw	r16,16(sp)
1000bafc:	dec00e04 	addi	sp,sp,56
1000bb00:	f800283a 	ret
1000bb04:	2404b03a 	or	r2,r4,r16
1000bb08:	2027883a 	mov	r19,r4
1000bb0c:	10003926 	beq	r2,zero,1000bbf4 <__divdf3+0x2c0>
1000bb10:	80012e26 	beq	r16,zero,1000bfcc <__divdf3+0x698>
1000bb14:	8009883a 	mov	r4,r16
1000bb18:	d9800315 	stw	r6,12(sp)
1000bb1c:	d9c00215 	stw	r7,8(sp)
1000bb20:	000d68c0 	call	1000d68c <__clzsi2>
1000bb24:	d9800317 	ldw	r6,12(sp)
1000bb28:	d9c00217 	ldw	r7,8(sp)
1000bb2c:	113ffd44 	addi	r4,r2,-11
1000bb30:	00c00704 	movi	r3,28
1000bb34:	19012116 	blt	r3,r4,1000bfbc <__divdf3+0x688>
1000bb38:	00c00744 	movi	r3,29
1000bb3c:	147ffe04 	addi	r17,r2,-8
1000bb40:	1907c83a 	sub	r3,r3,r4
1000bb44:	8460983a 	sll	r16,r16,r17
1000bb48:	98c6d83a 	srl	r3,r19,r3
1000bb4c:	9c64983a 	sll	r18,r19,r17
1000bb50:	1c20b03a 	or	r16,r3,r16
1000bb54:	1080fcc4 	addi	r2,r2,1011
1000bb58:	00abc83a 	sub	r21,zero,r2
1000bb5c:	0027883a 	mov	r19,zero
1000bb60:	0013883a 	mov	r9,zero
1000bb64:	003f9106 	br	1000b9ac <__alt_data_end+0xf800b9ac>
1000bb68:	3446b03a 	or	r3,r6,r17
1000bb6c:	18001f1e 	bne	r3,zero,1000bbec <__divdf3+0x2b8>
1000bb70:	0023883a 	mov	r17,zero
1000bb74:	0011883a 	mov	r8,zero
1000bb78:	01c00084 	movi	r7,2
1000bb7c:	003f9d06 	br	1000b9f4 <__alt_data_end+0xf800b9f4>
1000bb80:	3446b03a 	or	r3,r6,r17
1000bb84:	18001526 	beq	r3,zero,1000bbdc <__divdf3+0x2a8>
1000bb88:	88011b26 	beq	r17,zero,1000bff8 <__divdf3+0x6c4>
1000bb8c:	8809883a 	mov	r4,r17
1000bb90:	d9800315 	stw	r6,12(sp)
1000bb94:	da400115 	stw	r9,4(sp)
1000bb98:	000d68c0 	call	1000d68c <__clzsi2>
1000bb9c:	d9800317 	ldw	r6,12(sp)
1000bba0:	da400117 	ldw	r9,4(sp)
1000bba4:	113ffd44 	addi	r4,r2,-11
1000bba8:	00c00704 	movi	r3,28
1000bbac:	19010e16 	blt	r3,r4,1000bfe8 <__divdf3+0x6b4>
1000bbb0:	00c00744 	movi	r3,29
1000bbb4:	123ffe04 	addi	r8,r2,-8
1000bbb8:	1907c83a 	sub	r3,r3,r4
1000bbbc:	8a22983a 	sll	r17,r17,r8
1000bbc0:	30c6d83a 	srl	r3,r6,r3
1000bbc4:	3210983a 	sll	r8,r6,r8
1000bbc8:	1c62b03a 	or	r17,r3,r17
1000bbcc:	1080fcc4 	addi	r2,r2,1011
1000bbd0:	0085c83a 	sub	r2,zero,r2
1000bbd4:	000f883a 	mov	r7,zero
1000bbd8:	003f8606 	br	1000b9f4 <__alt_data_end+0xf800b9f4>
1000bbdc:	0023883a 	mov	r17,zero
1000bbe0:	0011883a 	mov	r8,zero
1000bbe4:	01c00044 	movi	r7,1
1000bbe8:	003f8206 	br	1000b9f4 <__alt_data_end+0xf800b9f4>
1000bbec:	01c000c4 	movi	r7,3
1000bbf0:	003f8006 	br	1000b9f4 <__alt_data_end+0xf800b9f4>
1000bbf4:	04c00104 	movi	r19,4
1000bbf8:	0021883a 	mov	r16,zero
1000bbfc:	0025883a 	mov	r18,zero
1000bc00:	02400044 	movi	r9,1
1000bc04:	003f6906 	br	1000b9ac <__alt_data_end+0xf800b9ac>
1000bc08:	04c00304 	movi	r19,12
1000bc0c:	024000c4 	movi	r9,3
1000bc10:	003f6606 	br	1000b9ac <__alt_data_end+0xf800b9ac>
1000bc14:	01400434 	movhi	r5,16
1000bc18:	0007883a 	mov	r3,zero
1000bc1c:	297fffc4 	addi	r5,r5,-1
1000bc20:	04bfffc4 	movi	r18,-1
1000bc24:	0081ffc4 	movi	r2,2047
1000bc28:	003fa106 	br	1000bab0 <__alt_data_end+0xf800bab0>
1000bc2c:	00c00044 	movi	r3,1
1000bc30:	1887c83a 	sub	r3,r3,r2
1000bc34:	01000e04 	movi	r4,56
1000bc38:	20c1210e 	bge	r4,r3,1000c0c0 <__divdf3+0x78c>
1000bc3c:	98c0004c 	andi	r3,r19,1
1000bc40:	0005883a 	mov	r2,zero
1000bc44:	000b883a 	mov	r5,zero
1000bc48:	0025883a 	mov	r18,zero
1000bc4c:	003f9806 	br	1000bab0 <__alt_data_end+0xf800bab0>
1000bc50:	8c00fd36 	bltu	r17,r16,1000c048 <__divdf3+0x714>
1000bc54:	8440fb26 	beq	r16,r17,1000c044 <__divdf3+0x710>
1000bc58:	8007883a 	mov	r3,r16
1000bc5c:	ad7fffc4 	addi	r21,r21,-1
1000bc60:	0021883a 	mov	r16,zero
1000bc64:	4004d63a 	srli	r2,r8,24
1000bc68:	8822923a 	slli	r17,r17,8
1000bc6c:	1809883a 	mov	r4,r3
1000bc70:	402c923a 	slli	r22,r8,8
1000bc74:	88b8b03a 	or	fp,r17,r2
1000bc78:	e028d43a 	srli	r20,fp,16
1000bc7c:	d8c00015 	stw	r3,0(sp)
1000bc80:	e5ffffcc 	andi	r23,fp,65535
1000bc84:	a00b883a 	mov	r5,r20
1000bc88:	000afcc0 	call	1000afcc <__udivsi3>
1000bc8c:	d8c00017 	ldw	r3,0(sp)
1000bc90:	a00b883a 	mov	r5,r20
1000bc94:	d8800315 	stw	r2,12(sp)
1000bc98:	1809883a 	mov	r4,r3
1000bc9c:	000b0300 	call	1000b030 <__umodsi3>
1000bca0:	d9800317 	ldw	r6,12(sp)
1000bca4:	1006943a 	slli	r3,r2,16
1000bca8:	9004d43a 	srli	r2,r18,16
1000bcac:	b9a3383a 	mul	r17,r23,r6
1000bcb0:	10c4b03a 	or	r2,r2,r3
1000bcb4:	1440062e 	bgeu	r2,r17,1000bcd0 <__divdf3+0x39c>
1000bcb8:	1705883a 	add	r2,r2,fp
1000bcbc:	30ffffc4 	addi	r3,r6,-1
1000bcc0:	1700ee36 	bltu	r2,fp,1000c07c <__divdf3+0x748>
1000bcc4:	1440ed2e 	bgeu	r2,r17,1000c07c <__divdf3+0x748>
1000bcc8:	31bfff84 	addi	r6,r6,-2
1000bccc:	1705883a 	add	r2,r2,fp
1000bcd0:	1463c83a 	sub	r17,r2,r17
1000bcd4:	a00b883a 	mov	r5,r20
1000bcd8:	8809883a 	mov	r4,r17
1000bcdc:	d9800315 	stw	r6,12(sp)
1000bce0:	000afcc0 	call	1000afcc <__udivsi3>
1000bce4:	a00b883a 	mov	r5,r20
1000bce8:	8809883a 	mov	r4,r17
1000bcec:	d8800215 	stw	r2,8(sp)
1000bcf0:	000b0300 	call	1000b030 <__umodsi3>
1000bcf4:	d9c00217 	ldw	r7,8(sp)
1000bcf8:	1004943a 	slli	r2,r2,16
1000bcfc:	94bfffcc 	andi	r18,r18,65535
1000bd00:	b9d1383a 	mul	r8,r23,r7
1000bd04:	90a4b03a 	or	r18,r18,r2
1000bd08:	d9800317 	ldw	r6,12(sp)
1000bd0c:	9200062e 	bgeu	r18,r8,1000bd28 <__divdf3+0x3f4>
1000bd10:	9725883a 	add	r18,r18,fp
1000bd14:	38bfffc4 	addi	r2,r7,-1
1000bd18:	9700d636 	bltu	r18,fp,1000c074 <__divdf3+0x740>
1000bd1c:	9200d52e 	bgeu	r18,r8,1000c074 <__divdf3+0x740>
1000bd20:	39ffff84 	addi	r7,r7,-2
1000bd24:	9725883a 	add	r18,r18,fp
1000bd28:	3004943a 	slli	r2,r6,16
1000bd2c:	b012d43a 	srli	r9,r22,16
1000bd30:	b1bfffcc 	andi	r6,r22,65535
1000bd34:	11e2b03a 	or	r17,r2,r7
1000bd38:	8806d43a 	srli	r3,r17,16
1000bd3c:	893fffcc 	andi	r4,r17,65535
1000bd40:	218b383a 	mul	r5,r4,r6
1000bd44:	30c5383a 	mul	r2,r6,r3
1000bd48:	2249383a 	mul	r4,r4,r9
1000bd4c:	280ed43a 	srli	r7,r5,16
1000bd50:	9225c83a 	sub	r18,r18,r8
1000bd54:	2089883a 	add	r4,r4,r2
1000bd58:	3909883a 	add	r4,r7,r4
1000bd5c:	1a47383a 	mul	r3,r3,r9
1000bd60:	2080022e 	bgeu	r4,r2,1000bd6c <__divdf3+0x438>
1000bd64:	00800074 	movhi	r2,1
1000bd68:	1887883a 	add	r3,r3,r2
1000bd6c:	2004d43a 	srli	r2,r4,16
1000bd70:	2008943a 	slli	r4,r4,16
1000bd74:	297fffcc 	andi	r5,r5,65535
1000bd78:	10c7883a 	add	r3,r2,r3
1000bd7c:	2149883a 	add	r4,r4,r5
1000bd80:	90c0a536 	bltu	r18,r3,1000c018 <__divdf3+0x6e4>
1000bd84:	90c0bf26 	beq	r18,r3,1000c084 <__divdf3+0x750>
1000bd88:	90c7c83a 	sub	r3,r18,r3
1000bd8c:	810fc83a 	sub	r7,r16,r4
1000bd90:	81e5803a 	cmpltu	r18,r16,r7
1000bd94:	1ca5c83a 	sub	r18,r3,r18
1000bd98:	e480c126 	beq	fp,r18,1000c0a0 <__divdf3+0x76c>
1000bd9c:	a00b883a 	mov	r5,r20
1000bda0:	9009883a 	mov	r4,r18
1000bda4:	d9800315 	stw	r6,12(sp)
1000bda8:	d9c00215 	stw	r7,8(sp)
1000bdac:	da400115 	stw	r9,4(sp)
1000bdb0:	000afcc0 	call	1000afcc <__udivsi3>
1000bdb4:	a00b883a 	mov	r5,r20
1000bdb8:	9009883a 	mov	r4,r18
1000bdbc:	d8800015 	stw	r2,0(sp)
1000bdc0:	000b0300 	call	1000b030 <__umodsi3>
1000bdc4:	d9c00217 	ldw	r7,8(sp)
1000bdc8:	da000017 	ldw	r8,0(sp)
1000bdcc:	1006943a 	slli	r3,r2,16
1000bdd0:	3804d43a 	srli	r2,r7,16
1000bdd4:	ba21383a 	mul	r16,r23,r8
1000bdd8:	d9800317 	ldw	r6,12(sp)
1000bddc:	10c4b03a 	or	r2,r2,r3
1000bde0:	da400117 	ldw	r9,4(sp)
1000bde4:	1400062e 	bgeu	r2,r16,1000be00 <__divdf3+0x4cc>
1000bde8:	1705883a 	add	r2,r2,fp
1000bdec:	40ffffc4 	addi	r3,r8,-1
1000bdf0:	1700ad36 	bltu	r2,fp,1000c0a8 <__divdf3+0x774>
1000bdf4:	1400ac2e 	bgeu	r2,r16,1000c0a8 <__divdf3+0x774>
1000bdf8:	423fff84 	addi	r8,r8,-2
1000bdfc:	1705883a 	add	r2,r2,fp
1000be00:	1421c83a 	sub	r16,r2,r16
1000be04:	a00b883a 	mov	r5,r20
1000be08:	8009883a 	mov	r4,r16
1000be0c:	d9800315 	stw	r6,12(sp)
1000be10:	d9c00215 	stw	r7,8(sp)
1000be14:	da000015 	stw	r8,0(sp)
1000be18:	da400115 	stw	r9,4(sp)
1000be1c:	000afcc0 	call	1000afcc <__udivsi3>
1000be20:	8009883a 	mov	r4,r16
1000be24:	a00b883a 	mov	r5,r20
1000be28:	1025883a 	mov	r18,r2
1000be2c:	000b0300 	call	1000b030 <__umodsi3>
1000be30:	d9c00217 	ldw	r7,8(sp)
1000be34:	1004943a 	slli	r2,r2,16
1000be38:	bcaf383a 	mul	r23,r23,r18
1000be3c:	393fffcc 	andi	r4,r7,65535
1000be40:	2088b03a 	or	r4,r4,r2
1000be44:	d9800317 	ldw	r6,12(sp)
1000be48:	da000017 	ldw	r8,0(sp)
1000be4c:	da400117 	ldw	r9,4(sp)
1000be50:	25c0062e 	bgeu	r4,r23,1000be6c <__divdf3+0x538>
1000be54:	2709883a 	add	r4,r4,fp
1000be58:	90bfffc4 	addi	r2,r18,-1
1000be5c:	27009436 	bltu	r4,fp,1000c0b0 <__divdf3+0x77c>
1000be60:	25c0932e 	bgeu	r4,r23,1000c0b0 <__divdf3+0x77c>
1000be64:	94bfff84 	addi	r18,r18,-2
1000be68:	2709883a 	add	r4,r4,fp
1000be6c:	4004943a 	slli	r2,r8,16
1000be70:	25efc83a 	sub	r23,r4,r23
1000be74:	1490b03a 	or	r8,r2,r18
1000be78:	4008d43a 	srli	r4,r8,16
1000be7c:	40ffffcc 	andi	r3,r8,65535
1000be80:	30c5383a 	mul	r2,r6,r3
1000be84:	1a47383a 	mul	r3,r3,r9
1000be88:	310d383a 	mul	r6,r6,r4
1000be8c:	100ad43a 	srli	r5,r2,16
1000be90:	4913383a 	mul	r9,r9,r4
1000be94:	1987883a 	add	r3,r3,r6
1000be98:	28c7883a 	add	r3,r5,r3
1000be9c:	1980022e 	bgeu	r3,r6,1000bea8 <__divdf3+0x574>
1000bea0:	01000074 	movhi	r4,1
1000bea4:	4913883a 	add	r9,r9,r4
1000bea8:	1808d43a 	srli	r4,r3,16
1000beac:	1806943a 	slli	r3,r3,16
1000beb0:	10bfffcc 	andi	r2,r2,65535
1000beb4:	2253883a 	add	r9,r4,r9
1000beb8:	1887883a 	add	r3,r3,r2
1000bebc:	ba403836 	bltu	r23,r9,1000bfa0 <__divdf3+0x66c>
1000bec0:	ba403626 	beq	r23,r9,1000bf9c <__divdf3+0x668>
1000bec4:	42000054 	ori	r8,r8,1
1000bec8:	a880ffc4 	addi	r2,r21,1023
1000becc:	00bf570e 	bge	zero,r2,1000bc2c <__alt_data_end+0xf800bc2c>
1000bed0:	40c001cc 	andi	r3,r8,7
1000bed4:	18000726 	beq	r3,zero,1000bef4 <__divdf3+0x5c0>
1000bed8:	40c003cc 	andi	r3,r8,15
1000bedc:	01000104 	movi	r4,4
1000bee0:	19000426 	beq	r3,r4,1000bef4 <__divdf3+0x5c0>
1000bee4:	4107883a 	add	r3,r8,r4
1000bee8:	1a11803a 	cmpltu	r8,r3,r8
1000beec:	8a23883a 	add	r17,r17,r8
1000bef0:	1811883a 	mov	r8,r3
1000bef4:	88c0402c 	andhi	r3,r17,256
1000bef8:	18000426 	beq	r3,zero,1000bf0c <__divdf3+0x5d8>
1000befc:	00ffc034 	movhi	r3,65280
1000bf00:	18ffffc4 	addi	r3,r3,-1
1000bf04:	a8810004 	addi	r2,r21,1024
1000bf08:	88e2703a 	and	r17,r17,r3
1000bf0c:	00c1ff84 	movi	r3,2046
1000bf10:	18bee316 	blt	r3,r2,1000baa0 <__alt_data_end+0xf800baa0>
1000bf14:	8824977a 	slli	r18,r17,29
1000bf18:	4010d0fa 	srli	r8,r8,3
1000bf1c:	8822927a 	slli	r17,r17,9
1000bf20:	1081ffcc 	andi	r2,r2,2047
1000bf24:	9224b03a 	or	r18,r18,r8
1000bf28:	880ad33a 	srli	r5,r17,12
1000bf2c:	98c0004c 	andi	r3,r19,1
1000bf30:	003edf06 	br	1000bab0 <__alt_data_end+0xf800bab0>
1000bf34:	8080022c 	andhi	r2,r16,8
1000bf38:	10001226 	beq	r2,zero,1000bf84 <__divdf3+0x650>
1000bf3c:	8880022c 	andhi	r2,r17,8
1000bf40:	1000101e 	bne	r2,zero,1000bf84 <__divdf3+0x650>
1000bf44:	00800434 	movhi	r2,16
1000bf48:	89400234 	orhi	r5,r17,8
1000bf4c:	10bfffc4 	addi	r2,r2,-1
1000bf50:	b007883a 	mov	r3,r22
1000bf54:	288a703a 	and	r5,r5,r2
1000bf58:	4025883a 	mov	r18,r8
1000bf5c:	003f3106 	br	1000bc24 <__alt_data_end+0xf800bc24>
1000bf60:	008000c4 	movi	r2,3
1000bf64:	3880a626 	beq	r7,r2,1000c200 <__divdf3+0x8cc>
1000bf68:	00800044 	movi	r2,1
1000bf6c:	3880521e 	bne	r7,r2,1000c0b8 <__divdf3+0x784>
1000bf70:	b807883a 	mov	r3,r23
1000bf74:	0005883a 	mov	r2,zero
1000bf78:	000b883a 	mov	r5,zero
1000bf7c:	0025883a 	mov	r18,zero
1000bf80:	003ecb06 	br	1000bab0 <__alt_data_end+0xf800bab0>
1000bf84:	00800434 	movhi	r2,16
1000bf88:	81400234 	orhi	r5,r16,8
1000bf8c:	10bfffc4 	addi	r2,r2,-1
1000bf90:	a007883a 	mov	r3,r20
1000bf94:	288a703a 	and	r5,r5,r2
1000bf98:	003f2206 	br	1000bc24 <__alt_data_end+0xf800bc24>
1000bf9c:	183fca26 	beq	r3,zero,1000bec8 <__alt_data_end+0xf800bec8>
1000bfa0:	e5ef883a 	add	r23,fp,r23
1000bfa4:	40bfffc4 	addi	r2,r8,-1
1000bfa8:	bf00392e 	bgeu	r23,fp,1000c090 <__divdf3+0x75c>
1000bfac:	1011883a 	mov	r8,r2
1000bfb0:	ba7fc41e 	bne	r23,r9,1000bec4 <__alt_data_end+0xf800bec4>
1000bfb4:	b0ffc31e 	bne	r22,r3,1000bec4 <__alt_data_end+0xf800bec4>
1000bfb8:	003fc306 	br	1000bec8 <__alt_data_end+0xf800bec8>
1000bfbc:	143ff604 	addi	r16,r2,-40
1000bfc0:	9c20983a 	sll	r16,r19,r16
1000bfc4:	0025883a 	mov	r18,zero
1000bfc8:	003ee206 	br	1000bb54 <__alt_data_end+0xf800bb54>
1000bfcc:	d9800315 	stw	r6,12(sp)
1000bfd0:	d9c00215 	stw	r7,8(sp)
1000bfd4:	000d68c0 	call	1000d68c <__clzsi2>
1000bfd8:	10800804 	addi	r2,r2,32
1000bfdc:	d9c00217 	ldw	r7,8(sp)
1000bfe0:	d9800317 	ldw	r6,12(sp)
1000bfe4:	003ed106 	br	1000bb2c <__alt_data_end+0xf800bb2c>
1000bfe8:	147ff604 	addi	r17,r2,-40
1000bfec:	3462983a 	sll	r17,r6,r17
1000bff0:	0011883a 	mov	r8,zero
1000bff4:	003ef506 	br	1000bbcc <__alt_data_end+0xf800bbcc>
1000bff8:	3009883a 	mov	r4,r6
1000bffc:	d9800315 	stw	r6,12(sp)
1000c000:	da400115 	stw	r9,4(sp)
1000c004:	000d68c0 	call	1000d68c <__clzsi2>
1000c008:	10800804 	addi	r2,r2,32
1000c00c:	da400117 	ldw	r9,4(sp)
1000c010:	d9800317 	ldw	r6,12(sp)
1000c014:	003ee306 	br	1000bba4 <__alt_data_end+0xf800bba4>
1000c018:	85a1883a 	add	r16,r16,r22
1000c01c:	8585803a 	cmpltu	r2,r16,r22
1000c020:	1705883a 	add	r2,r2,fp
1000c024:	14a5883a 	add	r18,r2,r18
1000c028:	88bfffc4 	addi	r2,r17,-1
1000c02c:	e4800c2e 	bgeu	fp,r18,1000c060 <__divdf3+0x72c>
1000c030:	90c03e36 	bltu	r18,r3,1000c12c <__divdf3+0x7f8>
1000c034:	1c806926 	beq	r3,r18,1000c1dc <__divdf3+0x8a8>
1000c038:	90c7c83a 	sub	r3,r18,r3
1000c03c:	1023883a 	mov	r17,r2
1000c040:	003f5206 	br	1000bd8c <__alt_data_end+0xf800bd8c>
1000c044:	923f0436 	bltu	r18,r8,1000bc58 <__alt_data_end+0xf800bc58>
1000c048:	800897fa 	slli	r4,r16,31
1000c04c:	9004d07a 	srli	r2,r18,1
1000c050:	8006d07a 	srli	r3,r16,1
1000c054:	902097fa 	slli	r16,r18,31
1000c058:	20a4b03a 	or	r18,r4,r2
1000c05c:	003f0106 	br	1000bc64 <__alt_data_end+0xf800bc64>
1000c060:	e4bff51e 	bne	fp,r18,1000c038 <__alt_data_end+0xf800c038>
1000c064:	85bff22e 	bgeu	r16,r22,1000c030 <__alt_data_end+0xf800c030>
1000c068:	e0c7c83a 	sub	r3,fp,r3
1000c06c:	1023883a 	mov	r17,r2
1000c070:	003f4606 	br	1000bd8c <__alt_data_end+0xf800bd8c>
1000c074:	100f883a 	mov	r7,r2
1000c078:	003f2b06 	br	1000bd28 <__alt_data_end+0xf800bd28>
1000c07c:	180d883a 	mov	r6,r3
1000c080:	003f1306 	br	1000bcd0 <__alt_data_end+0xf800bcd0>
1000c084:	813fe436 	bltu	r16,r4,1000c018 <__alt_data_end+0xf800c018>
1000c088:	0007883a 	mov	r3,zero
1000c08c:	003f3f06 	br	1000bd8c <__alt_data_end+0xf800bd8c>
1000c090:	ba402c36 	bltu	r23,r9,1000c144 <__divdf3+0x810>
1000c094:	4dc05426 	beq	r9,r23,1000c1e8 <__divdf3+0x8b4>
1000c098:	1011883a 	mov	r8,r2
1000c09c:	003f8906 	br	1000bec4 <__alt_data_end+0xf800bec4>
1000c0a0:	023fffc4 	movi	r8,-1
1000c0a4:	003f8806 	br	1000bec8 <__alt_data_end+0xf800bec8>
1000c0a8:	1811883a 	mov	r8,r3
1000c0ac:	003f5406 	br	1000be00 <__alt_data_end+0xf800be00>
1000c0b0:	1025883a 	mov	r18,r2
1000c0b4:	003f6d06 	br	1000be6c <__alt_data_end+0xf800be6c>
1000c0b8:	b827883a 	mov	r19,r23
1000c0bc:	003f8206 	br	1000bec8 <__alt_data_end+0xf800bec8>
1000c0c0:	010007c4 	movi	r4,31
1000c0c4:	20c02616 	blt	r4,r3,1000c160 <__divdf3+0x82c>
1000c0c8:	00800804 	movi	r2,32
1000c0cc:	10c5c83a 	sub	r2,r2,r3
1000c0d0:	888a983a 	sll	r5,r17,r2
1000c0d4:	40c8d83a 	srl	r4,r8,r3
1000c0d8:	4084983a 	sll	r2,r8,r2
1000c0dc:	88e2d83a 	srl	r17,r17,r3
1000c0e0:	2906b03a 	or	r3,r5,r4
1000c0e4:	1004c03a 	cmpne	r2,r2,zero
1000c0e8:	1886b03a 	or	r3,r3,r2
1000c0ec:	188001cc 	andi	r2,r3,7
1000c0f0:	10000726 	beq	r2,zero,1000c110 <__divdf3+0x7dc>
1000c0f4:	188003cc 	andi	r2,r3,15
1000c0f8:	01000104 	movi	r4,4
1000c0fc:	11000426 	beq	r2,r4,1000c110 <__divdf3+0x7dc>
1000c100:	1805883a 	mov	r2,r3
1000c104:	10c00104 	addi	r3,r2,4
1000c108:	1885803a 	cmpltu	r2,r3,r2
1000c10c:	88a3883a 	add	r17,r17,r2
1000c110:	8880202c 	andhi	r2,r17,128
1000c114:	10002726 	beq	r2,zero,1000c1b4 <__divdf3+0x880>
1000c118:	98c0004c 	andi	r3,r19,1
1000c11c:	00800044 	movi	r2,1
1000c120:	000b883a 	mov	r5,zero
1000c124:	0025883a 	mov	r18,zero
1000c128:	003e6106 	br	1000bab0 <__alt_data_end+0xf800bab0>
1000c12c:	85a1883a 	add	r16,r16,r22
1000c130:	8585803a 	cmpltu	r2,r16,r22
1000c134:	1705883a 	add	r2,r2,fp
1000c138:	14a5883a 	add	r18,r2,r18
1000c13c:	8c7fff84 	addi	r17,r17,-2
1000c140:	003f1106 	br	1000bd88 <__alt_data_end+0xf800bd88>
1000c144:	b589883a 	add	r4,r22,r22
1000c148:	25ad803a 	cmpltu	r22,r4,r22
1000c14c:	b739883a 	add	fp,r22,fp
1000c150:	40bfff84 	addi	r2,r8,-2
1000c154:	bf2f883a 	add	r23,r23,fp
1000c158:	202d883a 	mov	r22,r4
1000c15c:	003f9306 	br	1000bfac <__alt_data_end+0xf800bfac>
1000c160:	013ff844 	movi	r4,-31
1000c164:	2085c83a 	sub	r2,r4,r2
1000c168:	8888d83a 	srl	r4,r17,r2
1000c16c:	00800804 	movi	r2,32
1000c170:	18802126 	beq	r3,r2,1000c1f8 <__divdf3+0x8c4>
1000c174:	00801004 	movi	r2,64
1000c178:	10c5c83a 	sub	r2,r2,r3
1000c17c:	8884983a 	sll	r2,r17,r2
1000c180:	1204b03a 	or	r2,r2,r8
1000c184:	1004c03a 	cmpne	r2,r2,zero
1000c188:	2084b03a 	or	r2,r4,r2
1000c18c:	144001cc 	andi	r17,r2,7
1000c190:	88000d1e 	bne	r17,zero,1000c1c8 <__divdf3+0x894>
1000c194:	000b883a 	mov	r5,zero
1000c198:	1024d0fa 	srli	r18,r2,3
1000c19c:	98c0004c 	andi	r3,r19,1
1000c1a0:	0005883a 	mov	r2,zero
1000c1a4:	9464b03a 	or	r18,r18,r17
1000c1a8:	003e4106 	br	1000bab0 <__alt_data_end+0xf800bab0>
1000c1ac:	1007883a 	mov	r3,r2
1000c1b0:	0023883a 	mov	r17,zero
1000c1b4:	880a927a 	slli	r5,r17,9
1000c1b8:	1805883a 	mov	r2,r3
1000c1bc:	8822977a 	slli	r17,r17,29
1000c1c0:	280ad33a 	srli	r5,r5,12
1000c1c4:	003ff406 	br	1000c198 <__alt_data_end+0xf800c198>
1000c1c8:	10c003cc 	andi	r3,r2,15
1000c1cc:	01000104 	movi	r4,4
1000c1d0:	193ff626 	beq	r3,r4,1000c1ac <__alt_data_end+0xf800c1ac>
1000c1d4:	0023883a 	mov	r17,zero
1000c1d8:	003fca06 	br	1000c104 <__alt_data_end+0xf800c104>
1000c1dc:	813fd336 	bltu	r16,r4,1000c12c <__alt_data_end+0xf800c12c>
1000c1e0:	1023883a 	mov	r17,r2
1000c1e4:	003fa806 	br	1000c088 <__alt_data_end+0xf800c088>
1000c1e8:	b0ffd636 	bltu	r22,r3,1000c144 <__alt_data_end+0xf800c144>
1000c1ec:	1011883a 	mov	r8,r2
1000c1f0:	b0ff341e 	bne	r22,r3,1000bec4 <__alt_data_end+0xf800bec4>
1000c1f4:	003f3406 	br	1000bec8 <__alt_data_end+0xf800bec8>
1000c1f8:	0005883a 	mov	r2,zero
1000c1fc:	003fe006 	br	1000c180 <__alt_data_end+0xf800c180>
1000c200:	00800434 	movhi	r2,16
1000c204:	89400234 	orhi	r5,r17,8
1000c208:	10bfffc4 	addi	r2,r2,-1
1000c20c:	b807883a 	mov	r3,r23
1000c210:	288a703a 	and	r5,r5,r2
1000c214:	4025883a 	mov	r18,r8
1000c218:	003e8206 	br	1000bc24 <__alt_data_end+0xf800bc24>

1000c21c <__eqdf2>:
1000c21c:	2804d53a 	srli	r2,r5,20
1000c220:	3806d53a 	srli	r3,r7,20
1000c224:	02000434 	movhi	r8,16
1000c228:	423fffc4 	addi	r8,r8,-1
1000c22c:	1081ffcc 	andi	r2,r2,2047
1000c230:	0281ffc4 	movi	r10,2047
1000c234:	2a12703a 	and	r9,r5,r8
1000c238:	18c1ffcc 	andi	r3,r3,2047
1000c23c:	3a10703a 	and	r8,r7,r8
1000c240:	280ad7fa 	srli	r5,r5,31
1000c244:	380ed7fa 	srli	r7,r7,31
1000c248:	12801026 	beq	r2,r10,1000c28c <__eqdf2+0x70>
1000c24c:	0281ffc4 	movi	r10,2047
1000c250:	1a800a26 	beq	r3,r10,1000c27c <__eqdf2+0x60>
1000c254:	10c00226 	beq	r2,r3,1000c260 <__eqdf2+0x44>
1000c258:	00800044 	movi	r2,1
1000c25c:	f800283a 	ret
1000c260:	4a3ffd1e 	bne	r9,r8,1000c258 <__alt_data_end+0xf800c258>
1000c264:	21bffc1e 	bne	r4,r6,1000c258 <__alt_data_end+0xf800c258>
1000c268:	29c00c26 	beq	r5,r7,1000c29c <__eqdf2+0x80>
1000c26c:	103ffa1e 	bne	r2,zero,1000c258 <__alt_data_end+0xf800c258>
1000c270:	2244b03a 	or	r2,r4,r9
1000c274:	1004c03a 	cmpne	r2,r2,zero
1000c278:	f800283a 	ret
1000c27c:	3214b03a 	or	r10,r6,r8
1000c280:	503ff426 	beq	r10,zero,1000c254 <__alt_data_end+0xf800c254>
1000c284:	00800044 	movi	r2,1
1000c288:	f800283a 	ret
1000c28c:	2254b03a 	or	r10,r4,r9
1000c290:	503fee26 	beq	r10,zero,1000c24c <__alt_data_end+0xf800c24c>
1000c294:	00800044 	movi	r2,1
1000c298:	f800283a 	ret
1000c29c:	0005883a 	mov	r2,zero
1000c2a0:	f800283a 	ret

1000c2a4 <__gedf2>:
1000c2a4:	2804d53a 	srli	r2,r5,20
1000c2a8:	3806d53a 	srli	r3,r7,20
1000c2ac:	02000434 	movhi	r8,16
1000c2b0:	423fffc4 	addi	r8,r8,-1
1000c2b4:	1081ffcc 	andi	r2,r2,2047
1000c2b8:	0241ffc4 	movi	r9,2047
1000c2bc:	2a14703a 	and	r10,r5,r8
1000c2c0:	18c1ffcc 	andi	r3,r3,2047
1000c2c4:	3a10703a 	and	r8,r7,r8
1000c2c8:	280ad7fa 	srli	r5,r5,31
1000c2cc:	380ed7fa 	srli	r7,r7,31
1000c2d0:	12401d26 	beq	r2,r9,1000c348 <__gedf2+0xa4>
1000c2d4:	0241ffc4 	movi	r9,2047
1000c2d8:	1a401226 	beq	r3,r9,1000c324 <__gedf2+0x80>
1000c2dc:	1000081e 	bne	r2,zero,1000c300 <__gedf2+0x5c>
1000c2e0:	2296b03a 	or	r11,r4,r10
1000c2e4:	5813003a 	cmpeq	r9,r11,zero
1000c2e8:	1800091e 	bne	r3,zero,1000c310 <__gedf2+0x6c>
1000c2ec:	3218b03a 	or	r12,r6,r8
1000c2f0:	6000071e 	bne	r12,zero,1000c310 <__gedf2+0x6c>
1000c2f4:	0005883a 	mov	r2,zero
1000c2f8:	5800101e 	bne	r11,zero,1000c33c <__gedf2+0x98>
1000c2fc:	f800283a 	ret
1000c300:	18000c1e 	bne	r3,zero,1000c334 <__gedf2+0x90>
1000c304:	3212b03a 	or	r9,r6,r8
1000c308:	48000c26 	beq	r9,zero,1000c33c <__gedf2+0x98>
1000c30c:	0013883a 	mov	r9,zero
1000c310:	39c03fcc 	andi	r7,r7,255
1000c314:	48000826 	beq	r9,zero,1000c338 <__gedf2+0x94>
1000c318:	38000926 	beq	r7,zero,1000c340 <__gedf2+0x9c>
1000c31c:	00800044 	movi	r2,1
1000c320:	f800283a 	ret
1000c324:	3212b03a 	or	r9,r6,r8
1000c328:	483fec26 	beq	r9,zero,1000c2dc <__alt_data_end+0xf800c2dc>
1000c32c:	00bfff84 	movi	r2,-2
1000c330:	f800283a 	ret
1000c334:	39c03fcc 	andi	r7,r7,255
1000c338:	29c00626 	beq	r5,r7,1000c354 <__gedf2+0xb0>
1000c33c:	283ff726 	beq	r5,zero,1000c31c <__alt_data_end+0xf800c31c>
1000c340:	00bfffc4 	movi	r2,-1
1000c344:	f800283a 	ret
1000c348:	2292b03a 	or	r9,r4,r10
1000c34c:	483fe126 	beq	r9,zero,1000c2d4 <__alt_data_end+0xf800c2d4>
1000c350:	003ff606 	br	1000c32c <__alt_data_end+0xf800c32c>
1000c354:	18bff916 	blt	r3,r2,1000c33c <__alt_data_end+0xf800c33c>
1000c358:	10c00316 	blt	r2,r3,1000c368 <__gedf2+0xc4>
1000c35c:	42bff736 	bltu	r8,r10,1000c33c <__alt_data_end+0xf800c33c>
1000c360:	52000326 	beq	r10,r8,1000c370 <__gedf2+0xcc>
1000c364:	5200042e 	bgeu	r10,r8,1000c378 <__gedf2+0xd4>
1000c368:	283fec1e 	bne	r5,zero,1000c31c <__alt_data_end+0xf800c31c>
1000c36c:	003ff406 	br	1000c340 <__alt_data_end+0xf800c340>
1000c370:	313ff236 	bltu	r6,r4,1000c33c <__alt_data_end+0xf800c33c>
1000c374:	21bffc36 	bltu	r4,r6,1000c368 <__alt_data_end+0xf800c368>
1000c378:	0005883a 	mov	r2,zero
1000c37c:	f800283a 	ret

1000c380 <__ledf2>:
1000c380:	2804d53a 	srli	r2,r5,20
1000c384:	3810d53a 	srli	r8,r7,20
1000c388:	00c00434 	movhi	r3,16
1000c38c:	18ffffc4 	addi	r3,r3,-1
1000c390:	1081ffcc 	andi	r2,r2,2047
1000c394:	0241ffc4 	movi	r9,2047
1000c398:	28d4703a 	and	r10,r5,r3
1000c39c:	4201ffcc 	andi	r8,r8,2047
1000c3a0:	38c6703a 	and	r3,r7,r3
1000c3a4:	280ad7fa 	srli	r5,r5,31
1000c3a8:	380ed7fa 	srli	r7,r7,31
1000c3ac:	12401f26 	beq	r2,r9,1000c42c <__ledf2+0xac>
1000c3b0:	0241ffc4 	movi	r9,2047
1000c3b4:	42401426 	beq	r8,r9,1000c408 <__ledf2+0x88>
1000c3b8:	1000091e 	bne	r2,zero,1000c3e0 <__ledf2+0x60>
1000c3bc:	2296b03a 	or	r11,r4,r10
1000c3c0:	5813003a 	cmpeq	r9,r11,zero
1000c3c4:	29403fcc 	andi	r5,r5,255
1000c3c8:	40000a1e 	bne	r8,zero,1000c3f4 <__ledf2+0x74>
1000c3cc:	30d8b03a 	or	r12,r6,r3
1000c3d0:	6000081e 	bne	r12,zero,1000c3f4 <__ledf2+0x74>
1000c3d4:	0005883a 	mov	r2,zero
1000c3d8:	5800111e 	bne	r11,zero,1000c420 <__ledf2+0xa0>
1000c3dc:	f800283a 	ret
1000c3e0:	29403fcc 	andi	r5,r5,255
1000c3e4:	40000c1e 	bne	r8,zero,1000c418 <__ledf2+0x98>
1000c3e8:	30d2b03a 	or	r9,r6,r3
1000c3ec:	48000c26 	beq	r9,zero,1000c420 <__ledf2+0xa0>
1000c3f0:	0013883a 	mov	r9,zero
1000c3f4:	39c03fcc 	andi	r7,r7,255
1000c3f8:	48000826 	beq	r9,zero,1000c41c <__ledf2+0x9c>
1000c3fc:	38001126 	beq	r7,zero,1000c444 <__ledf2+0xc4>
1000c400:	00800044 	movi	r2,1
1000c404:	f800283a 	ret
1000c408:	30d2b03a 	or	r9,r6,r3
1000c40c:	483fea26 	beq	r9,zero,1000c3b8 <__alt_data_end+0xf800c3b8>
1000c410:	00800084 	movi	r2,2
1000c414:	f800283a 	ret
1000c418:	39c03fcc 	andi	r7,r7,255
1000c41c:	39400726 	beq	r7,r5,1000c43c <__ledf2+0xbc>
1000c420:	2800081e 	bne	r5,zero,1000c444 <__ledf2+0xc4>
1000c424:	00800044 	movi	r2,1
1000c428:	f800283a 	ret
1000c42c:	2292b03a 	or	r9,r4,r10
1000c430:	483fdf26 	beq	r9,zero,1000c3b0 <__alt_data_end+0xf800c3b0>
1000c434:	00800084 	movi	r2,2
1000c438:	f800283a 	ret
1000c43c:	4080030e 	bge	r8,r2,1000c44c <__ledf2+0xcc>
1000c440:	383fef26 	beq	r7,zero,1000c400 <__alt_data_end+0xf800c400>
1000c444:	00bfffc4 	movi	r2,-1
1000c448:	f800283a 	ret
1000c44c:	123feb16 	blt	r2,r8,1000c3fc <__alt_data_end+0xf800c3fc>
1000c450:	1abff336 	bltu	r3,r10,1000c420 <__alt_data_end+0xf800c420>
1000c454:	50c00326 	beq	r10,r3,1000c464 <__ledf2+0xe4>
1000c458:	50c0042e 	bgeu	r10,r3,1000c46c <__ledf2+0xec>
1000c45c:	283fe81e 	bne	r5,zero,1000c400 <__alt_data_end+0xf800c400>
1000c460:	003ff806 	br	1000c444 <__alt_data_end+0xf800c444>
1000c464:	313fee36 	bltu	r6,r4,1000c420 <__alt_data_end+0xf800c420>
1000c468:	21bffc36 	bltu	r4,r6,1000c45c <__alt_data_end+0xf800c45c>
1000c46c:	0005883a 	mov	r2,zero
1000c470:	f800283a 	ret

1000c474 <__muldf3>:
1000c474:	defff304 	addi	sp,sp,-52
1000c478:	2804d53a 	srli	r2,r5,20
1000c47c:	dd800915 	stw	r22,36(sp)
1000c480:	282cd7fa 	srli	r22,r5,31
1000c484:	dc000315 	stw	r16,12(sp)
1000c488:	04000434 	movhi	r16,16
1000c48c:	dd400815 	stw	r21,32(sp)
1000c490:	dc800515 	stw	r18,20(sp)
1000c494:	843fffc4 	addi	r16,r16,-1
1000c498:	dfc00c15 	stw	ra,48(sp)
1000c49c:	df000b15 	stw	fp,44(sp)
1000c4a0:	ddc00a15 	stw	r23,40(sp)
1000c4a4:	dd000715 	stw	r20,28(sp)
1000c4a8:	dcc00615 	stw	r19,24(sp)
1000c4ac:	dc400415 	stw	r17,16(sp)
1000c4b0:	1481ffcc 	andi	r18,r2,2047
1000c4b4:	2c20703a 	and	r16,r5,r16
1000c4b8:	b02b883a 	mov	r21,r22
1000c4bc:	b2403fcc 	andi	r9,r22,255
1000c4c0:	90006026 	beq	r18,zero,1000c644 <__muldf3+0x1d0>
1000c4c4:	0081ffc4 	movi	r2,2047
1000c4c8:	2029883a 	mov	r20,r4
1000c4cc:	90803626 	beq	r18,r2,1000c5a8 <__muldf3+0x134>
1000c4d0:	80800434 	orhi	r2,r16,16
1000c4d4:	100490fa 	slli	r2,r2,3
1000c4d8:	2020d77a 	srli	r16,r4,29
1000c4dc:	202890fa 	slli	r20,r4,3
1000c4e0:	94bf0044 	addi	r18,r18,-1023
1000c4e4:	80a0b03a 	or	r16,r16,r2
1000c4e8:	0027883a 	mov	r19,zero
1000c4ec:	0039883a 	mov	fp,zero
1000c4f0:	3804d53a 	srli	r2,r7,20
1000c4f4:	382ed7fa 	srli	r23,r7,31
1000c4f8:	04400434 	movhi	r17,16
1000c4fc:	8c7fffc4 	addi	r17,r17,-1
1000c500:	1081ffcc 	andi	r2,r2,2047
1000c504:	3011883a 	mov	r8,r6
1000c508:	3c62703a 	and	r17,r7,r17
1000c50c:	ba803fcc 	andi	r10,r23,255
1000c510:	10006d26 	beq	r2,zero,1000c6c8 <__muldf3+0x254>
1000c514:	00c1ffc4 	movi	r3,2047
1000c518:	10c06526 	beq	r2,r3,1000c6b0 <__muldf3+0x23c>
1000c51c:	88c00434 	orhi	r3,r17,16
1000c520:	180690fa 	slli	r3,r3,3
1000c524:	3022d77a 	srli	r17,r6,29
1000c528:	301090fa 	slli	r8,r6,3
1000c52c:	10bf0044 	addi	r2,r2,-1023
1000c530:	88e2b03a 	or	r17,r17,r3
1000c534:	000b883a 	mov	r5,zero
1000c538:	9085883a 	add	r2,r18,r2
1000c53c:	2cc8b03a 	or	r4,r5,r19
1000c540:	00c003c4 	movi	r3,15
1000c544:	bdacf03a 	xor	r22,r23,r22
1000c548:	12c00044 	addi	r11,r2,1
1000c54c:	19009936 	bltu	r3,r4,1000c7b4 <__muldf3+0x340>
1000c550:	200890ba 	slli	r4,r4,2
1000c554:	00c40074 	movhi	r3,4097
1000c558:	18f15a04 	addi	r3,r3,-15000
1000c55c:	20c9883a 	add	r4,r4,r3
1000c560:	20c00017 	ldw	r3,0(r4)
1000c564:	1800683a 	jmp	r3
1000c568:	1000c7b4 	orhi	zero,r2,798
1000c56c:	1000c5c8 	cmpgei	zero,r2,791
1000c570:	1000c5c8 	cmpgei	zero,r2,791
1000c574:	1000c5c4 	addi	zero,r2,791
1000c578:	1000c790 	cmplti	zero,r2,798
1000c57c:	1000c790 	cmplti	zero,r2,798
1000c580:	1000c778 	rdprs	zero,r2,797
1000c584:	1000c5c4 	addi	zero,r2,791
1000c588:	1000c790 	cmplti	zero,r2,798
1000c58c:	1000c778 	rdprs	zero,r2,797
1000c590:	1000c790 	cmplti	zero,r2,798
1000c594:	1000c5c4 	addi	zero,r2,791
1000c598:	1000c7a0 	cmpeqi	zero,r2,798
1000c59c:	1000c7a0 	cmpeqi	zero,r2,798
1000c5a0:	1000c7a0 	cmpeqi	zero,r2,798
1000c5a4:	1000c9bc 	xorhi	zero,r2,806
1000c5a8:	2404b03a 	or	r2,r4,r16
1000c5ac:	10006f1e 	bne	r2,zero,1000c76c <__muldf3+0x2f8>
1000c5b0:	04c00204 	movi	r19,8
1000c5b4:	0021883a 	mov	r16,zero
1000c5b8:	0029883a 	mov	r20,zero
1000c5bc:	07000084 	movi	fp,2
1000c5c0:	003fcb06 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c5c4:	502d883a 	mov	r22,r10
1000c5c8:	00800084 	movi	r2,2
1000c5cc:	28805726 	beq	r5,r2,1000c72c <__muldf3+0x2b8>
1000c5d0:	008000c4 	movi	r2,3
1000c5d4:	28816626 	beq	r5,r2,1000cb70 <__muldf3+0x6fc>
1000c5d8:	00800044 	movi	r2,1
1000c5dc:	2881411e 	bne	r5,r2,1000cae4 <__muldf3+0x670>
1000c5e0:	b02b883a 	mov	r21,r22
1000c5e4:	0005883a 	mov	r2,zero
1000c5e8:	000b883a 	mov	r5,zero
1000c5ec:	0029883a 	mov	r20,zero
1000c5f0:	1004953a 	slli	r2,r2,20
1000c5f4:	a8c03fcc 	andi	r3,r21,255
1000c5f8:	04400434 	movhi	r17,16
1000c5fc:	8c7fffc4 	addi	r17,r17,-1
1000c600:	180697fa 	slli	r3,r3,31
1000c604:	2c4a703a 	and	r5,r5,r17
1000c608:	288ab03a 	or	r5,r5,r2
1000c60c:	28c6b03a 	or	r3,r5,r3
1000c610:	a005883a 	mov	r2,r20
1000c614:	dfc00c17 	ldw	ra,48(sp)
1000c618:	df000b17 	ldw	fp,44(sp)
1000c61c:	ddc00a17 	ldw	r23,40(sp)
1000c620:	dd800917 	ldw	r22,36(sp)
1000c624:	dd400817 	ldw	r21,32(sp)
1000c628:	dd000717 	ldw	r20,28(sp)
1000c62c:	dcc00617 	ldw	r19,24(sp)
1000c630:	dc800517 	ldw	r18,20(sp)
1000c634:	dc400417 	ldw	r17,16(sp)
1000c638:	dc000317 	ldw	r16,12(sp)
1000c63c:	dec00d04 	addi	sp,sp,52
1000c640:	f800283a 	ret
1000c644:	2404b03a 	or	r2,r4,r16
1000c648:	2027883a 	mov	r19,r4
1000c64c:	10004226 	beq	r2,zero,1000c758 <__muldf3+0x2e4>
1000c650:	8000fc26 	beq	r16,zero,1000ca44 <__muldf3+0x5d0>
1000c654:	8009883a 	mov	r4,r16
1000c658:	d9800215 	stw	r6,8(sp)
1000c65c:	d9c00015 	stw	r7,0(sp)
1000c660:	da400115 	stw	r9,4(sp)
1000c664:	000d68c0 	call	1000d68c <__clzsi2>
1000c668:	d9800217 	ldw	r6,8(sp)
1000c66c:	d9c00017 	ldw	r7,0(sp)
1000c670:	da400117 	ldw	r9,4(sp)
1000c674:	113ffd44 	addi	r4,r2,-11
1000c678:	00c00704 	movi	r3,28
1000c67c:	1900ed16 	blt	r3,r4,1000ca34 <__muldf3+0x5c0>
1000c680:	00c00744 	movi	r3,29
1000c684:	147ffe04 	addi	r17,r2,-8
1000c688:	1907c83a 	sub	r3,r3,r4
1000c68c:	8460983a 	sll	r16,r16,r17
1000c690:	98c6d83a 	srl	r3,r19,r3
1000c694:	9c68983a 	sll	r20,r19,r17
1000c698:	1c20b03a 	or	r16,r3,r16
1000c69c:	1080fcc4 	addi	r2,r2,1011
1000c6a0:	00a5c83a 	sub	r18,zero,r2
1000c6a4:	0027883a 	mov	r19,zero
1000c6a8:	0039883a 	mov	fp,zero
1000c6ac:	003f9006 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c6b0:	3446b03a 	or	r3,r6,r17
1000c6b4:	1800261e 	bne	r3,zero,1000c750 <__muldf3+0x2dc>
1000c6b8:	0023883a 	mov	r17,zero
1000c6bc:	0011883a 	mov	r8,zero
1000c6c0:	01400084 	movi	r5,2
1000c6c4:	003f9c06 	br	1000c538 <__alt_data_end+0xf800c538>
1000c6c8:	3446b03a 	or	r3,r6,r17
1000c6cc:	18001c26 	beq	r3,zero,1000c740 <__muldf3+0x2cc>
1000c6d0:	8800ce26 	beq	r17,zero,1000ca0c <__muldf3+0x598>
1000c6d4:	8809883a 	mov	r4,r17
1000c6d8:	d9800215 	stw	r6,8(sp)
1000c6dc:	da400115 	stw	r9,4(sp)
1000c6e0:	da800015 	stw	r10,0(sp)
1000c6e4:	000d68c0 	call	1000d68c <__clzsi2>
1000c6e8:	d9800217 	ldw	r6,8(sp)
1000c6ec:	da400117 	ldw	r9,4(sp)
1000c6f0:	da800017 	ldw	r10,0(sp)
1000c6f4:	113ffd44 	addi	r4,r2,-11
1000c6f8:	00c00704 	movi	r3,28
1000c6fc:	1900bf16 	blt	r3,r4,1000c9fc <__muldf3+0x588>
1000c700:	00c00744 	movi	r3,29
1000c704:	123ffe04 	addi	r8,r2,-8
1000c708:	1907c83a 	sub	r3,r3,r4
1000c70c:	8a22983a 	sll	r17,r17,r8
1000c710:	30c6d83a 	srl	r3,r6,r3
1000c714:	3210983a 	sll	r8,r6,r8
1000c718:	1c62b03a 	or	r17,r3,r17
1000c71c:	1080fcc4 	addi	r2,r2,1011
1000c720:	0085c83a 	sub	r2,zero,r2
1000c724:	000b883a 	mov	r5,zero
1000c728:	003f8306 	br	1000c538 <__alt_data_end+0xf800c538>
1000c72c:	b02b883a 	mov	r21,r22
1000c730:	0081ffc4 	movi	r2,2047
1000c734:	000b883a 	mov	r5,zero
1000c738:	0029883a 	mov	r20,zero
1000c73c:	003fac06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000c740:	0023883a 	mov	r17,zero
1000c744:	0011883a 	mov	r8,zero
1000c748:	01400044 	movi	r5,1
1000c74c:	003f7a06 	br	1000c538 <__alt_data_end+0xf800c538>
1000c750:	014000c4 	movi	r5,3
1000c754:	003f7806 	br	1000c538 <__alt_data_end+0xf800c538>
1000c758:	04c00104 	movi	r19,4
1000c75c:	0021883a 	mov	r16,zero
1000c760:	0029883a 	mov	r20,zero
1000c764:	07000044 	movi	fp,1
1000c768:	003f6106 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c76c:	04c00304 	movi	r19,12
1000c770:	070000c4 	movi	fp,3
1000c774:	003f5e06 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c778:	01400434 	movhi	r5,16
1000c77c:	002b883a 	mov	r21,zero
1000c780:	297fffc4 	addi	r5,r5,-1
1000c784:	053fffc4 	movi	r20,-1
1000c788:	0081ffc4 	movi	r2,2047
1000c78c:	003f9806 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000c790:	8023883a 	mov	r17,r16
1000c794:	a011883a 	mov	r8,r20
1000c798:	e00b883a 	mov	r5,fp
1000c79c:	003f8a06 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c7a0:	8023883a 	mov	r17,r16
1000c7a4:	a011883a 	mov	r8,r20
1000c7a8:	482d883a 	mov	r22,r9
1000c7ac:	e00b883a 	mov	r5,fp
1000c7b0:	003f8506 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c7b4:	a00ad43a 	srli	r5,r20,16
1000c7b8:	401ad43a 	srli	r13,r8,16
1000c7bc:	a53fffcc 	andi	r20,r20,65535
1000c7c0:	423fffcc 	andi	r8,r8,65535
1000c7c4:	4519383a 	mul	r12,r8,r20
1000c7c8:	4147383a 	mul	r3,r8,r5
1000c7cc:	6d09383a 	mul	r4,r13,r20
1000c7d0:	600cd43a 	srli	r6,r12,16
1000c7d4:	2b5d383a 	mul	r14,r5,r13
1000c7d8:	20c9883a 	add	r4,r4,r3
1000c7dc:	310d883a 	add	r6,r6,r4
1000c7e0:	30c0022e 	bgeu	r6,r3,1000c7ec <__muldf3+0x378>
1000c7e4:	00c00074 	movhi	r3,1
1000c7e8:	70dd883a 	add	r14,r14,r3
1000c7ec:	8826d43a 	srli	r19,r17,16
1000c7f0:	8bffffcc 	andi	r15,r17,65535
1000c7f4:	7d23383a 	mul	r17,r15,r20
1000c7f8:	7949383a 	mul	r4,r15,r5
1000c7fc:	9d29383a 	mul	r20,r19,r20
1000c800:	8814d43a 	srli	r10,r17,16
1000c804:	3012943a 	slli	r9,r6,16
1000c808:	a129883a 	add	r20,r20,r4
1000c80c:	633fffcc 	andi	r12,r12,65535
1000c810:	5515883a 	add	r10,r10,r20
1000c814:	3006d43a 	srli	r3,r6,16
1000c818:	4b13883a 	add	r9,r9,r12
1000c81c:	2ccb383a 	mul	r5,r5,r19
1000c820:	5100022e 	bgeu	r10,r4,1000c82c <__muldf3+0x3b8>
1000c824:	01000074 	movhi	r4,1
1000c828:	290b883a 	add	r5,r5,r4
1000c82c:	802ad43a 	srli	r21,r16,16
1000c830:	843fffcc 	andi	r16,r16,65535
1000c834:	440d383a 	mul	r6,r8,r16
1000c838:	4565383a 	mul	r18,r8,r21
1000c83c:	8349383a 	mul	r4,r16,r13
1000c840:	500e943a 	slli	r7,r10,16
1000c844:	3010d43a 	srli	r8,r6,16
1000c848:	5028d43a 	srli	r20,r10,16
1000c84c:	2489883a 	add	r4,r4,r18
1000c850:	8abfffcc 	andi	r10,r17,65535
1000c854:	3a95883a 	add	r10,r7,r10
1000c858:	4119883a 	add	r12,r8,r4
1000c85c:	a169883a 	add	r20,r20,r5
1000c860:	1a87883a 	add	r3,r3,r10
1000c864:	6d5b383a 	mul	r13,r13,r21
1000c868:	6480022e 	bgeu	r12,r18,1000c874 <__muldf3+0x400>
1000c86c:	01000074 	movhi	r4,1
1000c870:	691b883a 	add	r13,r13,r4
1000c874:	7c25383a 	mul	r18,r15,r16
1000c878:	7d4b383a 	mul	r5,r15,r21
1000c87c:	84cf383a 	mul	r7,r16,r19
1000c880:	901ed43a 	srli	r15,r18,16
1000c884:	6008d43a 	srli	r4,r12,16
1000c888:	6010943a 	slli	r8,r12,16
1000c88c:	394f883a 	add	r7,r7,r5
1000c890:	333fffcc 	andi	r12,r6,65535
1000c894:	79df883a 	add	r15,r15,r7
1000c898:	235b883a 	add	r13,r4,r13
1000c89c:	9d63383a 	mul	r17,r19,r21
1000c8a0:	4309883a 	add	r4,r8,r12
1000c8a4:	7940022e 	bgeu	r15,r5,1000c8b0 <__muldf3+0x43c>
1000c8a8:	01400074 	movhi	r5,1
1000c8ac:	8963883a 	add	r17,r17,r5
1000c8b0:	780a943a 	slli	r5,r15,16
1000c8b4:	91bfffcc 	andi	r6,r18,65535
1000c8b8:	70c7883a 	add	r3,r14,r3
1000c8bc:	298d883a 	add	r6,r5,r6
1000c8c0:	1a8f803a 	cmpltu	r7,r3,r10
1000c8c4:	350b883a 	add	r5,r6,r20
1000c8c8:	20c7883a 	add	r3,r4,r3
1000c8cc:	3955883a 	add	r10,r7,r5
1000c8d0:	1909803a 	cmpltu	r4,r3,r4
1000c8d4:	6a91883a 	add	r8,r13,r10
1000c8d8:	780cd43a 	srli	r6,r15,16
1000c8dc:	2219883a 	add	r12,r4,r8
1000c8e0:	2d0b803a 	cmpltu	r5,r5,r20
1000c8e4:	51cf803a 	cmpltu	r7,r10,r7
1000c8e8:	29ceb03a 	or	r7,r5,r7
1000c8ec:	4351803a 	cmpltu	r8,r8,r13
1000c8f0:	610b803a 	cmpltu	r5,r12,r4
1000c8f4:	4148b03a 	or	r4,r8,r5
1000c8f8:	398f883a 	add	r7,r7,r6
1000c8fc:	3909883a 	add	r4,r7,r4
1000c900:	1810927a 	slli	r8,r3,9
1000c904:	2449883a 	add	r4,r4,r17
1000c908:	2008927a 	slli	r4,r4,9
1000c90c:	6022d5fa 	srli	r17,r12,23
1000c910:	1806d5fa 	srli	r3,r3,23
1000c914:	4252b03a 	or	r9,r8,r9
1000c918:	600a927a 	slli	r5,r12,9
1000c91c:	4810c03a 	cmpne	r8,r9,zero
1000c920:	2462b03a 	or	r17,r4,r17
1000c924:	40c6b03a 	or	r3,r8,r3
1000c928:	8900402c 	andhi	r4,r17,256
1000c92c:	1950b03a 	or	r8,r3,r5
1000c930:	20000726 	beq	r4,zero,1000c950 <__muldf3+0x4dc>
1000c934:	4006d07a 	srli	r3,r8,1
1000c938:	880497fa 	slli	r2,r17,31
1000c93c:	4200004c 	andi	r8,r8,1
1000c940:	8822d07a 	srli	r17,r17,1
1000c944:	1a10b03a 	or	r8,r3,r8
1000c948:	1210b03a 	or	r8,r2,r8
1000c94c:	5805883a 	mov	r2,r11
1000c950:	1140ffc4 	addi	r5,r2,1023
1000c954:	0140440e 	bge	zero,r5,1000ca68 <__muldf3+0x5f4>
1000c958:	40c001cc 	andi	r3,r8,7
1000c95c:	18000726 	beq	r3,zero,1000c97c <__muldf3+0x508>
1000c960:	40c003cc 	andi	r3,r8,15
1000c964:	01000104 	movi	r4,4
1000c968:	19000426 	beq	r3,r4,1000c97c <__muldf3+0x508>
1000c96c:	4107883a 	add	r3,r8,r4
1000c970:	1a11803a 	cmpltu	r8,r3,r8
1000c974:	8a23883a 	add	r17,r17,r8
1000c978:	1811883a 	mov	r8,r3
1000c97c:	88c0402c 	andhi	r3,r17,256
1000c980:	18000426 	beq	r3,zero,1000c994 <__muldf3+0x520>
1000c984:	11410004 	addi	r5,r2,1024
1000c988:	00bfc034 	movhi	r2,65280
1000c98c:	10bfffc4 	addi	r2,r2,-1
1000c990:	88a2703a 	and	r17,r17,r2
1000c994:	0081ff84 	movi	r2,2046
1000c998:	117f6416 	blt	r2,r5,1000c72c <__alt_data_end+0xf800c72c>
1000c99c:	8828977a 	slli	r20,r17,29
1000c9a0:	4010d0fa 	srli	r8,r8,3
1000c9a4:	8822927a 	slli	r17,r17,9
1000c9a8:	2881ffcc 	andi	r2,r5,2047
1000c9ac:	a228b03a 	or	r20,r20,r8
1000c9b0:	880ad33a 	srli	r5,r17,12
1000c9b4:	b02b883a 	mov	r21,r22
1000c9b8:	003f0d06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000c9bc:	8080022c 	andhi	r2,r16,8
1000c9c0:	10000926 	beq	r2,zero,1000c9e8 <__muldf3+0x574>
1000c9c4:	8880022c 	andhi	r2,r17,8
1000c9c8:	1000071e 	bne	r2,zero,1000c9e8 <__muldf3+0x574>
1000c9cc:	00800434 	movhi	r2,16
1000c9d0:	89400234 	orhi	r5,r17,8
1000c9d4:	10bfffc4 	addi	r2,r2,-1
1000c9d8:	b82b883a 	mov	r21,r23
1000c9dc:	288a703a 	and	r5,r5,r2
1000c9e0:	4029883a 	mov	r20,r8
1000c9e4:	003f6806 	br	1000c788 <__alt_data_end+0xf800c788>
1000c9e8:	00800434 	movhi	r2,16
1000c9ec:	81400234 	orhi	r5,r16,8
1000c9f0:	10bfffc4 	addi	r2,r2,-1
1000c9f4:	288a703a 	and	r5,r5,r2
1000c9f8:	003f6306 	br	1000c788 <__alt_data_end+0xf800c788>
1000c9fc:	147ff604 	addi	r17,r2,-40
1000ca00:	3462983a 	sll	r17,r6,r17
1000ca04:	0011883a 	mov	r8,zero
1000ca08:	003f4406 	br	1000c71c <__alt_data_end+0xf800c71c>
1000ca0c:	3009883a 	mov	r4,r6
1000ca10:	d9800215 	stw	r6,8(sp)
1000ca14:	da400115 	stw	r9,4(sp)
1000ca18:	da800015 	stw	r10,0(sp)
1000ca1c:	000d68c0 	call	1000d68c <__clzsi2>
1000ca20:	10800804 	addi	r2,r2,32
1000ca24:	da800017 	ldw	r10,0(sp)
1000ca28:	da400117 	ldw	r9,4(sp)
1000ca2c:	d9800217 	ldw	r6,8(sp)
1000ca30:	003f3006 	br	1000c6f4 <__alt_data_end+0xf800c6f4>
1000ca34:	143ff604 	addi	r16,r2,-40
1000ca38:	9c20983a 	sll	r16,r19,r16
1000ca3c:	0029883a 	mov	r20,zero
1000ca40:	003f1606 	br	1000c69c <__alt_data_end+0xf800c69c>
1000ca44:	d9800215 	stw	r6,8(sp)
1000ca48:	d9c00015 	stw	r7,0(sp)
1000ca4c:	da400115 	stw	r9,4(sp)
1000ca50:	000d68c0 	call	1000d68c <__clzsi2>
1000ca54:	10800804 	addi	r2,r2,32
1000ca58:	da400117 	ldw	r9,4(sp)
1000ca5c:	d9c00017 	ldw	r7,0(sp)
1000ca60:	d9800217 	ldw	r6,8(sp)
1000ca64:	003f0306 	br	1000c674 <__alt_data_end+0xf800c674>
1000ca68:	00c00044 	movi	r3,1
1000ca6c:	1947c83a 	sub	r3,r3,r5
1000ca70:	00800e04 	movi	r2,56
1000ca74:	10feda16 	blt	r2,r3,1000c5e0 <__alt_data_end+0xf800c5e0>
1000ca78:	008007c4 	movi	r2,31
1000ca7c:	10c01b16 	blt	r2,r3,1000caec <__muldf3+0x678>
1000ca80:	00800804 	movi	r2,32
1000ca84:	10c5c83a 	sub	r2,r2,r3
1000ca88:	888a983a 	sll	r5,r17,r2
1000ca8c:	40c8d83a 	srl	r4,r8,r3
1000ca90:	4084983a 	sll	r2,r8,r2
1000ca94:	88e2d83a 	srl	r17,r17,r3
1000ca98:	2906b03a 	or	r3,r5,r4
1000ca9c:	1004c03a 	cmpne	r2,r2,zero
1000caa0:	1886b03a 	or	r3,r3,r2
1000caa4:	188001cc 	andi	r2,r3,7
1000caa8:	10000726 	beq	r2,zero,1000cac8 <__muldf3+0x654>
1000caac:	188003cc 	andi	r2,r3,15
1000cab0:	01000104 	movi	r4,4
1000cab4:	11000426 	beq	r2,r4,1000cac8 <__muldf3+0x654>
1000cab8:	1805883a 	mov	r2,r3
1000cabc:	10c00104 	addi	r3,r2,4
1000cac0:	1885803a 	cmpltu	r2,r3,r2
1000cac4:	88a3883a 	add	r17,r17,r2
1000cac8:	8880202c 	andhi	r2,r17,128
1000cacc:	10001c26 	beq	r2,zero,1000cb40 <__muldf3+0x6cc>
1000cad0:	b02b883a 	mov	r21,r22
1000cad4:	00800044 	movi	r2,1
1000cad8:	000b883a 	mov	r5,zero
1000cadc:	0029883a 	mov	r20,zero
1000cae0:	003ec306 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000cae4:	5805883a 	mov	r2,r11
1000cae8:	003f9906 	br	1000c950 <__alt_data_end+0xf800c950>
1000caec:	00bff844 	movi	r2,-31
1000caf0:	1145c83a 	sub	r2,r2,r5
1000caf4:	8888d83a 	srl	r4,r17,r2
1000caf8:	00800804 	movi	r2,32
1000cafc:	18801a26 	beq	r3,r2,1000cb68 <__muldf3+0x6f4>
1000cb00:	00801004 	movi	r2,64
1000cb04:	10c5c83a 	sub	r2,r2,r3
1000cb08:	8884983a 	sll	r2,r17,r2
1000cb0c:	1204b03a 	or	r2,r2,r8
1000cb10:	1004c03a 	cmpne	r2,r2,zero
1000cb14:	2084b03a 	or	r2,r4,r2
1000cb18:	144001cc 	andi	r17,r2,7
1000cb1c:	88000d1e 	bne	r17,zero,1000cb54 <__muldf3+0x6e0>
1000cb20:	000b883a 	mov	r5,zero
1000cb24:	1028d0fa 	srli	r20,r2,3
1000cb28:	b02b883a 	mov	r21,r22
1000cb2c:	0005883a 	mov	r2,zero
1000cb30:	a468b03a 	or	r20,r20,r17
1000cb34:	003eae06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000cb38:	1007883a 	mov	r3,r2
1000cb3c:	0023883a 	mov	r17,zero
1000cb40:	880a927a 	slli	r5,r17,9
1000cb44:	1805883a 	mov	r2,r3
1000cb48:	8822977a 	slli	r17,r17,29
1000cb4c:	280ad33a 	srli	r5,r5,12
1000cb50:	003ff406 	br	1000cb24 <__alt_data_end+0xf800cb24>
1000cb54:	10c003cc 	andi	r3,r2,15
1000cb58:	01000104 	movi	r4,4
1000cb5c:	193ff626 	beq	r3,r4,1000cb38 <__alt_data_end+0xf800cb38>
1000cb60:	0023883a 	mov	r17,zero
1000cb64:	003fd506 	br	1000cabc <__alt_data_end+0xf800cabc>
1000cb68:	0005883a 	mov	r2,zero
1000cb6c:	003fe706 	br	1000cb0c <__alt_data_end+0xf800cb0c>
1000cb70:	00800434 	movhi	r2,16
1000cb74:	89400234 	orhi	r5,r17,8
1000cb78:	10bfffc4 	addi	r2,r2,-1
1000cb7c:	b02b883a 	mov	r21,r22
1000cb80:	288a703a 	and	r5,r5,r2
1000cb84:	4029883a 	mov	r20,r8
1000cb88:	003eff06 	br	1000c788 <__alt_data_end+0xf800c788>

1000cb8c <__subdf3>:
1000cb8c:	02000434 	movhi	r8,16
1000cb90:	423fffc4 	addi	r8,r8,-1
1000cb94:	defffb04 	addi	sp,sp,-20
1000cb98:	2a14703a 	and	r10,r5,r8
1000cb9c:	3812d53a 	srli	r9,r7,20
1000cba0:	3a10703a 	and	r8,r7,r8
1000cba4:	2006d77a 	srli	r3,r4,29
1000cba8:	3004d77a 	srli	r2,r6,29
1000cbac:	dc000015 	stw	r16,0(sp)
1000cbb0:	501490fa 	slli	r10,r10,3
1000cbb4:	2820d53a 	srli	r16,r5,20
1000cbb8:	401090fa 	slli	r8,r8,3
1000cbbc:	dc800215 	stw	r18,8(sp)
1000cbc0:	dc400115 	stw	r17,4(sp)
1000cbc4:	dfc00415 	stw	ra,16(sp)
1000cbc8:	202290fa 	slli	r17,r4,3
1000cbcc:	dcc00315 	stw	r19,12(sp)
1000cbd0:	4a41ffcc 	andi	r9,r9,2047
1000cbd4:	0101ffc4 	movi	r4,2047
1000cbd8:	2824d7fa 	srli	r18,r5,31
1000cbdc:	8401ffcc 	andi	r16,r16,2047
1000cbe0:	50c6b03a 	or	r3,r10,r3
1000cbe4:	380ed7fa 	srli	r7,r7,31
1000cbe8:	408ab03a 	or	r5,r8,r2
1000cbec:	300c90fa 	slli	r6,r6,3
1000cbf0:	49009626 	beq	r9,r4,1000ce4c <__subdf3+0x2c0>
1000cbf4:	39c0005c 	xori	r7,r7,1
1000cbf8:	8245c83a 	sub	r2,r16,r9
1000cbfc:	3c807426 	beq	r7,r18,1000cdd0 <__subdf3+0x244>
1000cc00:	0080af0e 	bge	zero,r2,1000cec0 <__subdf3+0x334>
1000cc04:	48002a1e 	bne	r9,zero,1000ccb0 <__subdf3+0x124>
1000cc08:	2988b03a 	or	r4,r5,r6
1000cc0c:	20009a1e 	bne	r4,zero,1000ce78 <__subdf3+0x2ec>
1000cc10:	888001cc 	andi	r2,r17,7
1000cc14:	10000726 	beq	r2,zero,1000cc34 <__subdf3+0xa8>
1000cc18:	888003cc 	andi	r2,r17,15
1000cc1c:	01000104 	movi	r4,4
1000cc20:	11000426 	beq	r2,r4,1000cc34 <__subdf3+0xa8>
1000cc24:	890b883a 	add	r5,r17,r4
1000cc28:	2c63803a 	cmpltu	r17,r5,r17
1000cc2c:	1c47883a 	add	r3,r3,r17
1000cc30:	2823883a 	mov	r17,r5
1000cc34:	1880202c 	andhi	r2,r3,128
1000cc38:	10005926 	beq	r2,zero,1000cda0 <__subdf3+0x214>
1000cc3c:	84000044 	addi	r16,r16,1
1000cc40:	0081ffc4 	movi	r2,2047
1000cc44:	8080be26 	beq	r16,r2,1000cf40 <__subdf3+0x3b4>
1000cc48:	017fe034 	movhi	r5,65408
1000cc4c:	297fffc4 	addi	r5,r5,-1
1000cc50:	1946703a 	and	r3,r3,r5
1000cc54:	1804977a 	slli	r2,r3,29
1000cc58:	1806927a 	slli	r3,r3,9
1000cc5c:	8822d0fa 	srli	r17,r17,3
1000cc60:	8401ffcc 	andi	r16,r16,2047
1000cc64:	180ad33a 	srli	r5,r3,12
1000cc68:	9100004c 	andi	r4,r18,1
1000cc6c:	1444b03a 	or	r2,r2,r17
1000cc70:	80c1ffcc 	andi	r3,r16,2047
1000cc74:	1820953a 	slli	r16,r3,20
1000cc78:	20c03fcc 	andi	r3,r4,255
1000cc7c:	180897fa 	slli	r4,r3,31
1000cc80:	00c00434 	movhi	r3,16
1000cc84:	18ffffc4 	addi	r3,r3,-1
1000cc88:	28c6703a 	and	r3,r5,r3
1000cc8c:	1c06b03a 	or	r3,r3,r16
1000cc90:	1906b03a 	or	r3,r3,r4
1000cc94:	dfc00417 	ldw	ra,16(sp)
1000cc98:	dcc00317 	ldw	r19,12(sp)
1000cc9c:	dc800217 	ldw	r18,8(sp)
1000cca0:	dc400117 	ldw	r17,4(sp)
1000cca4:	dc000017 	ldw	r16,0(sp)
1000cca8:	dec00504 	addi	sp,sp,20
1000ccac:	f800283a 	ret
1000ccb0:	0101ffc4 	movi	r4,2047
1000ccb4:	813fd626 	beq	r16,r4,1000cc10 <__alt_data_end+0xf800cc10>
1000ccb8:	29402034 	orhi	r5,r5,128
1000ccbc:	01000e04 	movi	r4,56
1000ccc0:	2080a316 	blt	r4,r2,1000cf50 <__subdf3+0x3c4>
1000ccc4:	010007c4 	movi	r4,31
1000ccc8:	2080c616 	blt	r4,r2,1000cfe4 <__subdf3+0x458>
1000cccc:	01000804 	movi	r4,32
1000ccd0:	2089c83a 	sub	r4,r4,r2
1000ccd4:	2910983a 	sll	r8,r5,r4
1000ccd8:	308ed83a 	srl	r7,r6,r2
1000ccdc:	3108983a 	sll	r4,r6,r4
1000cce0:	2884d83a 	srl	r2,r5,r2
1000cce4:	41ccb03a 	or	r6,r8,r7
1000cce8:	2008c03a 	cmpne	r4,r4,zero
1000ccec:	310cb03a 	or	r6,r6,r4
1000ccf0:	898dc83a 	sub	r6,r17,r6
1000ccf4:	89a3803a 	cmpltu	r17,r17,r6
1000ccf8:	1887c83a 	sub	r3,r3,r2
1000ccfc:	1c47c83a 	sub	r3,r3,r17
1000cd00:	3023883a 	mov	r17,r6
1000cd04:	1880202c 	andhi	r2,r3,128
1000cd08:	10002326 	beq	r2,zero,1000cd98 <__subdf3+0x20c>
1000cd0c:	04c02034 	movhi	r19,128
1000cd10:	9cffffc4 	addi	r19,r19,-1
1000cd14:	1ce6703a 	and	r19,r3,r19
1000cd18:	98007a26 	beq	r19,zero,1000cf04 <__subdf3+0x378>
1000cd1c:	9809883a 	mov	r4,r19
1000cd20:	000d68c0 	call	1000d68c <__clzsi2>
1000cd24:	113ffe04 	addi	r4,r2,-8
1000cd28:	00c007c4 	movi	r3,31
1000cd2c:	19007b16 	blt	r3,r4,1000cf1c <__subdf3+0x390>
1000cd30:	00800804 	movi	r2,32
1000cd34:	1105c83a 	sub	r2,r2,r4
1000cd38:	8884d83a 	srl	r2,r17,r2
1000cd3c:	9906983a 	sll	r3,r19,r4
1000cd40:	8922983a 	sll	r17,r17,r4
1000cd44:	10c4b03a 	or	r2,r2,r3
1000cd48:	24007816 	blt	r4,r16,1000cf2c <__subdf3+0x3a0>
1000cd4c:	2421c83a 	sub	r16,r4,r16
1000cd50:	80c00044 	addi	r3,r16,1
1000cd54:	010007c4 	movi	r4,31
1000cd58:	20c09516 	blt	r4,r3,1000cfb0 <__subdf3+0x424>
1000cd5c:	01400804 	movi	r5,32
1000cd60:	28cbc83a 	sub	r5,r5,r3
1000cd64:	88c8d83a 	srl	r4,r17,r3
1000cd68:	8962983a 	sll	r17,r17,r5
1000cd6c:	114a983a 	sll	r5,r2,r5
1000cd70:	10c6d83a 	srl	r3,r2,r3
1000cd74:	8804c03a 	cmpne	r2,r17,zero
1000cd78:	290ab03a 	or	r5,r5,r4
1000cd7c:	28a2b03a 	or	r17,r5,r2
1000cd80:	0021883a 	mov	r16,zero
1000cd84:	003fa206 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000cd88:	2090b03a 	or	r8,r4,r2
1000cd8c:	40018e26 	beq	r8,zero,1000d3c8 <__subdf3+0x83c>
1000cd90:	1007883a 	mov	r3,r2
1000cd94:	2023883a 	mov	r17,r4
1000cd98:	888001cc 	andi	r2,r17,7
1000cd9c:	103f9e1e 	bne	r2,zero,1000cc18 <__alt_data_end+0xf800cc18>
1000cda0:	1804977a 	slli	r2,r3,29
1000cda4:	8822d0fa 	srli	r17,r17,3
1000cda8:	1810d0fa 	srli	r8,r3,3
1000cdac:	9100004c 	andi	r4,r18,1
1000cdb0:	1444b03a 	or	r2,r2,r17
1000cdb4:	00c1ffc4 	movi	r3,2047
1000cdb8:	80c02826 	beq	r16,r3,1000ce5c <__subdf3+0x2d0>
1000cdbc:	01400434 	movhi	r5,16
1000cdc0:	297fffc4 	addi	r5,r5,-1
1000cdc4:	80e0703a 	and	r16,r16,r3
1000cdc8:	414a703a 	and	r5,r8,r5
1000cdcc:	003fa806 	br	1000cc70 <__alt_data_end+0xf800cc70>
1000cdd0:	0080630e 	bge	zero,r2,1000cf60 <__subdf3+0x3d4>
1000cdd4:	48003026 	beq	r9,zero,1000ce98 <__subdf3+0x30c>
1000cdd8:	0101ffc4 	movi	r4,2047
1000cddc:	813f8c26 	beq	r16,r4,1000cc10 <__alt_data_end+0xf800cc10>
1000cde0:	29402034 	orhi	r5,r5,128
1000cde4:	01000e04 	movi	r4,56
1000cde8:	2080a90e 	bge	r4,r2,1000d090 <__subdf3+0x504>
1000cdec:	298cb03a 	or	r6,r5,r6
1000cdf0:	3012c03a 	cmpne	r9,r6,zero
1000cdf4:	0005883a 	mov	r2,zero
1000cdf8:	4c53883a 	add	r9,r9,r17
1000cdfc:	4c63803a 	cmpltu	r17,r9,r17
1000ce00:	10c7883a 	add	r3,r2,r3
1000ce04:	88c7883a 	add	r3,r17,r3
1000ce08:	4823883a 	mov	r17,r9
1000ce0c:	1880202c 	andhi	r2,r3,128
1000ce10:	1000d026 	beq	r2,zero,1000d154 <__subdf3+0x5c8>
1000ce14:	84000044 	addi	r16,r16,1
1000ce18:	0081ffc4 	movi	r2,2047
1000ce1c:	8080fe26 	beq	r16,r2,1000d218 <__subdf3+0x68c>
1000ce20:	00bfe034 	movhi	r2,65408
1000ce24:	10bfffc4 	addi	r2,r2,-1
1000ce28:	1886703a 	and	r3,r3,r2
1000ce2c:	880ad07a 	srli	r5,r17,1
1000ce30:	180497fa 	slli	r2,r3,31
1000ce34:	8900004c 	andi	r4,r17,1
1000ce38:	2922b03a 	or	r17,r5,r4
1000ce3c:	1806d07a 	srli	r3,r3,1
1000ce40:	1462b03a 	or	r17,r2,r17
1000ce44:	3825883a 	mov	r18,r7
1000ce48:	003f7106 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000ce4c:	2984b03a 	or	r2,r5,r6
1000ce50:	103f6826 	beq	r2,zero,1000cbf4 <__alt_data_end+0xf800cbf4>
1000ce54:	39c03fcc 	andi	r7,r7,255
1000ce58:	003f6706 	br	1000cbf8 <__alt_data_end+0xf800cbf8>
1000ce5c:	4086b03a 	or	r3,r8,r2
1000ce60:	18015226 	beq	r3,zero,1000d3ac <__subdf3+0x820>
1000ce64:	00c00434 	movhi	r3,16
1000ce68:	41400234 	orhi	r5,r8,8
1000ce6c:	18ffffc4 	addi	r3,r3,-1
1000ce70:	28ca703a 	and	r5,r5,r3
1000ce74:	003f7e06 	br	1000cc70 <__alt_data_end+0xf800cc70>
1000ce78:	10bfffc4 	addi	r2,r2,-1
1000ce7c:	1000491e 	bne	r2,zero,1000cfa4 <__subdf3+0x418>
1000ce80:	898fc83a 	sub	r7,r17,r6
1000ce84:	89e3803a 	cmpltu	r17,r17,r7
1000ce88:	1947c83a 	sub	r3,r3,r5
1000ce8c:	1c47c83a 	sub	r3,r3,r17
1000ce90:	3823883a 	mov	r17,r7
1000ce94:	003f9b06 	br	1000cd04 <__alt_data_end+0xf800cd04>
1000ce98:	2988b03a 	or	r4,r5,r6
1000ce9c:	203f5c26 	beq	r4,zero,1000cc10 <__alt_data_end+0xf800cc10>
1000cea0:	10bfffc4 	addi	r2,r2,-1
1000cea4:	1000931e 	bne	r2,zero,1000d0f4 <__subdf3+0x568>
1000cea8:	898d883a 	add	r6,r17,r6
1000ceac:	3463803a 	cmpltu	r17,r6,r17
1000ceb0:	1947883a 	add	r3,r3,r5
1000ceb4:	88c7883a 	add	r3,r17,r3
1000ceb8:	3023883a 	mov	r17,r6
1000cebc:	003fd306 	br	1000ce0c <__alt_data_end+0xf800ce0c>
1000cec0:	1000541e 	bne	r2,zero,1000d014 <__subdf3+0x488>
1000cec4:	80800044 	addi	r2,r16,1
1000cec8:	1081ffcc 	andi	r2,r2,2047
1000cecc:	01000044 	movi	r4,1
1000ced0:	2080a20e 	bge	r4,r2,1000d15c <__subdf3+0x5d0>
1000ced4:	8989c83a 	sub	r4,r17,r6
1000ced8:	8905803a 	cmpltu	r2,r17,r4
1000cedc:	1967c83a 	sub	r19,r3,r5
1000cee0:	98a7c83a 	sub	r19,r19,r2
1000cee4:	9880202c 	andhi	r2,r19,128
1000cee8:	10006326 	beq	r2,zero,1000d078 <__subdf3+0x4ec>
1000ceec:	3463c83a 	sub	r17,r6,r17
1000cef0:	28c7c83a 	sub	r3,r5,r3
1000cef4:	344d803a 	cmpltu	r6,r6,r17
1000cef8:	19a7c83a 	sub	r19,r3,r6
1000cefc:	3825883a 	mov	r18,r7
1000cf00:	983f861e 	bne	r19,zero,1000cd1c <__alt_data_end+0xf800cd1c>
1000cf04:	8809883a 	mov	r4,r17
1000cf08:	000d68c0 	call	1000d68c <__clzsi2>
1000cf0c:	10800804 	addi	r2,r2,32
1000cf10:	113ffe04 	addi	r4,r2,-8
1000cf14:	00c007c4 	movi	r3,31
1000cf18:	193f850e 	bge	r3,r4,1000cd30 <__alt_data_end+0xf800cd30>
1000cf1c:	10bff604 	addi	r2,r2,-40
1000cf20:	8884983a 	sll	r2,r17,r2
1000cf24:	0023883a 	mov	r17,zero
1000cf28:	243f880e 	bge	r4,r16,1000cd4c <__alt_data_end+0xf800cd4c>
1000cf2c:	00ffe034 	movhi	r3,65408
1000cf30:	18ffffc4 	addi	r3,r3,-1
1000cf34:	8121c83a 	sub	r16,r16,r4
1000cf38:	10c6703a 	and	r3,r2,r3
1000cf3c:	003f3406 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000cf40:	9100004c 	andi	r4,r18,1
1000cf44:	000b883a 	mov	r5,zero
1000cf48:	0005883a 	mov	r2,zero
1000cf4c:	003f4806 	br	1000cc70 <__alt_data_end+0xf800cc70>
1000cf50:	298cb03a 	or	r6,r5,r6
1000cf54:	300cc03a 	cmpne	r6,r6,zero
1000cf58:	0005883a 	mov	r2,zero
1000cf5c:	003f6406 	br	1000ccf0 <__alt_data_end+0xf800ccf0>
1000cf60:	10009a1e 	bne	r2,zero,1000d1cc <__subdf3+0x640>
1000cf64:	82400044 	addi	r9,r16,1
1000cf68:	4881ffcc 	andi	r2,r9,2047
1000cf6c:	02800044 	movi	r10,1
1000cf70:	5080670e 	bge	r10,r2,1000d110 <__subdf3+0x584>
1000cf74:	0081ffc4 	movi	r2,2047
1000cf78:	4880af26 	beq	r9,r2,1000d238 <__subdf3+0x6ac>
1000cf7c:	898d883a 	add	r6,r17,r6
1000cf80:	1945883a 	add	r2,r3,r5
1000cf84:	3447803a 	cmpltu	r3,r6,r17
1000cf88:	1887883a 	add	r3,r3,r2
1000cf8c:	182297fa 	slli	r17,r3,31
1000cf90:	300cd07a 	srli	r6,r6,1
1000cf94:	1806d07a 	srli	r3,r3,1
1000cf98:	4821883a 	mov	r16,r9
1000cf9c:	89a2b03a 	or	r17,r17,r6
1000cfa0:	003f1b06 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000cfa4:	0101ffc4 	movi	r4,2047
1000cfa8:	813f441e 	bne	r16,r4,1000ccbc <__alt_data_end+0xf800ccbc>
1000cfac:	003f1806 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000cfb0:	843ff844 	addi	r16,r16,-31
1000cfb4:	01400804 	movi	r5,32
1000cfb8:	1408d83a 	srl	r4,r2,r16
1000cfbc:	19405026 	beq	r3,r5,1000d100 <__subdf3+0x574>
1000cfc0:	01401004 	movi	r5,64
1000cfc4:	28c7c83a 	sub	r3,r5,r3
1000cfc8:	10c4983a 	sll	r2,r2,r3
1000cfcc:	88a2b03a 	or	r17,r17,r2
1000cfd0:	8822c03a 	cmpne	r17,r17,zero
1000cfd4:	2462b03a 	or	r17,r4,r17
1000cfd8:	0007883a 	mov	r3,zero
1000cfdc:	0021883a 	mov	r16,zero
1000cfe0:	003f6d06 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000cfe4:	11fff804 	addi	r7,r2,-32
1000cfe8:	01000804 	movi	r4,32
1000cfec:	29ced83a 	srl	r7,r5,r7
1000cff0:	11004526 	beq	r2,r4,1000d108 <__subdf3+0x57c>
1000cff4:	01001004 	movi	r4,64
1000cff8:	2089c83a 	sub	r4,r4,r2
1000cffc:	2904983a 	sll	r2,r5,r4
1000d000:	118cb03a 	or	r6,r2,r6
1000d004:	300cc03a 	cmpne	r6,r6,zero
1000d008:	398cb03a 	or	r6,r7,r6
1000d00c:	0005883a 	mov	r2,zero
1000d010:	003f3706 	br	1000ccf0 <__alt_data_end+0xf800ccf0>
1000d014:	80002a26 	beq	r16,zero,1000d0c0 <__subdf3+0x534>
1000d018:	0101ffc4 	movi	r4,2047
1000d01c:	49006626 	beq	r9,r4,1000d1b8 <__subdf3+0x62c>
1000d020:	0085c83a 	sub	r2,zero,r2
1000d024:	18c02034 	orhi	r3,r3,128
1000d028:	01000e04 	movi	r4,56
1000d02c:	20807e16 	blt	r4,r2,1000d228 <__subdf3+0x69c>
1000d030:	010007c4 	movi	r4,31
1000d034:	2080e716 	blt	r4,r2,1000d3d4 <__subdf3+0x848>
1000d038:	01000804 	movi	r4,32
1000d03c:	2089c83a 	sub	r4,r4,r2
1000d040:	1914983a 	sll	r10,r3,r4
1000d044:	8890d83a 	srl	r8,r17,r2
1000d048:	8908983a 	sll	r4,r17,r4
1000d04c:	1884d83a 	srl	r2,r3,r2
1000d050:	5222b03a 	or	r17,r10,r8
1000d054:	2006c03a 	cmpne	r3,r4,zero
1000d058:	88e2b03a 	or	r17,r17,r3
1000d05c:	3463c83a 	sub	r17,r6,r17
1000d060:	2885c83a 	sub	r2,r5,r2
1000d064:	344d803a 	cmpltu	r6,r6,r17
1000d068:	1187c83a 	sub	r3,r2,r6
1000d06c:	4821883a 	mov	r16,r9
1000d070:	3825883a 	mov	r18,r7
1000d074:	003f2306 	br	1000cd04 <__alt_data_end+0xf800cd04>
1000d078:	24d0b03a 	or	r8,r4,r19
1000d07c:	40001b1e 	bne	r8,zero,1000d0ec <__subdf3+0x560>
1000d080:	0005883a 	mov	r2,zero
1000d084:	0009883a 	mov	r4,zero
1000d088:	0021883a 	mov	r16,zero
1000d08c:	003f4906 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d090:	010007c4 	movi	r4,31
1000d094:	20803a16 	blt	r4,r2,1000d180 <__subdf3+0x5f4>
1000d098:	01000804 	movi	r4,32
1000d09c:	2089c83a 	sub	r4,r4,r2
1000d0a0:	2912983a 	sll	r9,r5,r4
1000d0a4:	3090d83a 	srl	r8,r6,r2
1000d0a8:	3108983a 	sll	r4,r6,r4
1000d0ac:	2884d83a 	srl	r2,r5,r2
1000d0b0:	4a12b03a 	or	r9,r9,r8
1000d0b4:	2008c03a 	cmpne	r4,r4,zero
1000d0b8:	4912b03a 	or	r9,r9,r4
1000d0bc:	003f4e06 	br	1000cdf8 <__alt_data_end+0xf800cdf8>
1000d0c0:	1c48b03a 	or	r4,r3,r17
1000d0c4:	20003c26 	beq	r4,zero,1000d1b8 <__subdf3+0x62c>
1000d0c8:	0084303a 	nor	r2,zero,r2
1000d0cc:	1000381e 	bne	r2,zero,1000d1b0 <__subdf3+0x624>
1000d0d0:	3463c83a 	sub	r17,r6,r17
1000d0d4:	28c5c83a 	sub	r2,r5,r3
1000d0d8:	344d803a 	cmpltu	r6,r6,r17
1000d0dc:	1187c83a 	sub	r3,r2,r6
1000d0e0:	4821883a 	mov	r16,r9
1000d0e4:	3825883a 	mov	r18,r7
1000d0e8:	003f0606 	br	1000cd04 <__alt_data_end+0xf800cd04>
1000d0ec:	2023883a 	mov	r17,r4
1000d0f0:	003f0906 	br	1000cd18 <__alt_data_end+0xf800cd18>
1000d0f4:	0101ffc4 	movi	r4,2047
1000d0f8:	813f3a1e 	bne	r16,r4,1000cde4 <__alt_data_end+0xf800cde4>
1000d0fc:	003ec406 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d100:	0005883a 	mov	r2,zero
1000d104:	003fb106 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d108:	0005883a 	mov	r2,zero
1000d10c:	003fbc06 	br	1000d000 <__alt_data_end+0xf800d000>
1000d110:	1c44b03a 	or	r2,r3,r17
1000d114:	80008e1e 	bne	r16,zero,1000d350 <__subdf3+0x7c4>
1000d118:	1000c826 	beq	r2,zero,1000d43c <__subdf3+0x8b0>
1000d11c:	2984b03a 	or	r2,r5,r6
1000d120:	103ebb26 	beq	r2,zero,1000cc10 <__alt_data_end+0xf800cc10>
1000d124:	8989883a 	add	r4,r17,r6
1000d128:	1945883a 	add	r2,r3,r5
1000d12c:	2447803a 	cmpltu	r3,r4,r17
1000d130:	1887883a 	add	r3,r3,r2
1000d134:	1880202c 	andhi	r2,r3,128
1000d138:	2023883a 	mov	r17,r4
1000d13c:	103f1626 	beq	r2,zero,1000cd98 <__alt_data_end+0xf800cd98>
1000d140:	00bfe034 	movhi	r2,65408
1000d144:	10bfffc4 	addi	r2,r2,-1
1000d148:	5021883a 	mov	r16,r10
1000d14c:	1886703a 	and	r3,r3,r2
1000d150:	003eaf06 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d154:	3825883a 	mov	r18,r7
1000d158:	003f0f06 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000d15c:	1c44b03a 	or	r2,r3,r17
1000d160:	8000251e 	bne	r16,zero,1000d1f8 <__subdf3+0x66c>
1000d164:	1000661e 	bne	r2,zero,1000d300 <__subdf3+0x774>
1000d168:	2990b03a 	or	r8,r5,r6
1000d16c:	40009626 	beq	r8,zero,1000d3c8 <__subdf3+0x83c>
1000d170:	2807883a 	mov	r3,r5
1000d174:	3023883a 	mov	r17,r6
1000d178:	3825883a 	mov	r18,r7
1000d17c:	003ea406 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d180:	127ff804 	addi	r9,r2,-32
1000d184:	01000804 	movi	r4,32
1000d188:	2a52d83a 	srl	r9,r5,r9
1000d18c:	11008c26 	beq	r2,r4,1000d3c0 <__subdf3+0x834>
1000d190:	01001004 	movi	r4,64
1000d194:	2085c83a 	sub	r2,r4,r2
1000d198:	2884983a 	sll	r2,r5,r2
1000d19c:	118cb03a 	or	r6,r2,r6
1000d1a0:	300cc03a 	cmpne	r6,r6,zero
1000d1a4:	4992b03a 	or	r9,r9,r6
1000d1a8:	0005883a 	mov	r2,zero
1000d1ac:	003f1206 	br	1000cdf8 <__alt_data_end+0xf800cdf8>
1000d1b0:	0101ffc4 	movi	r4,2047
1000d1b4:	493f9c1e 	bne	r9,r4,1000d028 <__alt_data_end+0xf800d028>
1000d1b8:	2807883a 	mov	r3,r5
1000d1bc:	3023883a 	mov	r17,r6
1000d1c0:	4821883a 	mov	r16,r9
1000d1c4:	3825883a 	mov	r18,r7
1000d1c8:	003e9106 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d1cc:	80001f1e 	bne	r16,zero,1000d24c <__subdf3+0x6c0>
1000d1d0:	1c48b03a 	or	r4,r3,r17
1000d1d4:	20005a26 	beq	r4,zero,1000d340 <__subdf3+0x7b4>
1000d1d8:	0084303a 	nor	r2,zero,r2
1000d1dc:	1000561e 	bne	r2,zero,1000d338 <__subdf3+0x7ac>
1000d1e0:	89a3883a 	add	r17,r17,r6
1000d1e4:	1945883a 	add	r2,r3,r5
1000d1e8:	898d803a 	cmpltu	r6,r17,r6
1000d1ec:	3087883a 	add	r3,r6,r2
1000d1f0:	4821883a 	mov	r16,r9
1000d1f4:	003f0506 	br	1000ce0c <__alt_data_end+0xf800ce0c>
1000d1f8:	10002b1e 	bne	r2,zero,1000d2a8 <__subdf3+0x71c>
1000d1fc:	2984b03a 	or	r2,r5,r6
1000d200:	10008026 	beq	r2,zero,1000d404 <__subdf3+0x878>
1000d204:	2807883a 	mov	r3,r5
1000d208:	3023883a 	mov	r17,r6
1000d20c:	3825883a 	mov	r18,r7
1000d210:	0401ffc4 	movi	r16,2047
1000d214:	003e7e06 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d218:	3809883a 	mov	r4,r7
1000d21c:	0011883a 	mov	r8,zero
1000d220:	0005883a 	mov	r2,zero
1000d224:	003ee306 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d228:	1c62b03a 	or	r17,r3,r17
1000d22c:	8822c03a 	cmpne	r17,r17,zero
1000d230:	0005883a 	mov	r2,zero
1000d234:	003f8906 	br	1000d05c <__alt_data_end+0xf800d05c>
1000d238:	3809883a 	mov	r4,r7
1000d23c:	4821883a 	mov	r16,r9
1000d240:	0011883a 	mov	r8,zero
1000d244:	0005883a 	mov	r2,zero
1000d248:	003eda06 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d24c:	0101ffc4 	movi	r4,2047
1000d250:	49003b26 	beq	r9,r4,1000d340 <__subdf3+0x7b4>
1000d254:	0085c83a 	sub	r2,zero,r2
1000d258:	18c02034 	orhi	r3,r3,128
1000d25c:	01000e04 	movi	r4,56
1000d260:	20806e16 	blt	r4,r2,1000d41c <__subdf3+0x890>
1000d264:	010007c4 	movi	r4,31
1000d268:	20807716 	blt	r4,r2,1000d448 <__subdf3+0x8bc>
1000d26c:	01000804 	movi	r4,32
1000d270:	2089c83a 	sub	r4,r4,r2
1000d274:	1914983a 	sll	r10,r3,r4
1000d278:	8890d83a 	srl	r8,r17,r2
1000d27c:	8908983a 	sll	r4,r17,r4
1000d280:	1884d83a 	srl	r2,r3,r2
1000d284:	5222b03a 	or	r17,r10,r8
1000d288:	2006c03a 	cmpne	r3,r4,zero
1000d28c:	88e2b03a 	or	r17,r17,r3
1000d290:	89a3883a 	add	r17,r17,r6
1000d294:	1145883a 	add	r2,r2,r5
1000d298:	898d803a 	cmpltu	r6,r17,r6
1000d29c:	3087883a 	add	r3,r6,r2
1000d2a0:	4821883a 	mov	r16,r9
1000d2a4:	003ed906 	br	1000ce0c <__alt_data_end+0xf800ce0c>
1000d2a8:	2984b03a 	or	r2,r5,r6
1000d2ac:	10004226 	beq	r2,zero,1000d3b8 <__subdf3+0x82c>
1000d2b0:	1808d0fa 	srli	r4,r3,3
1000d2b4:	8822d0fa 	srli	r17,r17,3
1000d2b8:	1806977a 	slli	r3,r3,29
1000d2bc:	2080022c 	andhi	r2,r4,8
1000d2c0:	1c62b03a 	or	r17,r3,r17
1000d2c4:	10000826 	beq	r2,zero,1000d2e8 <__subdf3+0x75c>
1000d2c8:	2812d0fa 	srli	r9,r5,3
1000d2cc:	4880022c 	andhi	r2,r9,8
1000d2d0:	1000051e 	bne	r2,zero,1000d2e8 <__subdf3+0x75c>
1000d2d4:	300cd0fa 	srli	r6,r6,3
1000d2d8:	2804977a 	slli	r2,r5,29
1000d2dc:	4809883a 	mov	r4,r9
1000d2e0:	3825883a 	mov	r18,r7
1000d2e4:	11a2b03a 	or	r17,r2,r6
1000d2e8:	8806d77a 	srli	r3,r17,29
1000d2ec:	200890fa 	slli	r4,r4,3
1000d2f0:	882290fa 	slli	r17,r17,3
1000d2f4:	0401ffc4 	movi	r16,2047
1000d2f8:	1906b03a 	or	r3,r3,r4
1000d2fc:	003e4406 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d300:	2984b03a 	or	r2,r5,r6
1000d304:	103e4226 	beq	r2,zero,1000cc10 <__alt_data_end+0xf800cc10>
1000d308:	8989c83a 	sub	r4,r17,r6
1000d30c:	8911803a 	cmpltu	r8,r17,r4
1000d310:	1945c83a 	sub	r2,r3,r5
1000d314:	1205c83a 	sub	r2,r2,r8
1000d318:	1200202c 	andhi	r8,r2,128
1000d31c:	403e9a26 	beq	r8,zero,1000cd88 <__alt_data_end+0xf800cd88>
1000d320:	3463c83a 	sub	r17,r6,r17
1000d324:	28c5c83a 	sub	r2,r5,r3
1000d328:	344d803a 	cmpltu	r6,r6,r17
1000d32c:	1187c83a 	sub	r3,r2,r6
1000d330:	3825883a 	mov	r18,r7
1000d334:	003e3606 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d338:	0101ffc4 	movi	r4,2047
1000d33c:	493fc71e 	bne	r9,r4,1000d25c <__alt_data_end+0xf800d25c>
1000d340:	2807883a 	mov	r3,r5
1000d344:	3023883a 	mov	r17,r6
1000d348:	4821883a 	mov	r16,r9
1000d34c:	003e3006 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d350:	10003626 	beq	r2,zero,1000d42c <__subdf3+0x8a0>
1000d354:	2984b03a 	or	r2,r5,r6
1000d358:	10001726 	beq	r2,zero,1000d3b8 <__subdf3+0x82c>
1000d35c:	1808d0fa 	srli	r4,r3,3
1000d360:	8822d0fa 	srli	r17,r17,3
1000d364:	1806977a 	slli	r3,r3,29
1000d368:	2080022c 	andhi	r2,r4,8
1000d36c:	1c62b03a 	or	r17,r3,r17
1000d370:	10000726 	beq	r2,zero,1000d390 <__subdf3+0x804>
1000d374:	2812d0fa 	srli	r9,r5,3
1000d378:	4880022c 	andhi	r2,r9,8
1000d37c:	1000041e 	bne	r2,zero,1000d390 <__subdf3+0x804>
1000d380:	300cd0fa 	srli	r6,r6,3
1000d384:	2804977a 	slli	r2,r5,29
1000d388:	4809883a 	mov	r4,r9
1000d38c:	11a2b03a 	or	r17,r2,r6
1000d390:	8806d77a 	srli	r3,r17,29
1000d394:	200890fa 	slli	r4,r4,3
1000d398:	882290fa 	slli	r17,r17,3
1000d39c:	3825883a 	mov	r18,r7
1000d3a0:	1906b03a 	or	r3,r3,r4
1000d3a4:	0401ffc4 	movi	r16,2047
1000d3a8:	003e1906 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d3ac:	000b883a 	mov	r5,zero
1000d3b0:	0005883a 	mov	r2,zero
1000d3b4:	003e2e06 	br	1000cc70 <__alt_data_end+0xf800cc70>
1000d3b8:	0401ffc4 	movi	r16,2047
1000d3bc:	003e1406 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d3c0:	0005883a 	mov	r2,zero
1000d3c4:	003f7506 	br	1000d19c <__alt_data_end+0xf800d19c>
1000d3c8:	0005883a 	mov	r2,zero
1000d3cc:	0009883a 	mov	r4,zero
1000d3d0:	003e7806 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d3d4:	123ff804 	addi	r8,r2,-32
1000d3d8:	01000804 	movi	r4,32
1000d3dc:	1a10d83a 	srl	r8,r3,r8
1000d3e0:	11002526 	beq	r2,r4,1000d478 <__subdf3+0x8ec>
1000d3e4:	01001004 	movi	r4,64
1000d3e8:	2085c83a 	sub	r2,r4,r2
1000d3ec:	1884983a 	sll	r2,r3,r2
1000d3f0:	1444b03a 	or	r2,r2,r17
1000d3f4:	1004c03a 	cmpne	r2,r2,zero
1000d3f8:	40a2b03a 	or	r17,r8,r2
1000d3fc:	0005883a 	mov	r2,zero
1000d400:	003f1606 	br	1000d05c <__alt_data_end+0xf800d05c>
1000d404:	02000434 	movhi	r8,16
1000d408:	0009883a 	mov	r4,zero
1000d40c:	423fffc4 	addi	r8,r8,-1
1000d410:	00bfffc4 	movi	r2,-1
1000d414:	0401ffc4 	movi	r16,2047
1000d418:	003e6606 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d41c:	1c62b03a 	or	r17,r3,r17
1000d420:	8822c03a 	cmpne	r17,r17,zero
1000d424:	0005883a 	mov	r2,zero
1000d428:	003f9906 	br	1000d290 <__alt_data_end+0xf800d290>
1000d42c:	2807883a 	mov	r3,r5
1000d430:	3023883a 	mov	r17,r6
1000d434:	0401ffc4 	movi	r16,2047
1000d438:	003df506 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d43c:	2807883a 	mov	r3,r5
1000d440:	3023883a 	mov	r17,r6
1000d444:	003df206 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d448:	123ff804 	addi	r8,r2,-32
1000d44c:	01000804 	movi	r4,32
1000d450:	1a10d83a 	srl	r8,r3,r8
1000d454:	11000a26 	beq	r2,r4,1000d480 <__subdf3+0x8f4>
1000d458:	01001004 	movi	r4,64
1000d45c:	2085c83a 	sub	r2,r4,r2
1000d460:	1884983a 	sll	r2,r3,r2
1000d464:	1444b03a 	or	r2,r2,r17
1000d468:	1004c03a 	cmpne	r2,r2,zero
1000d46c:	40a2b03a 	or	r17,r8,r2
1000d470:	0005883a 	mov	r2,zero
1000d474:	003f8606 	br	1000d290 <__alt_data_end+0xf800d290>
1000d478:	0005883a 	mov	r2,zero
1000d47c:	003fdc06 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000d480:	0005883a 	mov	r2,zero
1000d484:	003ff706 	br	1000d464 <__alt_data_end+0xf800d464>

1000d488 <__fixdfsi>:
1000d488:	280cd53a 	srli	r6,r5,20
1000d48c:	00c00434 	movhi	r3,16
1000d490:	18ffffc4 	addi	r3,r3,-1
1000d494:	3181ffcc 	andi	r6,r6,2047
1000d498:	01c0ff84 	movi	r7,1022
1000d49c:	28c6703a 	and	r3,r5,r3
1000d4a0:	280ad7fa 	srli	r5,r5,31
1000d4a4:	3980120e 	bge	r7,r6,1000d4f0 <__fixdfsi+0x68>
1000d4a8:	00810744 	movi	r2,1053
1000d4ac:	11800c16 	blt	r2,r6,1000d4e0 <__fixdfsi+0x58>
1000d4b0:	00810cc4 	movi	r2,1075
1000d4b4:	1185c83a 	sub	r2,r2,r6
1000d4b8:	01c007c4 	movi	r7,31
1000d4bc:	18c00434 	orhi	r3,r3,16
1000d4c0:	38800d16 	blt	r7,r2,1000d4f8 <__fixdfsi+0x70>
1000d4c4:	31befb44 	addi	r6,r6,-1043
1000d4c8:	2084d83a 	srl	r2,r4,r2
1000d4cc:	1986983a 	sll	r3,r3,r6
1000d4d0:	1884b03a 	or	r2,r3,r2
1000d4d4:	28000726 	beq	r5,zero,1000d4f4 <__fixdfsi+0x6c>
1000d4d8:	0085c83a 	sub	r2,zero,r2
1000d4dc:	f800283a 	ret
1000d4e0:	00a00034 	movhi	r2,32768
1000d4e4:	10bfffc4 	addi	r2,r2,-1
1000d4e8:	2885883a 	add	r2,r5,r2
1000d4ec:	f800283a 	ret
1000d4f0:	0005883a 	mov	r2,zero
1000d4f4:	f800283a 	ret
1000d4f8:	008104c4 	movi	r2,1043
1000d4fc:	1185c83a 	sub	r2,r2,r6
1000d500:	1884d83a 	srl	r2,r3,r2
1000d504:	003ff306 	br	1000d4d4 <__alt_data_end+0xf800d4d4>

1000d508 <__floatsidf>:
1000d508:	defffd04 	addi	sp,sp,-12
1000d50c:	dfc00215 	stw	ra,8(sp)
1000d510:	dc400115 	stw	r17,4(sp)
1000d514:	dc000015 	stw	r16,0(sp)
1000d518:	20002b26 	beq	r4,zero,1000d5c8 <__floatsidf+0xc0>
1000d51c:	2023883a 	mov	r17,r4
1000d520:	2020d7fa 	srli	r16,r4,31
1000d524:	20002d16 	blt	r4,zero,1000d5dc <__floatsidf+0xd4>
1000d528:	8809883a 	mov	r4,r17
1000d52c:	000d68c0 	call	1000d68c <__clzsi2>
1000d530:	01410784 	movi	r5,1054
1000d534:	288bc83a 	sub	r5,r5,r2
1000d538:	01010cc4 	movi	r4,1075
1000d53c:	2149c83a 	sub	r4,r4,r5
1000d540:	00c007c4 	movi	r3,31
1000d544:	1900160e 	bge	r3,r4,1000d5a0 <__floatsidf+0x98>
1000d548:	00c104c4 	movi	r3,1043
1000d54c:	1947c83a 	sub	r3,r3,r5
1000d550:	88c6983a 	sll	r3,r17,r3
1000d554:	00800434 	movhi	r2,16
1000d558:	10bfffc4 	addi	r2,r2,-1
1000d55c:	1886703a 	and	r3,r3,r2
1000d560:	2941ffcc 	andi	r5,r5,2047
1000d564:	800d883a 	mov	r6,r16
1000d568:	0005883a 	mov	r2,zero
1000d56c:	280a953a 	slli	r5,r5,20
1000d570:	31803fcc 	andi	r6,r6,255
1000d574:	01000434 	movhi	r4,16
1000d578:	300c97fa 	slli	r6,r6,31
1000d57c:	213fffc4 	addi	r4,r4,-1
1000d580:	1906703a 	and	r3,r3,r4
1000d584:	1946b03a 	or	r3,r3,r5
1000d588:	1986b03a 	or	r3,r3,r6
1000d58c:	dfc00217 	ldw	ra,8(sp)
1000d590:	dc400117 	ldw	r17,4(sp)
1000d594:	dc000017 	ldw	r16,0(sp)
1000d598:	dec00304 	addi	sp,sp,12
1000d59c:	f800283a 	ret
1000d5a0:	00c002c4 	movi	r3,11
1000d5a4:	1887c83a 	sub	r3,r3,r2
1000d5a8:	88c6d83a 	srl	r3,r17,r3
1000d5ac:	8904983a 	sll	r2,r17,r4
1000d5b0:	01000434 	movhi	r4,16
1000d5b4:	213fffc4 	addi	r4,r4,-1
1000d5b8:	2941ffcc 	andi	r5,r5,2047
1000d5bc:	1906703a 	and	r3,r3,r4
1000d5c0:	800d883a 	mov	r6,r16
1000d5c4:	003fe906 	br	1000d56c <__alt_data_end+0xf800d56c>
1000d5c8:	000d883a 	mov	r6,zero
1000d5cc:	000b883a 	mov	r5,zero
1000d5d0:	0007883a 	mov	r3,zero
1000d5d4:	0005883a 	mov	r2,zero
1000d5d8:	003fe406 	br	1000d56c <__alt_data_end+0xf800d56c>
1000d5dc:	0123c83a 	sub	r17,zero,r4
1000d5e0:	003fd106 	br	1000d528 <__alt_data_end+0xf800d528>

1000d5e4 <__floatunsidf>:
1000d5e4:	defffe04 	addi	sp,sp,-8
1000d5e8:	dc000015 	stw	r16,0(sp)
1000d5ec:	dfc00115 	stw	ra,4(sp)
1000d5f0:	2021883a 	mov	r16,r4
1000d5f4:	20002226 	beq	r4,zero,1000d680 <__floatunsidf+0x9c>
1000d5f8:	000d68c0 	call	1000d68c <__clzsi2>
1000d5fc:	01010784 	movi	r4,1054
1000d600:	2089c83a 	sub	r4,r4,r2
1000d604:	01810cc4 	movi	r6,1075
1000d608:	310dc83a 	sub	r6,r6,r4
1000d60c:	00c007c4 	movi	r3,31
1000d610:	1980120e 	bge	r3,r6,1000d65c <__floatunsidf+0x78>
1000d614:	00c104c4 	movi	r3,1043
1000d618:	1907c83a 	sub	r3,r3,r4
1000d61c:	80ca983a 	sll	r5,r16,r3
1000d620:	00800434 	movhi	r2,16
1000d624:	10bfffc4 	addi	r2,r2,-1
1000d628:	2101ffcc 	andi	r4,r4,2047
1000d62c:	0021883a 	mov	r16,zero
1000d630:	288a703a 	and	r5,r5,r2
1000d634:	2008953a 	slli	r4,r4,20
1000d638:	00c00434 	movhi	r3,16
1000d63c:	18ffffc4 	addi	r3,r3,-1
1000d640:	28c6703a 	and	r3,r5,r3
1000d644:	8005883a 	mov	r2,r16
1000d648:	1906b03a 	or	r3,r3,r4
1000d64c:	dfc00117 	ldw	ra,4(sp)
1000d650:	dc000017 	ldw	r16,0(sp)
1000d654:	dec00204 	addi	sp,sp,8
1000d658:	f800283a 	ret
1000d65c:	00c002c4 	movi	r3,11
1000d660:	188bc83a 	sub	r5,r3,r2
1000d664:	814ad83a 	srl	r5,r16,r5
1000d668:	00c00434 	movhi	r3,16
1000d66c:	18ffffc4 	addi	r3,r3,-1
1000d670:	81a0983a 	sll	r16,r16,r6
1000d674:	2101ffcc 	andi	r4,r4,2047
1000d678:	28ca703a 	and	r5,r5,r3
1000d67c:	003fed06 	br	1000d634 <__alt_data_end+0xf800d634>
1000d680:	0009883a 	mov	r4,zero
1000d684:	000b883a 	mov	r5,zero
1000d688:	003fea06 	br	1000d634 <__alt_data_end+0xf800d634>

1000d68c <__clzsi2>:
1000d68c:	00bfffd4 	movui	r2,65535
1000d690:	11000536 	bltu	r2,r4,1000d6a8 <__clzsi2+0x1c>
1000d694:	00803fc4 	movi	r2,255
1000d698:	11000f36 	bltu	r2,r4,1000d6d8 <__clzsi2+0x4c>
1000d69c:	00800804 	movi	r2,32
1000d6a0:	0007883a 	mov	r3,zero
1000d6a4:	00000506 	br	1000d6bc <__clzsi2+0x30>
1000d6a8:	00804034 	movhi	r2,256
1000d6ac:	10bfffc4 	addi	r2,r2,-1
1000d6b0:	11000c2e 	bgeu	r2,r4,1000d6e4 <__clzsi2+0x58>
1000d6b4:	00800204 	movi	r2,8
1000d6b8:	00c00604 	movi	r3,24
1000d6bc:	20c8d83a 	srl	r4,r4,r3
1000d6c0:	00c40074 	movhi	r3,4097
1000d6c4:	18d1d204 	addi	r3,r3,18248
1000d6c8:	1909883a 	add	r4,r3,r4
1000d6cc:	20c00003 	ldbu	r3,0(r4)
1000d6d0:	10c5c83a 	sub	r2,r2,r3
1000d6d4:	f800283a 	ret
1000d6d8:	00800604 	movi	r2,24
1000d6dc:	00c00204 	movi	r3,8
1000d6e0:	003ff606 	br	1000d6bc <__alt_data_end+0xf800d6bc>
1000d6e4:	00800404 	movi	r2,16
1000d6e8:	1007883a 	mov	r3,r2
1000d6ec:	003ff306 	br	1000d6bc <__alt_data_end+0xf800d6bc>

1000d6f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d6f0:	defffe04 	addi	sp,sp,-8
1000d6f4:	dfc00115 	stw	ra,4(sp)
1000d6f8:	df000015 	stw	fp,0(sp)
1000d6fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d700:	d0a00b17 	ldw	r2,-32724(gp)
1000d704:	10000326 	beq	r2,zero,1000d714 <alt_get_errno+0x24>
1000d708:	d0a00b17 	ldw	r2,-32724(gp)
1000d70c:	103ee83a 	callr	r2
1000d710:	00000106 	br	1000d718 <alt_get_errno+0x28>
1000d714:	d0a6f504 	addi	r2,gp,-25644
}
1000d718:	e037883a 	mov	sp,fp
1000d71c:	dfc00117 	ldw	ra,4(sp)
1000d720:	df000017 	ldw	fp,0(sp)
1000d724:	dec00204 	addi	sp,sp,8
1000d728:	f800283a 	ret

1000d72c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d72c:	defffb04 	addi	sp,sp,-20
1000d730:	dfc00415 	stw	ra,16(sp)
1000d734:	df000315 	stw	fp,12(sp)
1000d738:	df000304 	addi	fp,sp,12
1000d73c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d740:	e0bfff17 	ldw	r2,-4(fp)
1000d744:	10000616 	blt	r2,zero,1000d760 <close+0x34>
1000d748:	e0bfff17 	ldw	r2,-4(fp)
1000d74c:	10c00324 	muli	r3,r2,12
1000d750:	00840074 	movhi	r2,4097
1000d754:	10946304 	addi	r2,r2,20876
1000d758:	1885883a 	add	r2,r3,r2
1000d75c:	00000106 	br	1000d764 <close+0x38>
1000d760:	0005883a 	mov	r2,zero
1000d764:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d768:	e0bffd17 	ldw	r2,-12(fp)
1000d76c:	10001926 	beq	r2,zero,1000d7d4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d770:	e0bffd17 	ldw	r2,-12(fp)
1000d774:	10800017 	ldw	r2,0(r2)
1000d778:	10800417 	ldw	r2,16(r2)
1000d77c:	10000626 	beq	r2,zero,1000d798 <close+0x6c>
1000d780:	e0bffd17 	ldw	r2,-12(fp)
1000d784:	10800017 	ldw	r2,0(r2)
1000d788:	10800417 	ldw	r2,16(r2)
1000d78c:	e13ffd17 	ldw	r4,-12(fp)
1000d790:	103ee83a 	callr	r2
1000d794:	00000106 	br	1000d79c <close+0x70>
1000d798:	0005883a 	mov	r2,zero
1000d79c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d7a0:	e13fff17 	ldw	r4,-4(fp)
1000d7a4:	000df6c0 	call	1000df6c <alt_release_fd>
    if (rval < 0)
1000d7a8:	e0bffe17 	ldw	r2,-8(fp)
1000d7ac:	1000070e 	bge	r2,zero,1000d7cc <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000d7b0:	000d6f00 	call	1000d6f0 <alt_get_errno>
1000d7b4:	1007883a 	mov	r3,r2
1000d7b8:	e0bffe17 	ldw	r2,-8(fp)
1000d7bc:	0085c83a 	sub	r2,zero,r2
1000d7c0:	18800015 	stw	r2,0(r3)
      return -1;
1000d7c4:	00bfffc4 	movi	r2,-1
1000d7c8:	00000706 	br	1000d7e8 <close+0xbc>
    }
    return 0;
1000d7cc:	0005883a 	mov	r2,zero
1000d7d0:	00000506 	br	1000d7e8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d7d4:	000d6f00 	call	1000d6f0 <alt_get_errno>
1000d7d8:	1007883a 	mov	r3,r2
1000d7dc:	00801444 	movi	r2,81
1000d7e0:	18800015 	stw	r2,0(r3)
    return -1;
1000d7e4:	00bfffc4 	movi	r2,-1
  }
}
1000d7e8:	e037883a 	mov	sp,fp
1000d7ec:	dfc00117 	ldw	ra,4(sp)
1000d7f0:	df000017 	ldw	fp,0(sp)
1000d7f4:	dec00204 	addi	sp,sp,8
1000d7f8:	f800283a 	ret

1000d7fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d7fc:	defffc04 	addi	sp,sp,-16
1000d800:	df000315 	stw	fp,12(sp)
1000d804:	df000304 	addi	fp,sp,12
1000d808:	e13ffd15 	stw	r4,-12(fp)
1000d80c:	e17ffe15 	stw	r5,-8(fp)
1000d810:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d814:	e0bfff17 	ldw	r2,-4(fp)
}
1000d818:	e037883a 	mov	sp,fp
1000d81c:	df000017 	ldw	fp,0(sp)
1000d820:	dec00104 	addi	sp,sp,4
1000d824:	f800283a 	ret

1000d828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d828:	defffe04 	addi	sp,sp,-8
1000d82c:	dfc00115 	stw	ra,4(sp)
1000d830:	df000015 	stw	fp,0(sp)
1000d834:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d838:	d0a00b17 	ldw	r2,-32724(gp)
1000d83c:	10000326 	beq	r2,zero,1000d84c <alt_get_errno+0x24>
1000d840:	d0a00b17 	ldw	r2,-32724(gp)
1000d844:	103ee83a 	callr	r2
1000d848:	00000106 	br	1000d850 <alt_get_errno+0x28>
1000d84c:	d0a6f504 	addi	r2,gp,-25644
}
1000d850:	e037883a 	mov	sp,fp
1000d854:	dfc00117 	ldw	ra,4(sp)
1000d858:	df000017 	ldw	fp,0(sp)
1000d85c:	dec00204 	addi	sp,sp,8
1000d860:	f800283a 	ret

1000d864 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d864:	defffb04 	addi	sp,sp,-20
1000d868:	dfc00415 	stw	ra,16(sp)
1000d86c:	df000315 	stw	fp,12(sp)
1000d870:	df000304 	addi	fp,sp,12
1000d874:	e13ffe15 	stw	r4,-8(fp)
1000d878:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d87c:	e0bffe17 	ldw	r2,-8(fp)
1000d880:	10000616 	blt	r2,zero,1000d89c <fstat+0x38>
1000d884:	e0bffe17 	ldw	r2,-8(fp)
1000d888:	10c00324 	muli	r3,r2,12
1000d88c:	00840074 	movhi	r2,4097
1000d890:	10946304 	addi	r2,r2,20876
1000d894:	1885883a 	add	r2,r3,r2
1000d898:	00000106 	br	1000d8a0 <fstat+0x3c>
1000d89c:	0005883a 	mov	r2,zero
1000d8a0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d8a4:	e0bffd17 	ldw	r2,-12(fp)
1000d8a8:	10001026 	beq	r2,zero,1000d8ec <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d8ac:	e0bffd17 	ldw	r2,-12(fp)
1000d8b0:	10800017 	ldw	r2,0(r2)
1000d8b4:	10800817 	ldw	r2,32(r2)
1000d8b8:	10000726 	beq	r2,zero,1000d8d8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1000d8bc:	e0bffd17 	ldw	r2,-12(fp)
1000d8c0:	10800017 	ldw	r2,0(r2)
1000d8c4:	10800817 	ldw	r2,32(r2)
1000d8c8:	e17fff17 	ldw	r5,-4(fp)
1000d8cc:	e13ffd17 	ldw	r4,-12(fp)
1000d8d0:	103ee83a 	callr	r2
1000d8d4:	00000a06 	br	1000d900 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d8d8:	e0bfff17 	ldw	r2,-4(fp)
1000d8dc:	00c80004 	movi	r3,8192
1000d8e0:	10c00115 	stw	r3,4(r2)
      return 0;
1000d8e4:	0005883a 	mov	r2,zero
1000d8e8:	00000506 	br	1000d900 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d8ec:	000d8280 	call	1000d828 <alt_get_errno>
1000d8f0:	1007883a 	mov	r3,r2
1000d8f4:	00801444 	movi	r2,81
1000d8f8:	18800015 	stw	r2,0(r3)
    return -1;
1000d8fc:	00bfffc4 	movi	r2,-1
  }
}
1000d900:	e037883a 	mov	sp,fp
1000d904:	dfc00117 	ldw	ra,4(sp)
1000d908:	df000017 	ldw	fp,0(sp)
1000d90c:	dec00204 	addi	sp,sp,8
1000d910:	f800283a 	ret

1000d914 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
1000d914:	defff004 	addi	sp,sp,-64
1000d918:	df000f15 	stw	fp,60(sp)
1000d91c:	df000f04 	addi	fp,sp,60
1000d920:	e13ffd15 	stw	r4,-12(fp)
1000d924:	e17ffe15 	stw	r5,-8(fp)
1000d928:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
1000d92c:	00bffa84 	movi	r2,-22
1000d930:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000d934:	e0bffd17 	ldw	r2,-12(fp)
1000d938:	10800828 	cmpgeui	r2,r2,32
1000d93c:	1000501e 	bne	r2,zero,1000da80 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d940:	0005303a 	rdctl	r2,status
1000d944:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d948:	e0fff617 	ldw	r3,-40(fp)
1000d94c:	00bfff84 	movi	r2,-2
1000d950:	1884703a 	and	r2,r3,r2
1000d954:	1001703a 	wrctl	status,r2
  
  return context;
1000d958:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
1000d95c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
1000d960:	008400b4 	movhi	r2,4098
1000d964:	10a16804 	addi	r2,r2,-31328
1000d968:	e0fffd17 	ldw	r3,-12(fp)
1000d96c:	180690fa 	slli	r3,r3,3
1000d970:	10c5883a 	add	r2,r2,r3
1000d974:	e0ffff17 	ldw	r3,-4(fp)
1000d978:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
1000d97c:	008400b4 	movhi	r2,4098
1000d980:	10a16804 	addi	r2,r2,-31328
1000d984:	e0fffd17 	ldw	r3,-12(fp)
1000d988:	180690fa 	slli	r3,r3,3
1000d98c:	10c5883a 	add	r2,r2,r3
1000d990:	10800104 	addi	r2,r2,4
1000d994:	e0fffe17 	ldw	r3,-8(fp)
1000d998:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
1000d99c:	e0bfff17 	ldw	r2,-4(fp)
1000d9a0:	10001926 	beq	r2,zero,1000da08 <alt_irq_register+0xf4>
1000d9a4:	e0bffd17 	ldw	r2,-12(fp)
1000d9a8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d9ac:	0005303a 	rdctl	r2,status
1000d9b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d9b4:	e0fff717 	ldw	r3,-36(fp)
1000d9b8:	00bfff84 	movi	r2,-2
1000d9bc:	1884703a 	and	r2,r3,r2
1000d9c0:	1001703a 	wrctl	status,r2
  
  return context;
1000d9c4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000d9c8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
1000d9cc:	00c00044 	movi	r3,1
1000d9d0:	e0bff217 	ldw	r2,-56(fp)
1000d9d4:	1884983a 	sll	r2,r3,r2
1000d9d8:	1007883a 	mov	r3,r2
1000d9dc:	d0a6f617 	ldw	r2,-25640(gp)
1000d9e0:	1884b03a 	or	r2,r3,r2
1000d9e4:	d0a6f615 	stw	r2,-25640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000d9e8:	d0a6f617 	ldw	r2,-25640(gp)
1000d9ec:	100170fa 	wrctl	ienable,r2
1000d9f0:	e0bff817 	ldw	r2,-32(fp)
1000d9f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d9f8:	e0bff917 	ldw	r2,-28(fp)
1000d9fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000da00:	0005883a 	mov	r2,zero
1000da04:	00001906 	br	1000da6c <alt_irq_register+0x158>
1000da08:	e0bffd17 	ldw	r2,-12(fp)
1000da0c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000da10:	0005303a 	rdctl	r2,status
1000da14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000da18:	e0fffa17 	ldw	r3,-24(fp)
1000da1c:	00bfff84 	movi	r2,-2
1000da20:	1884703a 	and	r2,r3,r2
1000da24:	1001703a 	wrctl	status,r2
  
  return context;
1000da28:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000da2c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
1000da30:	00c00044 	movi	r3,1
1000da34:	e0bff417 	ldw	r2,-48(fp)
1000da38:	1884983a 	sll	r2,r3,r2
1000da3c:	0084303a 	nor	r2,zero,r2
1000da40:	1007883a 	mov	r3,r2
1000da44:	d0a6f617 	ldw	r2,-25640(gp)
1000da48:	1884703a 	and	r2,r3,r2
1000da4c:	d0a6f615 	stw	r2,-25640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000da50:	d0a6f617 	ldw	r2,-25640(gp)
1000da54:	100170fa 	wrctl	ienable,r2
1000da58:	e0bffb17 	ldw	r2,-20(fp)
1000da5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000da60:	e0bffc17 	ldw	r2,-16(fp)
1000da64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000da68:	0005883a 	mov	r2,zero
1000da6c:	e0bff115 	stw	r2,-60(fp)
1000da70:	e0bff317 	ldw	r2,-52(fp)
1000da74:	e0bff515 	stw	r2,-44(fp)
1000da78:	e0bff517 	ldw	r2,-44(fp)
1000da7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
1000da80:	e0bff117 	ldw	r2,-60(fp)
}
1000da84:	e037883a 	mov	sp,fp
1000da88:	df000017 	ldw	fp,0(sp)
1000da8c:	dec00104 	addi	sp,sp,4
1000da90:	f800283a 	ret

1000da94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000da94:	defffe04 	addi	sp,sp,-8
1000da98:	dfc00115 	stw	ra,4(sp)
1000da9c:	df000015 	stw	fp,0(sp)
1000daa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000daa4:	d0a00b17 	ldw	r2,-32724(gp)
1000daa8:	10000326 	beq	r2,zero,1000dab8 <alt_get_errno+0x24>
1000daac:	d0a00b17 	ldw	r2,-32724(gp)
1000dab0:	103ee83a 	callr	r2
1000dab4:	00000106 	br	1000dabc <alt_get_errno+0x28>
1000dab8:	d0a6f504 	addi	r2,gp,-25644
}
1000dabc:	e037883a 	mov	sp,fp
1000dac0:	dfc00117 	ldw	ra,4(sp)
1000dac4:	df000017 	ldw	fp,0(sp)
1000dac8:	dec00204 	addi	sp,sp,8
1000dacc:	f800283a 	ret

1000dad0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000dad0:	deffed04 	addi	sp,sp,-76
1000dad4:	dfc01215 	stw	ra,72(sp)
1000dad8:	df001115 	stw	fp,68(sp)
1000dadc:	df001104 	addi	fp,sp,68
1000dae0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dae4:	e0bfff17 	ldw	r2,-4(fp)
1000dae8:	10000616 	blt	r2,zero,1000db04 <isatty+0x34>
1000daec:	e0bfff17 	ldw	r2,-4(fp)
1000daf0:	10c00324 	muli	r3,r2,12
1000daf4:	00840074 	movhi	r2,4097
1000daf8:	10946304 	addi	r2,r2,20876
1000dafc:	1885883a 	add	r2,r3,r2
1000db00:	00000106 	br	1000db08 <isatty+0x38>
1000db04:	0005883a 	mov	r2,zero
1000db08:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000db0c:	e0bfef17 	ldw	r2,-68(fp)
1000db10:	10000e26 	beq	r2,zero,1000db4c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000db14:	e0bfef17 	ldw	r2,-68(fp)
1000db18:	10800017 	ldw	r2,0(r2)
1000db1c:	10800817 	ldw	r2,32(r2)
1000db20:	1000021e 	bne	r2,zero,1000db2c <isatty+0x5c>
    {
      return 1;
1000db24:	00800044 	movi	r2,1
1000db28:	00000d06 	br	1000db60 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000db2c:	e0bff004 	addi	r2,fp,-64
1000db30:	100b883a 	mov	r5,r2
1000db34:	e13fff17 	ldw	r4,-4(fp)
1000db38:	000d8640 	call	1000d864 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000db3c:	e0bff117 	ldw	r2,-60(fp)
1000db40:	10880020 	cmpeqi	r2,r2,8192
1000db44:	10803fcc 	andi	r2,r2,255
1000db48:	00000506 	br	1000db60 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000db4c:	000da940 	call	1000da94 <alt_get_errno>
1000db50:	1007883a 	mov	r3,r2
1000db54:	00801444 	movi	r2,81
1000db58:	18800015 	stw	r2,0(r3)
    return 0;
1000db5c:	0005883a 	mov	r2,zero
  }
}
1000db60:	e037883a 	mov	sp,fp
1000db64:	dfc00117 	ldw	ra,4(sp)
1000db68:	df000017 	ldw	fp,0(sp)
1000db6c:	dec00204 	addi	sp,sp,8
1000db70:	f800283a 	ret

1000db74 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000db74:	defffc04 	addi	sp,sp,-16
1000db78:	df000315 	stw	fp,12(sp)
1000db7c:	df000304 	addi	fp,sp,12
1000db80:	e13ffd15 	stw	r4,-12(fp)
1000db84:	e17ffe15 	stw	r5,-8(fp)
1000db88:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000db8c:	e0fffe17 	ldw	r3,-8(fp)
1000db90:	e0bffd17 	ldw	r2,-12(fp)
1000db94:	18800c26 	beq	r3,r2,1000dbc8 <alt_load_section+0x54>
  {
    while( to != end )
1000db98:	00000806 	br	1000dbbc <alt_load_section+0x48>
    {
      *to++ = *from++;
1000db9c:	e0bffe17 	ldw	r2,-8(fp)
1000dba0:	10c00104 	addi	r3,r2,4
1000dba4:	e0fffe15 	stw	r3,-8(fp)
1000dba8:	e0fffd17 	ldw	r3,-12(fp)
1000dbac:	19000104 	addi	r4,r3,4
1000dbb0:	e13ffd15 	stw	r4,-12(fp)
1000dbb4:	18c00017 	ldw	r3,0(r3)
1000dbb8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000dbbc:	e0fffe17 	ldw	r3,-8(fp)
1000dbc0:	e0bfff17 	ldw	r2,-4(fp)
1000dbc4:	18bff51e 	bne	r3,r2,1000db9c <__alt_data_end+0xf800db9c>
    {
      *to++ = *from++;
    }
  }
}
1000dbc8:	0001883a 	nop
1000dbcc:	e037883a 	mov	sp,fp
1000dbd0:	df000017 	ldw	fp,0(sp)
1000dbd4:	dec00104 	addi	sp,sp,4
1000dbd8:	f800283a 	ret

1000dbdc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000dbdc:	defffe04 	addi	sp,sp,-8
1000dbe0:	dfc00115 	stw	ra,4(sp)
1000dbe4:	df000015 	stw	fp,0(sp)
1000dbe8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000dbec:	01840074 	movhi	r6,4097
1000dbf0:	31990b04 	addi	r6,r6,25644
1000dbf4:	01440074 	movhi	r5,4097
1000dbf8:	29523004 	addi	r5,r5,18624
1000dbfc:	01040074 	movhi	r4,4097
1000dc00:	21190b04 	addi	r4,r4,25644
1000dc04:	000db740 	call	1000db74 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000dc08:	01840034 	movhi	r6,4096
1000dc0c:	31807004 	addi	r6,r6,448
1000dc10:	01440034 	movhi	r5,4096
1000dc14:	29400804 	addi	r5,r5,32
1000dc18:	01040034 	movhi	r4,4096
1000dc1c:	21000804 	addi	r4,r4,32
1000dc20:	000db740 	call	1000db74 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000dc24:	01840074 	movhi	r6,4097
1000dc28:	31923004 	addi	r6,r6,18624
1000dc2c:	01440074 	movhi	r5,4097
1000dc30:	29512504 	addi	r5,r5,17556
1000dc34:	01040074 	movhi	r4,4097
1000dc38:	21112504 	addi	r4,r4,17556
1000dc3c:	000db740 	call	1000db74 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000dc40:	001341c0 	call	1001341c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000dc44:	00136940 	call	10013694 <alt_icache_flush_all>
}
1000dc48:	0001883a 	nop
1000dc4c:	e037883a 	mov	sp,fp
1000dc50:	dfc00117 	ldw	ra,4(sp)
1000dc54:	df000017 	ldw	fp,0(sp)
1000dc58:	dec00204 	addi	sp,sp,8
1000dc5c:	f800283a 	ret

1000dc60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dc60:	defffe04 	addi	sp,sp,-8
1000dc64:	dfc00115 	stw	ra,4(sp)
1000dc68:	df000015 	stw	fp,0(sp)
1000dc6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dc70:	d0a00b17 	ldw	r2,-32724(gp)
1000dc74:	10000326 	beq	r2,zero,1000dc84 <alt_get_errno+0x24>
1000dc78:	d0a00b17 	ldw	r2,-32724(gp)
1000dc7c:	103ee83a 	callr	r2
1000dc80:	00000106 	br	1000dc88 <alt_get_errno+0x28>
1000dc84:	d0a6f504 	addi	r2,gp,-25644
}
1000dc88:	e037883a 	mov	sp,fp
1000dc8c:	dfc00117 	ldw	ra,4(sp)
1000dc90:	df000017 	ldw	fp,0(sp)
1000dc94:	dec00204 	addi	sp,sp,8
1000dc98:	f800283a 	ret

1000dc9c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000dc9c:	defff904 	addi	sp,sp,-28
1000dca0:	dfc00615 	stw	ra,24(sp)
1000dca4:	df000515 	stw	fp,20(sp)
1000dca8:	df000504 	addi	fp,sp,20
1000dcac:	e13ffd15 	stw	r4,-12(fp)
1000dcb0:	e17ffe15 	stw	r5,-8(fp)
1000dcb4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000dcb8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dcbc:	e0bffd17 	ldw	r2,-12(fp)
1000dcc0:	10000616 	blt	r2,zero,1000dcdc <lseek+0x40>
1000dcc4:	e0bffd17 	ldw	r2,-12(fp)
1000dcc8:	10c00324 	muli	r3,r2,12
1000dccc:	00840074 	movhi	r2,4097
1000dcd0:	10946304 	addi	r2,r2,20876
1000dcd4:	1885883a 	add	r2,r3,r2
1000dcd8:	00000106 	br	1000dce0 <lseek+0x44>
1000dcdc:	0005883a 	mov	r2,zero
1000dce0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000dce4:	e0bffc17 	ldw	r2,-16(fp)
1000dce8:	10001026 	beq	r2,zero,1000dd2c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000dcec:	e0bffc17 	ldw	r2,-16(fp)
1000dcf0:	10800017 	ldw	r2,0(r2)
1000dcf4:	10800717 	ldw	r2,28(r2)
1000dcf8:	10000926 	beq	r2,zero,1000dd20 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000dcfc:	e0bffc17 	ldw	r2,-16(fp)
1000dd00:	10800017 	ldw	r2,0(r2)
1000dd04:	10800717 	ldw	r2,28(r2)
1000dd08:	e1bfff17 	ldw	r6,-4(fp)
1000dd0c:	e17ffe17 	ldw	r5,-8(fp)
1000dd10:	e13ffc17 	ldw	r4,-16(fp)
1000dd14:	103ee83a 	callr	r2
1000dd18:	e0bffb15 	stw	r2,-20(fp)
1000dd1c:	00000506 	br	1000dd34 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000dd20:	00bfde84 	movi	r2,-134
1000dd24:	e0bffb15 	stw	r2,-20(fp)
1000dd28:	00000206 	br	1000dd34 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1000dd2c:	00bfebc4 	movi	r2,-81
1000dd30:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000dd34:	e0bffb17 	ldw	r2,-20(fp)
1000dd38:	1000070e 	bge	r2,zero,1000dd58 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000dd3c:	000dc600 	call	1000dc60 <alt_get_errno>
1000dd40:	1007883a 	mov	r3,r2
1000dd44:	e0bffb17 	ldw	r2,-20(fp)
1000dd48:	0085c83a 	sub	r2,zero,r2
1000dd4c:	18800015 	stw	r2,0(r3)
    rc = -1;
1000dd50:	00bfffc4 	movi	r2,-1
1000dd54:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000dd58:	e0bffb17 	ldw	r2,-20(fp)
}
1000dd5c:	e037883a 	mov	sp,fp
1000dd60:	dfc00117 	ldw	ra,4(sp)
1000dd64:	df000017 	ldw	fp,0(sp)
1000dd68:	dec00204 	addi	sp,sp,8
1000dd6c:	f800283a 	ret

1000dd70 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000dd70:	defffd04 	addi	sp,sp,-12
1000dd74:	dfc00215 	stw	ra,8(sp)
1000dd78:	df000115 	stw	fp,4(sp)
1000dd7c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000dd80:	0009883a 	mov	r4,zero
1000dd84:	000e1e80 	call	1000e1e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000dd88:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000dd8c:	000e2200 	call	1000e220 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000dd90:	01840074 	movhi	r6,4097
1000dd94:	31921504 	addi	r6,r6,18516
1000dd98:	01440074 	movhi	r5,4097
1000dd9c:	29521504 	addi	r5,r5,18516
1000dda0:	01040074 	movhi	r4,4097
1000dda4:	21121504 	addi	r4,r4,18516
1000dda8:	0013a2c0 	call	10013a2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000ddac:	00135440 	call	10013544 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000ddb0:	01040074 	movhi	r4,4097
1000ddb4:	210d6904 	addi	r4,r4,13732
1000ddb8:	00141000 	call	10014100 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000ddbc:	d0a6f717 	ldw	r2,-25636(gp)
1000ddc0:	d0e6f817 	ldw	r3,-25632(gp)
1000ddc4:	d126f917 	ldw	r4,-25628(gp)
1000ddc8:	200d883a 	mov	r6,r4
1000ddcc:	180b883a 	mov	r5,r3
1000ddd0:	1009883a 	mov	r4,r2
1000ddd4:	000020c0 	call	1000020c <main>
1000ddd8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000dddc:	01000044 	movi	r4,1
1000dde0:	000d72c0 	call	1000d72c <close>
  exit (result);
1000dde4:	e13fff17 	ldw	r4,-4(fp)
1000dde8:	00141140 	call	10014114 <exit>

1000ddec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000ddec:	defffe04 	addi	sp,sp,-8
1000ddf0:	df000115 	stw	fp,4(sp)
1000ddf4:	df000104 	addi	fp,sp,4
1000ddf8:	e13fff15 	stw	r4,-4(fp)
}
1000ddfc:	0001883a 	nop
1000de00:	e037883a 	mov	sp,fp
1000de04:	df000017 	ldw	fp,0(sp)
1000de08:	dec00104 	addi	sp,sp,4
1000de0c:	f800283a 	ret

1000de10 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000de10:	defffe04 	addi	sp,sp,-8
1000de14:	df000115 	stw	fp,4(sp)
1000de18:	df000104 	addi	fp,sp,4
1000de1c:	e13fff15 	stw	r4,-4(fp)
}
1000de20:	0001883a 	nop
1000de24:	e037883a 	mov	sp,fp
1000de28:	df000017 	ldw	fp,0(sp)
1000de2c:	dec00104 	addi	sp,sp,4
1000de30:	f800283a 	ret

1000de34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000de34:	defffe04 	addi	sp,sp,-8
1000de38:	dfc00115 	stw	ra,4(sp)
1000de3c:	df000015 	stw	fp,0(sp)
1000de40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000de44:	d0a00b17 	ldw	r2,-32724(gp)
1000de48:	10000326 	beq	r2,zero,1000de58 <alt_get_errno+0x24>
1000de4c:	d0a00b17 	ldw	r2,-32724(gp)
1000de50:	103ee83a 	callr	r2
1000de54:	00000106 	br	1000de5c <alt_get_errno+0x28>
1000de58:	d0a6f504 	addi	r2,gp,-25644
}
1000de5c:	e037883a 	mov	sp,fp
1000de60:	dfc00117 	ldw	ra,4(sp)
1000de64:	df000017 	ldw	fp,0(sp)
1000de68:	dec00204 	addi	sp,sp,8
1000de6c:	f800283a 	ret

1000de70 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000de70:	defff904 	addi	sp,sp,-28
1000de74:	dfc00615 	stw	ra,24(sp)
1000de78:	df000515 	stw	fp,20(sp)
1000de7c:	df000504 	addi	fp,sp,20
1000de80:	e13ffd15 	stw	r4,-12(fp)
1000de84:	e17ffe15 	stw	r5,-8(fp)
1000de88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000de8c:	e0bffd17 	ldw	r2,-12(fp)
1000de90:	10000616 	blt	r2,zero,1000deac <read+0x3c>
1000de94:	e0bffd17 	ldw	r2,-12(fp)
1000de98:	10c00324 	muli	r3,r2,12
1000de9c:	00840074 	movhi	r2,4097
1000dea0:	10946304 	addi	r2,r2,20876
1000dea4:	1885883a 	add	r2,r3,r2
1000dea8:	00000106 	br	1000deb0 <read+0x40>
1000deac:	0005883a 	mov	r2,zero
1000deb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000deb4:	e0bffb17 	ldw	r2,-20(fp)
1000deb8:	10002226 	beq	r2,zero,1000df44 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000debc:	e0bffb17 	ldw	r2,-20(fp)
1000dec0:	10800217 	ldw	r2,8(r2)
1000dec4:	108000cc 	andi	r2,r2,3
1000dec8:	10800060 	cmpeqi	r2,r2,1
1000decc:	1000181e 	bne	r2,zero,1000df30 <read+0xc0>
        (fd->dev->read))
1000ded0:	e0bffb17 	ldw	r2,-20(fp)
1000ded4:	10800017 	ldw	r2,0(r2)
1000ded8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000dedc:	10001426 	beq	r2,zero,1000df30 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000dee0:	e0bffb17 	ldw	r2,-20(fp)
1000dee4:	10800017 	ldw	r2,0(r2)
1000dee8:	10800517 	ldw	r2,20(r2)
1000deec:	e0ffff17 	ldw	r3,-4(fp)
1000def0:	180d883a 	mov	r6,r3
1000def4:	e17ffe17 	ldw	r5,-8(fp)
1000def8:	e13ffb17 	ldw	r4,-20(fp)
1000defc:	103ee83a 	callr	r2
1000df00:	e0bffc15 	stw	r2,-16(fp)
1000df04:	e0bffc17 	ldw	r2,-16(fp)
1000df08:	1000070e 	bge	r2,zero,1000df28 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1000df0c:	000de340 	call	1000de34 <alt_get_errno>
1000df10:	1007883a 	mov	r3,r2
1000df14:	e0bffc17 	ldw	r2,-16(fp)
1000df18:	0085c83a 	sub	r2,zero,r2
1000df1c:	18800015 	stw	r2,0(r3)
          return -1;
1000df20:	00bfffc4 	movi	r2,-1
1000df24:	00000c06 	br	1000df58 <read+0xe8>
        }
        return rval;
1000df28:	e0bffc17 	ldw	r2,-16(fp)
1000df2c:	00000a06 	br	1000df58 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000df30:	000de340 	call	1000de34 <alt_get_errno>
1000df34:	1007883a 	mov	r3,r2
1000df38:	00800344 	movi	r2,13
1000df3c:	18800015 	stw	r2,0(r3)
1000df40:	00000406 	br	1000df54 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000df44:	000de340 	call	1000de34 <alt_get_errno>
1000df48:	1007883a 	mov	r3,r2
1000df4c:	00801444 	movi	r2,81
1000df50:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000df54:	00bfffc4 	movi	r2,-1
}
1000df58:	e037883a 	mov	sp,fp
1000df5c:	dfc00117 	ldw	ra,4(sp)
1000df60:	df000017 	ldw	fp,0(sp)
1000df64:	dec00204 	addi	sp,sp,8
1000df68:	f800283a 	ret

1000df6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000df6c:	defffe04 	addi	sp,sp,-8
1000df70:	df000115 	stw	fp,4(sp)
1000df74:	df000104 	addi	fp,sp,4
1000df78:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000df7c:	e0bfff17 	ldw	r2,-4(fp)
1000df80:	108000d0 	cmplti	r2,r2,3
1000df84:	10000d1e 	bne	r2,zero,1000dfbc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1000df88:	00840074 	movhi	r2,4097
1000df8c:	10946304 	addi	r2,r2,20876
1000df90:	e0ffff17 	ldw	r3,-4(fp)
1000df94:	18c00324 	muli	r3,r3,12
1000df98:	10c5883a 	add	r2,r2,r3
1000df9c:	10800204 	addi	r2,r2,8
1000dfa0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000dfa4:	00840074 	movhi	r2,4097
1000dfa8:	10946304 	addi	r2,r2,20876
1000dfac:	e0ffff17 	ldw	r3,-4(fp)
1000dfb0:	18c00324 	muli	r3,r3,12
1000dfb4:	10c5883a 	add	r2,r2,r3
1000dfb8:	10000015 	stw	zero,0(r2)
  }
}
1000dfbc:	0001883a 	nop
1000dfc0:	e037883a 	mov	sp,fp
1000dfc4:	df000017 	ldw	fp,0(sp)
1000dfc8:	dec00104 	addi	sp,sp,4
1000dfcc:	f800283a 	ret

1000dfd0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000dfd0:	defff904 	addi	sp,sp,-28
1000dfd4:	df000615 	stw	fp,24(sp)
1000dfd8:	df000604 	addi	fp,sp,24
1000dfdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000dfe0:	0005303a 	rdctl	r2,status
1000dfe4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000dfe8:	e0fffe17 	ldw	r3,-8(fp)
1000dfec:	00bfff84 	movi	r2,-2
1000dff0:	1884703a 	and	r2,r3,r2
1000dff4:	1001703a 	wrctl	status,r2
  
  return context;
1000dff8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000dffc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000e000:	d0a00d17 	ldw	r2,-32716(gp)
1000e004:	10c000c4 	addi	r3,r2,3
1000e008:	00bfff04 	movi	r2,-4
1000e00c:	1884703a 	and	r2,r3,r2
1000e010:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000e014:	d0e00d17 	ldw	r3,-32716(gp)
1000e018:	e0bfff17 	ldw	r2,-4(fp)
1000e01c:	1887883a 	add	r3,r3,r2
1000e020:	00860034 	movhi	r2,6144
1000e024:	10800004 	addi	r2,r2,0
1000e028:	10c0062e 	bgeu	r2,r3,1000e044 <sbrk+0x74>
1000e02c:	e0bffb17 	ldw	r2,-20(fp)
1000e030:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e034:	e0bffa17 	ldw	r2,-24(fp)
1000e038:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000e03c:	00bfffc4 	movi	r2,-1
1000e040:	00000b06 	br	1000e070 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e044:	d0a00d17 	ldw	r2,-32716(gp)
1000e048:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000e04c:	d0e00d17 	ldw	r3,-32716(gp)
1000e050:	e0bfff17 	ldw	r2,-4(fp)
1000e054:	1885883a 	add	r2,r3,r2
1000e058:	d0a00d15 	stw	r2,-32716(gp)
1000e05c:	e0bffb17 	ldw	r2,-20(fp)
1000e060:	e0bffc15 	stw	r2,-16(fp)
1000e064:	e0bffc17 	ldw	r2,-16(fp)
1000e068:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000e06c:	e0bffd17 	ldw	r2,-12(fp)
} 
1000e070:	e037883a 	mov	sp,fp
1000e074:	df000017 	ldw	fp,0(sp)
1000e078:	dec00104 	addi	sp,sp,4
1000e07c:	f800283a 	ret

1000e080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e080:	defffe04 	addi	sp,sp,-8
1000e084:	dfc00115 	stw	ra,4(sp)
1000e088:	df000015 	stw	fp,0(sp)
1000e08c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e090:	d0a00b17 	ldw	r2,-32724(gp)
1000e094:	10000326 	beq	r2,zero,1000e0a4 <alt_get_errno+0x24>
1000e098:	d0a00b17 	ldw	r2,-32724(gp)
1000e09c:	103ee83a 	callr	r2
1000e0a0:	00000106 	br	1000e0a8 <alt_get_errno+0x28>
1000e0a4:	d0a6f504 	addi	r2,gp,-25644
}
1000e0a8:	e037883a 	mov	sp,fp
1000e0ac:	dfc00117 	ldw	ra,4(sp)
1000e0b0:	df000017 	ldw	fp,0(sp)
1000e0b4:	dec00204 	addi	sp,sp,8
1000e0b8:	f800283a 	ret

1000e0bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e0bc:	defff904 	addi	sp,sp,-28
1000e0c0:	dfc00615 	stw	ra,24(sp)
1000e0c4:	df000515 	stw	fp,20(sp)
1000e0c8:	df000504 	addi	fp,sp,20
1000e0cc:	e13ffd15 	stw	r4,-12(fp)
1000e0d0:	e17ffe15 	stw	r5,-8(fp)
1000e0d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e0d8:	e0bffd17 	ldw	r2,-12(fp)
1000e0dc:	10000616 	blt	r2,zero,1000e0f8 <write+0x3c>
1000e0e0:	e0bffd17 	ldw	r2,-12(fp)
1000e0e4:	10c00324 	muli	r3,r2,12
1000e0e8:	00840074 	movhi	r2,4097
1000e0ec:	10946304 	addi	r2,r2,20876
1000e0f0:	1885883a 	add	r2,r3,r2
1000e0f4:	00000106 	br	1000e0fc <write+0x40>
1000e0f8:	0005883a 	mov	r2,zero
1000e0fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e100:	e0bffb17 	ldw	r2,-20(fp)
1000e104:	10002126 	beq	r2,zero,1000e18c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e108:	e0bffb17 	ldw	r2,-20(fp)
1000e10c:	10800217 	ldw	r2,8(r2)
1000e110:	108000cc 	andi	r2,r2,3
1000e114:	10001826 	beq	r2,zero,1000e178 <write+0xbc>
1000e118:	e0bffb17 	ldw	r2,-20(fp)
1000e11c:	10800017 	ldw	r2,0(r2)
1000e120:	10800617 	ldw	r2,24(r2)
1000e124:	10001426 	beq	r2,zero,1000e178 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e128:	e0bffb17 	ldw	r2,-20(fp)
1000e12c:	10800017 	ldw	r2,0(r2)
1000e130:	10800617 	ldw	r2,24(r2)
1000e134:	e0ffff17 	ldw	r3,-4(fp)
1000e138:	180d883a 	mov	r6,r3
1000e13c:	e17ffe17 	ldw	r5,-8(fp)
1000e140:	e13ffb17 	ldw	r4,-20(fp)
1000e144:	103ee83a 	callr	r2
1000e148:	e0bffc15 	stw	r2,-16(fp)
1000e14c:	e0bffc17 	ldw	r2,-16(fp)
1000e150:	1000070e 	bge	r2,zero,1000e170 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1000e154:	000e0800 	call	1000e080 <alt_get_errno>
1000e158:	1007883a 	mov	r3,r2
1000e15c:	e0bffc17 	ldw	r2,-16(fp)
1000e160:	0085c83a 	sub	r2,zero,r2
1000e164:	18800015 	stw	r2,0(r3)
        return -1;
1000e168:	00bfffc4 	movi	r2,-1
1000e16c:	00000c06 	br	1000e1a0 <write+0xe4>
      }
      return rval;
1000e170:	e0bffc17 	ldw	r2,-16(fp)
1000e174:	00000a06 	br	1000e1a0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e178:	000e0800 	call	1000e080 <alt_get_errno>
1000e17c:	1007883a 	mov	r3,r2
1000e180:	00800344 	movi	r2,13
1000e184:	18800015 	stw	r2,0(r3)
1000e188:	00000406 	br	1000e19c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e18c:	000e0800 	call	1000e080 <alt_get_errno>
1000e190:	1007883a 	mov	r3,r2
1000e194:	00801444 	movi	r2,81
1000e198:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e19c:	00bfffc4 	movi	r2,-1
}
1000e1a0:	e037883a 	mov	sp,fp
1000e1a4:	dfc00117 	ldw	ra,4(sp)
1000e1a8:	df000017 	ldw	fp,0(sp)
1000e1ac:	dec00204 	addi	sp,sp,8
1000e1b0:	f800283a 	ret

1000e1b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e1b4:	defffd04 	addi	sp,sp,-12
1000e1b8:	dfc00215 	stw	ra,8(sp)
1000e1bc:	df000115 	stw	fp,4(sp)
1000e1c0:	df000104 	addi	fp,sp,4
1000e1c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e1c8:	d1600804 	addi	r5,gp,-32736
1000e1cc:	e13fff17 	ldw	r4,-4(fp)
1000e1d0:	00134a00 	call	100134a0 <alt_dev_llist_insert>
}
1000e1d4:	e037883a 	mov	sp,fp
1000e1d8:	dfc00117 	ldw	ra,4(sp)
1000e1dc:	df000017 	ldw	fp,0(sp)
1000e1e0:	dec00204 	addi	sp,sp,8
1000e1e4:	f800283a 	ret

1000e1e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e1e8:	defffd04 	addi	sp,sp,-12
1000e1ec:	dfc00215 	stw	ra,8(sp)
1000e1f0:	df000115 	stw	fp,4(sp)
1000e1f4:	df000104 	addi	fp,sp,4
1000e1f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( PROCESSOR, Processor);
1000e1fc:	0013ea00 	call	10013ea0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e200:	00800044 	movi	r2,1
1000e204:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e208:	0001883a 	nop
1000e20c:	e037883a 	mov	sp,fp
1000e210:	dfc00117 	ldw	ra,4(sp)
1000e214:	df000017 	ldw	fp,0(sp)
1000e218:	dec00204 	addi	sp,sp,8
1000e21c:	f800283a 	ret

1000e220 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e220:	defffd04 	addi	sp,sp,-12
1000e224:	dfc00215 	stw	ra,8(sp)
1000e228:	df000115 	stw	fp,4(sp)
1000e22c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
1000e230:	01c0fa04 	movi	r7,1000
1000e234:	01800044 	movi	r6,1
1000e238:	000b883a 	mov	r5,zero
1000e23c:	01090804 	movi	r4,9248
1000e240:	00132740 	call	10013274 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
1000e244:	000d883a 	mov	r6,zero
1000e248:	000b883a 	mov	r5,zero
1000e24c:	01040074 	movhi	r4,4097
1000e250:	2114cd04 	addi	r4,r4,21300
1000e254:	00128f80 	call	100128f8 <altera_avalon_jtag_uart_init>
1000e258:	01040074 	movhi	r4,4097
1000e25c:	2114c304 	addi	r4,r4,21260
1000e260:	000e1b40 	call	1000e1b4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SYSID);
1000e264:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
1000e268:	00840074 	movhi	r2,4097
1000e26c:	1098db04 	addi	r2,r2,25452
1000e270:	10800a17 	ldw	r2,40(r2)
1000e274:	10800017 	ldw	r2,0(r2)
1000e278:	1007883a 	mov	r3,r2
1000e27c:	00840074 	movhi	r2,4097
1000e280:	1098db04 	addi	r2,r2,25452
1000e284:	10c00b15 	stw	r3,44(r2)
1000e288:	00840074 	movhi	r2,4097
1000e28c:	1098db04 	addi	r2,r2,25452
1000e290:	10800a17 	ldw	r2,40(r2)
1000e294:	10800104 	addi	r2,r2,4
1000e298:	10800017 	ldw	r2,0(r2)
1000e29c:	1007883a 	mov	r3,r2
1000e2a0:	00840074 	movhi	r2,4097
1000e2a4:	1098db04 	addi	r2,r2,25452
1000e2a8:	10c00c15 	stw	r3,48(r2)
1000e2ac:	00840074 	movhi	r2,4097
1000e2b0:	1098db04 	addi	r2,r2,25452
1000e2b4:	10800a17 	ldw	r2,40(r2)
1000e2b8:	10800204 	addi	r2,r2,8
1000e2bc:	10800017 	ldw	r2,0(r2)
1000e2c0:	10ffffcc 	andi	r3,r2,65535
1000e2c4:	00840074 	movhi	r2,4097
1000e2c8:	1098db04 	addi	r2,r2,25452
1000e2cc:	10c00f15 	stw	r3,60(r2)
1000e2d0:	00840074 	movhi	r2,4097
1000e2d4:	1098db04 	addi	r2,r2,25452
1000e2d8:	10800a17 	ldw	r2,40(r2)
1000e2dc:	10800204 	addi	r2,r2,8
1000e2e0:	10800017 	ldw	r2,0(r2)
1000e2e4:	1006d43a 	srli	r3,r2,16
1000e2e8:	00840074 	movhi	r2,4097
1000e2ec:	1098db04 	addi	r2,r2,25452
1000e2f0:	10c01015 	stw	r3,64(r2)
1000e2f4:	00840074 	movhi	r2,4097
1000e2f8:	1098db04 	addi	r2,r2,25452
1000e2fc:	10800a17 	ldw	r2,40(r2)
1000e300:	10800304 	addi	r2,r2,12
1000e304:	10800017 	ldw	r2,0(r2)
1000e308:	1005d07a 	srai	r2,r2,1
1000e30c:	10c0004c 	andi	r3,r2,1
1000e310:	00840074 	movhi	r2,4097
1000e314:	1098db04 	addi	r2,r2,25452
1000e318:	10c00d15 	stw	r3,52(r2)
1000e31c:	00840074 	movhi	r2,4097
1000e320:	1098db04 	addi	r2,r2,25452
1000e324:	10800a17 	ldw	r2,40(r2)
1000e328:	10800304 	addi	r2,r2,12
1000e32c:	10800017 	ldw	r2,0(r2)
1000e330:	1005d13a 	srai	r2,r2,4
1000e334:	10c003cc 	andi	r3,r2,15
1000e338:	00840074 	movhi	r2,4097
1000e33c:	1098db04 	addi	r2,r2,25452
1000e340:	10c00e15 	stw	r3,56(r2)
1000e344:	00840074 	movhi	r2,4097
1000e348:	1098db04 	addi	r2,r2,25452
1000e34c:	10800a17 	ldw	r2,40(r2)
1000e350:	10800304 	addi	r2,r2,12
1000e354:	10800017 	ldw	r2,0(r2)
1000e358:	1005d43a 	srai	r2,r2,16
1000e35c:	e0bfff05 	stb	r2,-4(fp)
1000e360:	00840074 	movhi	r2,4097
1000e364:	1098db04 	addi	r2,r2,25452
1000e368:	10800a17 	ldw	r2,40(r2)
1000e36c:	10800304 	addi	r2,r2,12
1000e370:	10800017 	ldw	r2,0(r2)
1000e374:	1004d63a 	srli	r2,r2,24
1000e378:	e0bfff45 	stb	r2,-3(fp)
1000e37c:	00840074 	movhi	r2,4097
1000e380:	1098db04 	addi	r2,r2,25452
1000e384:	10800e17 	ldw	r2,56(r2)
1000e388:	10800058 	cmpnei	r2,r2,1
1000e38c:	1000041e 	bne	r2,zero,1000e3a0 <alt_sys_init+0x180>
1000e390:	00840074 	movhi	r2,4097
1000e394:	1098db04 	addi	r2,r2,25452
1000e398:	10001115 	stw	zero,68(r2)
1000e39c:	00000e06 	br	1000e3d8 <alt_sys_init+0x1b8>
1000e3a0:	00840074 	movhi	r2,4097
1000e3a4:	1098db04 	addi	r2,r2,25452
1000e3a8:	10800e17 	ldw	r2,56(r2)
1000e3ac:	10800098 	cmpnei	r2,r2,2
1000e3b0:	1000051e 	bne	r2,zero,1000e3c8 <alt_sys_init+0x1a8>
1000e3b4:	00840074 	movhi	r2,4097
1000e3b8:	1098db04 	addi	r2,r2,25452
1000e3bc:	00c00044 	movi	r3,1
1000e3c0:	10c01115 	stw	r3,68(r2)
1000e3c4:	00000406 	br	1000e3d8 <alt_sys_init+0x1b8>
1000e3c8:	00840074 	movhi	r2,4097
1000e3cc:	1098db04 	addi	r2,r2,25452
1000e3d0:	00c00084 	movi	r3,2
1000e3d4:	10c01115 	stw	r3,68(r2)
1000e3d8:	e0bfff03 	ldbu	r2,-4(fp)
1000e3dc:	00c00804 	movi	r3,32
1000e3e0:	1885c83a 	sub	r2,r3,r2
1000e3e4:	00ffffc4 	movi	r3,-1
1000e3e8:	1886d83a 	srl	r3,r3,r2
1000e3ec:	00840074 	movhi	r2,4097
1000e3f0:	1098db04 	addi	r2,r2,25452
1000e3f4:	10c01215 	stw	r3,72(r2)
1000e3f8:	e0ffff03 	ldbu	r3,-4(fp)
1000e3fc:	00840074 	movhi	r2,4097
1000e400:	1098db04 	addi	r2,r2,25452
1000e404:	10801117 	ldw	r2,68(r2)
1000e408:	1887883a 	add	r3,r3,r2
1000e40c:	00840074 	movhi	r2,4097
1000e410:	1098db04 	addi	r2,r2,25452
1000e414:	10c01315 	stw	r3,76(r2)
1000e418:	e0bfff43 	ldbu	r2,-3(fp)
1000e41c:	00c00804 	movi	r3,32
1000e420:	1885c83a 	sub	r2,r3,r2
1000e424:	00ffffc4 	movi	r3,-1
1000e428:	1886d83a 	srl	r3,r3,r2
1000e42c:	00840074 	movhi	r2,4097
1000e430:	1098db04 	addi	r2,r2,25452
1000e434:	10c01415 	stw	r3,80(r2)
1000e438:	01040074 	movhi	r4,4097
1000e43c:	2118db04 	addi	r4,r4,25452
1000e440:	000e1b40 	call	1000e1b4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
1000e444:	01040074 	movhi	r4,4097
1000e448:	2118f004 	addi	r4,r4,25536
1000e44c:	000e1b40 	call	1000e1b4 <alt_dev_reg>
}
1000e450:	0001883a 	nop
1000e454:	e037883a 	mov	sp,fp
1000e458:	dfc00117 	ldw	ra,4(sp)
1000e45c:	df000017 	ldw	fp,0(sp)
1000e460:	dec00204 	addi	sp,sp,8
1000e464:	f800283a 	ret

1000e468 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
1000e468:	defffa04 	addi	sp,sp,-24
1000e46c:	dfc00515 	stw	ra,20(sp)
1000e470:	df000415 	stw	fp,16(sp)
1000e474:	df000404 	addi	fp,sp,16
1000e478:	e13ffe15 	stw	r4,-8(fp)
1000e47c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
1000e480:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
1000e484:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
1000e488:	10001e26 	beq	r2,zero,1000e504 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
1000e48c:	00803fc4 	movi	r2,255
1000e490:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
1000e494:	d0a70017 	ldw	r2,-25600(gp)
1000e498:	e13ffe17 	ldw	r4,-8(fp)
1000e49c:	e0ffff17 	ldw	r3,-4(fp)
1000e4a0:	20c7883a 	add	r3,r4,r3
1000e4a4:	1806927a 	slli	r3,r3,9
1000e4a8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
1000e4ac:	d0a6ff17 	ldw	r2,-25604(gp)
1000e4b0:	00c00604 	movi	r3,24
1000e4b4:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
1000e4b8:	d0a6fc17 	ldw	r2,-25616(gp)
1000e4bc:	1080002b 	ldhuio	r2,0(r2)
1000e4c0:	10bfffcc 	andi	r2,r2,65535
1000e4c4:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
1000e4c8:	e0bffd0b 	ldhu	r2,-12(fp)
1000e4cc:	10bfffcc 	andi	r2,r2,65535
1000e4d0:	1080010c 	andi	r2,r2,4
1000e4d4:	103ff81e 	bne	r2,zero,1000e4b8 <__alt_data_end+0xf800e4b8>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
1000e4d8:	e0bffd0b 	ldhu	r2,-12(fp)
1000e4dc:	10bfffcc 	andi	r2,r2,65535
1000e4e0:	1080040c 	andi	r2,r2,16
1000e4e4:	1000071e 	bne	r2,zero,1000e504 <Write_Sector_Data+0x9c>
        {
            result = true;
1000e4e8:	00800044 	movi	r2,1
1000e4ec:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
1000e4f0:	d0270515 	stw	zero,-25580(gp)
            current_sector_index = sector_index+partition_offset;
1000e4f4:	e0fffe17 	ldw	r3,-8(fp)
1000e4f8:	e0bfff17 	ldw	r2,-4(fp)
1000e4fc:	1885883a 	add	r2,r3,r2
1000e500:	d0a70615 	stw	r2,-25576(gp)
        }
    }
    return result;
1000e504:	e0bffc17 	ldw	r2,-16(fp)
}
1000e508:	e037883a 	mov	sp,fp
1000e50c:	dfc00117 	ldw	ra,4(sp)
1000e510:	df000017 	ldw	fp,0(sp)
1000e514:	dec00204 	addi	sp,sp,8
1000e518:	f800283a 	ret

1000e51c <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
1000e51c:	defffd04 	addi	sp,sp,-12
1000e520:	dfc00215 	stw	ra,8(sp)
1000e524:	df000115 	stw	fp,4(sp)
1000e528:	df000104 	addi	fp,sp,4
    bool result = true;
1000e52c:	00800044 	movi	r2,1
1000e530:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
1000e534:	d0a70517 	ldw	r2,-25580(gp)
1000e538:	10000526 	beq	r2,zero,1000e550 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
1000e53c:	d0a70617 	ldw	r2,-25576(gp)
1000e540:	000b883a 	mov	r5,zero
1000e544:	1009883a 	mov	r4,r2
1000e548:	000e4680 	call	1000e468 <Write_Sector_Data>
1000e54c:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
1000e550:	e0bfff17 	ldw	r2,-4(fp)
}
1000e554:	e037883a 	mov	sp,fp
1000e558:	dfc00117 	ldw	ra,4(sp)
1000e55c:	df000017 	ldw	fp,0(sp)
1000e560:	dec00204 	addi	sp,sp,8
1000e564:	f800283a 	ret

1000e568 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
1000e568:	defffa04 	addi	sp,sp,-24
1000e56c:	dfc00515 	stw	ra,20(sp)
1000e570:	df000415 	stw	fp,16(sp)
1000e574:	df000404 	addi	fp,sp,16
1000e578:	e13ffe15 	stw	r4,-8(fp)
1000e57c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
1000e580:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
1000e584:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
1000e588:	10002726 	beq	r2,zero,1000e628 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
1000e58c:	00803fc4 	movi	r2,255
1000e590:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
1000e594:	d0a70517 	ldw	r2,-25580(gp)
1000e598:	10000726 	beq	r2,zero,1000e5b8 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
1000e59c:	d0a70617 	ldw	r2,-25576(gp)
1000e5a0:	000b883a 	mov	r5,zero
1000e5a4:	1009883a 	mov	r4,r2
1000e5a8:	000e4680 	call	1000e468 <Write_Sector_Data>
1000e5ac:	1000021e 	bne	r2,zero,1000e5b8 <Read_Sector_Data+0x50>
            {
                return false;
1000e5b0:	0005883a 	mov	r2,zero
1000e5b4:	00001d06 	br	1000e62c <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
1000e5b8:	d0a70017 	ldw	r2,-25600(gp)
1000e5bc:	e13ffe17 	ldw	r4,-8(fp)
1000e5c0:	e0ffff17 	ldw	r3,-4(fp)
1000e5c4:	20c7883a 	add	r3,r4,r3
1000e5c8:	1806927a 	slli	r3,r3,9
1000e5cc:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
1000e5d0:	d0a6ff17 	ldw	r2,-25604(gp)
1000e5d4:	00c00444 	movi	r3,17
1000e5d8:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
1000e5dc:	d0a6fc17 	ldw	r2,-25616(gp)
1000e5e0:	1080002b 	ldhuio	r2,0(r2)
1000e5e4:	10bfffcc 	andi	r2,r2,65535
1000e5e8:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
1000e5ec:	e0bffd0b 	ldhu	r2,-12(fp)
1000e5f0:	10bfffcc 	andi	r2,r2,65535
1000e5f4:	1080010c 	andi	r2,r2,4
1000e5f8:	103ff81e 	bne	r2,zero,1000e5dc <__alt_data_end+0xf800e5dc>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
1000e5fc:	e0bffd0b 	ldhu	r2,-12(fp)
1000e600:	10bfffcc 	andi	r2,r2,65535
1000e604:	1080040c 	andi	r2,r2,16
1000e608:	1000071e 	bne	r2,zero,1000e628 <Read_Sector_Data+0xc0>
		{
			result = true;
1000e60c:	00800044 	movi	r2,1
1000e610:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
1000e614:	d0270515 	stw	zero,-25580(gp)
            current_sector_index = sector_index+partition_offset;
1000e618:	e0fffe17 	ldw	r3,-8(fp)
1000e61c:	e0bfff17 	ldw	r2,-4(fp)
1000e620:	1885883a 	add	r2,r3,r2
1000e624:	d0a70615 	stw	r2,-25576(gp)
		}
	}
	return result;
1000e628:	e0bffc17 	ldw	r2,-16(fp)
}
1000e62c:	e037883a 	mov	sp,fp
1000e630:	dfc00117 	ldw	ra,4(sp)
1000e634:	df000017 	ldw	fp,0(sp)
1000e638:	dec00204 	addi	sp,sp,8
1000e63c:	f800283a 	ret

1000e640 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
1000e640:	defffb04 	addi	sp,sp,-20
1000e644:	dfc00415 	stw	ra,16(sp)
1000e648:	df000315 	stw	fp,12(sp)
1000e64c:	df000304 	addi	fp,sp,12
1000e650:	e13ffe15 	stw	r4,-8(fp)
1000e654:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
1000e658:	e0bffe17 	ldw	r2,-8(fp)
1000e65c:	1004d23a 	srli	r2,r2,8
1000e660:	d0e70217 	ldw	r3,-25592(gp)
1000e664:	10c5883a 	add	r2,r2,r3
1000e668:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
1000e66c:	008400b4 	movhi	r2,4098
1000e670:	10a01304 	addi	r2,r2,-32692
1000e674:	10801117 	ldw	r2,68(r2)
1000e678:	e0fffd17 	ldw	r3,-12(fp)
1000e67c:	1885883a 	add	r2,r3,r2
1000e680:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
1000e684:	d0a70617 	ldw	r2,-25576(gp)
1000e688:	e0fffd17 	ldw	r3,-12(fp)
1000e68c:	18800726 	beq	r3,r2,1000e6ac <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
1000e690:	e0bffd17 	ldw	r2,-12(fp)
1000e694:	000b883a 	mov	r5,zero
1000e698:	1009883a 	mov	r4,r2
1000e69c:	000e5680 	call	1000e568 <Read_Sector_Data>
1000e6a0:	1000021e 	bne	r2,zero,1000e6ac <get_cluster_flag+0x6c>
        {
            return false;
1000e6a4:	0005883a 	mov	r2,zero
1000e6a8:	00000d06 	br	1000e6e0 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
1000e6ac:	e0bffe17 	ldw	r2,-8(fp)
1000e6b0:	10803fcc 	andi	r2,r2,255
1000e6b4:	1085883a 	add	r2,r2,r2
1000e6b8:	1007883a 	mov	r3,r2
1000e6bc:	d0a70417 	ldw	r2,-25584(gp)
1000e6c0:	10800a17 	ldw	r2,40(r2)
1000e6c4:	1885883a 	add	r2,r3,r2
1000e6c8:	1080002b 	ldhuio	r2,0(r2)
1000e6cc:	10bfffcc 	andi	r2,r2,65535
1000e6d0:	1007883a 	mov	r3,r2
1000e6d4:	e0bfff17 	ldw	r2,-4(fp)
1000e6d8:	10c0000d 	sth	r3,0(r2)
    return true;
1000e6dc:	00800044 	movi	r2,1
}
1000e6e0:	e037883a 	mov	sp,fp
1000e6e4:	dfc00117 	ldw	ra,4(sp)
1000e6e8:	df000017 	ldw	fp,0(sp)
1000e6ec:	dec00204 	addi	sp,sp,8
1000e6f0:	f800283a 	ret

1000e6f4 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
1000e6f4:	defffa04 	addi	sp,sp,-24
1000e6f8:	dfc00515 	stw	ra,20(sp)
1000e6fc:	df000415 	stw	fp,16(sp)
1000e700:	df000404 	addi	fp,sp,16
1000e704:	e13ffd15 	stw	r4,-12(fp)
1000e708:	2805883a 	mov	r2,r5
1000e70c:	e1bfff15 	stw	r6,-4(fp)
1000e710:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
1000e714:	e0bffd17 	ldw	r2,-12(fp)
1000e718:	1004d23a 	srli	r2,r2,8
1000e71c:	d0e70217 	ldw	r3,-25592(gp)
1000e720:	10c5883a 	add	r2,r2,r3
1000e724:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
1000e728:	e0bfff17 	ldw	r2,-4(fp)
1000e72c:	10000726 	beq	r2,zero,1000e74c <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
1000e730:	008400b4 	movhi	r2,4098
1000e734:	10a01304 	addi	r2,r2,-32692
1000e738:	10801117 	ldw	r2,68(r2)
1000e73c:	e0fffc17 	ldw	r3,-16(fp)
1000e740:	1885883a 	add	r2,r3,r2
1000e744:	e0bffc15 	stw	r2,-16(fp)
1000e748:	00000606 	br	1000e764 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
1000e74c:	008400b4 	movhi	r2,4098
1000e750:	10a01304 	addi	r2,r2,-32692
1000e754:	10801217 	ldw	r2,72(r2)
1000e758:	e0fffc17 	ldw	r3,-16(fp)
1000e75c:	1885883a 	add	r2,r3,r2
1000e760:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
1000e764:	d0a70617 	ldw	r2,-25576(gp)
1000e768:	e0fffc17 	ldw	r3,-16(fp)
1000e76c:	18800726 	beq	r3,r2,1000e78c <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
1000e770:	e0bffc17 	ldw	r2,-16(fp)
1000e774:	000b883a 	mov	r5,zero
1000e778:	1009883a 	mov	r4,r2
1000e77c:	000e5680 	call	1000e568 <Read_Sector_Data>
1000e780:	1000021e 	bne	r2,zero,1000e78c <mark_cluster+0x98>
        {
            return false;
1000e784:	0005883a 	mov	r2,zero
1000e788:	00000d06 	br	1000e7c0 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
1000e78c:	e0bffd17 	ldw	r2,-12(fp)
1000e790:	10803fcc 	andi	r2,r2,255
1000e794:	1085883a 	add	r2,r2,r2
1000e798:	1007883a 	mov	r3,r2
1000e79c:	d0a70417 	ldw	r2,-25584(gp)
1000e7a0:	10800a17 	ldw	r2,40(r2)
1000e7a4:	1885883a 	add	r2,r3,r2
1000e7a8:	1007883a 	mov	r3,r2
1000e7ac:	e0bffe0f 	ldh	r2,-8(fp)
1000e7b0:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
1000e7b4:	00800044 	movi	r2,1
1000e7b8:	d0a70515 	stw	r2,-25580(gp)
    return true;
1000e7bc:	00800044 	movi	r2,1
}
1000e7c0:	e037883a 	mov	sp,fp
1000e7c4:	dfc00117 	ldw	ra,4(sp)
1000e7c8:	df000017 	ldw	fp,0(sp)
1000e7cc:	dec00204 	addi	sp,sp,8
1000e7d0:	f800283a 	ret

1000e7d4 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
1000e7d4:	defff704 	addi	sp,sp,-36
1000e7d8:	dfc00815 	stw	ra,32(sp)
1000e7dc:	df000715 	stw	fp,28(sp)
1000e7e0:	df000704 	addi	fp,sp,28
	bool result = false;
1000e7e4:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
1000e7e8:	000b883a 	mov	r5,zero
1000e7ec:	0009883a 	mov	r4,zero
1000e7f0:	000e5680 	call	1000e568 <Read_Sector_Data>
1000e7f4:	10005a26 	beq	r2,zero,1000e960 <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
1000e7f8:	d0a70417 	ldw	r2,-25584(gp)
1000e7fc:	10800a17 	ldw	r2,40(r2)
1000e800:	10807f84 	addi	r2,r2,510
1000e804:	1080002b 	ldhuio	r2,0(r2)
1000e808:	10bfffcc 	andi	r2,r2,65535
1000e80c:	10bfffcc 	andi	r2,r2,65535
1000e810:	10a0001c 	xori	r2,r2,32768
1000e814:	10a00004 	addi	r2,r2,-32768
1000e818:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
1000e81c:	e0bffb17 	ldw	r2,-20(fp)
1000e820:	10ffffcc 	andi	r3,r2,65535
1000e824:	00aa9554 	movui	r2,43605
1000e828:	18804d1e 	bne	r3,r2,1000e960 <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
1000e82c:	e03ffa15 	stw	zero,-24(fp)
1000e830:	00004806 	br	1000e954 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
1000e834:	e0bffa17 	ldw	r2,-24(fp)
1000e838:	1004913a 	slli	r2,r2,4
1000e83c:	10806f84 	addi	r2,r2,446
1000e840:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
1000e844:	d0a70417 	ldw	r2,-25584(gp)
1000e848:	10c00a17 	ldw	r3,40(r2)
1000e84c:	e0bffc17 	ldw	r2,-16(fp)
1000e850:	1885883a 	add	r2,r3,r2
1000e854:	10800104 	addi	r2,r2,4
1000e858:	10800023 	ldbuio	r2,0(r2)
1000e85c:	10803fcc 	andi	r2,r2,255
1000e860:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
1000e864:	e0bffd07 	ldb	r2,-12(fp)
1000e868:	10800060 	cmpeqi	r2,r2,1
1000e86c:	1000091e 	bne	r2,zero,1000e894 <Check_for_Master_Boot_Record+0xc0>
1000e870:	e0bffd07 	ldb	r2,-12(fp)
1000e874:	10800120 	cmpeqi	r2,r2,4
1000e878:	1000061e 	bne	r2,zero,1000e894 <Check_for_Master_Boot_Record+0xc0>
1000e87c:	e0bffd07 	ldb	r2,-12(fp)
1000e880:	108001a0 	cmpeqi	r2,r2,6
1000e884:	1000031e 	bne	r2,zero,1000e894 <Check_for_Master_Boot_Record+0xc0>
1000e888:	e0bffd07 	ldb	r2,-12(fp)
1000e88c:	10800398 	cmpnei	r2,r2,14
1000e890:	10002d1e 	bne	r2,zero,1000e948 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
1000e894:	d0a70417 	ldw	r2,-25584(gp)
1000e898:	10c00a17 	ldw	r3,40(r2)
1000e89c:	e0bffc17 	ldw	r2,-16(fp)
1000e8a0:	1885883a 	add	r2,r3,r2
1000e8a4:	10800284 	addi	r2,r2,10
1000e8a8:	1080002b 	ldhuio	r2,0(r2)
1000e8ac:	10bfffcc 	andi	r2,r2,65535
1000e8b0:	1006943a 	slli	r3,r2,16
1000e8b4:	d0a70417 	ldw	r2,-25584(gp)
1000e8b8:	11000a17 	ldw	r4,40(r2)
1000e8bc:	e0bffc17 	ldw	r2,-16(fp)
1000e8c0:	2085883a 	add	r2,r4,r2
1000e8c4:	10800204 	addi	r2,r2,8
1000e8c8:	1080002b 	ldhuio	r2,0(r2)
1000e8cc:	10bfffcc 	andi	r2,r2,65535
1000e8d0:	10bfffcc 	andi	r2,r2,65535
1000e8d4:	1884b03a 	or	r2,r3,r2
1000e8d8:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
1000e8dc:	d0a70417 	ldw	r2,-25584(gp)
1000e8e0:	10c00a17 	ldw	r3,40(r2)
1000e8e4:	e0bffc17 	ldw	r2,-16(fp)
1000e8e8:	1885883a 	add	r2,r3,r2
1000e8ec:	10800384 	addi	r2,r2,14
1000e8f0:	1080002b 	ldhuio	r2,0(r2)
1000e8f4:	10bfffcc 	andi	r2,r2,65535
1000e8f8:	1006943a 	slli	r3,r2,16
1000e8fc:	d0a70417 	ldw	r2,-25584(gp)
1000e900:	11000a17 	ldw	r4,40(r2)
1000e904:	e0bffc17 	ldw	r2,-16(fp)
1000e908:	2085883a 	add	r2,r4,r2
1000e90c:	10800304 	addi	r2,r2,12
1000e910:	1080002b 	ldhuio	r2,0(r2)
1000e914:	10bfffcc 	andi	r2,r2,65535
1000e918:	10bfffcc 	andi	r2,r2,65535
1000e91c:	1884b03a 	or	r2,r3,r2
1000e920:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
1000e924:	e0bfff17 	ldw	r2,-4(fp)
1000e928:	0080070e 	bge	zero,r2,1000e948 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
1000e92c:	00800044 	movi	r2,1
1000e930:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
1000e934:	e0bfff17 	ldw	r2,-4(fp)
1000e938:	d0a70315 	stw	r2,-25588(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
1000e93c:	e0bffe17 	ldw	r2,-8(fp)
1000e940:	d0a70215 	stw	r2,-25592(gp)
						break;
1000e944:	00000606 	br	1000e960 <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
1000e948:	e0bffa17 	ldw	r2,-24(fp)
1000e94c:	10800044 	addi	r2,r2,1
1000e950:	e0bffa15 	stw	r2,-24(fp)
1000e954:	e0bffa17 	ldw	r2,-24(fp)
1000e958:	10800110 	cmplti	r2,r2,4
1000e95c:	103fb51e 	bne	r2,zero,1000e834 <__alt_data_end+0xf800e834>
				}
			}
		}
	}

	return result;
1000e960:	e0bff917 	ldw	r2,-28(fp)
}
1000e964:	e037883a 	mov	sp,fp
1000e968:	dfc00117 	ldw	ra,4(sp)
1000e96c:	df000017 	ldw	fp,0(sp)
1000e970:	dec00204 	addi	sp,sp,8
1000e974:	f800283a 	ret

1000e978 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
1000e978:	defff804 	addi	sp,sp,-32
1000e97c:	dfc00715 	stw	ra,28(sp)
1000e980:	df000615 	stw	fp,24(sp)
1000e984:	df000604 	addi	fp,sp,24
1000e988:	e13ffc15 	stw	r4,-16(fp)
1000e98c:	e17ffd15 	stw	r5,-12(fp)
1000e990:	e1bffe15 	stw	r6,-8(fp)
1000e994:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
1000e998:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
1000e99c:	e0bffc17 	ldw	r2,-16(fp)
1000e9a0:	108007cc 	andi	r2,r2,31
1000e9a4:	10008d1e 	bne	r2,zero,1000ebdc <Read_File_Record_At_Offset+0x264>
1000e9a8:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
1000e9ac:	10008b26 	beq	r2,zero,1000ebdc <Read_File_Record_At_Offset+0x264>
1000e9b0:	d0a6fb17 	ldw	r2,-25620(gp)
1000e9b4:	10008926 	beq	r2,zero,1000ebdc <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
1000e9b8:	e03ffb15 	stw	zero,-20(fp)
1000e9bc:	00001106 	br	1000ea04 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
1000e9c0:	e0fffc17 	ldw	r3,-16(fp)
1000e9c4:	e0bffb17 	ldw	r2,-20(fp)
1000e9c8:	1885883a 	add	r2,r3,r2
1000e9cc:	1007883a 	mov	r3,r2
1000e9d0:	d0a70417 	ldw	r2,-25584(gp)
1000e9d4:	10800a17 	ldw	r2,40(r2)
1000e9d8:	1885883a 	add	r2,r3,r2
1000e9dc:	10800023 	ldbuio	r2,0(r2)
1000e9e0:	10803fcc 	andi	r2,r2,255
1000e9e4:	1009883a 	mov	r4,r2
1000e9e8:	e0fffd17 	ldw	r3,-12(fp)
1000e9ec:	e0bffb17 	ldw	r2,-20(fp)
1000e9f0:	1885883a 	add	r2,r3,r2
1000e9f4:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
1000e9f8:	e0bffb17 	ldw	r2,-20(fp)
1000e9fc:	10800044 	addi	r2,r2,1
1000ea00:	e0bffb15 	stw	r2,-20(fp)
1000ea04:	e0bffb17 	ldw	r2,-20(fp)
1000ea08:	10800210 	cmplti	r2,r2,8
1000ea0c:	103fec1e 	bne	r2,zero,1000e9c0 <__alt_data_end+0xf800e9c0>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
1000ea10:	e03ffb15 	stw	zero,-20(fp)
1000ea14:	00001306 	br	1000ea64 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
1000ea18:	e0fffc17 	ldw	r3,-16(fp)
1000ea1c:	e0bffb17 	ldw	r2,-20(fp)
1000ea20:	1885883a 	add	r2,r3,r2
1000ea24:	1007883a 	mov	r3,r2
1000ea28:	d0a70417 	ldw	r2,-25584(gp)
1000ea2c:	10800a17 	ldw	r2,40(r2)
1000ea30:	1885883a 	add	r2,r3,r2
1000ea34:	10800204 	addi	r2,r2,8
1000ea38:	10800023 	ldbuio	r2,0(r2)
1000ea3c:	10803fcc 	andi	r2,r2,255
1000ea40:	1009883a 	mov	r4,r2
1000ea44:	e0fffd17 	ldw	r3,-12(fp)
1000ea48:	e0bffb17 	ldw	r2,-20(fp)
1000ea4c:	1885883a 	add	r2,r3,r2
1000ea50:	10800204 	addi	r2,r2,8
1000ea54:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
1000ea58:	e0bffb17 	ldw	r2,-20(fp)
1000ea5c:	10800044 	addi	r2,r2,1
1000ea60:	e0bffb15 	stw	r2,-20(fp)
1000ea64:	e0bffb17 	ldw	r2,-20(fp)
1000ea68:	108000d0 	cmplti	r2,r2,3
1000ea6c:	103fea1e 	bne	r2,zero,1000ea18 <__alt_data_end+0xf800ea18>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
1000ea70:	d0a70417 	ldw	r2,-25584(gp)
1000ea74:	10c00a17 	ldw	r3,40(r2)
1000ea78:	e0bffc17 	ldw	r2,-16(fp)
1000ea7c:	1885883a 	add	r2,r3,r2
1000ea80:	108002c4 	addi	r2,r2,11
1000ea84:	10800023 	ldbuio	r2,0(r2)
1000ea88:	10803fcc 	andi	r2,r2,255
1000ea8c:	1007883a 	mov	r3,r2
1000ea90:	e0bffd17 	ldw	r2,-12(fp)
1000ea94:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
1000ea98:	d0a70417 	ldw	r2,-25584(gp)
1000ea9c:	10c00a17 	ldw	r3,40(r2)
1000eaa0:	e0bffc17 	ldw	r2,-16(fp)
1000eaa4:	1885883a 	add	r2,r3,r2
1000eaa8:	10800384 	addi	r2,r2,14
1000eaac:	1080002b 	ldhuio	r2,0(r2)
1000eab0:	10bfffcc 	andi	r2,r2,65535
1000eab4:	1007883a 	mov	r3,r2
1000eab8:	e0bffd17 	ldw	r2,-12(fp)
1000eabc:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
1000eac0:	d0a70417 	ldw	r2,-25584(gp)
1000eac4:	10c00a17 	ldw	r3,40(r2)
1000eac8:	e0bffc17 	ldw	r2,-16(fp)
1000eacc:	1885883a 	add	r2,r3,r2
1000ead0:	10800404 	addi	r2,r2,16
1000ead4:	1080002b 	ldhuio	r2,0(r2)
1000ead8:	10bfffcc 	andi	r2,r2,65535
1000eadc:	1007883a 	mov	r3,r2
1000eae0:	e0bffd17 	ldw	r2,-12(fp)
1000eae4:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
1000eae8:	d0a70417 	ldw	r2,-25584(gp)
1000eaec:	10c00a17 	ldw	r3,40(r2)
1000eaf0:	e0bffc17 	ldw	r2,-16(fp)
1000eaf4:	1885883a 	add	r2,r3,r2
1000eaf8:	10800484 	addi	r2,r2,18
1000eafc:	1080002b 	ldhuio	r2,0(r2)
1000eb00:	10bfffcc 	andi	r2,r2,65535
1000eb04:	1007883a 	mov	r3,r2
1000eb08:	e0bffd17 	ldw	r2,-12(fp)
1000eb0c:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
1000eb10:	d0a70417 	ldw	r2,-25584(gp)
1000eb14:	10c00a17 	ldw	r3,40(r2)
1000eb18:	e0bffc17 	ldw	r2,-16(fp)
1000eb1c:	1885883a 	add	r2,r3,r2
1000eb20:	10800584 	addi	r2,r2,22
1000eb24:	1080002b 	ldhuio	r2,0(r2)
1000eb28:	10bfffcc 	andi	r2,r2,65535
1000eb2c:	1007883a 	mov	r3,r2
1000eb30:	e0bffd17 	ldw	r2,-12(fp)
1000eb34:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
1000eb38:	d0a70417 	ldw	r2,-25584(gp)
1000eb3c:	10c00a17 	ldw	r3,40(r2)
1000eb40:	e0bffc17 	ldw	r2,-16(fp)
1000eb44:	1885883a 	add	r2,r3,r2
1000eb48:	10800604 	addi	r2,r2,24
1000eb4c:	1080002b 	ldhuio	r2,0(r2)
1000eb50:	10bfffcc 	andi	r2,r2,65535
1000eb54:	1007883a 	mov	r3,r2
1000eb58:	e0bffd17 	ldw	r2,-12(fp)
1000eb5c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
1000eb60:	d0a70417 	ldw	r2,-25584(gp)
1000eb64:	10c00a17 	ldw	r3,40(r2)
1000eb68:	e0bffc17 	ldw	r2,-16(fp)
1000eb6c:	1885883a 	add	r2,r3,r2
1000eb70:	10800684 	addi	r2,r2,26
1000eb74:	1080002b 	ldhuio	r2,0(r2)
1000eb78:	10bfffcc 	andi	r2,r2,65535
1000eb7c:	1007883a 	mov	r3,r2
1000eb80:	e0bffd17 	ldw	r2,-12(fp)
1000eb84:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
1000eb88:	d0a70417 	ldw	r2,-25584(gp)
1000eb8c:	10c00a17 	ldw	r3,40(r2)
1000eb90:	e0bffc17 	ldw	r2,-16(fp)
1000eb94:	1885883a 	add	r2,r3,r2
1000eb98:	10800704 	addi	r2,r2,28
1000eb9c:	10800037 	ldwio	r2,0(r2)
1000eba0:	1007883a 	mov	r3,r2
1000eba4:	e0bffd17 	ldw	r2,-12(fp)
1000eba8:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
1000ebac:	e0bffd17 	ldw	r2,-12(fp)
1000ebb0:	e0fffe17 	ldw	r3,-8(fp)
1000ebb4:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
1000ebb8:	e0bffd17 	ldw	r2,-12(fp)
1000ebbc:	e0ffff17 	ldw	r3,-4(fp)
1000ebc0:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
1000ebc4:	e0bffc17 	ldw	r2,-16(fp)
1000ebc8:	1007883a 	mov	r3,r2
1000ebcc:	e0bffd17 	ldw	r2,-12(fp)
1000ebd0:	10c00c0d 	sth	r3,48(r2)
		result = true;
1000ebd4:	00800044 	movi	r2,1
1000ebd8:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
1000ebdc:	e0bffa17 	ldw	r2,-24(fp)
}
1000ebe0:	e037883a 	mov	sp,fp
1000ebe4:	dfc00117 	ldw	ra,4(sp)
1000ebe8:	df000017 	ldw	fp,0(sp)
1000ebec:	dec00204 	addi	sp,sp,8
1000ebf0:	f800283a 	ret

1000ebf4 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
1000ebf4:	defff904 	addi	sp,sp,-28
1000ebf8:	dfc00615 	stw	ra,24(sp)
1000ebfc:	df000515 	stw	fp,20(sp)
1000ec00:	df000504 	addi	fp,sp,20
1000ec04:	e13ffe15 	stw	r4,-8(fp)
1000ec08:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
1000ec0c:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
1000ec10:	e0bffe17 	ldw	r2,-8(fp)
1000ec14:	108007cc 	andi	r2,r2,31
1000ec18:	1000931e 	bne	r2,zero,1000ee68 <Write_File_Record_At_Offset+0x274>
1000ec1c:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
1000ec20:	10009126 	beq	r2,zero,1000ee68 <Write_File_Record_At_Offset+0x274>
1000ec24:	d0a6fb17 	ldw	r2,-25620(gp)
1000ec28:	10008f26 	beq	r2,zero,1000ee68 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
1000ec2c:	e03ffc15 	stw	zero,-16(fp)
1000ec30:	00001f06 	br	1000ecb0 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
1000ec34:	e0bffc17 	ldw	r2,-16(fp)
1000ec38:	10800044 	addi	r2,r2,1
1000ec3c:	e0ffff17 	ldw	r3,-4(fp)
1000ec40:	1885883a 	add	r2,r3,r2
1000ec44:	10800003 	ldbu	r2,0(r2)
1000ec48:	10803fcc 	andi	r2,r2,255
1000ec4c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
1000ec50:	e0bffd0f 	ldh	r2,-12(fp)
1000ec54:	1004923a 	slli	r2,r2,8
1000ec58:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
1000ec5c:	e0ffff17 	ldw	r3,-4(fp)
1000ec60:	e0bffc17 	ldw	r2,-16(fp)
1000ec64:	1885883a 	add	r2,r3,r2
1000ec68:	10800003 	ldbu	r2,0(r2)
1000ec6c:	10c03fcc 	andi	r3,r2,255
1000ec70:	e0bffd0b 	ldhu	r2,-12(fp)
1000ec74:	1884b03a 	or	r2,r3,r2
1000ec78:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
1000ec7c:	e0fffe17 	ldw	r3,-8(fp)
1000ec80:	e0bffc17 	ldw	r2,-16(fp)
1000ec84:	1885883a 	add	r2,r3,r2
1000ec88:	1007883a 	mov	r3,r2
1000ec8c:	d0a70417 	ldw	r2,-25584(gp)
1000ec90:	10800a17 	ldw	r2,40(r2)
1000ec94:	1885883a 	add	r2,r3,r2
1000ec98:	1007883a 	mov	r3,r2
1000ec9c:	e0bffd0f 	ldh	r2,-12(fp)
1000eca0:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
1000eca4:	e0bffc17 	ldw	r2,-16(fp)
1000eca8:	10800084 	addi	r2,r2,2
1000ecac:	e0bffc15 	stw	r2,-16(fp)
1000ecb0:	e0bffc17 	ldw	r2,-16(fp)
1000ecb4:	10800210 	cmplti	r2,r2,8
1000ecb8:	103fde1e 	bne	r2,zero,1000ec34 <__alt_data_end+0xf800ec34>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
1000ecbc:	e03ffc15 	stw	zero,-16(fp)
1000ecc0:	00001306 	br	1000ed10 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
1000ecc4:	e0fffe17 	ldw	r3,-8(fp)
1000ecc8:	e0bffc17 	ldw	r2,-16(fp)
1000eccc:	1885883a 	add	r2,r3,r2
1000ecd0:	1007883a 	mov	r3,r2
1000ecd4:	d0a70417 	ldw	r2,-25584(gp)
1000ecd8:	10800a17 	ldw	r2,40(r2)
1000ecdc:	1885883a 	add	r2,r3,r2
1000ece0:	10800204 	addi	r2,r2,8
1000ece4:	1009883a 	mov	r4,r2
1000ece8:	e0ffff17 	ldw	r3,-4(fp)
1000ecec:	e0bffc17 	ldw	r2,-16(fp)
1000ecf0:	1885883a 	add	r2,r3,r2
1000ecf4:	10800204 	addi	r2,r2,8
1000ecf8:	10800003 	ldbu	r2,0(r2)
1000ecfc:	10803fcc 	andi	r2,r2,255
1000ed00:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
1000ed04:	e0bffc17 	ldw	r2,-16(fp)
1000ed08:	10800044 	addi	r2,r2,1
1000ed0c:	e0bffc15 	stw	r2,-16(fp)
1000ed10:	e0bffc17 	ldw	r2,-16(fp)
1000ed14:	108000d0 	cmplti	r2,r2,3
1000ed18:	103fea1e 	bne	r2,zero,1000ecc4 <__alt_data_end+0xf800ecc4>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
1000ed1c:	d0a70417 	ldw	r2,-25584(gp)
1000ed20:	10c00a17 	ldw	r3,40(r2)
1000ed24:	e0bffe17 	ldw	r2,-8(fp)
1000ed28:	1885883a 	add	r2,r3,r2
1000ed2c:	108002c4 	addi	r2,r2,11
1000ed30:	1007883a 	mov	r3,r2
1000ed34:	e0bfff17 	ldw	r2,-4(fp)
1000ed38:	108002c3 	ldbu	r2,11(r2)
1000ed3c:	10803fcc 	andi	r2,r2,255
1000ed40:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
1000ed44:	d0a70417 	ldw	r2,-25584(gp)
1000ed48:	10c00a17 	ldw	r3,40(r2)
1000ed4c:	e0bffe17 	ldw	r2,-8(fp)
1000ed50:	1885883a 	add	r2,r3,r2
1000ed54:	10800384 	addi	r2,r2,14
1000ed58:	1007883a 	mov	r3,r2
1000ed5c:	e0bfff17 	ldw	r2,-4(fp)
1000ed60:	1080030b 	ldhu	r2,12(r2)
1000ed64:	10bfffcc 	andi	r2,r2,65535
1000ed68:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
1000ed6c:	d0a70417 	ldw	r2,-25584(gp)
1000ed70:	10c00a17 	ldw	r3,40(r2)
1000ed74:	e0bffe17 	ldw	r2,-8(fp)
1000ed78:	1885883a 	add	r2,r3,r2
1000ed7c:	10800404 	addi	r2,r2,16
1000ed80:	1007883a 	mov	r3,r2
1000ed84:	e0bfff17 	ldw	r2,-4(fp)
1000ed88:	1080038b 	ldhu	r2,14(r2)
1000ed8c:	10bfffcc 	andi	r2,r2,65535
1000ed90:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
1000ed94:	d0a70417 	ldw	r2,-25584(gp)
1000ed98:	10c00a17 	ldw	r3,40(r2)
1000ed9c:	e0bffe17 	ldw	r2,-8(fp)
1000eda0:	1885883a 	add	r2,r3,r2
1000eda4:	10800484 	addi	r2,r2,18
1000eda8:	1007883a 	mov	r3,r2
1000edac:	e0bfff17 	ldw	r2,-4(fp)
1000edb0:	1080040b 	ldhu	r2,16(r2)
1000edb4:	10bfffcc 	andi	r2,r2,65535
1000edb8:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
1000edbc:	d0a70417 	ldw	r2,-25584(gp)
1000edc0:	10c00a17 	ldw	r3,40(r2)
1000edc4:	e0bffe17 	ldw	r2,-8(fp)
1000edc8:	1885883a 	add	r2,r3,r2
1000edcc:	10800584 	addi	r2,r2,22
1000edd0:	1007883a 	mov	r3,r2
1000edd4:	e0bfff17 	ldw	r2,-4(fp)
1000edd8:	1080048b 	ldhu	r2,18(r2)
1000eddc:	10bfffcc 	andi	r2,r2,65535
1000ede0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
1000ede4:	d0a70417 	ldw	r2,-25584(gp)
1000ede8:	10c00a17 	ldw	r3,40(r2)
1000edec:	e0bffe17 	ldw	r2,-8(fp)
1000edf0:	1885883a 	add	r2,r3,r2
1000edf4:	10800604 	addi	r2,r2,24
1000edf8:	1007883a 	mov	r3,r2
1000edfc:	e0bfff17 	ldw	r2,-4(fp)
1000ee00:	1080050b 	ldhu	r2,20(r2)
1000ee04:	10bfffcc 	andi	r2,r2,65535
1000ee08:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
1000ee0c:	d0a70417 	ldw	r2,-25584(gp)
1000ee10:	10c00a17 	ldw	r3,40(r2)
1000ee14:	e0bffe17 	ldw	r2,-8(fp)
1000ee18:	1885883a 	add	r2,r3,r2
1000ee1c:	10800684 	addi	r2,r2,26
1000ee20:	1007883a 	mov	r3,r2
1000ee24:	e0bfff17 	ldw	r2,-4(fp)
1000ee28:	1080058b 	ldhu	r2,22(r2)
1000ee2c:	10bfffcc 	andi	r2,r2,65535
1000ee30:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
1000ee34:	d0a70417 	ldw	r2,-25584(gp)
1000ee38:	10c00a17 	ldw	r3,40(r2)
1000ee3c:	e0bffe17 	ldw	r2,-8(fp)
1000ee40:	1885883a 	add	r2,r3,r2
1000ee44:	10800704 	addi	r2,r2,28
1000ee48:	1007883a 	mov	r3,r2
1000ee4c:	e0bfff17 	ldw	r2,-4(fp)
1000ee50:	10800617 	ldw	r2,24(r2)
1000ee54:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
1000ee58:	00800044 	movi	r2,1
1000ee5c:	d0a70515 	stw	r2,-25580(gp)
        result = true;
1000ee60:	00800044 	movi	r2,1
1000ee64:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
1000ee68:	e0bffb17 	ldw	r2,-20(fp)
}
1000ee6c:	e037883a 	mov	sp,fp
1000ee70:	dfc00117 	ldw	ra,4(sp)
1000ee74:	df000017 	ldw	fp,0(sp)
1000ee78:	dec00204 	addi	sp,sp,8
1000ee7c:	f800283a 	ret

1000ee80 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
1000ee80:	defff804 	addi	sp,sp,-32
1000ee84:	dfc00715 	stw	ra,28(sp)
1000ee88:	df000615 	stw	fp,24(sp)
1000ee8c:	dc000515 	stw	r16,20(sp)
1000ee90:	df000604 	addi	fp,sp,24
1000ee94:	e13ffe15 	stw	r4,-8(fp)
	bool result = false;
1000ee98:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
1000ee9c:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
1000eea0:	e17ffe17 	ldw	r5,-8(fp)
1000eea4:	0009883a 	mov	r4,zero
1000eea8:	000e5680 	call	1000e568 <Read_Sector_Data>
1000eeac:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
1000eeb0:	d0a70417 	ldw	r2,-25584(gp)
1000eeb4:	10800a17 	ldw	r2,40(r2)
1000eeb8:	10807f84 	addi	r2,r2,510
1000eebc:	1080002b 	ldhuio	r2,0(r2)
1000eec0:	10bfffcc 	andi	r2,r2,65535
1000eec4:	e0bffd0d 	sth	r2,-12(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
1000eec8:	e0bffd0f 	ldh	r2,-12(fp)
1000eecc:	10ffffcc 	andi	r3,r2,65535
1000eed0:	00aa9554 	movui	r2,43605
1000eed4:	18818a1e 	bne	r3,r2,1000f500 <Check_for_DOS_FAT+0x680>
1000eed8:	e0bffa17 	ldw	r2,-24(fp)
1000eedc:	10018826 	beq	r2,zero,1000f500 <Check_for_DOS_FAT+0x680>
	{
		int num_clusters = 0;
1000eee0:	e03ffc15 	stw	zero,-16(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
1000eee4:	d0a70417 	ldw	r2,-25584(gp)
1000eee8:	10800a17 	ldw	r2,40(r2)
1000eeec:	10800023 	ldbuio	r2,0(r2)
1000eef0:	10803fcc 	andi	r2,r2,255
1000eef4:	1007883a 	mov	r3,r2
1000eef8:	008400b4 	movhi	r2,4098
1000eefc:	10a01304 	addi	r2,r2,-32692
1000ef00:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
1000ef04:	d0a70417 	ldw	r2,-25584(gp)
1000ef08:	10800a17 	ldw	r2,40(r2)
1000ef0c:	10800044 	addi	r2,r2,1
1000ef10:	10800023 	ldbuio	r2,0(r2)
1000ef14:	10803fcc 	andi	r2,r2,255
1000ef18:	1007883a 	mov	r3,r2
1000ef1c:	008400b4 	movhi	r2,4098
1000ef20:	10a01304 	addi	r2,r2,-32692
1000ef24:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
1000ef28:	d0a70417 	ldw	r2,-25584(gp)
1000ef2c:	10800a17 	ldw	r2,40(r2)
1000ef30:	10800084 	addi	r2,r2,2
1000ef34:	10800023 	ldbuio	r2,0(r2)
1000ef38:	10803fcc 	andi	r2,r2,255
1000ef3c:	1007883a 	mov	r3,r2
1000ef40:	008400b4 	movhi	r2,4098
1000ef44:	10a01304 	addi	r2,r2,-32692
1000ef48:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
1000ef4c:	e03ffb15 	stw	zero,-20(fp)
1000ef50:	00001106 	br	1000ef98 <Check_for_DOS_FAT+0x118>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
1000ef54:	d0a70417 	ldw	r2,-25584(gp)
1000ef58:	10c00a17 	ldw	r3,40(r2)
1000ef5c:	e0bffb17 	ldw	r2,-20(fp)
1000ef60:	1885883a 	add	r2,r3,r2
1000ef64:	108000c4 	addi	r2,r2,3
1000ef68:	10800023 	ldbuio	r2,0(r2)
1000ef6c:	10803fcc 	andi	r2,r2,255
1000ef70:	1009883a 	mov	r4,r2
1000ef74:	008400b4 	movhi	r2,4098
1000ef78:	10a01304 	addi	r2,r2,-32692
1000ef7c:	e0fffb17 	ldw	r3,-20(fp)
1000ef80:	10c5883a 	add	r2,r2,r3
1000ef84:	108000c4 	addi	r2,r2,3
1000ef88:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
1000ef8c:	e0bffb17 	ldw	r2,-20(fp)
1000ef90:	10800044 	addi	r2,r2,1
1000ef94:	e0bffb15 	stw	r2,-20(fp)
1000ef98:	e0bffb17 	ldw	r2,-20(fp)
1000ef9c:	10800210 	cmplti	r2,r2,8
1000efa0:	103fec1e 	bne	r2,zero,1000ef54 <__alt_data_end+0xf800ef54>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
1000efa4:	d0a70417 	ldw	r2,-25584(gp)
1000efa8:	10800a17 	ldw	r2,40(r2)
1000efac:	10800304 	addi	r2,r2,12
1000efb0:	10800023 	ldbuio	r2,0(r2)
1000efb4:	10803fcc 	andi	r2,r2,255
1000efb8:	1004923a 	slli	r2,r2,8
1000efbc:	1007883a 	mov	r3,r2
1000efc0:	d0a70417 	ldw	r2,-25584(gp)
1000efc4:	10800a17 	ldw	r2,40(r2)
1000efc8:	108002c4 	addi	r2,r2,11
1000efcc:	10800023 	ldbuio	r2,0(r2)
1000efd0:	10803fcc 	andi	r2,r2,255
1000efd4:	10803fcc 	andi	r2,r2,255
1000efd8:	1080201c 	xori	r2,r2,128
1000efdc:	10bfe004 	addi	r2,r2,-128
1000efe0:	1884b03a 	or	r2,r3,r2
1000efe4:	1007883a 	mov	r3,r2
1000efe8:	008400b4 	movhi	r2,4098
1000efec:	10a01304 	addi	r2,r2,-32692
1000eff0:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
1000eff4:	d0a70417 	ldw	r2,-25584(gp)
1000eff8:	10800a17 	ldw	r2,40(r2)
1000effc:	10800344 	addi	r2,r2,13
1000f000:	10800023 	ldbuio	r2,0(r2)
1000f004:	10803fcc 	andi	r2,r2,255
1000f008:	1007883a 	mov	r3,r2
1000f00c:	008400b4 	movhi	r2,4098
1000f010:	10a01304 	addi	r2,r2,-32692
1000f014:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
1000f018:	d0a70417 	ldw	r2,-25584(gp)
1000f01c:	10800a17 	ldw	r2,40(r2)
1000f020:	10800384 	addi	r2,r2,14
1000f024:	1080002b 	ldhuio	r2,0(r2)
1000f028:	10bfffcc 	andi	r2,r2,65535
1000f02c:	1007883a 	mov	r3,r2
1000f030:	008400b4 	movhi	r2,4098
1000f034:	10a01304 	addi	r2,r2,-32692
1000f038:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
1000f03c:	d0a70417 	ldw	r2,-25584(gp)
1000f040:	10800a17 	ldw	r2,40(r2)
1000f044:	10800404 	addi	r2,r2,16
1000f048:	10800023 	ldbuio	r2,0(r2)
1000f04c:	10803fcc 	andi	r2,r2,255
1000f050:	1007883a 	mov	r3,r2
1000f054:	008400b4 	movhi	r2,4098
1000f058:	10a01304 	addi	r2,r2,-32692
1000f05c:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
1000f060:	d0a70417 	ldw	r2,-25584(gp)
1000f064:	10800a17 	ldw	r2,40(r2)
1000f068:	10800484 	addi	r2,r2,18
1000f06c:	10800023 	ldbuio	r2,0(r2)
1000f070:	10803fcc 	andi	r2,r2,255
1000f074:	1004923a 	slli	r2,r2,8
1000f078:	1007883a 	mov	r3,r2
1000f07c:	d0a70417 	ldw	r2,-25584(gp)
1000f080:	10800a17 	ldw	r2,40(r2)
1000f084:	10800444 	addi	r2,r2,17
1000f088:	10800023 	ldbuio	r2,0(r2)
1000f08c:	10803fcc 	andi	r2,r2,255
1000f090:	10803fcc 	andi	r2,r2,255
1000f094:	1884b03a 	or	r2,r3,r2
1000f098:	1007883a 	mov	r3,r2
1000f09c:	008400b4 	movhi	r2,4098
1000f0a0:	10a01304 	addi	r2,r2,-32692
1000f0a4:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
1000f0a8:	d0a70417 	ldw	r2,-25584(gp)
1000f0ac:	10800a17 	ldw	r2,40(r2)
1000f0b0:	10800504 	addi	r2,r2,20
1000f0b4:	10800023 	ldbuio	r2,0(r2)
1000f0b8:	10803fcc 	andi	r2,r2,255
1000f0bc:	1004923a 	slli	r2,r2,8
1000f0c0:	1007883a 	mov	r3,r2
1000f0c4:	d0a70417 	ldw	r2,-25584(gp)
1000f0c8:	10800a17 	ldw	r2,40(r2)
1000f0cc:	108004c4 	addi	r2,r2,19
1000f0d0:	10800023 	ldbuio	r2,0(r2)
1000f0d4:	10803fcc 	andi	r2,r2,255
1000f0d8:	10803fcc 	andi	r2,r2,255
1000f0dc:	1884b03a 	or	r2,r3,r2
1000f0e0:	1007883a 	mov	r3,r2
1000f0e4:	008400b4 	movhi	r2,4098
1000f0e8:	10a01304 	addi	r2,r2,-32692
1000f0ec:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
1000f0f0:	d0a70417 	ldw	r2,-25584(gp)
1000f0f4:	10800a17 	ldw	r2,40(r2)
1000f0f8:	10800544 	addi	r2,r2,21
1000f0fc:	10800023 	ldbuio	r2,0(r2)
1000f100:	10803fcc 	andi	r2,r2,255
1000f104:	1007883a 	mov	r3,r2
1000f108:	008400b4 	movhi	r2,4098
1000f10c:	10a01304 	addi	r2,r2,-32692
1000f110:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
1000f114:	d0a70417 	ldw	r2,-25584(gp)
1000f118:	10800a17 	ldw	r2,40(r2)
1000f11c:	10800584 	addi	r2,r2,22
1000f120:	1080002b 	ldhuio	r2,0(r2)
1000f124:	10bfffcc 	andi	r2,r2,65535
1000f128:	1007883a 	mov	r3,r2
1000f12c:	008400b4 	movhi	r2,4098
1000f130:	10a01304 	addi	r2,r2,-32692
1000f134:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
1000f138:	d0a70417 	ldw	r2,-25584(gp)
1000f13c:	10800a17 	ldw	r2,40(r2)
1000f140:	10800604 	addi	r2,r2,24
1000f144:	1080002b 	ldhuio	r2,0(r2)
1000f148:	10bfffcc 	andi	r2,r2,65535
1000f14c:	1007883a 	mov	r3,r2
1000f150:	008400b4 	movhi	r2,4098
1000f154:	10a01304 	addi	r2,r2,-32692
1000f158:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
1000f15c:	d0a70417 	ldw	r2,-25584(gp)
1000f160:	10800a17 	ldw	r2,40(r2)
1000f164:	10800684 	addi	r2,r2,26
1000f168:	1080002b 	ldhuio	r2,0(r2)
1000f16c:	10bfffcc 	andi	r2,r2,65535
1000f170:	1007883a 	mov	r3,r2
1000f174:	008400b4 	movhi	r2,4098
1000f178:	10a01304 	addi	r2,r2,-32692
1000f17c:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
1000f180:	d0a70417 	ldw	r2,-25584(gp)
1000f184:	10800a17 	ldw	r2,40(r2)
1000f188:	10800704 	addi	r2,r2,28
1000f18c:	10800037 	ldwio	r2,0(r2)
1000f190:	1007883a 	mov	r3,r2
1000f194:	008400b4 	movhi	r2,4098
1000f198:	10a01304 	addi	r2,r2,-32692
1000f19c:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
1000f1a0:	d0a70417 	ldw	r2,-25584(gp)
1000f1a4:	10800a17 	ldw	r2,40(r2)
1000f1a8:	10800804 	addi	r2,r2,32
1000f1ac:	10800037 	ldwio	r2,0(r2)
1000f1b0:	1007883a 	mov	r3,r2
1000f1b4:	008400b4 	movhi	r2,4098
1000f1b8:	10a01304 	addi	r2,r2,-32692
1000f1bc:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
1000f1c0:	d0a70417 	ldw	r2,-25584(gp)
1000f1c4:	10800a17 	ldw	r2,40(r2)
1000f1c8:	10800904 	addi	r2,r2,36
1000f1cc:	10800023 	ldbuio	r2,0(r2)
1000f1d0:	10803fcc 	andi	r2,r2,255
1000f1d4:	1007883a 	mov	r3,r2
1000f1d8:	008400b4 	movhi	r2,4098
1000f1dc:	10a01304 	addi	r2,r2,-32692
1000f1e0:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
1000f1e4:	d0a70417 	ldw	r2,-25584(gp)
1000f1e8:	10800a17 	ldw	r2,40(r2)
1000f1ec:	10800944 	addi	r2,r2,37
1000f1f0:	10800023 	ldbuio	r2,0(r2)
1000f1f4:	10803fcc 	andi	r2,r2,255
1000f1f8:	1007883a 	mov	r3,r2
1000f1fc:	008400b4 	movhi	r2,4098
1000f200:	10a01304 	addi	r2,r2,-32692
1000f204:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
1000f208:	d0a70417 	ldw	r2,-25584(gp)
1000f20c:	10800a17 	ldw	r2,40(r2)
1000f210:	10800984 	addi	r2,r2,38
1000f214:	10800023 	ldbuio	r2,0(r2)
1000f218:	10803fcc 	andi	r2,r2,255
1000f21c:	1007883a 	mov	r3,r2
1000f220:	008400b4 	movhi	r2,4098
1000f224:	10a01304 	addi	r2,r2,-32692
1000f228:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
1000f22c:	008400b4 	movhi	r2,4098
1000f230:	10a01304 	addi	r2,r2,-32692
1000f234:	1080040b 	ldhu	r2,16(r2)
1000f238:	10ffffcc 	andi	r3,r2,65535
1000f23c:	008400b4 	movhi	r2,4098
1000f240:	10a01304 	addi	r2,r2,-32692
1000f244:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
1000f248:	008400b4 	movhi	r2,4098
1000f24c:	10a01304 	addi	r2,r2,-32692
1000f250:	10c01117 	ldw	r3,68(r2)
1000f254:	008400b4 	movhi	r2,4098
1000f258:	10a01304 	addi	r2,r2,-32692
1000f25c:	1080068b 	ldhu	r2,26(r2)
1000f260:	10bfffcc 	andi	r2,r2,65535
1000f264:	1887883a 	add	r3,r3,r2
1000f268:	008400b4 	movhi	r2,4098
1000f26c:	10a01304 	addi	r2,r2,-32692
1000f270:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
1000f274:	008400b4 	movhi	r2,4098
1000f278:	10a01304 	addi	r2,r2,-32692
1000f27c:	10c01217 	ldw	r3,72(r2)
1000f280:	008400b4 	movhi	r2,4098
1000f284:	10a01304 	addi	r2,r2,-32692
1000f288:	1080068b 	ldhu	r2,26(r2)
1000f28c:	10bfffcc 	andi	r2,r2,65535
1000f290:	1887883a 	add	r3,r3,r2
1000f294:	008400b4 	movhi	r2,4098
1000f298:	10a01304 	addi	r2,r2,-32692
1000f29c:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
1000f2a0:	008400b4 	movhi	r2,4098
1000f2a4:	10a01304 	addi	r2,r2,-32692
1000f2a8:	14001317 	ldw	r16,76(r2)
1000f2ac:	008400b4 	movhi	r2,4098
1000f2b0:	10a01304 	addi	r2,r2,-32692
1000f2b4:	1080050b 	ldhu	r2,20(r2)
1000f2b8:	10bfffcc 	andi	r2,r2,65535
1000f2bc:	1006917a 	slli	r3,r2,5
1000f2c0:	008400b4 	movhi	r2,4098
1000f2c4:	10a01304 	addi	r2,r2,-32692
1000f2c8:	1080030b 	ldhu	r2,12(r2)
1000f2cc:	10bfffcc 	andi	r2,r2,65535
1000f2d0:	100b883a 	mov	r5,r2
1000f2d4:	1809883a 	mov	r4,r3
1000f2d8:	000aed40 	call	1000aed4 <__divsi3>
1000f2dc:	8087883a 	add	r3,r16,r2
1000f2e0:	008400b4 	movhi	r2,4098
1000f2e4:	10a01304 	addi	r2,r2,-32692
1000f2e8:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
1000f2ec:	008400b4 	movhi	r2,4098
1000f2f0:	10a01304 	addi	r2,r2,-32692
1000f2f4:	1080058b 	ldhu	r2,22(r2)
1000f2f8:	10bfffcc 	andi	r2,r2,65535
1000f2fc:	10000d26 	beq	r2,zero,1000f334 <Check_for_DOS_FAT+0x4b4>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
1000f300:	008400b4 	movhi	r2,4098
1000f304:	10a01304 	addi	r2,r2,-32692
1000f308:	1080058b 	ldhu	r2,22(r2)
1000f30c:	10ffffcc 	andi	r3,r2,65535
1000f310:	008400b4 	movhi	r2,4098
1000f314:	10a01304 	addi	r2,r2,-32692
1000f318:	10800383 	ldbu	r2,14(r2)
1000f31c:	10803fcc 	andi	r2,r2,255
1000f320:	100b883a 	mov	r5,r2
1000f324:	1809883a 	mov	r4,r3
1000f328:	000aed40 	call	1000aed4 <__divsi3>
1000f32c:	e0bffc15 	stw	r2,-16(fp)
1000f330:	00000b06 	br	1000f360 <Check_for_DOS_FAT+0x4e0>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
1000f334:	008400b4 	movhi	r2,4098
1000f338:	10a01304 	addi	r2,r2,-32692
1000f33c:	10c00917 	ldw	r3,36(r2)
1000f340:	008400b4 	movhi	r2,4098
1000f344:	10a01304 	addi	r2,r2,-32692
1000f348:	10800383 	ldbu	r2,14(r2)
1000f34c:	10803fcc 	andi	r2,r2,255
1000f350:	100b883a 	mov	r5,r2
1000f354:	1809883a 	mov	r4,r3
1000f358:	000afcc0 	call	1000afcc <__udivsi3>
1000f35c:	e0bffc15 	stw	r2,-16(fp)
		}
		if (num_clusters < 4087)
1000f360:	e0bffc17 	ldw	r2,-16(fp)
1000f364:	1083fdc8 	cmpgei	r2,r2,4087
1000f368:	1000051e 	bne	r2,zero,1000f380 <Check_for_DOS_FAT+0x500>
		{
			boot_sector_data.bits_for_cluster_index = 12;
1000f36c:	008400b4 	movhi	r2,4098
1000f370:	10a01304 	addi	r2,r2,-32692
1000f374:	00c00304 	movi	r3,12
1000f378:	10c01085 	stb	r3,66(r2)
1000f37c:	00000c06 	br	1000f3b0 <Check_for_DOS_FAT+0x530>
		}
		else if (num_clusters <= 65517)
1000f380:	e0bffc17 	ldw	r2,-16(fp)
1000f384:	00fffb54 	movui	r3,65517
1000f388:	18800516 	blt	r3,r2,1000f3a0 <Check_for_DOS_FAT+0x520>
		{
			boot_sector_data.bits_for_cluster_index = 16;
1000f38c:	008400b4 	movhi	r2,4098
1000f390:	10a01304 	addi	r2,r2,-32692
1000f394:	00c00404 	movi	r3,16
1000f398:	10c01085 	stb	r3,66(r2)
1000f39c:	00000406 	br	1000f3b0 <Check_for_DOS_FAT+0x530>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
1000f3a0:	008400b4 	movhi	r2,4098
1000f3a4:	10a01304 	addi	r2,r2,-32692
1000f3a8:	00c00804 	movi	r3,32
1000f3ac:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
1000f3b0:	e03ffb15 	stw	zero,-20(fp)
1000f3b4:	00001106 	br	1000f3fc <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
1000f3b8:	d0a70417 	ldw	r2,-25584(gp)
1000f3bc:	10c00a17 	ldw	r3,40(r2)
1000f3c0:	e0bffb17 	ldw	r2,-20(fp)
1000f3c4:	1885883a 	add	r2,r3,r2
1000f3c8:	108009c4 	addi	r2,r2,39
1000f3cc:	10800023 	ldbuio	r2,0(r2)
1000f3d0:	10803fcc 	andi	r2,r2,255
1000f3d4:	1009883a 	mov	r4,r2
1000f3d8:	008400b4 	movhi	r2,4098
1000f3dc:	10a01304 	addi	r2,r2,-32692
1000f3e0:	e0fffb17 	ldw	r3,-20(fp)
1000f3e4:	10c5883a 	add	r2,r2,r3
1000f3e8:	10800ac4 	addi	r2,r2,43
1000f3ec:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
1000f3f0:	e0bffb17 	ldw	r2,-20(fp)
1000f3f4:	10800044 	addi	r2,r2,1
1000f3f8:	e0bffb15 	stw	r2,-20(fp)
1000f3fc:	e0bffb17 	ldw	r2,-20(fp)
1000f400:	10800110 	cmplti	r2,r2,4
1000f404:	103fec1e 	bne	r2,zero,1000f3b8 <__alt_data_end+0xf800f3b8>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
1000f408:	e03ffb15 	stw	zero,-20(fp)
1000f40c:	00001106 	br	1000f454 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
1000f410:	d0a70417 	ldw	r2,-25584(gp)
1000f414:	10c00a17 	ldw	r3,40(r2)
1000f418:	e0bffb17 	ldw	r2,-20(fp)
1000f41c:	1885883a 	add	r2,r3,r2
1000f420:	10800ac4 	addi	r2,r2,43
1000f424:	10800023 	ldbuio	r2,0(r2)
1000f428:	10803fcc 	andi	r2,r2,255
1000f42c:	1009883a 	mov	r4,r2
1000f430:	008400b4 	movhi	r2,4098
1000f434:	10a01304 	addi	r2,r2,-32692
1000f438:	e0fffb17 	ldw	r3,-20(fp)
1000f43c:	10c5883a 	add	r2,r2,r3
1000f440:	10800bc4 	addi	r2,r2,47
1000f444:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
1000f448:	e0bffb17 	ldw	r2,-20(fp)
1000f44c:	10800044 	addi	r2,r2,1
1000f450:	e0bffb15 	stw	r2,-20(fp)
1000f454:	e0bffb17 	ldw	r2,-20(fp)
1000f458:	108002d0 	cmplti	r2,r2,11
1000f45c:	103fec1e 	bne	r2,zero,1000f410 <__alt_data_end+0xf800f410>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
1000f460:	e03ffb15 	stw	zero,-20(fp)
1000f464:	00001106 	br	1000f4ac <Check_for_DOS_FAT+0x62c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
1000f468:	d0a70417 	ldw	r2,-25584(gp)
1000f46c:	10c00a17 	ldw	r3,40(r2)
1000f470:	e0bffb17 	ldw	r2,-20(fp)
1000f474:	1885883a 	add	r2,r3,r2
1000f478:	10800d84 	addi	r2,r2,54
1000f47c:	10800023 	ldbuio	r2,0(r2)
1000f480:	10803fcc 	andi	r2,r2,255
1000f484:	1009883a 	mov	r4,r2
1000f488:	008400b4 	movhi	r2,4098
1000f48c:	10a01304 	addi	r2,r2,-32692
1000f490:	e0fffb17 	ldw	r3,-20(fp)
1000f494:	10c5883a 	add	r2,r2,r3
1000f498:	10800e84 	addi	r2,r2,58
1000f49c:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
1000f4a0:	e0bffb17 	ldw	r2,-20(fp)
1000f4a4:	10800044 	addi	r2,r2,1
1000f4a8:	e0bffb15 	stw	r2,-20(fp)
1000f4ac:	e0bffb17 	ldw	r2,-20(fp)
1000f4b0:	10800210 	cmplti	r2,r2,8
1000f4b4:	103fec1e 	bne	r2,zero,1000f468 <__alt_data_end+0xf800f468>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
1000f4b8:	e03ffb15 	stw	zero,-20(fp)
1000f4bc:	00000a06 	br	1000f4e8 <Check_for_DOS_FAT+0x668>
		{
			active_files[counter].in_use = false;
1000f4c0:	008400b4 	movhi	r2,4098
1000f4c4:	10a02804 	addi	r2,r2,-32608
1000f4c8:	e0fffb17 	ldw	r3,-20(fp)
1000f4cc:	180691ba 	slli	r3,r3,6
1000f4d0:	10c5883a 	add	r2,r2,r3
1000f4d4:	10800f04 	addi	r2,r2,60
1000f4d8:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
1000f4dc:	e0bffb17 	ldw	r2,-20(fp)
1000f4e0:	10800044 	addi	r2,r2,1
1000f4e4:	e0bffb15 	stw	r2,-20(fp)
1000f4e8:	e0bffb17 	ldw	r2,-20(fp)
1000f4ec:	10800510 	cmplti	r2,r2,20
1000f4f0:	103ff31e 	bne	r2,zero,1000f4c0 <__alt_data_end+0xf800f4c0>
		{
			active_files[counter].in_use = false;
		}
		result = true;
1000f4f4:	00800044 	movi	r2,1
1000f4f8:	e0bffa15 	stw	r2,-24(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
1000f4fc:	00000106 	br	1000f504 <Check_for_DOS_FAT+0x684>
		}
		result = true;
	}
    else
    {
        result = false;
1000f500:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
1000f504:	e0bffa17 	ldw	r2,-24(fp)
}
1000f508:	e6ffff04 	addi	sp,fp,-4
1000f50c:	dfc00217 	ldw	ra,8(sp)
1000f510:	df000117 	ldw	fp,4(sp)
1000f514:	dc000017 	ldw	r16,0(sp)
1000f518:	dec00304 	addi	sp,sp,12
1000f51c:	f800283a 	ret

1000f520 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
1000f520:	defffc04 	addi	sp,sp,-16
1000f524:	dfc00315 	stw	ra,12(sp)
1000f528:	df000215 	stw	fp,8(sp)
1000f52c:	df000204 	addi	fp,sp,8
	bool result = false;
1000f530:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
1000f534:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
1000f538:	10002e26 	beq	r2,zero,1000f5f4 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
1000f53c:	d0a6fe17 	ldw	r2,-25608(gp)
1000f540:	1080000b 	ldhu	r2,0(r2)
1000f544:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
1000f548:	d0270215 	stw	zero,-25592(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
1000f54c:	d0270315 	stw	zero,-25588(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
1000f550:	e0bfff0f 	ldh	r2,-4(fp)
1000f554:	10002716 	blt	r2,zero,1000f5f4 <Look_for_FAT16+0xd4>
1000f558:	e0bfff0b 	ldhu	r2,-4(fp)
1000f55c:	10bfffcc 	andi	r2,r2,65535
1000f560:	1083000c 	andi	r2,r2,3072
1000f564:	10830020 	cmpeqi	r2,r2,3072
1000f568:	1000221e 	bne	r2,zero,1000f5f4 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
1000f56c:	e0bfff0b 	ldhu	r2,-4(fp)
1000f570:	10bfffcc 	andi	r2,r2,65535
1000f574:	1083000c 	andi	r2,r2,3072
1000f578:	10810018 	cmpnei	r2,r2,1024
1000f57c:	1000031e 	bne	r2,zero,1000f58c <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
1000f580:	0009883a 	mov	r4,zero
1000f584:	000ee800 	call	1000ee80 <Check_for_DOS_FAT>
1000f588:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
1000f58c:	e0bfff0b 	ldhu	r2,-4(fp)
1000f590:	10bfffcc 	andi	r2,r2,65535
1000f594:	1083000c 	andi	r2,r2,3072
1000f598:	1000061e 	bne	r2,zero,1000f5b4 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
1000f59c:	000e7d40 	call	1000e7d4 <Check_for_Master_Boot_Record>
1000f5a0:	10000426 	beq	r2,zero,1000f5b4 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
1000f5a4:	d0a70217 	ldw	r2,-25592(gp)
1000f5a8:	1009883a 	mov	r4,r2
1000f5ac:	000ee800 	call	1000ee80 <Check_for_DOS_FAT>
1000f5b0:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
1000f5b4:	e0bffe17 	ldw	r2,-8(fp)
1000f5b8:	10800058 	cmpnei	r2,r2,1
1000f5bc:	10000d1e 	bne	r2,zero,1000f5f4 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
1000f5c0:	008400b4 	movhi	r2,4098
1000f5c4:	10a01304 	addi	r2,r2,-32692
1000f5c8:	10801083 	ldbu	r2,66(r2)
1000f5cc:	10803fcc 	andi	r2,r2,255
1000f5d0:	10800420 	cmpeqi	r2,r2,16
1000f5d4:	1000021e 	bne	r2,zero,1000f5e0 <Look_for_FAT16+0xc0>
				{
					result = false;
1000f5d8:	e03ffe15 	stw	zero,-8(fp)
1000f5dc:	00000506 	br	1000f5f4 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
1000f5e0:	008400b4 	movhi	r2,4098
1000f5e4:	10a01304 	addi	r2,r2,-32692
1000f5e8:	1080058b 	ldhu	r2,22(r2)
1000f5ec:	10bfffcc 	andi	r2,r2,65535
1000f5f0:	d0a70315 	stw	r2,-25588(gp)
				}
			}
		}
	}
	return result;
1000f5f4:	e0bffe17 	ldw	r2,-8(fp)
}
1000f5f8:	e037883a 	mov	sp,fp
1000f5fc:	dfc00117 	ldw	ra,4(sp)
1000f600:	df000017 	ldw	fp,0(sp)
1000f604:	dec00204 	addi	sp,sp,8
1000f608:	f800283a 	ret

1000f60c <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
1000f60c:	defffb04 	addi	sp,sp,-20
1000f610:	dfc00415 	stw	ra,16(sp)
1000f614:	df000315 	stw	fp,12(sp)
1000f618:	df000304 	addi	fp,sp,12
1000f61c:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
1000f620:	e13fff17 	ldw	r4,-4(fp)
1000f624:	0000f100 	call	10000f10 <strlen>
1000f628:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
1000f62c:	e03ffd15 	stw	zero,-12(fp)
1000f630:	00001e06 	br	1000f6ac <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
1000f634:	e0bffd17 	ldw	r2,-12(fp)
1000f638:	e0ffff17 	ldw	r3,-4(fp)
1000f63c:	1885883a 	add	r2,r3,r2
1000f640:	10800003 	ldbu	r2,0(r2)
1000f644:	10803fcc 	andi	r2,r2,255
1000f648:	1080201c 	xori	r2,r2,128
1000f64c:	10bfe004 	addi	r2,r2,-128
1000f650:	10801850 	cmplti	r2,r2,97
1000f654:	1000121e 	bne	r2,zero,1000f6a0 <filename_to_upper_case+0x94>
1000f658:	e0bffd17 	ldw	r2,-12(fp)
1000f65c:	e0ffff17 	ldw	r3,-4(fp)
1000f660:	1885883a 	add	r2,r3,r2
1000f664:	10800003 	ldbu	r2,0(r2)
1000f668:	10803fcc 	andi	r2,r2,255
1000f66c:	1080201c 	xori	r2,r2,128
1000f670:	10bfe004 	addi	r2,r2,-128
1000f674:	10801ec8 	cmpgei	r2,r2,123
1000f678:	1000091e 	bne	r2,zero,1000f6a0 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
1000f67c:	e0bffd17 	ldw	r2,-12(fp)
1000f680:	e0ffff17 	ldw	r3,-4(fp)
1000f684:	1885883a 	add	r2,r3,r2
1000f688:	e0fffd17 	ldw	r3,-12(fp)
1000f68c:	e13fff17 	ldw	r4,-4(fp)
1000f690:	20c7883a 	add	r3,r4,r3
1000f694:	18c00003 	ldbu	r3,0(r3)
1000f698:	18fff804 	addi	r3,r3,-32
1000f69c:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
1000f6a0:	e0bffd17 	ldw	r2,-12(fp)
1000f6a4:	10800044 	addi	r2,r2,1
1000f6a8:	e0bffd15 	stw	r2,-12(fp)
1000f6ac:	e0fffd17 	ldw	r3,-12(fp)
1000f6b0:	e0bffe17 	ldw	r2,-8(fp)
1000f6b4:	18bfdf16 	blt	r3,r2,1000f634 <__alt_data_end+0xf800f634>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
1000f6b8:	0001883a 	nop
1000f6bc:	e037883a 	mov	sp,fp
1000f6c0:	dfc00117 	ldw	ra,4(sp)
1000f6c4:	df000017 	ldw	fp,0(sp)
1000f6c8:	dec00204 	addi	sp,sp,8
1000f6cc:	f800283a 	ret

1000f6d0 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
1000f6d0:	defff804 	addi	sp,sp,-32
1000f6d4:	dfc00715 	stw	ra,28(sp)
1000f6d8:	df000615 	stw	fp,24(sp)
1000f6dc:	df000604 	addi	fp,sp,24
1000f6e0:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
1000f6e4:	e13fff17 	ldw	r4,-4(fp)
1000f6e8:	0000f100 	call	10000f10 <strlen>
1000f6ec:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
1000f6f0:	00bfffc4 	movi	r2,-1
1000f6f4:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
1000f6f8:	00bfffc4 	movi	r2,-1
1000f6fc:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
1000f700:	00800044 	movi	r2,1
1000f704:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
1000f708:	e03ffa15 	stw	zero,-24(fp)
1000f70c:	00006d06 	br	1000f8c4 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
1000f710:	e0bffa17 	ldw	r2,-24(fp)
1000f714:	e0ffff17 	ldw	r3,-4(fp)
1000f718:	1885883a 	add	r2,r3,r2
1000f71c:	10800003 	ldbu	r2,0(r2)
1000f720:	10803fcc 	andi	r2,r2,255
1000f724:	1080201c 	xori	r2,r2,128
1000f728:	10bfe004 	addi	r2,r2,-128
1000f72c:	10800820 	cmpeqi	r2,r2,32
1000f730:	10003e1e 	bne	r2,zero,1000f82c <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
1000f734:	e0bffa17 	ldw	r2,-24(fp)
1000f738:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
1000f73c:	e0bffb17 	ldw	r2,-20(fp)
1000f740:	1880121e 	bne	r3,r2,1000f78c <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
1000f744:	e0bffa17 	ldw	r2,-24(fp)
1000f748:	e0ffff17 	ldw	r3,-4(fp)
1000f74c:	1885883a 	add	r2,r3,r2
1000f750:	10800003 	ldbu	r2,0(r2)
1000f754:	10803fcc 	andi	r2,r2,255
1000f758:	1080201c 	xori	r2,r2,128
1000f75c:	10bfe004 	addi	r2,r2,-128
1000f760:	10801720 	cmpeqi	r2,r2,92
1000f764:	1000311e 	bne	r2,zero,1000f82c <check_file_name_for_FAT16_compliance+0x15c>
1000f768:	e0bffa17 	ldw	r2,-24(fp)
1000f76c:	e0ffff17 	ldw	r3,-4(fp)
1000f770:	1885883a 	add	r2,r3,r2
1000f774:	10800003 	ldbu	r2,0(r2)
1000f778:	10803fcc 	andi	r2,r2,255
1000f77c:	1080201c 	xori	r2,r2,128
1000f780:	10bfe004 	addi	r2,r2,-128
1000f784:	10800be0 	cmpeqi	r2,r2,47
1000f788:	1000281e 	bne	r2,zero,1000f82c <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
1000f78c:	e0fffa17 	ldw	r3,-24(fp)
1000f790:	e0bffc17 	ldw	r2,-16(fp)
1000f794:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
1000f798:	10800258 	cmpnei	r2,r2,9
1000f79c:	1000091e 	bne	r2,zero,1000f7c4 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
1000f7a0:	e0bffa17 	ldw	r2,-24(fp)
1000f7a4:	e0ffff17 	ldw	r3,-4(fp)
1000f7a8:	1885883a 	add	r2,r3,r2
1000f7ac:	10800003 	ldbu	r2,0(r2)
1000f7b0:	10803fcc 	andi	r2,r2,255
1000f7b4:	1080201c 	xori	r2,r2,128
1000f7b8:	10bfe004 	addi	r2,r2,-128
1000f7bc:	10800b98 	cmpnei	r2,r2,46
1000f7c0:	10001a1e 	bne	r2,zero,1000f82c <check_file_name_for_FAT16_compliance+0x15c>
1000f7c4:	e0fffb17 	ldw	r3,-20(fp)
1000f7c8:	e0bffc17 	ldw	r2,-16(fp)
1000f7cc:	18801926 	beq	r3,r2,1000f834 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
1000f7d0:	e0fffa17 	ldw	r3,-24(fp)
1000f7d4:	e0bffc17 	ldw	r2,-16(fp)
1000f7d8:	1885c83a 	sub	r2,r3,r2
1000f7dc:	10800110 	cmplti	r2,r2,4
1000f7e0:	1000141e 	bne	r2,zero,1000f834 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
1000f7e4:	e0bffa17 	ldw	r2,-24(fp)
1000f7e8:	e0ffff17 	ldw	r3,-4(fp)
1000f7ec:	1885883a 	add	r2,r3,r2
1000f7f0:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
1000f7f4:	10803fcc 	andi	r2,r2,255
1000f7f8:	1080201c 	xori	r2,r2,128
1000f7fc:	10bfe004 	addi	r2,r2,-128
1000f800:	10801720 	cmpeqi	r2,r2,92
1000f804:	10000b1e 	bne	r2,zero,1000f834 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
1000f808:	e0bffa17 	ldw	r2,-24(fp)
1000f80c:	e0ffff17 	ldw	r3,-4(fp)
1000f810:	1885883a 	add	r2,r3,r2
1000f814:	10800003 	ldbu	r2,0(r2)
1000f818:	10803fcc 	andi	r2,r2,255
1000f81c:	1080201c 	xori	r2,r2,128
1000f820:	10bfe004 	addi	r2,r2,-128
1000f824:	10800be0 	cmpeqi	r2,r2,47
1000f828:	1000021e 	bne	r2,zero,1000f834 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
1000f82c:	e03ffd15 	stw	zero,-12(fp)
            break;
1000f830:	00002706 	br	1000f8d0 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
1000f834:	e0bffa17 	ldw	r2,-24(fp)
1000f838:	e0ffff17 	ldw	r3,-4(fp)
1000f83c:	1885883a 	add	r2,r3,r2
1000f840:	10800003 	ldbu	r2,0(r2)
1000f844:	10803fcc 	andi	r2,r2,255
1000f848:	1080201c 	xori	r2,r2,128
1000f84c:	10bfe004 	addi	r2,r2,-128
1000f850:	10801720 	cmpeqi	r2,r2,92
1000f854:	1000091e 	bne	r2,zero,1000f87c <check_file_name_for_FAT16_compliance+0x1ac>
1000f858:	e0bffa17 	ldw	r2,-24(fp)
1000f85c:	e0ffff17 	ldw	r3,-4(fp)
1000f860:	1885883a 	add	r2,r3,r2
1000f864:	10800003 	ldbu	r2,0(r2)
1000f868:	10803fcc 	andi	r2,r2,255
1000f86c:	1080201c 	xori	r2,r2,128
1000f870:	10bfe004 	addi	r2,r2,-128
1000f874:	10800bd8 	cmpnei	r2,r2,47
1000f878:	1000041e 	bne	r2,zero,1000f88c <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
1000f87c:	e0bffa17 	ldw	r2,-24(fp)
1000f880:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
1000f884:	e0bffa17 	ldw	r2,-24(fp)
1000f888:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
1000f88c:	e0bffa17 	ldw	r2,-24(fp)
1000f890:	e0ffff17 	ldw	r3,-4(fp)
1000f894:	1885883a 	add	r2,r3,r2
1000f898:	10800003 	ldbu	r2,0(r2)
1000f89c:	10803fcc 	andi	r2,r2,255
1000f8a0:	1080201c 	xori	r2,r2,128
1000f8a4:	10bfe004 	addi	r2,r2,-128
1000f8a8:	10800b98 	cmpnei	r2,r2,46
1000f8ac:	1000021e 	bne	r2,zero,1000f8b8 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
1000f8b0:	e0bffa17 	ldw	r2,-24(fp)
1000f8b4:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
1000f8b8:	e0bffa17 	ldw	r2,-24(fp)
1000f8bc:	10800044 	addi	r2,r2,1
1000f8c0:	e0bffa15 	stw	r2,-24(fp)
1000f8c4:	e0fffa17 	ldw	r3,-24(fp)
1000f8c8:	e0bffe17 	ldw	r2,-8(fp)
1000f8cc:	18bf9016 	blt	r3,r2,1000f710 <__alt_data_end+0xf800f710>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
1000f8d0:	e0bffe17 	ldw	r2,-8(fp)
1000f8d4:	10bfffc4 	addi	r2,r2,-1
1000f8d8:	e0ffff17 	ldw	r3,-4(fp)
1000f8dc:	1885883a 	add	r2,r3,r2
1000f8e0:	10800003 	ldbu	r2,0(r2)
1000f8e4:	10803fcc 	andi	r2,r2,255
1000f8e8:	1080201c 	xori	r2,r2,128
1000f8ec:	10bfe004 	addi	r2,r2,-128
1000f8f0:	10801720 	cmpeqi	r2,r2,92
1000f8f4:	10000a1e 	bne	r2,zero,1000f920 <check_file_name_for_FAT16_compliance+0x250>
1000f8f8:	e0bffe17 	ldw	r2,-8(fp)
1000f8fc:	10bfffc4 	addi	r2,r2,-1
1000f900:	e0ffff17 	ldw	r3,-4(fp)
1000f904:	1885883a 	add	r2,r3,r2
1000f908:	10800003 	ldbu	r2,0(r2)
1000f90c:	10803fcc 	andi	r2,r2,255
1000f910:	1080201c 	xori	r2,r2,128
1000f914:	10bfe004 	addi	r2,r2,-128
1000f918:	10800bd8 	cmpnei	r2,r2,47
1000f91c:	1000011e 	bne	r2,zero,1000f924 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
1000f920:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
1000f924:	e0bffd17 	ldw	r2,-12(fp)
}
1000f928:	e037883a 	mov	sp,fp
1000f92c:	dfc00117 	ldw	ra,4(sp)
1000f930:	df000017 	ldw	fp,0(sp)
1000f934:	dec00204 	addi	sp,sp,8
1000f938:	f800283a 	ret

1000f93c <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
1000f93c:	defffb04 	addi	sp,sp,-20
1000f940:	dfc00415 	stw	ra,16(sp)
1000f944:	df000315 	stw	fp,12(sp)
1000f948:	df000304 	addi	fp,sp,12
1000f94c:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
1000f950:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
1000f954:	e13fff17 	ldw	r4,-4(fp)
1000f958:	0000f100 	call	10000f10 <strlen>
1000f95c:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
1000f960:	e03ffd15 	stw	zero,-12(fp)
1000f964:	00001506 	br	1000f9bc <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
1000f968:	e0bffd17 	ldw	r2,-12(fp)
1000f96c:	e0ffff17 	ldw	r3,-4(fp)
1000f970:	1885883a 	add	r2,r3,r2
1000f974:	10800003 	ldbu	r2,0(r2)
1000f978:	10803fcc 	andi	r2,r2,255
1000f97c:	1080201c 	xori	r2,r2,128
1000f980:	10bfe004 	addi	r2,r2,-128
1000f984:	10801720 	cmpeqi	r2,r2,92
1000f988:	10000f1e 	bne	r2,zero,1000f9c8 <get_dir_divider_location+0x8c>
1000f98c:	e0bffd17 	ldw	r2,-12(fp)
1000f990:	e0ffff17 	ldw	r3,-4(fp)
1000f994:	1885883a 	add	r2,r3,r2
1000f998:	10800003 	ldbu	r2,0(r2)
1000f99c:	10803fcc 	andi	r2,r2,255
1000f9a0:	1080201c 	xori	r2,r2,128
1000f9a4:	10bfe004 	addi	r2,r2,-128
1000f9a8:	10800be0 	cmpeqi	r2,r2,47
1000f9ac:	1000061e 	bne	r2,zero,1000f9c8 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
1000f9b0:	e0bffd17 	ldw	r2,-12(fp)
1000f9b4:	10800044 	addi	r2,r2,1
1000f9b8:	e0bffd15 	stw	r2,-12(fp)
1000f9bc:	e0fffd17 	ldw	r3,-12(fp)
1000f9c0:	e0bffe17 	ldw	r2,-8(fp)
1000f9c4:	18bfe816 	blt	r3,r2,1000f968 <__alt_data_end+0xf800f968>
        {
            break;
        }
    }
    
    if (index == length)
1000f9c8:	e0fffd17 	ldw	r3,-12(fp)
1000f9cc:	e0bffe17 	ldw	r2,-8(fp)
1000f9d0:	1880021e 	bne	r3,r2,1000f9dc <get_dir_divider_location+0xa0>
    {
        index = -1;
1000f9d4:	00bfffc4 	movi	r2,-1
1000f9d8:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
1000f9dc:	e0bffd17 	ldw	r2,-12(fp)
}
1000f9e0:	e037883a 	mov	sp,fp
1000f9e4:	dfc00117 	ldw	ra,4(sp)
1000f9e8:	df000017 	ldw	fp,0(sp)
1000f9ec:	dec00204 	addi	sp,sp,8
1000f9f0:	f800283a 	ret

1000f9f4 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
1000f9f4:	defffa04 	addi	sp,sp,-24
1000f9f8:	df000515 	stw	fp,20(sp)
1000f9fc:	df000504 	addi	fp,sp,20
1000fa00:	e13ffd15 	stw	r4,-12(fp)
1000fa04:	e17ffe15 	stw	r5,-8(fp)
1000fa08:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
1000fa0c:	00800044 	movi	r2,1
1000fa10:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
1000fa14:	e03ffc15 	stw	zero,-16(fp)
1000fa18:	00004606 	br	1000fb34 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
1000fa1c:	e0fffd17 	ldw	r3,-12(fp)
1000fa20:	e0bffc17 	ldw	r2,-16(fp)
1000fa24:	1885883a 	add	r2,r3,r2
1000fa28:	10800003 	ldbu	r2,0(r2)
1000fa2c:	10803fcc 	andi	r2,r2,255
1000fa30:	10801870 	cmpltui	r2,r2,97
1000fa34:	1000101e 	bne	r2,zero,1000fa78 <match_file_record_to_name_ext+0x84>
1000fa38:	e0fffd17 	ldw	r3,-12(fp)
1000fa3c:	e0bffc17 	ldw	r2,-16(fp)
1000fa40:	1885883a 	add	r2,r3,r2
1000fa44:	10800003 	ldbu	r2,0(r2)
1000fa48:	10803fcc 	andi	r2,r2,255
1000fa4c:	10801ee8 	cmpgeui	r2,r2,123
1000fa50:	1000091e 	bne	r2,zero,1000fa78 <match_file_record_to_name_ext+0x84>
1000fa54:	e0fffd17 	ldw	r3,-12(fp)
1000fa58:	e0bffc17 	ldw	r2,-16(fp)
1000fa5c:	1885883a 	add	r2,r3,r2
1000fa60:	10800003 	ldbu	r2,0(r2)
1000fa64:	10bff804 	addi	r2,r2,-32
1000fa68:	10c03fcc 	andi	r3,r2,255
1000fa6c:	18c0201c 	xori	r3,r3,128
1000fa70:	18ffe004 	addi	r3,r3,-128
1000fa74:	00000706 	br	1000fa94 <match_file_record_to_name_ext+0xa0>
1000fa78:	e0fffd17 	ldw	r3,-12(fp)
1000fa7c:	e0bffc17 	ldw	r2,-16(fp)
1000fa80:	1885883a 	add	r2,r3,r2
1000fa84:	10800003 	ldbu	r2,0(r2)
1000fa88:	10c03fcc 	andi	r3,r2,255
1000fa8c:	18c0201c 	xori	r3,r3,128
1000fa90:	18ffe004 	addi	r3,r3,-128
1000fa94:	e0bffc17 	ldw	r2,-16(fp)
1000fa98:	e13ffe17 	ldw	r4,-8(fp)
1000fa9c:	2085883a 	add	r2,r4,r2
1000faa0:	10800003 	ldbu	r2,0(r2)
1000faa4:	10803fcc 	andi	r2,r2,255
1000faa8:	1080201c 	xori	r2,r2,128
1000faac:	10bfe004 	addi	r2,r2,-128
1000fab0:	10801850 	cmplti	r2,r2,97
1000fab4:	1000121e 	bne	r2,zero,1000fb00 <match_file_record_to_name_ext+0x10c>
1000fab8:	e0bffc17 	ldw	r2,-16(fp)
1000fabc:	e13ffe17 	ldw	r4,-8(fp)
1000fac0:	2085883a 	add	r2,r4,r2
1000fac4:	10800003 	ldbu	r2,0(r2)
1000fac8:	10803fcc 	andi	r2,r2,255
1000facc:	1080201c 	xori	r2,r2,128
1000fad0:	10bfe004 	addi	r2,r2,-128
1000fad4:	10801ec8 	cmpgei	r2,r2,123
1000fad8:	1000091e 	bne	r2,zero,1000fb00 <match_file_record_to_name_ext+0x10c>
1000fadc:	e0bffc17 	ldw	r2,-16(fp)
1000fae0:	e13ffe17 	ldw	r4,-8(fp)
1000fae4:	2085883a 	add	r2,r4,r2
1000fae8:	10800003 	ldbu	r2,0(r2)
1000faec:	10bff804 	addi	r2,r2,-32
1000faf0:	10803fcc 	andi	r2,r2,255
1000faf4:	1080201c 	xori	r2,r2,128
1000faf8:	10bfe004 	addi	r2,r2,-128
1000fafc:	00000706 	br	1000fb1c <match_file_record_to_name_ext+0x128>
1000fb00:	e0bffc17 	ldw	r2,-16(fp)
1000fb04:	e13ffe17 	ldw	r4,-8(fp)
1000fb08:	2085883a 	add	r2,r4,r2
1000fb0c:	10800003 	ldbu	r2,0(r2)
1000fb10:	10803fcc 	andi	r2,r2,255
1000fb14:	1080201c 	xori	r2,r2,128
1000fb18:	10bfe004 	addi	r2,r2,-128
1000fb1c:	18800226 	beq	r3,r2,1000fb28 <match_file_record_to_name_ext+0x134>
        {
            match = false;
1000fb20:	e03ffb15 	stw	zero,-20(fp)
			break;
1000fb24:	00000606 	br	1000fb40 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
1000fb28:	e0bffc17 	ldw	r2,-16(fp)
1000fb2c:	10800044 	addi	r2,r2,1
1000fb30:	e0bffc15 	stw	r2,-16(fp)
1000fb34:	e0bffc17 	ldw	r2,-16(fp)
1000fb38:	10800210 	cmplti	r2,r2,8
1000fb3c:	103fb71e 	bne	r2,zero,1000fa1c <__alt_data_end+0xf800fa1c>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
1000fb40:	e03ffc15 	stw	zero,-16(fp)
1000fb44:	00004a06 	br	1000fc70 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
1000fb48:	e0fffd17 	ldw	r3,-12(fp)
1000fb4c:	e0bffc17 	ldw	r2,-16(fp)
1000fb50:	1885883a 	add	r2,r3,r2
1000fb54:	10800204 	addi	r2,r2,8
1000fb58:	10800003 	ldbu	r2,0(r2)
1000fb5c:	10803fcc 	andi	r2,r2,255
1000fb60:	10801870 	cmpltui	r2,r2,97
1000fb64:	1000121e 	bne	r2,zero,1000fbb0 <match_file_record_to_name_ext+0x1bc>
1000fb68:	e0fffd17 	ldw	r3,-12(fp)
1000fb6c:	e0bffc17 	ldw	r2,-16(fp)
1000fb70:	1885883a 	add	r2,r3,r2
1000fb74:	10800204 	addi	r2,r2,8
1000fb78:	10800003 	ldbu	r2,0(r2)
1000fb7c:	10803fcc 	andi	r2,r2,255
1000fb80:	10801ee8 	cmpgeui	r2,r2,123
1000fb84:	10000a1e 	bne	r2,zero,1000fbb0 <match_file_record_to_name_ext+0x1bc>
1000fb88:	e0fffd17 	ldw	r3,-12(fp)
1000fb8c:	e0bffc17 	ldw	r2,-16(fp)
1000fb90:	1885883a 	add	r2,r3,r2
1000fb94:	10800204 	addi	r2,r2,8
1000fb98:	10800003 	ldbu	r2,0(r2)
1000fb9c:	10bff804 	addi	r2,r2,-32
1000fba0:	10c03fcc 	andi	r3,r2,255
1000fba4:	18c0201c 	xori	r3,r3,128
1000fba8:	18ffe004 	addi	r3,r3,-128
1000fbac:	00000806 	br	1000fbd0 <match_file_record_to_name_ext+0x1dc>
1000fbb0:	e0fffd17 	ldw	r3,-12(fp)
1000fbb4:	e0bffc17 	ldw	r2,-16(fp)
1000fbb8:	1885883a 	add	r2,r3,r2
1000fbbc:	10800204 	addi	r2,r2,8
1000fbc0:	10800003 	ldbu	r2,0(r2)
1000fbc4:	10c03fcc 	andi	r3,r2,255
1000fbc8:	18c0201c 	xori	r3,r3,128
1000fbcc:	18ffe004 	addi	r3,r3,-128
1000fbd0:	e0bffc17 	ldw	r2,-16(fp)
1000fbd4:	e13fff17 	ldw	r4,-4(fp)
1000fbd8:	2085883a 	add	r2,r4,r2
1000fbdc:	10800003 	ldbu	r2,0(r2)
1000fbe0:	10803fcc 	andi	r2,r2,255
1000fbe4:	1080201c 	xori	r2,r2,128
1000fbe8:	10bfe004 	addi	r2,r2,-128
1000fbec:	10801850 	cmplti	r2,r2,97
1000fbf0:	1000121e 	bne	r2,zero,1000fc3c <match_file_record_to_name_ext+0x248>
1000fbf4:	e0bffc17 	ldw	r2,-16(fp)
1000fbf8:	e13fff17 	ldw	r4,-4(fp)
1000fbfc:	2085883a 	add	r2,r4,r2
1000fc00:	10800003 	ldbu	r2,0(r2)
1000fc04:	10803fcc 	andi	r2,r2,255
1000fc08:	1080201c 	xori	r2,r2,128
1000fc0c:	10bfe004 	addi	r2,r2,-128
1000fc10:	10801ec8 	cmpgei	r2,r2,123
1000fc14:	1000091e 	bne	r2,zero,1000fc3c <match_file_record_to_name_ext+0x248>
1000fc18:	e0bffc17 	ldw	r2,-16(fp)
1000fc1c:	e13fff17 	ldw	r4,-4(fp)
1000fc20:	2085883a 	add	r2,r4,r2
1000fc24:	10800003 	ldbu	r2,0(r2)
1000fc28:	10bff804 	addi	r2,r2,-32
1000fc2c:	10803fcc 	andi	r2,r2,255
1000fc30:	1080201c 	xori	r2,r2,128
1000fc34:	10bfe004 	addi	r2,r2,-128
1000fc38:	00000706 	br	1000fc58 <match_file_record_to_name_ext+0x264>
1000fc3c:	e0bffc17 	ldw	r2,-16(fp)
1000fc40:	e13fff17 	ldw	r4,-4(fp)
1000fc44:	2085883a 	add	r2,r4,r2
1000fc48:	10800003 	ldbu	r2,0(r2)
1000fc4c:	10803fcc 	andi	r2,r2,255
1000fc50:	1080201c 	xori	r2,r2,128
1000fc54:	10bfe004 	addi	r2,r2,-128
1000fc58:	18800226 	beq	r3,r2,1000fc64 <match_file_record_to_name_ext+0x270>
        {
            match = false;
1000fc5c:	e03ffb15 	stw	zero,-20(fp)
			break;
1000fc60:	00000606 	br	1000fc7c <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
1000fc64:	e0bffc17 	ldw	r2,-16(fp)
1000fc68:	10800044 	addi	r2,r2,1
1000fc6c:	e0bffc15 	stw	r2,-16(fp)
1000fc70:	e0bffc17 	ldw	r2,-16(fp)
1000fc74:	108000d0 	cmplti	r2,r2,3
1000fc78:	103fb31e 	bne	r2,zero,1000fb48 <__alt_data_end+0xf800fb48>
        {
            match = false;
			break;
        }
    }
	return match;
1000fc7c:	e0bffb17 	ldw	r2,-20(fp)
}
1000fc80:	e037883a 	mov	sp,fp
1000fc84:	df000017 	ldw	fp,0(sp)
1000fc88:	dec00104 	addi	sp,sp,4
1000fc8c:	f800283a 	ret

1000fc90 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
1000fc90:	deffe704 	addi	sp,sp,-100
1000fc94:	dfc01815 	stw	ra,96(sp)
1000fc98:	df001715 	stw	fp,92(sp)
1000fc9c:	df001704 	addi	fp,sp,92
1000fca0:	e13ffd15 	stw	r4,-12(fp)
1000fca4:	e17ffe15 	stw	r5,-8(fp)
1000fca8:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
1000fcac:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
1000fcb0:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
1000fcb4:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
1000fcb8:	e13ffd17 	ldw	r4,-12(fp)
1000fcbc:	000f93c0 	call	1000f93c <get_dir_divider_location>
1000fcc0:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
1000fcc4:	00013106 	br	1001018c <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
1000fcc8:	00800804 	movi	r2,32
1000fccc:	e0bff905 	stb	r2,-28(fp)
1000fcd0:	00800804 	movi	r2,32
1000fcd4:	e0bff945 	stb	r2,-27(fp)
1000fcd8:	00800804 	movi	r2,32
1000fcdc:	e0bff985 	stb	r2,-26(fp)
1000fce0:	00800804 	movi	r2,32
1000fce4:	e0bff9c5 	stb	r2,-25(fp)
1000fce8:	00800804 	movi	r2,32
1000fcec:	e0bffa05 	stb	r2,-24(fp)
1000fcf0:	00800804 	movi	r2,32
1000fcf4:	e0bffa45 	stb	r2,-23(fp)
1000fcf8:	00800804 	movi	r2,32
1000fcfc:	e0bffa85 	stb	r2,-22(fp)
1000fd00:	00800804 	movi	r2,32
1000fd04:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
1000fd08:	00800804 	movi	r2,32
1000fd0c:	e0bffb05 	stb	r2,-20(fp)
1000fd10:	00800804 	movi	r2,32
1000fd14:	e0bffb45 	stb	r2,-19(fp)
1000fd18:	00800804 	movi	r2,32
1000fd1c:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
1000fd20:	00bfffc4 	movi	r2,-1
1000fd24:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
1000fd28:	e0bfea17 	ldw	r2,-88(fp)
1000fd2c:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
1000fd30:	e03fec15 	stw	zero,-80(fp)
1000fd34:	00002d06 	br	1000fdec <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
1000fd38:	e0ffec17 	ldw	r3,-80(fp)
1000fd3c:	e0bfed17 	ldw	r2,-76(fp)
1000fd40:	1885883a 	add	r2,r3,r2
1000fd44:	1007883a 	mov	r3,r2
1000fd48:	e0bffd17 	ldw	r2,-12(fp)
1000fd4c:	10c5883a 	add	r2,r2,r3
1000fd50:	10800003 	ldbu	r2,0(r2)
1000fd54:	10803fcc 	andi	r2,r2,255
1000fd58:	1080201c 	xori	r2,r2,128
1000fd5c:	10bfe004 	addi	r2,r2,-128
1000fd60:	10800b98 	cmpnei	r2,r2,46
1000fd64:	1000031e 	bne	r2,zero,1000fd74 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
1000fd68:	e0bfec17 	ldw	r2,-80(fp)
1000fd6c:	e0bfee15 	stw	r2,-72(fp)
1000fd70:	00001b06 	br	1000fde0 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
1000fd74:	e0bfee17 	ldw	r2,-72(fp)
1000fd78:	10000c0e 	bge	r2,zero,1000fdac <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
1000fd7c:	e0ffec17 	ldw	r3,-80(fp)
1000fd80:	e0bfed17 	ldw	r2,-76(fp)
1000fd84:	1885883a 	add	r2,r3,r2
1000fd88:	1007883a 	mov	r3,r2
1000fd8c:	e0bffd17 	ldw	r2,-12(fp)
1000fd90:	10c5883a 	add	r2,r2,r3
1000fd94:	10c00003 	ldbu	r3,0(r2)
1000fd98:	e13ff904 	addi	r4,fp,-28
1000fd9c:	e0bfec17 	ldw	r2,-80(fp)
1000fda0:	2085883a 	add	r2,r4,r2
1000fda4:	10c00005 	stb	r3,0(r2)
1000fda8:	00000d06 	br	1000fde0 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
1000fdac:	e0ffec17 	ldw	r3,-80(fp)
1000fdb0:	e0bfee17 	ldw	r2,-72(fp)
1000fdb4:	1885c83a 	sub	r2,r3,r2
1000fdb8:	e13fec17 	ldw	r4,-80(fp)
1000fdbc:	e0ffed17 	ldw	r3,-76(fp)
1000fdc0:	20c7883a 	add	r3,r4,r3
1000fdc4:	1809883a 	mov	r4,r3
1000fdc8:	e0fffd17 	ldw	r3,-12(fp)
1000fdcc:	1907883a 	add	r3,r3,r4
1000fdd0:	18c00003 	ldbu	r3,0(r3)
1000fdd4:	e13ffb04 	addi	r4,fp,-20
1000fdd8:	2085883a 	add	r2,r4,r2
1000fddc:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
1000fde0:	e0bfec17 	ldw	r2,-80(fp)
1000fde4:	10800044 	addi	r2,r2,1
1000fde8:	e0bfec15 	stw	r2,-80(fp)
1000fdec:	e0ffec17 	ldw	r3,-80(fp)
1000fdf0:	e0bfeb17 	ldw	r2,-84(fp)
1000fdf4:	18bfd016 	blt	r3,r2,1000fd38 <__alt_data_end+0xf800fd38>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
1000fdf8:	e0bfea17 	ldw	r2,-88(fp)
1000fdfc:	10005e1e 	bne	r2,zero,1000ff78 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
1000fe00:	008400b4 	movhi	r2,4098
1000fe04:	10a01304 	addi	r2,r2,-32692
1000fe08:	1080050b 	ldhu	r2,20(r2)
1000fe0c:	10bfffcc 	andi	r2,r2,65535
1000fe10:	1006917a 	slli	r3,r2,5
1000fe14:	008400b4 	movhi	r2,4098
1000fe18:	10a01304 	addi	r2,r2,-32692
1000fe1c:	1080030b 	ldhu	r2,12(r2)
1000fe20:	10bfffcc 	andi	r2,r2,65535
1000fe24:	100b883a 	mov	r5,r2
1000fe28:	1809883a 	mov	r4,r3
1000fe2c:	000aed40 	call	1000aed4 <__divsi3>
1000fe30:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1000fe34:	e03ff015 	stw	zero,-64(fp)
1000fe38:	00003b06 	br	1000ff28 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
1000fe3c:	008400b4 	movhi	r2,4098
1000fe40:	10a01304 	addi	r2,r2,-32692
1000fe44:	10c01317 	ldw	r3,76(r2)
1000fe48:	e0bff017 	ldw	r2,-64(fp)
1000fe4c:	1885883a 	add	r2,r3,r2
1000fe50:	1007883a 	mov	r3,r2
1000fe54:	d0a70217 	ldw	r2,-25592(gp)
1000fe58:	100b883a 	mov	r5,r2
1000fe5c:	1809883a 	mov	r4,r3
1000fe60:	000e5680 	call	1000e568 <Read_Sector_Data>
1000fe64:	10003426 	beq	r2,zero,1000ff38 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
1000fe68:	e03ff115 	stw	zero,-60(fp)
1000fe6c:	00002506 	br	1000ff04 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
1000fe70:	e0bff117 	ldw	r2,-60(fp)
1000fe74:	1004917a 	slli	r2,r2,5
1000fe78:	e0fff017 	ldw	r3,-64(fp)
1000fe7c:	180f883a 	mov	r7,r3
1000fe80:	000d883a 	mov	r6,zero
1000fe84:	e17fff17 	ldw	r5,-4(fp)
1000fe88:	1009883a 	mov	r4,r2
1000fe8c:	000e9780 	call	1000e978 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
1000fe90:	e0bfff17 	ldw	r2,-4(fp)
1000fe94:	10800003 	ldbu	r2,0(r2)
1000fe98:	10803fcc 	andi	r2,r2,255
1000fe9c:	10803960 	cmpeqi	r2,r2,229
1000fea0:	1000151e 	bne	r2,zero,1000fef8 <get_home_directory_cluster_for_file+0x268>
1000fea4:	e0bfff17 	ldw	r2,-4(fp)
1000fea8:	10800003 	ldbu	r2,0(r2)
1000feac:	10803fcc 	andi	r2,r2,255
1000feb0:	10001126 	beq	r2,zero,1000fef8 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
1000feb4:	e0fffb04 	addi	r3,fp,-20
1000feb8:	e0bff904 	addi	r2,fp,-28
1000febc:	180d883a 	mov	r6,r3
1000fec0:	100b883a 	mov	r5,r2
1000fec4:	e13fff17 	ldw	r4,-4(fp)
1000fec8:	000f9f40 	call	1000f9f4 <match_file_record_to_name_ext>
1000fecc:	e0bff815 	stw	r2,-32(fp)
                            if (match)
1000fed0:	e0bff817 	ldw	r2,-32(fp)
1000fed4:	10000826 	beq	r2,zero,1000fef8 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
1000fed8:	e0bfff17 	ldw	r2,-4(fp)
1000fedc:	1080058b 	ldhu	r2,22(r2)
1000fee0:	10bfffcc 	andi	r2,r2,65535
1000fee4:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
1000fee8:	e0bfff17 	ldw	r2,-4(fp)
1000feec:	00c00044 	movi	r3,1
1000fef0:	10c00a15 	stw	r3,40(r2)
                                break;
1000fef4:	00000606 	br	1000ff10 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
1000fef8:	e0bff117 	ldw	r2,-60(fp)
1000fefc:	10800044 	addi	r2,r2,1
1000ff00:	e0bff115 	stw	r2,-60(fp)
1000ff04:	e0bff117 	ldw	r2,-60(fp)
1000ff08:	10800410 	cmplti	r2,r2,16
1000ff0c:	103fd81e 	bne	r2,zero,1000fe70 <__alt_data_end+0xf800fe70>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
1000ff10:	e0ffef17 	ldw	r3,-68(fp)
1000ff14:	e0bfea17 	ldw	r2,-88(fp)
1000ff18:	1880091e 	bne	r3,r2,1000ff40 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1000ff1c:	e0bff017 	ldw	r2,-64(fp)
1000ff20:	10800044 	addi	r2,r2,1
1000ff24:	e0bff015 	stw	r2,-64(fp)
1000ff28:	e0fff017 	ldw	r3,-64(fp)
1000ff2c:	e0bff717 	ldw	r2,-36(fp)
1000ff30:	18bfc216 	blt	r3,r2,1000fe3c <__alt_data_end+0xf800fe3c>
1000ff34:	00000306 	br	1000ff44 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
1000ff38:	0001883a 	nop
1000ff3c:	00000106 	br	1000ff44 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
1000ff40:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
1000ff44:	e0ffef17 	ldw	r3,-68(fp)
1000ff48:	e0bfea17 	ldw	r2,-88(fp)
1000ff4c:	18800826 	beq	r3,r2,1000ff70 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
1000ff50:	e0bfef17 	ldw	r2,-68(fp)
1000ff54:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
1000ff58:	e0ffed17 	ldw	r3,-76(fp)
1000ff5c:	e0bfeb17 	ldw	r2,-84(fp)
1000ff60:	1885883a 	add	r2,r3,r2
1000ff64:	10800044 	addi	r2,r2,1
1000ff68:	e0bfed15 	stw	r2,-76(fp)
1000ff6c:	00007d06 	br	10010164 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
1000ff70:	0005883a 	mov	r2,zero
1000ff74:	00009106 	br	100101bc <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
1000ff78:	e0bfea17 	ldw	r2,-88(fp)
1000ff7c:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
1000ff80:	e0bff417 	ldw	r2,-48(fp)
1000ff84:	10ffff84 	addi	r3,r2,-2
1000ff88:	008400b4 	movhi	r2,4098
1000ff8c:	10a01304 	addi	r2,r2,-32692
1000ff90:	10800383 	ldbu	r2,14(r2)
1000ff94:	10803fcc 	andi	r2,r2,255
1000ff98:	1885383a 	mul	r2,r3,r2
1000ff9c:	1007883a 	mov	r3,r2
1000ffa0:	008400b4 	movhi	r2,4098
1000ffa4:	10a01304 	addi	r2,r2,-32692
1000ffa8:	10801417 	ldw	r2,80(r2)
1000ffac:	1885883a 	add	r2,r3,r2
1000ffb0:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
1000ffb4:	e03ff215 	stw	zero,-56(fp)
1000ffb8:	00003606 	br	10010094 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
1000ffbc:	e0fff217 	ldw	r3,-56(fp)
1000ffc0:	e0bff517 	ldw	r2,-44(fp)
1000ffc4:	1885883a 	add	r2,r3,r2
1000ffc8:	d0e70217 	ldw	r3,-25592(gp)
1000ffcc:	180b883a 	mov	r5,r3
1000ffd0:	1009883a 	mov	r4,r2
1000ffd4:	000e5680 	call	1000e568 <Read_Sector_Data>
1000ffd8:	10003526 	beq	r2,zero,100100b0 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
1000ffdc:	e03ff315 	stw	zero,-52(fp)
1000ffe0:	00002306 	br	10010070 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
1000ffe4:	e0bff317 	ldw	r2,-52(fp)
1000ffe8:	1004917a 	slli	r2,r2,5
1000ffec:	e0fff417 	ldw	r3,-48(fp)
1000fff0:	e13ff217 	ldw	r4,-56(fp)
1000fff4:	200f883a 	mov	r7,r4
1000fff8:	180d883a 	mov	r6,r3
1000fffc:	e17fff17 	ldw	r5,-4(fp)
10010000:	1009883a 	mov	r4,r2
10010004:	000e9780 	call	1000e978 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
10010008:	e0bfff17 	ldw	r2,-4(fp)
1001000c:	10800003 	ldbu	r2,0(r2)
10010010:	10803fcc 	andi	r2,r2,255
10010014:	10803960 	cmpeqi	r2,r2,229
10010018:	1000121e 	bne	r2,zero,10010064 <get_home_directory_cluster_for_file+0x3d4>
1001001c:	e0bfff17 	ldw	r2,-4(fp)
10010020:	10800003 	ldbu	r2,0(r2)
10010024:	10803fcc 	andi	r2,r2,255
10010028:	10000e26 	beq	r2,zero,10010064 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
1001002c:	e0fffb04 	addi	r3,fp,-20
10010030:	e0bff904 	addi	r2,fp,-28
10010034:	180d883a 	mov	r6,r3
10010038:	100b883a 	mov	r5,r2
1001003c:	e13fff17 	ldw	r4,-4(fp)
10010040:	000f9f40 	call	1000f9f4 <match_file_record_to_name_ext>
10010044:	e0bff615 	stw	r2,-40(fp)
                                if (match)
10010048:	e0bff617 	ldw	r2,-40(fp)
1001004c:	10000526 	beq	r2,zero,10010064 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
10010050:	e0bfff17 	ldw	r2,-4(fp)
10010054:	1080058b 	ldhu	r2,22(r2)
10010058:	10bfffcc 	andi	r2,r2,65535
1001005c:	e0bfef15 	stw	r2,-68(fp)
                                    break;
10010060:	00000606 	br	1001007c <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
10010064:	e0bff317 	ldw	r2,-52(fp)
10010068:	10800044 	addi	r2,r2,1
1001006c:	e0bff315 	stw	r2,-52(fp)
10010070:	e0bff317 	ldw	r2,-52(fp)
10010074:	10800410 	cmplti	r2,r2,16
10010078:	103fda1e 	bne	r2,zero,1000ffe4 <__alt_data_end+0xf800ffe4>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
1001007c:	e0ffef17 	ldw	r3,-68(fp)
10010080:	e0bfea17 	ldw	r2,-88(fp)
10010084:	18800c1e 	bne	r3,r2,100100b8 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
10010088:	e0bff217 	ldw	r2,-56(fp)
1001008c:	10800044 	addi	r2,r2,1
10010090:	e0bff215 	stw	r2,-56(fp)
10010094:	008400b4 	movhi	r2,4098
10010098:	10a01304 	addi	r2,r2,-32692
1001009c:	10800383 	ldbu	r2,14(r2)
100100a0:	10803fcc 	andi	r2,r2,255
100100a4:	e0fff217 	ldw	r3,-56(fp)
100100a8:	18bfc416 	blt	r3,r2,1000ffbc <__alt_data_end+0xf800ffbc>
100100ac:	00000306 	br	100100bc <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
100100b0:	0001883a 	nop
100100b4:	00000106 	br	100100bc <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
100100b8:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
100100bc:	e0ffef17 	ldw	r3,-68(fp)
100100c0:	e0bfea17 	ldw	r2,-88(fp)
100100c4:	1880141e 	bne	r3,r2,10010118 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
100100c8:	e0bfef17 	ldw	r2,-68(fp)
100100cc:	e0fffc04 	addi	r3,fp,-16
100100d0:	180b883a 	mov	r5,r3
100100d4:	1009883a 	mov	r4,r2
100100d8:	000e6400 	call	1000e640 <get_cluster_flag>
100100dc:	10000c26 	beq	r2,zero,10010110 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
100100e0:	e0bffc0b 	ldhu	r2,-16(fp)
100100e4:	10bfffcc 	andi	r2,r2,65535
100100e8:	10fffe0c 	andi	r3,r2,65528
100100ec:	00bffe14 	movui	r2,65528
100100f0:	1880021e 	bne	r3,r2,100100fc <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
100100f4:	0005883a 	mov	r2,zero
100100f8:	00003006 	br	100101bc <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
100100fc:	e0bffc0b 	ldhu	r2,-16(fp)
10010100:	10bfffcc 	andi	r2,r2,65535
10010104:	10bffe0c 	andi	r2,r2,65528
10010108:	e0bfef15 	stw	r2,-68(fp)
1001010c:	00000206 	br	10010118 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
10010110:	0005883a 	mov	r2,zero
10010114:	00002906 	br	100101bc <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
10010118:	e0bff417 	ldw	r2,-48(fp)
1001011c:	00fffdd4 	movui	r3,65527
10010120:	18800316 	blt	r3,r2,10010130 <get_home_directory_cluster_for_file+0x4a0>
10010124:	e0ffef17 	ldw	r3,-68(fp)
10010128:	e0bfea17 	ldw	r2,-88(fp)
1001012c:	18bf9426 	beq	r3,r2,1000ff80 <__alt_data_end+0xf800ff80>
            if (new_cluster != home_dir_cluster)
10010130:	e0ffef17 	ldw	r3,-68(fp)
10010134:	e0bfea17 	ldw	r2,-88(fp)
10010138:	18800826 	beq	r3,r2,1001015c <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
1001013c:	e0bfef17 	ldw	r2,-68(fp)
10010140:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
10010144:	e0ffed17 	ldw	r3,-76(fp)
10010148:	e0bfeb17 	ldw	r2,-84(fp)
1001014c:	1885883a 	add	r2,r3,r2
10010150:	10800044 	addi	r2,r2,1
10010154:	e0bfed15 	stw	r2,-76(fp)
10010158:	00000206 	br	10010164 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
1001015c:	0005883a 	mov	r2,zero
10010160:	00001606 	br	100101bc <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
10010164:	e0bfed17 	ldw	r2,-76(fp)
10010168:	e0fffd17 	ldw	r3,-12(fp)
1001016c:	1885883a 	add	r2,r3,r2
10010170:	1009883a 	mov	r4,r2
10010174:	000f93c0 	call	1000f93c <get_dir_divider_location>
10010178:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
1001017c:	e0bfeb17 	ldw	r2,-84(fp)
10010180:	1000020e 	bge	r2,zero,1001018c <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
10010184:	00800044 	movi	r2,1
10010188:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
1001018c:	e0bfeb17 	ldw	r2,-84(fp)
10010190:	00becd16 	blt	zero,r2,1000fcc8 <__alt_data_end+0xf800fcc8>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
10010194:	e0bffe17 	ldw	r2,-8(fp)
10010198:	e0ffea17 	ldw	r3,-88(fp)
1001019c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
100101a0:	e0bfea17 	ldw	r2,-88(fp)
100101a4:	1000041e 	bne	r2,zero,100101b8 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
100101a8:	e0bfff17 	ldw	r2,-4(fp)
100101ac:	10000a15 	stw	zero,40(r2)
		result = true;
100101b0:	00800044 	movi	r2,1
100101b4:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
100101b8:	e0bfe917 	ldw	r2,-92(fp)
}
100101bc:	e037883a 	mov	sp,fp
100101c0:	dfc00117 	ldw	ra,4(sp)
100101c4:	df000017 	ldw	fp,0(sp)
100101c8:	dec00204 	addi	sp,sp,8
100101cc:	f800283a 	ret

100101d0 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
100101d0:	deffe804 	addi	sp,sp,-96
100101d4:	dfc01715 	stw	ra,92(sp)
100101d8:	df001615 	stw	fp,88(sp)
100101dc:	df001604 	addi	fp,sp,88
100101e0:	e13ffd15 	stw	r4,-12(fp)
100101e4:	e17ffe15 	stw	r5,-8(fp)
100101e8:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
100101ec:	e13ffe17 	ldw	r4,-8(fp)
100101f0:	000f93c0 	call	1000f93c <get_dir_divider_location>
100101f4:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
100101f8:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
100101fc:	00800804 	movi	r2,32
10010200:	e0bff905 	stb	r2,-28(fp)
10010204:	00800804 	movi	r2,32
10010208:	e0bff945 	stb	r2,-27(fp)
1001020c:	00800804 	movi	r2,32
10010210:	e0bff985 	stb	r2,-26(fp)
10010214:	00800804 	movi	r2,32
10010218:	e0bff9c5 	stb	r2,-25(fp)
1001021c:	00800804 	movi	r2,32
10010220:	e0bffa05 	stb	r2,-24(fp)
10010224:	00800804 	movi	r2,32
10010228:	e0bffa45 	stb	r2,-23(fp)
1001022c:	00800804 	movi	r2,32
10010230:	e0bffa85 	stb	r2,-22(fp)
10010234:	00800804 	movi	r2,32
10010238:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
1001023c:	00800804 	movi	r2,32
10010240:	e0bffb05 	stb	r2,-20(fp)
10010244:	00800804 	movi	r2,32
10010248:	e0bffb45 	stb	r2,-19(fp)
1001024c:	00800804 	movi	r2,32
10010250:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
10010254:	00bfffc4 	movi	r2,-1
10010258:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
1001025c:	e0bffd17 	ldw	r2,-12(fp)
10010260:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
10010264:	e13ffe17 	ldw	r4,-8(fp)
10010268:	0000f100 	call	10000f10 <strlen>
1001026c:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
10010270:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
10010274:	00000b06 	br	100102a4 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
10010278:	e0ffeb17 	ldw	r3,-84(fp)
1001027c:	e0bfea17 	ldw	r2,-88(fp)
10010280:	1885883a 	add	r2,r3,r2
10010284:	10800044 	addi	r2,r2,1
10010288:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
1001028c:	e0bfeb17 	ldw	r2,-84(fp)
10010290:	e0fffe17 	ldw	r3,-8(fp)
10010294:	1885883a 	add	r2,r3,r2
10010298:	1009883a 	mov	r4,r2
1001029c:	000f93c0 	call	1000f93c <get_dir_divider_location>
100102a0:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
100102a4:	e0bfea17 	ldw	r2,-88(fp)
100102a8:	00bff316 	blt	zero,r2,10010278 <__alt_data_end+0xf8010278>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
100102ac:	e0bfeb17 	ldw	r2,-84(fp)
100102b0:	e0bfee15 	stw	r2,-72(fp)
100102b4:	00002706 	br	10010354 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
100102b8:	e0bfee17 	ldw	r2,-72(fp)
100102bc:	e0fffe17 	ldw	r3,-8(fp)
100102c0:	1885883a 	add	r2,r3,r2
100102c4:	10800003 	ldbu	r2,0(r2)
100102c8:	10803fcc 	andi	r2,r2,255
100102cc:	1080201c 	xori	r2,r2,128
100102d0:	10bfe004 	addi	r2,r2,-128
100102d4:	10800b98 	cmpnei	r2,r2,46
100102d8:	1000031e 	bne	r2,zero,100102e8 <find_file_in_directory+0x118>
        {
            ext_index = index;
100102dc:	e0bfee17 	ldw	r2,-72(fp)
100102e0:	e0bfec15 	stw	r2,-80(fp)
100102e4:	00001806 	br	10010348 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
100102e8:	e0bfec17 	ldw	r2,-80(fp)
100102ec:	10000b0e 	bge	r2,zero,1001031c <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
100102f0:	e0ffee17 	ldw	r3,-72(fp)
100102f4:	e0bfeb17 	ldw	r2,-84(fp)
100102f8:	1885c83a 	sub	r2,r3,r2
100102fc:	e0ffee17 	ldw	r3,-72(fp)
10010300:	e13ffe17 	ldw	r4,-8(fp)
10010304:	20c7883a 	add	r3,r4,r3
10010308:	18c00003 	ldbu	r3,0(r3)
1001030c:	e13ff904 	addi	r4,fp,-28
10010310:	2085883a 	add	r2,r4,r2
10010314:	10c00005 	stb	r3,0(r2)
10010318:	00000b06 	br	10010348 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
1001031c:	e0ffee17 	ldw	r3,-72(fp)
10010320:	e0bfec17 	ldw	r2,-80(fp)
10010324:	1885c83a 	sub	r2,r3,r2
10010328:	10bfffc4 	addi	r2,r2,-1
1001032c:	e0ffee17 	ldw	r3,-72(fp)
10010330:	e13ffe17 	ldw	r4,-8(fp)
10010334:	20c7883a 	add	r3,r4,r3
10010338:	18c00003 	ldbu	r3,0(r3)
1001033c:	e13ffb04 	addi	r4,fp,-20
10010340:	2085883a 	add	r2,r4,r2
10010344:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
10010348:	e0bfee17 	ldw	r2,-72(fp)
1001034c:	10800044 	addi	r2,r2,1
10010350:	e0bfee15 	stw	r2,-72(fp)
10010354:	e0ffee17 	ldw	r3,-72(fp)
10010358:	e0bff417 	ldw	r2,-48(fp)
1001035c:	18bfd616 	blt	r3,r2,100102b8 <__alt_data_end+0xf80102b8>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
10010360:	e0bffd17 	ldw	r2,-12(fp)
10010364:	1000481e 	bne	r2,zero,10010488 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
10010368:	008400b4 	movhi	r2,4098
1001036c:	10a01304 	addi	r2,r2,-32692
10010370:	1080050b 	ldhu	r2,20(r2)
10010374:	10bfffcc 	andi	r2,r2,65535
10010378:	1006917a 	slli	r3,r2,5
1001037c:	008400b4 	movhi	r2,4098
10010380:	10a01304 	addi	r2,r2,-32692
10010384:	1080030b 	ldhu	r2,12(r2)
10010388:	10bfffcc 	andi	r2,r2,65535
1001038c:	100b883a 	mov	r5,r2
10010390:	1809883a 	mov	r4,r3
10010394:	000aed40 	call	1000aed4 <__divsi3>
10010398:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1001039c:	e03ff015 	stw	zero,-64(fp)
100103a0:	00003506 	br	10010478 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
100103a4:	008400b4 	movhi	r2,4098
100103a8:	10a01304 	addi	r2,r2,-32692
100103ac:	10c01317 	ldw	r3,76(r2)
100103b0:	e0bff017 	ldw	r2,-64(fp)
100103b4:	1885883a 	add	r2,r3,r2
100103b8:	1007883a 	mov	r3,r2
100103bc:	d0a70217 	ldw	r2,-25592(gp)
100103c0:	100b883a 	mov	r5,r2
100103c4:	1809883a 	mov	r4,r3
100103c8:	000e5680 	call	1000e568 <Read_Sector_Data>
100103cc:	10009626 	beq	r2,zero,10010628 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
100103d0:	e03ff115 	stw	zero,-60(fp)
100103d4:	00002006 	br	10010458 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
100103d8:	e0bff117 	ldw	r2,-60(fp)
100103dc:	1004917a 	slli	r2,r2,5
100103e0:	e0fff017 	ldw	r3,-64(fp)
100103e4:	180f883a 	mov	r7,r3
100103e8:	000d883a 	mov	r6,zero
100103ec:	e17fff17 	ldw	r5,-4(fp)
100103f0:	1009883a 	mov	r4,r2
100103f4:	000e9780 	call	1000e978 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
100103f8:	e0bfff17 	ldw	r2,-4(fp)
100103fc:	10800003 	ldbu	r2,0(r2)
10010400:	10803fcc 	andi	r2,r2,255
10010404:	10803960 	cmpeqi	r2,r2,229
10010408:	1000101e 	bne	r2,zero,1001044c <find_file_in_directory+0x27c>
1001040c:	e0bfff17 	ldw	r2,-4(fp)
10010410:	10800003 	ldbu	r2,0(r2)
10010414:	10803fcc 	andi	r2,r2,255
10010418:	10000c26 	beq	r2,zero,1001044c <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
1001041c:	e0fffb04 	addi	r3,fp,-20
10010420:	e0bff904 	addi	r2,fp,-28
10010424:	180d883a 	mov	r6,r3
10010428:	100b883a 	mov	r5,r2
1001042c:	e13fff17 	ldw	r4,-4(fp)
10010430:	000f9f40 	call	1000f9f4 <match_file_record_to_name_ext>
10010434:	e0bff815 	stw	r2,-32(fp)

                        if (match)
10010438:	e0bff817 	ldw	r2,-32(fp)
1001043c:	10000326 	beq	r2,zero,1001044c <find_file_in_directory+0x27c>
                        {
                            result = true;
10010440:	00800044 	movi	r2,1
10010444:	e0bfef15 	stw	r2,-68(fp)
                            break;
10010448:	00000606 	br	10010464 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
1001044c:	e0bff117 	ldw	r2,-60(fp)
10010450:	10800044 	addi	r2,r2,1
10010454:	e0bff115 	stw	r2,-60(fp)
10010458:	e0bff117 	ldw	r2,-60(fp)
1001045c:	10800410 	cmplti	r2,r2,16
10010460:	103fdd1e 	bne	r2,zero,100103d8 <__alt_data_end+0xf80103d8>
            }
            else
            {
                break;
            }
            if (result)
10010464:	e0bfef17 	ldw	r2,-68(fp)
10010468:	1000711e 	bne	r2,zero,10010630 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
1001046c:	e0bff017 	ldw	r2,-64(fp)
10010470:	10800044 	addi	r2,r2,1
10010474:	e0bff015 	stw	r2,-64(fp)
10010478:	e0fff017 	ldw	r3,-64(fp)
1001047c:	e0bff717 	ldw	r2,-36(fp)
10010480:	18bfc816 	blt	r3,r2,100103a4 <__alt_data_end+0xf80103a4>
10010484:	00006b06 	br	10010634 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
10010488:	e0bfed17 	ldw	r2,-76(fp)
1001048c:	10ffff84 	addi	r3,r2,-2
10010490:	008400b4 	movhi	r2,4098
10010494:	10a01304 	addi	r2,r2,-32692
10010498:	10800383 	ldbu	r2,14(r2)
1001049c:	10803fcc 	andi	r2,r2,255
100104a0:	1885383a 	mul	r2,r3,r2
100104a4:	1007883a 	mov	r3,r2
100104a8:	008400b4 	movhi	r2,4098
100104ac:	10a01304 	addi	r2,r2,-32692
100104b0:	10801417 	ldw	r2,80(r2)
100104b4:	1885883a 	add	r2,r3,r2
100104b8:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
100104bc:	e03ff215 	stw	zero,-56(fp)
100104c0:	00003306 	br	10010590 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
100104c4:	e0fff217 	ldw	r3,-56(fp)
100104c8:	e0bff517 	ldw	r2,-44(fp)
100104cc:	1885883a 	add	r2,r3,r2
100104d0:	d0e70217 	ldw	r3,-25592(gp)
100104d4:	180b883a 	mov	r5,r3
100104d8:	1009883a 	mov	r4,r2
100104dc:	000e5680 	call	1000e568 <Read_Sector_Data>
100104e0:	10003226 	beq	r2,zero,100105ac <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
100104e4:	e03ff315 	stw	zero,-52(fp)
100104e8:	00002106 	br	10010570 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
100104ec:	e0bff317 	ldw	r2,-52(fp)
100104f0:	1004917a 	slli	r2,r2,5
100104f4:	e0ffed17 	ldw	r3,-76(fp)
100104f8:	e13ff217 	ldw	r4,-56(fp)
100104fc:	200f883a 	mov	r7,r4
10010500:	180d883a 	mov	r6,r3
10010504:	e17fff17 	ldw	r5,-4(fp)
10010508:	1009883a 	mov	r4,r2
1001050c:	000e9780 	call	1000e978 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
10010510:	e0bfff17 	ldw	r2,-4(fp)
10010514:	10800003 	ldbu	r2,0(r2)
10010518:	10803fcc 	andi	r2,r2,255
1001051c:	10803960 	cmpeqi	r2,r2,229
10010520:	1000101e 	bne	r2,zero,10010564 <find_file_in_directory+0x394>
10010524:	e0bfff17 	ldw	r2,-4(fp)
10010528:	10800003 	ldbu	r2,0(r2)
1001052c:	10803fcc 	andi	r2,r2,255
10010530:	10000c26 	beq	r2,zero,10010564 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
10010534:	e0fffb04 	addi	r3,fp,-20
10010538:	e0bff904 	addi	r2,fp,-28
1001053c:	180d883a 	mov	r6,r3
10010540:	100b883a 	mov	r5,r2
10010544:	e13fff17 	ldw	r4,-4(fp)
10010548:	000f9f40 	call	1000f9f4 <match_file_record_to_name_ext>
1001054c:	e0bff615 	stw	r2,-40(fp)

                            if (match)
10010550:	e0bff617 	ldw	r2,-40(fp)
10010554:	10000326 	beq	r2,zero,10010564 <find_file_in_directory+0x394>
                            {                               
                                result = true;
10010558:	00800044 	movi	r2,1
1001055c:	e0bfef15 	stw	r2,-68(fp)
                                break;
10010560:	00000606 	br	1001057c <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
10010564:	e0bff317 	ldw	r2,-52(fp)
10010568:	10800044 	addi	r2,r2,1
1001056c:	e0bff315 	stw	r2,-52(fp)
10010570:	e0bff317 	ldw	r2,-52(fp)
10010574:	10800410 	cmplti	r2,r2,16
10010578:	103fdc1e 	bne	r2,zero,100104ec <__alt_data_end+0xf80104ec>
                }
                else
                {
                    break;
                }
                if (result)
1001057c:	e0bfef17 	ldw	r2,-68(fp)
10010580:	10000c1e 	bne	r2,zero,100105b4 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
10010584:	e0bff217 	ldw	r2,-56(fp)
10010588:	10800044 	addi	r2,r2,1
1001058c:	e0bff215 	stw	r2,-56(fp)
10010590:	008400b4 	movhi	r2,4098
10010594:	10a01304 	addi	r2,r2,-32692
10010598:	10800383 	ldbu	r2,14(r2)
1001059c:	10803fcc 	andi	r2,r2,255
100105a0:	e0fff217 	ldw	r3,-56(fp)
100105a4:	18bfc716 	blt	r3,r2,100104c4 <__alt_data_end+0xf80104c4>
100105a8:	00000306 	br	100105b8 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
100105ac:	0001883a 	nop
100105b0:	00000106 	br	100105b8 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
100105b4:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
100105b8:	e0bfef17 	ldw	r2,-68(fp)
100105bc:	1000141e 	bne	r2,zero,10010610 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
100105c0:	e0bfed17 	ldw	r2,-76(fp)
100105c4:	e0fffc04 	addi	r3,fp,-16
100105c8:	180b883a 	mov	r5,r3
100105cc:	1009883a 	mov	r4,r2
100105d0:	000e6400 	call	1000e640 <get_cluster_flag>
100105d4:	10000c26 	beq	r2,zero,10010608 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
100105d8:	e0bffc0b 	ldhu	r2,-16(fp)
100105dc:	10bfffcc 	andi	r2,r2,65535
100105e0:	10fffe0c 	andi	r3,r2,65528
100105e4:	00bffe14 	movui	r2,65528
100105e8:	1880021e 	bne	r3,r2,100105f4 <find_file_in_directory+0x424>
					{
						return false;
100105ec:	0005883a 	mov	r2,zero
100105f0:	00001106 	br	10010638 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
100105f4:	e0bffc0b 	ldhu	r2,-16(fp)
100105f8:	10bfffcc 	andi	r2,r2,65535
100105fc:	10bffe0c 	andi	r2,r2,65528
10010600:	e0bfed15 	stw	r2,-76(fp)
10010604:	00000206 	br	10010610 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
10010608:	0005883a 	mov	r2,zero
1001060c:	00000a06 	br	10010638 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
10010610:	e0bfed17 	ldw	r2,-76(fp)
10010614:	00fffdd4 	movui	r3,65527
10010618:	18800616 	blt	r3,r2,10010634 <find_file_in_directory+0x464>
1001061c:	e0bfef17 	ldw	r2,-68(fp)
10010620:	103f9926 	beq	r2,zero,10010488 <__alt_data_end+0xf8010488>
10010624:	00000306 	br	10010634 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
10010628:	0001883a 	nop
1001062c:	00000106 	br	10010634 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
10010630:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
10010634:	e0bfef17 	ldw	r2,-68(fp)
}
10010638:	e037883a 	mov	sp,fp
1001063c:	dfc00117 	ldw	ra,4(sp)
10010640:	df000017 	ldw	fp,0(sp)
10010644:	dec00204 	addi	sp,sp,8
10010648:	f800283a 	ret

1001064c <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
1001064c:	defff504 	addi	sp,sp,-44
10010650:	dfc00a15 	stw	ra,40(sp)
10010654:	df000915 	stw	fp,36(sp)
10010658:	df000904 	addi	fp,sp,36
1001065c:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
10010660:	008400b4 	movhi	r2,4098
10010664:	10a01304 	addi	r2,r2,-32692
10010668:	10801117 	ldw	r2,68(r2)
1001066c:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
10010670:	00800084 	movi	r2,2
10010674:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
10010678:	00bfffc4 	movi	r2,-1
1001067c:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
10010680:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
10010684:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
10010688:	008400b4 	movhi	r2,4098
1001068c:	10a01304 	addi	r2,r2,-32692
10010690:	10801417 	ldw	r2,80(r2)
10010694:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
10010698:	008400b4 	movhi	r2,4098
1001069c:	10a01304 	addi	r2,r2,-32692
100106a0:	1080058b 	ldhu	r2,22(r2)
100106a4:	10bfffcc 	andi	r2,r2,65535
100106a8:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
100106ac:	008400b4 	movhi	r2,4098
100106b0:	10a01304 	addi	r2,r2,-32692
100106b4:	10800917 	ldw	r2,36(r2)
100106b8:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
100106bc:	e0bffd17 	ldw	r2,-12(fp)
100106c0:	e0fffe17 	ldw	r3,-8(fp)
100106c4:	18800d2e 	bgeu	r3,r2,100106fc <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
100106c8:	e0fffd17 	ldw	r3,-12(fp)
100106cc:	e0bffc17 	ldw	r2,-16(fp)
100106d0:	1887c83a 	sub	r3,r3,r2
100106d4:	008400b4 	movhi	r2,4098
100106d8:	10a01304 	addi	r2,r2,-32692
100106dc:	10800383 	ldbu	r2,14(r2)
100106e0:	10803fcc 	andi	r2,r2,255
100106e4:	100b883a 	mov	r5,r2
100106e8:	1809883a 	mov	r4,r3
100106ec:	000afcc0 	call	1000afcc <__udivsi3>
100106f0:	10800044 	addi	r2,r2,1
100106f4:	e0bffb15 	stw	r2,-20(fp)
100106f8:	00002c06 	br	100107ac <find_first_empty_cluster+0x160>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
100106fc:	e0fffe17 	ldw	r3,-8(fp)
10010700:	e0bffc17 	ldw	r2,-16(fp)
10010704:	1887c83a 	sub	r3,r3,r2
10010708:	008400b4 	movhi	r2,4098
1001070c:	10a01304 	addi	r2,r2,-32692
10010710:	10800383 	ldbu	r2,14(r2)
10010714:	10803fcc 	andi	r2,r2,255
10010718:	100b883a 	mov	r5,r2
1001071c:	1809883a 	mov	r4,r3
10010720:	000afcc0 	call	1000afcc <__udivsi3>
10010724:	10800044 	addi	r2,r2,1
10010728:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
1001072c:	00001f06 	br	100107ac <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
10010730:	e0bff717 	ldw	r2,-36(fp)
10010734:	d0e70217 	ldw	r3,-25592(gp)
10010738:	180b883a 	mov	r5,r3
1001073c:	1009883a 	mov	r4,r2
10010740:	000e5680 	call	1000e568 <Read_Sector_Data>
10010744:	10001426 	beq	r2,zero,10010798 <find_first_empty_cluster+0x14c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
10010748:	e0bff817 	ldw	r2,-32(fp)
1001074c:	10803fcc 	andi	r2,r2,255
10010750:	1085883a 	add	r2,r2,r2
10010754:	1007883a 	mov	r3,r2
10010758:	d0a70417 	ldw	r2,-25584(gp)
1001075c:	10800a17 	ldw	r2,40(r2)
10010760:	1885883a 	add	r2,r3,r2
10010764:	1080002b 	ldhuio	r2,0(r2)
10010768:	10bfffcc 	andi	r2,r2,65535
1001076c:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
10010770:	e0bff90f 	ldh	r2,-28(fp)
10010774:	10000726 	beq	r2,zero,10010794 <find_first_empty_cluster+0x148>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
10010778:	e0bff817 	ldw	r2,-32(fp)
1001077c:	10800044 	addi	r2,r2,1
10010780:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
10010784:	e0bff817 	ldw	r2,-32(fp)
10010788:	10803fcc 	andi	r2,r2,255
1001078c:	103fee1e 	bne	r2,zero,10010748 <__alt_data_end+0xf8010748>
10010790:	00000106 	br	10010798 <find_first_empty_cluster+0x14c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
10010794:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
10010798:	e0bff90f 	ldh	r2,-28(fp)
1001079c:	10000926 	beq	r2,zero,100107c4 <find_first_empty_cluster+0x178>
        {
            break;
        }
        sector++;
100107a0:	e0bff717 	ldw	r2,-36(fp)
100107a4:	10800044 	addi	r2,r2,1
100107a8:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
100107ac:	008400b4 	movhi	r2,4098
100107b0:	10a01304 	addi	r2,r2,-32692
100107b4:	10c01217 	ldw	r3,72(r2)
100107b8:	e0bff717 	ldw	r2,-36(fp)
100107bc:	18bfdc1e 	bne	r3,r2,10010730 <__alt_data_end+0xf8010730>
100107c0:	00000106 	br	100107c8 <find_first_empty_cluster+0x17c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
100107c4:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
100107c8:	e0bff90f 	ldh	r2,-28(fp)
100107cc:	1000081e 	bne	r2,zero,100107f0 <find_first_empty_cluster+0x1a4>
100107d0:	e0bff90f 	ldh	r2,-28(fp)
100107d4:	e0fffb17 	ldw	r3,-20(fp)
100107d8:	18800536 	bltu	r3,r2,100107f0 <find_first_empty_cluster+0x1a4>
    {
        *cluster_number = cluster_index;
100107dc:	e0bfff17 	ldw	r2,-4(fp)
100107e0:	e0fff817 	ldw	r3,-32(fp)
100107e4:	10c00015 	stw	r3,0(r2)
		result = true;
100107e8:	00800044 	movi	r2,1
100107ec:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
100107f0:	e0bffa17 	ldw	r2,-24(fp)
}
100107f4:	e037883a 	mov	sp,fp
100107f8:	dfc00117 	ldw	ra,4(sp)
100107fc:	df000017 	ldw	fp,0(sp)
10010800:	dec00204 	addi	sp,sp,8
10010804:	f800283a 	ret

10010808 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
10010808:	defff604 	addi	sp,sp,-40
1001080c:	dfc00915 	stw	ra,36(sp)
10010810:	df000815 	stw	fp,32(sp)
10010814:	df000804 	addi	fp,sp,32
10010818:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
1001081c:	00bfffc4 	movi	r2,-1
10010820:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
10010824:	e0bfff17 	ldw	r2,-4(fp)
10010828:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
1001082c:	e0bff917 	ldw	r2,-28(fp)
10010830:	10ffff84 	addi	r3,r2,-2
10010834:	008400b4 	movhi	r2,4098
10010838:	10a01304 	addi	r2,r2,-32692
1001083c:	10800383 	ldbu	r2,14(r2)
10010840:	10803fcc 	andi	r2,r2,255
10010844:	1885383a 	mul	r2,r3,r2
10010848:	1007883a 	mov	r3,r2
1001084c:	008400b4 	movhi	r2,4098
10010850:	10a01304 	addi	r2,r2,-32692
10010854:	10801417 	ldw	r2,80(r2)
10010858:	1885883a 	add	r2,r3,r2
1001085c:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
10010860:	e03ffa15 	stw	zero,-24(fp)
10010864:	00002c06 	br	10010918 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
10010868:	e0fffa17 	ldw	r3,-24(fp)
1001086c:	e0bffc17 	ldw	r2,-16(fp)
10010870:	1885883a 	add	r2,r3,r2
10010874:	d0e70217 	ldw	r3,-25592(gp)
10010878:	180b883a 	mov	r5,r3
1001087c:	1009883a 	mov	r4,r2
10010880:	000e5680 	call	1000e568 <Read_Sector_Data>
10010884:	10002b26 	beq	r2,zero,10010934 <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
10010888:	e03ffb15 	stw	zero,-20(fp)
1001088c:	00001c06 	br	10010900 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
10010890:	e0bffb17 	ldw	r2,-20(fp)
10010894:	1004917a 	slli	r2,r2,5
10010898:	1007883a 	mov	r3,r2
1001089c:	d0a70417 	ldw	r2,-25584(gp)
100108a0:	10800a17 	ldw	r2,40(r2)
100108a4:	1885883a 	add	r2,r3,r2
100108a8:	10800023 	ldbuio	r2,0(r2)
100108ac:	10803fcc 	andi	r2,r2,255
100108b0:	10803fcc 	andi	r2,r2,255
100108b4:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
100108b8:	e0bffd0b 	ldhu	r2,-12(fp)
100108bc:	10803960 	cmpeqi	r2,r2,229
100108c0:	1000021e 	bne	r2,zero,100108cc <find_first_empty_record_in_a_subdirectory+0xc4>
100108c4:	e0bffd0b 	ldhu	r2,-12(fp)
100108c8:	10000a1e 	bne	r2,zero,100108f4 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
100108cc:	e0bffa17 	ldw	r2,-24(fp)
100108d0:	1006913a 	slli	r3,r2,4
100108d4:	e0bffb17 	ldw	r2,-20(fp)
100108d8:	1885883a 	add	r2,r3,r2
100108dc:	1006943a 	slli	r3,r2,16
100108e0:	e0bff917 	ldw	r2,-28(fp)
100108e4:	1884b03a 	or	r2,r3,r2
100108e8:	e0bff815 	stw	r2,-32(fp)
                        return result;
100108ec:	e0bff817 	ldw	r2,-32(fp)
100108f0:	00005306 	br	10010a40 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
100108f4:	e0bffb17 	ldw	r2,-20(fp)
100108f8:	10800044 	addi	r2,r2,1
100108fc:	e0bffb15 	stw	r2,-20(fp)
10010900:	e0bffb17 	ldw	r2,-20(fp)
10010904:	10800410 	cmplti	r2,r2,16
10010908:	103fe11e 	bne	r2,zero,10010890 <__alt_data_end+0xf8010890>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
1001090c:	e0bffa17 	ldw	r2,-24(fp)
10010910:	10800044 	addi	r2,r2,1
10010914:	e0bffa15 	stw	r2,-24(fp)
10010918:	008400b4 	movhi	r2,4098
1001091c:	10a01304 	addi	r2,r2,-32692
10010920:	10800383 	ldbu	r2,14(r2)
10010924:	10803fcc 	andi	r2,r2,255
10010928:	e0fffa17 	ldw	r3,-24(fp)
1001092c:	18bfce16 	blt	r3,r2,10010868 <__alt_data_end+0xf8010868>
10010930:	00000106 	br	10010938 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
10010934:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
10010938:	e0bff817 	ldw	r2,-32(fp)
1001093c:	1000390e 	bge	r2,zero,10010a24 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
10010940:	e0bff917 	ldw	r2,-28(fp)
10010944:	e0fffd84 	addi	r3,fp,-10
10010948:	180b883a 	mov	r5,r3
1001094c:	1009883a 	mov	r4,r2
10010950:	000e6400 	call	1000e640 <get_cluster_flag>
10010954:	10003126 	beq	r2,zero,10010a1c <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
10010958:	e0bffd8b 	ldhu	r2,-10(fp)
1001095c:	10bfffcc 	andi	r2,r2,65535
10010960:	10fffe0c 	andi	r3,r2,65528
10010964:	00bffe14 	movui	r2,65528
10010968:	18802e1e 	bne	r3,r2,10010a24 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
1001096c:	e0bffe04 	addi	r2,fp,-8
10010970:	1009883a 	mov	r4,r2
10010974:	001064c0 	call	1001064c <find_first_empty_cluster>
10010978:	10002326 	beq	r2,zero,10010a08 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
1001097c:	e0bff917 	ldw	r2,-28(fp)
10010980:	e0fffe17 	ldw	r3,-8(fp)
10010984:	18ffffcc 	andi	r3,r3,65535
10010988:	18e0001c 	xori	r3,r3,32768
1001098c:	18e00004 	addi	r3,r3,-32768
10010990:	01800044 	movi	r6,1
10010994:	180b883a 	mov	r5,r3
10010998:	1009883a 	mov	r4,r2
1001099c:	000e6f40 	call	1000e6f4 <mark_cluster>
100109a0:	10001926 	beq	r2,zero,10010a08 <find_first_empty_record_in_a_subdirectory+0x200>
100109a4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
100109a8:	01800044 	movi	r6,1
100109ac:	017fffc4 	movi	r5,-1
100109b0:	1009883a 	mov	r4,r2
100109b4:	000e6f40 	call	1000e6f4 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
100109b8:	10001326 	beq	r2,zero,10010a08 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
100109bc:	e0bff917 	ldw	r2,-28(fp)
100109c0:	e0fffe17 	ldw	r3,-8(fp)
100109c4:	18ffffcc 	andi	r3,r3,65535
100109c8:	18e0001c 	xori	r3,r3,32768
100109cc:	18e00004 	addi	r3,r3,-32768
100109d0:	000d883a 	mov	r6,zero
100109d4:	180b883a 	mov	r5,r3
100109d8:	1009883a 	mov	r4,r2
100109dc:	000e6f40 	call	1000e6f4 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
100109e0:	10000926 	beq	r2,zero,10010a08 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
100109e4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
100109e8:	000d883a 	mov	r6,zero
100109ec:	017fffc4 	movi	r5,-1
100109f0:	1009883a 	mov	r4,r2
100109f4:	000e6f40 	call	1000e6f4 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
100109f8:	10000326 	beq	r2,zero,10010a08 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
100109fc:	000e51c0 	call	1000e51c <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
10010a00:	e0bffe17 	ldw	r2,-8(fp)
10010a04:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
10010a08:	e0bffd8b 	ldhu	r2,-10(fp)
10010a0c:	10bfffcc 	andi	r2,r2,65535
10010a10:	10bffe0c 	andi	r2,r2,65528
10010a14:	e0bff915 	stw	r2,-28(fp)
10010a18:	00000206 	br	10010a24 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
10010a1c:	00bfffc4 	movi	r2,-1
10010a20:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
10010a24:	e0bff917 	ldw	r2,-28(fp)
10010a28:	00fffdd4 	movui	r3,65527
10010a2c:	18800316 	blt	r3,r2,10010a3c <find_first_empty_record_in_a_subdirectory+0x234>
10010a30:	e0bff817 	ldw	r2,-32(fp)
10010a34:	10bfffe0 	cmpeqi	r2,r2,-1
10010a38:	103f7c1e 	bne	r2,zero,1001082c <__alt_data_end+0xf801082c>
    return result; 
10010a3c:	e0bff817 	ldw	r2,-32(fp)
}
10010a40:	e037883a 	mov	sp,fp
10010a44:	dfc00117 	ldw	ra,4(sp)
10010a48:	df000017 	ldw	fp,0(sp)
10010a4c:	dec00204 	addi	sp,sp,8
10010a50:	f800283a 	ret

10010a54 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
10010a54:	defff904 	addi	sp,sp,-28
10010a58:	dfc00615 	stw	ra,24(sp)
10010a5c:	df000515 	stw	fp,20(sp)
10010a60:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
10010a64:	008400b4 	movhi	r2,4098
10010a68:	10a01304 	addi	r2,r2,-32692
10010a6c:	1080050b 	ldhu	r2,20(r2)
10010a70:	10bfffcc 	andi	r2,r2,65535
10010a74:	1006917a 	slli	r3,r2,5
10010a78:	008400b4 	movhi	r2,4098
10010a7c:	10a01304 	addi	r2,r2,-32692
10010a80:	1080030b 	ldhu	r2,12(r2)
10010a84:	10bfffcc 	andi	r2,r2,65535
10010a88:	100b883a 	mov	r5,r2
10010a8c:	1809883a 	mov	r4,r3
10010a90:	000aed40 	call	1000aed4 <__divsi3>
10010a94:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
10010a98:	00bfffc4 	movi	r2,-1
10010a9c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
10010aa0:	e03ffb15 	stw	zero,-20(fp)
10010aa4:	00002d06 	br	10010b5c <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
10010aa8:	008400b4 	movhi	r2,4098
10010aac:	10a01304 	addi	r2,r2,-32692
10010ab0:	10c01317 	ldw	r3,76(r2)
10010ab4:	e0bffb17 	ldw	r2,-20(fp)
10010ab8:	1885883a 	add	r2,r3,r2
10010abc:	1007883a 	mov	r3,r2
10010ac0:	d0a70217 	ldw	r2,-25592(gp)
10010ac4:	100b883a 	mov	r5,r2
10010ac8:	1809883a 	mov	r4,r3
10010acc:	000e5680 	call	1000e568 <Read_Sector_Data>
10010ad0:	10002626 	beq	r2,zero,10010b6c <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
10010ad4:	e03ffc15 	stw	zero,-16(fp)
10010ad8:	00001a06 	br	10010b44 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
10010adc:	e0bffc17 	ldw	r2,-16(fp)
10010ae0:	1004917a 	slli	r2,r2,5
10010ae4:	1007883a 	mov	r3,r2
10010ae8:	d0a70417 	ldw	r2,-25584(gp)
10010aec:	10800a17 	ldw	r2,40(r2)
10010af0:	1885883a 	add	r2,r3,r2
10010af4:	10800023 	ldbuio	r2,0(r2)
10010af8:	10803fcc 	andi	r2,r2,255
10010afc:	10803fcc 	andi	r2,r2,255
10010b00:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
10010b04:	e0bfff0b 	ldhu	r2,-4(fp)
10010b08:	10803960 	cmpeqi	r2,r2,229
10010b0c:	1000021e 	bne	r2,zero,10010b18 <find_first_empty_record_in_root_directory+0xc4>
10010b10:	e0bfff0b 	ldhu	r2,-4(fp)
10010b14:	1000081e 	bne	r2,zero,10010b38 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
10010b18:	e0bffb17 	ldw	r2,-20(fp)
10010b1c:	1006913a 	slli	r3,r2,4
10010b20:	e0bffc17 	ldw	r2,-16(fp)
10010b24:	1885883a 	add	r2,r3,r2
10010b28:	1004943a 	slli	r2,r2,16
10010b2c:	e0bffe15 	stw	r2,-8(fp)
                    return result;
10010b30:	e0bffe17 	ldw	r2,-8(fp)
10010b34:	00000f06 	br	10010b74 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
10010b38:	e0bffc17 	ldw	r2,-16(fp)
10010b3c:	10800044 	addi	r2,r2,1
10010b40:	e0bffc15 	stw	r2,-16(fp)
10010b44:	e0bffc17 	ldw	r2,-16(fp)
10010b48:	10800410 	cmplti	r2,r2,16
10010b4c:	103fe31e 	bne	r2,zero,10010adc <__alt_data_end+0xf8010adc>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
10010b50:	e0bffb17 	ldw	r2,-20(fp)
10010b54:	10800044 	addi	r2,r2,1
10010b58:	e0bffb15 	stw	r2,-20(fp)
10010b5c:	e0fffb17 	ldw	r3,-20(fp)
10010b60:	e0bffd17 	ldw	r2,-12(fp)
10010b64:	18bfd016 	blt	r3,r2,10010aa8 <__alt_data_end+0xf8010aa8>
10010b68:	00000106 	br	10010b70 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
10010b6c:	0001883a 	nop
        }
    }
    return result;
10010b70:	e0bffe17 	ldw	r2,-8(fp)
}
10010b74:	e037883a 	mov	sp,fp
10010b78:	dfc00117 	ldw	ra,4(sp)
10010b7c:	df000017 	ldw	fp,0(sp)
10010b80:	dec00204 	addi	sp,sp,8
10010b84:	f800283a 	ret

10010b88 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
10010b88:	defffa04 	addi	sp,sp,-24
10010b8c:	df000515 	stw	fp,20(sp)
10010b90:	df000504 	addi	fp,sp,20
10010b94:	e13ffd15 	stw	r4,-12(fp)
10010b98:	e17ffe15 	stw	r5,-8(fp)
10010b9c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
10010ba0:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
10010ba4:	e03ffb15 	stw	zero,-20(fp)
10010ba8:	00002506 	br	10010c40 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
10010bac:	e0bffc17 	ldw	r2,-16(fp)
10010bb0:	e0fffd17 	ldw	r3,-12(fp)
10010bb4:	1885883a 	add	r2,r3,r2
10010bb8:	10800003 	ldbu	r2,0(r2)
10010bbc:	10803fcc 	andi	r2,r2,255
10010bc0:	1080201c 	xori	r2,r2,128
10010bc4:	10bfe004 	addi	r2,r2,-128
10010bc8:	10800ba0 	cmpeqi	r2,r2,46
10010bcc:	1000141e 	bne	r2,zero,10010c20 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
10010bd0:	e0bffb17 	ldw	r2,-20(fp)
10010bd4:	e0fffe17 	ldw	r3,-8(fp)
10010bd8:	1885883a 	add	r2,r3,r2
10010bdc:	e0fffc17 	ldw	r3,-16(fp)
10010be0:	e13ffd17 	ldw	r4,-12(fp)
10010be4:	20c7883a 	add	r3,r4,r3
10010be8:	18c00003 	ldbu	r3,0(r3)
10010bec:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
10010bf0:	e0bffc17 	ldw	r2,-16(fp)
10010bf4:	e0fffd17 	ldw	r3,-12(fp)
10010bf8:	1885883a 	add	r2,r3,r2
10010bfc:	10800003 	ldbu	r2,0(r2)
10010c00:	10803fcc 	andi	r2,r2,255
10010c04:	1080201c 	xori	r2,r2,128
10010c08:	10bfe004 	addi	r2,r2,-128
10010c0c:	10000926 	beq	r2,zero,10010c34 <convert_filename_to_name_extension+0xac>
10010c10:	e0bffc17 	ldw	r2,-16(fp)
10010c14:	10800044 	addi	r2,r2,1
10010c18:	e0bffc15 	stw	r2,-16(fp)
10010c1c:	00000506 	br	10010c34 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
10010c20:	e0bffb17 	ldw	r2,-20(fp)
10010c24:	e0fffe17 	ldw	r3,-8(fp)
10010c28:	1885883a 	add	r2,r3,r2
10010c2c:	00c00804 	movi	r3,32
10010c30:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
10010c34:	e0bffb17 	ldw	r2,-20(fp)
10010c38:	10800044 	addi	r2,r2,1
10010c3c:	e0bffb15 	stw	r2,-20(fp)
10010c40:	e0bffb17 	ldw	r2,-20(fp)
10010c44:	10800210 	cmplti	r2,r2,8
10010c48:	103fd81e 	bne	r2,zero,10010bac <__alt_data_end+0xf8010bac>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
10010c4c:	e0bffc17 	ldw	r2,-16(fp)
10010c50:	e0fffd17 	ldw	r3,-12(fp)
10010c54:	1885883a 	add	r2,r3,r2
10010c58:	10800003 	ldbu	r2,0(r2)
10010c5c:	10803fcc 	andi	r2,r2,255
10010c60:	1080201c 	xori	r2,r2,128
10010c64:	10bfe004 	addi	r2,r2,-128
10010c68:	10800b98 	cmpnei	r2,r2,46
10010c6c:	1000031e 	bne	r2,zero,10010c7c <convert_filename_to_name_extension+0xf4>
10010c70:	e0bffc17 	ldw	r2,-16(fp)
10010c74:	10800044 	addi	r2,r2,1
10010c78:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
10010c7c:	e03ffb15 	stw	zero,-20(fp)
10010c80:	00001c06 	br	10010cf4 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
10010c84:	e0bffc17 	ldw	r2,-16(fp)
10010c88:	e0fffd17 	ldw	r3,-12(fp)
10010c8c:	1885883a 	add	r2,r3,r2
10010c90:	10800003 	ldbu	r2,0(r2)
10010c94:	10803fcc 	andi	r2,r2,255
10010c98:	1080201c 	xori	r2,r2,128
10010c9c:	10bfe004 	addi	r2,r2,-128
10010ca0:	10000c26 	beq	r2,zero,10010cd4 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
10010ca4:	e0bffb17 	ldw	r2,-20(fp)
10010ca8:	e0ffff17 	ldw	r3,-4(fp)
10010cac:	1885883a 	add	r2,r3,r2
10010cb0:	e0fffc17 	ldw	r3,-16(fp)
10010cb4:	e13ffd17 	ldw	r4,-12(fp)
10010cb8:	20c7883a 	add	r3,r4,r3
10010cbc:	18c00003 	ldbu	r3,0(r3)
10010cc0:	10c00005 	stb	r3,0(r2)
            local++;
10010cc4:	e0bffc17 	ldw	r2,-16(fp)
10010cc8:	10800044 	addi	r2,r2,1
10010ccc:	e0bffc15 	stw	r2,-16(fp)
10010cd0:	00000506 	br	10010ce8 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
10010cd4:	e0bffb17 	ldw	r2,-20(fp)
10010cd8:	e0ffff17 	ldw	r3,-4(fp)
10010cdc:	1885883a 	add	r2,r3,r2
10010ce0:	00c00804 	movi	r3,32
10010ce4:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
10010ce8:	e0bffb17 	ldw	r2,-20(fp)
10010cec:	10800044 	addi	r2,r2,1
10010cf0:	e0bffb15 	stw	r2,-20(fp)
10010cf4:	e0bffb17 	ldw	r2,-20(fp)
10010cf8:	108000d0 	cmplti	r2,r2,3
10010cfc:	103fe11e 	bne	r2,zero,10010c84 <__alt_data_end+0xf8010c84>
        {
            extension[counter] = ' ';
        }
    }

}
10010d00:	0001883a 	nop
10010d04:	e037883a 	mov	sp,fp
10010d08:	df000017 	ldw	fp,0(sp)
10010d0c:	dec00104 	addi	sp,sp,4
10010d10:	f800283a 	ret

10010d14 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
10010d14:	defff504 	addi	sp,sp,-44
10010d18:	dfc00a15 	stw	ra,40(sp)
10010d1c:	df000915 	stw	fp,36(sp)
10010d20:	df000904 	addi	fp,sp,36
10010d24:	e13ffd15 	stw	r4,-12(fp)
10010d28:	e17ffe15 	stw	r5,-8(fp)
10010d2c:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
10010d30:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
10010d34:	e0bffc04 	addi	r2,fp,-16
10010d38:	1009883a 	mov	r4,r2
10010d3c:	001064c0 	call	1001064c <find_first_empty_cluster>
10010d40:	1000a026 	beq	r2,zero,10010fc4 <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
10010d44:	e0bfff17 	ldw	r2,-4(fp)
10010d48:	10800a17 	ldw	r2,40(r2)
10010d4c:	1000031e 	bne	r2,zero,10010d5c <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
10010d50:	0010a540 	call	10010a54 <find_first_empty_record_in_root_directory>
10010d54:	e0bff815 	stw	r2,-32(fp)
10010d58:	00000606 	br	10010d74 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
10010d5c:	e0bfff17 	ldw	r2,-4(fp)
10010d60:	1080058b 	ldhu	r2,22(r2)
10010d64:	10bfffcc 	andi	r2,r2,65535
10010d68:	1009883a 	mov	r4,r2
10010d6c:	00108080 	call	10010808 <find_first_empty_record_in_a_subdirectory>
10010d70:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
10010d74:	e0bff817 	ldw	r2,-32(fp)
10010d78:	10009216 	blt	r2,zero,10010fc4 <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
10010d7c:	e13ffd17 	ldw	r4,-12(fp)
10010d80:	000f93c0 	call	1000f93c <get_dir_divider_location>
10010d84:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
10010d88:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
10010d8c:	00000b06 	br	10010dbc <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
10010d90:	e0fffa17 	ldw	r3,-24(fp)
10010d94:	e0bff917 	ldw	r2,-28(fp)
10010d98:	1885883a 	add	r2,r3,r2
10010d9c:	10800044 	addi	r2,r2,1
10010da0:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
10010da4:	e0bffa17 	ldw	r2,-24(fp)
10010da8:	e0fffd17 	ldw	r3,-12(fp)
10010dac:	1885883a 	add	r2,r3,r2
10010db0:	1009883a 	mov	r4,r2
10010db4:	000f93c0 	call	1000f93c <get_dir_divider_location>
10010db8:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
10010dbc:	e0bff917 	ldw	r2,-28(fp)
10010dc0:	00bff316 	blt	zero,r2,10010d90 <__alt_data_end+0xf8010d90>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
10010dc4:	e0bffa17 	ldw	r2,-24(fp)
10010dc8:	e0fffd17 	ldw	r3,-12(fp)
10010dcc:	1887883a 	add	r3,r3,r2
10010dd0:	e13ffe17 	ldw	r4,-8(fp)
10010dd4:	e0bffe17 	ldw	r2,-8(fp)
10010dd8:	10800204 	addi	r2,r2,8
10010ddc:	100d883a 	mov	r6,r2
10010de0:	200b883a 	mov	r5,r4
10010de4:	1809883a 	mov	r4,r3
10010de8:	0010b880 	call	10010b88 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
10010dec:	e0bffe17 	ldw	r2,-8(fp)
10010df0:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
10010df4:	e0bffe17 	ldw	r2,-8(fp)
10010df8:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
10010dfc:	e0bffe17 	ldw	r2,-8(fp)
10010e00:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
10010e04:	e0bffe17 	ldw	r2,-8(fp)
10010e08:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
10010e0c:	e0bffe17 	ldw	r2,-8(fp)
10010e10:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
10010e14:	e0bffe17 	ldw	r2,-8(fp)
10010e18:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
10010e1c:	e0bffc17 	ldw	r2,-16(fp)
10010e20:	1007883a 	mov	r3,r2
10010e24:	e0bffe17 	ldw	r2,-8(fp)
10010e28:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
10010e2c:	e0bffe17 	ldw	r2,-8(fp)
10010e30:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
10010e34:	e0fffc17 	ldw	r3,-16(fp)
10010e38:	e0bffe17 	ldw	r2,-8(fp)
10010e3c:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
10010e40:	e0bffe17 	ldw	r2,-8(fp)
10010e44:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
10010e48:	e0bffe17 	ldw	r2,-8(fp)
10010e4c:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
10010e50:	e0bff817 	ldw	r2,-32(fp)
10010e54:	10ffffcc 	andi	r3,r2,65535
10010e58:	e0bffe17 	ldw	r2,-8(fp)
10010e5c:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
10010e60:	e0bff817 	ldw	r2,-32(fp)
10010e64:	1004d43a 	srli	r2,r2,16
10010e68:	1000010e 	bge	r2,zero,10010e70 <create_file+0x15c>
10010e6c:	108003c4 	addi	r2,r2,15
10010e70:	1005d13a 	srai	r2,r2,4
10010e74:	1007883a 	mov	r3,r2
10010e78:	e0bffe17 	ldw	r2,-8(fp)
10010e7c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
10010e80:	e0bff817 	ldw	r2,-32(fp)
10010e84:	1004d43a 	srli	r2,r2,16
10010e88:	1007883a 	mov	r3,r2
10010e8c:	00a00034 	movhi	r2,32768
10010e90:	108003c4 	addi	r2,r2,15
10010e94:	1884703a 	and	r2,r3,r2
10010e98:	1000040e 	bge	r2,zero,10010eac <create_file+0x198>
10010e9c:	10bfffc4 	addi	r2,r2,-1
10010ea0:	00fffc04 	movi	r3,-16
10010ea4:	10c4b03a 	or	r2,r2,r3
10010ea8:	10800044 	addi	r2,r2,1
10010eac:	1004917a 	slli	r2,r2,5
10010eb0:	1007883a 	mov	r3,r2
10010eb4:	e0bffe17 	ldw	r2,-8(fp)
10010eb8:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
10010ebc:	e0bfff17 	ldw	r2,-4(fp)
10010ec0:	1080058b 	ldhu	r2,22(r2)
10010ec4:	10ffffcc 	andi	r3,r2,65535
10010ec8:	e0bffe17 	ldw	r2,-8(fp)
10010ecc:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
10010ed0:	e0bffe17 	ldw	r2,-8(fp)
10010ed4:	00c00044 	movi	r3,1
10010ed8:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
10010edc:	e0bffe17 	ldw	r2,-8(fp)
10010ee0:	00c00044 	movi	r3,1
10010ee4:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
10010ee8:	e0bffe17 	ldw	r2,-8(fp)
10010eec:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
10010ef0:	1000071e 	bne	r2,zero,10010f10 <create_file+0x1fc>
10010ef4:	008400b4 	movhi	r2,4098
10010ef8:	10a01304 	addi	r2,r2,-32692
10010efc:	10c01317 	ldw	r3,76(r2)
10010f00:	e0bffe17 	ldw	r2,-8(fp)
10010f04:	10800b17 	ldw	r2,44(r2)
10010f08:	1885883a 	add	r2,r3,r2
10010f0c:	00000f06 	br	10010f4c <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
10010f10:	008400b4 	movhi	r2,4098
10010f14:	10a01304 	addi	r2,r2,-32692
10010f18:	10c01417 	ldw	r3,80(r2)
10010f1c:	e0bffe17 	ldw	r2,-8(fp)
10010f20:	10800a17 	ldw	r2,40(r2)
10010f24:	113fff84 	addi	r4,r2,-2
10010f28:	008400b4 	movhi	r2,4098
10010f2c:	10a01304 	addi	r2,r2,-32692
10010f30:	10800383 	ldbu	r2,14(r2)
10010f34:	10803fcc 	andi	r2,r2,255
10010f38:	2085383a 	mul	r2,r4,r2
10010f3c:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
10010f40:	e0bffe17 	ldw	r2,-8(fp)
10010f44:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
10010f48:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
10010f4c:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
10010f50:	e0bffb17 	ldw	r2,-20(fp)
10010f54:	d0e70217 	ldw	r3,-25592(gp)
10010f58:	180b883a 	mov	r5,r3
10010f5c:	1009883a 	mov	r4,r2
10010f60:	000e5680 	call	1000e568 <Read_Sector_Data>
10010f64:	10001726 	beq	r2,zero,10010fc4 <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
10010f68:	e0bffe17 	ldw	r2,-8(fp)
10010f6c:	10800c0b 	ldhu	r2,48(r2)
10010f70:	10bfffcc 	andi	r2,r2,65535
10010f74:	10a0001c 	xori	r2,r2,32768
10010f78:	10a00004 	addi	r2,r2,-32768
10010f7c:	e17ffe17 	ldw	r5,-8(fp)
10010f80:	1009883a 	mov	r4,r2
10010f84:	000ebf40 	call	1000ebf4 <Write_File_Record_At_Offset>
10010f88:	10000e26 	beq	r2,zero,10010fc4 <create_file+0x2b0>
                {
                    Save_Modified_Sector();
10010f8c:	000e51c0 	call	1000e51c <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
10010f90:	e0bffc17 	ldw	r2,-16(fp)
10010f94:	01800044 	movi	r6,1
10010f98:	017fffc4 	movi	r5,-1
10010f9c:	1009883a 	mov	r4,r2
10010fa0:	000e6f40 	call	1000e6f4 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
10010fa4:	e0bffc17 	ldw	r2,-16(fp)
10010fa8:	000d883a 	mov	r6,zero
10010fac:	017fffc4 	movi	r5,-1
10010fb0:	1009883a 	mov	r4,r2
10010fb4:	000e6f40 	call	1000e6f4 <mark_cluster>
10010fb8:	10000226 	beq	r2,zero,10010fc4 <create_file+0x2b0>
                    {
                        result = true;
10010fbc:	00800044 	movi	r2,1
10010fc0:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
10010fc4:	e0bff717 	ldw	r2,-36(fp)
}
10010fc8:	e037883a 	mov	sp,fp
10010fcc:	dfc00117 	ldw	ra,4(sp)
10010fd0:	df000017 	ldw	fp,0(sp)
10010fd4:	dec00204 	addi	sp,sp,8
10010fd8:	f800283a 	ret

10010fdc <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
10010fdc:	defffb04 	addi	sp,sp,-20
10010fe0:	df000415 	stw	fp,16(sp)
10010fe4:	df000404 	addi	fp,sp,16
10010fe8:	e13ffe15 	stw	r4,-8(fp)
10010fec:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
10010ff0:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
10010ff4:	e03ffc15 	stw	zero,-16(fp)
10010ff8:	00001506 	br	10011050 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
10010ffc:	e0fffe17 	ldw	r3,-8(fp)
10011000:	e0bffc17 	ldw	r2,-16(fp)
10011004:	1885883a 	add	r2,r3,r2
10011008:	10800003 	ldbu	r2,0(r2)
1001100c:	10803fcc 	andi	r2,r2,255
10011010:	10800820 	cmpeqi	r2,r2,32
10011014:	10000b1e 	bne	r2,zero,10011044 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
10011018:	e0bffd17 	ldw	r2,-12(fp)
1001101c:	e0ffff17 	ldw	r3,-4(fp)
10011020:	1885883a 	add	r2,r3,r2
10011024:	e13ffe17 	ldw	r4,-8(fp)
10011028:	e0fffc17 	ldw	r3,-16(fp)
1001102c:	20c7883a 	add	r3,r4,r3
10011030:	18c00003 	ldbu	r3,0(r3)
10011034:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
10011038:	e0bffd17 	ldw	r2,-12(fp)
1001103c:	10800044 	addi	r2,r2,1
10011040:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
10011044:	e0bffc17 	ldw	r2,-16(fp)
10011048:	10800044 	addi	r2,r2,1
1001104c:	e0bffc15 	stw	r2,-16(fp)
10011050:	e0bffc17 	ldw	r2,-16(fp)
10011054:	10800210 	cmplti	r2,r2,8
10011058:	103fe81e 	bne	r2,zero,10010ffc <__alt_data_end+0xf8010ffc>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
1001105c:	e0bffe17 	ldw	r2,-8(fp)
10011060:	10800203 	ldbu	r2,8(r2)
10011064:	10803fcc 	andi	r2,r2,255
10011068:	10800820 	cmpeqi	r2,r2,32
1001106c:	1000241e 	bne	r2,zero,10011100 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
10011070:	e0bffd17 	ldw	r2,-12(fp)
10011074:	e0ffff17 	ldw	r3,-4(fp)
10011078:	1885883a 	add	r2,r3,r2
1001107c:	00c00b84 	movi	r3,46
10011080:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
10011084:	e0bffd17 	ldw	r2,-12(fp)
10011088:	10800044 	addi	r2,r2,1
1001108c:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
10011090:	e03ffc15 	stw	zero,-16(fp)
10011094:	00001706 	br	100110f4 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
10011098:	e0fffe17 	ldw	r3,-8(fp)
1001109c:	e0bffc17 	ldw	r2,-16(fp)
100110a0:	1885883a 	add	r2,r3,r2
100110a4:	10800204 	addi	r2,r2,8
100110a8:	10800003 	ldbu	r2,0(r2)
100110ac:	10803fcc 	andi	r2,r2,255
100110b0:	10800820 	cmpeqi	r2,r2,32
100110b4:	10000c1e 	bne	r2,zero,100110e8 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
100110b8:	e0bffd17 	ldw	r2,-12(fp)
100110bc:	e0ffff17 	ldw	r3,-4(fp)
100110c0:	1885883a 	add	r2,r3,r2
100110c4:	e13ffe17 	ldw	r4,-8(fp)
100110c8:	e0fffc17 	ldw	r3,-16(fp)
100110cc:	20c7883a 	add	r3,r4,r3
100110d0:	18c00204 	addi	r3,r3,8
100110d4:	18c00003 	ldbu	r3,0(r3)
100110d8:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
100110dc:	e0bffd17 	ldw	r2,-12(fp)
100110e0:	10800044 	addi	r2,r2,1
100110e4:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
100110e8:	e0bffc17 	ldw	r2,-16(fp)
100110ec:	10800044 	addi	r2,r2,1
100110f0:	e0bffc15 	stw	r2,-16(fp)
100110f4:	e0bffc17 	ldw	r2,-16(fp)
100110f8:	108000d0 	cmplti	r2,r2,3
100110fc:	103fe61e 	bne	r2,zero,10011098 <__alt_data_end+0xf8011098>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
10011100:	e0bffd17 	ldw	r2,-12(fp)
10011104:	e0ffff17 	ldw	r3,-4(fp)
10011108:	1885883a 	add	r2,r3,r2
1001110c:	10000005 	stb	zero,0(r2)
}
10011110:	0001883a 	nop
10011114:	e037883a 	mov	sp,fp
10011118:	df000017 	ldw	fp,0(sp)
1001111c:	dec00104 	addi	sp,sp,4
10011120:	f800283a 	ret

10011124 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
10011124:	defffc04 	addi	sp,sp,-16
10011128:	dfc00315 	stw	ra,12(sp)
1001112c:	df000215 	stw	fp,8(sp)
10011130:	df000204 	addi	fp,sp,8
10011134:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
10011138:	d1600804 	addi	r5,gp,-32736
1001113c:	e13fff17 	ldw	r4,-4(fp)
10011140:	00136040 	call	10013604 <alt_find_dev>
10011144:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
10011148:	e0bffe17 	ldw	r2,-8(fp)
1001114c:	10001e26 	beq	r2,zero,100111c8 <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
10011150:	e0bffe17 	ldw	r2,-8(fp)
10011154:	10800a17 	ldw	r2,40(r2)
10011158:	10808d04 	addi	r2,r2,564
1001115c:	d0a6fc15 	stw	r2,-25616(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
10011160:	e0bffe17 	ldw	r2,-8(fp)
10011164:	10800a17 	ldw	r2,40(r2)
10011168:	10808904 	addi	r2,r2,548
1001116c:	d0a6fd15 	stw	r2,-25612(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
10011170:	e0bffe17 	ldw	r2,-8(fp)
10011174:	10800a17 	ldw	r2,40(r2)
10011178:	10808404 	addi	r2,r2,528
1001117c:	d0a6fe15 	stw	r2,-25608(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
10011180:	e0bffe17 	ldw	r2,-8(fp)
10011184:	10800a17 	ldw	r2,40(r2)
10011188:	10808c04 	addi	r2,r2,560
1001118c:	d0a6ff15 	stw	r2,-25604(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
10011190:	e0bffe17 	ldw	r2,-8(fp)
10011194:	10800a17 	ldw	r2,40(r2)
10011198:	10808b04 	addi	r2,r2,556
1001119c:	d0a70015 	stw	r2,-25600(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
100111a0:	e0bffe17 	ldw	r2,-8(fp)
100111a4:	10800a17 	ldw	r2,40(r2)
100111a8:	d0a70115 	stw	r2,-25596(gp)
		device_pointer = dev;
100111ac:	e0bffe17 	ldw	r2,-8(fp)
100111b0:	d0a70415 	stw	r2,-25584(gp)
		initialized = false;
100111b4:	d026fa15 	stw	zero,-25624(gp)
		is_sd_card_formated_as_FAT16 = false;
100111b8:	d026fb15 	stw	zero,-25620(gp)
		search_data.valid = false;
100111bc:	008400b4 	movhi	r2,4098
100111c0:	10a00e04 	addi	r2,r2,-32712
100111c4:	10000415 	stw	zero,16(r2)
	}
	return dev;
100111c8:	e0bffe17 	ldw	r2,-8(fp)
}
100111cc:	e037883a 	mov	sp,fp
100111d0:	dfc00117 	ldw	ra,4(sp)
100111d4:	df000017 	ldw	fp,0(sp)
100111d8:	dec00204 	addi	sp,sp,8
100111dc:	f800283a 	ret

100111e0 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
100111e0:	defffd04 	addi	sp,sp,-12
100111e4:	df000215 	stw	fp,8(sp)
100111e8:	df000204 	addi	fp,sp,8
    bool result = false;
100111ec:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
100111f0:	d0a70417 	ldw	r2,-25584(gp)
100111f4:	10000826 	beq	r2,zero,10011218 <alt_up_sd_card_is_Present+0x38>
100111f8:	d0a6fc17 	ldw	r2,-25616(gp)
100111fc:	1080002b 	ldhuio	r2,0(r2)
10011200:	10bfffcc 	andi	r2,r2,65535
10011204:	1080008c 	andi	r2,r2,2
10011208:	10000326 	beq	r2,zero,10011218 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
1001120c:	00800044 	movi	r2,1
10011210:	e0bffe15 	stw	r2,-8(fp)
10011214:	00001e06 	br	10011290 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
10011218:	d0a6fa17 	ldw	r2,-25624(gp)
1001121c:	10800058 	cmpnei	r2,r2,1
10011220:	10001b1e 	bne	r2,zero,10011290 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
10011224:	d026fa15 	stw	zero,-25624(gp)
		search_data.valid = false;
10011228:	008400b4 	movhi	r2,4098
1001122c:	10a00e04 	addi	r2,r2,-32712
10011230:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
10011234:	d026fb15 	stw	zero,-25620(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
10011238:	e03fff15 	stw	zero,-4(fp)
1001123c:	00001106 	br	10011284 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
10011240:	008400b4 	movhi	r2,4098
10011244:	10a02804 	addi	r2,r2,-32608
10011248:	e0ffff17 	ldw	r3,-4(fp)
1001124c:	180691ba 	slli	r3,r3,6
10011250:	10c5883a 	add	r2,r2,r3
10011254:	10800f04 	addi	r2,r2,60
10011258:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
1001125c:	008400b4 	movhi	r2,4098
10011260:	10a02804 	addi	r2,r2,-32608
10011264:	e0ffff17 	ldw	r3,-4(fp)
10011268:	180691ba 	slli	r3,r3,6
1001126c:	10c5883a 	add	r2,r2,r3
10011270:	10800e04 	addi	r2,r2,56
10011274:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
10011278:	e0bfff17 	ldw	r2,-4(fp)
1001127c:	10800044 	addi	r2,r2,1
10011280:	e0bfff15 	stw	r2,-4(fp)
10011284:	e0bfff17 	ldw	r2,-4(fp)
10011288:	10800510 	cmplti	r2,r2,20
1001128c:	103fec1e 	bne	r2,zero,10011240 <__alt_data_end+0xf8011240>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
10011290:	e0bffe17 	ldw	r2,-8(fp)
}
10011294:	e037883a 	mov	sp,fp
10011298:	df000017 	ldw	fp,0(sp)
1001129c:	dec00104 	addi	sp,sp,4
100112a0:	f800283a 	ret

100112a4 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
100112a4:	defffd04 	addi	sp,sp,-12
100112a8:	dfc00215 	stw	ra,8(sp)
100112ac:	df000115 	stw	fp,4(sp)
100112b0:	df000104 	addi	fp,sp,4
	bool result = false;
100112b4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
100112b8:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
100112bc:	10000c26 	beq	r2,zero,100112f0 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
100112c0:	d0a6fa17 	ldw	r2,-25624(gp)
100112c4:	1000071e 	bne	r2,zero,100112e4 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
100112c8:	000f5200 	call	1000f520 <Look_for_FAT16>
100112cc:	d0a6fb15 	stw	r2,-25620(gp)
			initialized = is_sd_card_formated_as_FAT16;
100112d0:	d0a6fb17 	ldw	r2,-25620(gp)
100112d4:	d0a6fa15 	stw	r2,-25624(gp)
			search_data.valid = false;
100112d8:	008400b4 	movhi	r2,4098
100112dc:	10a00e04 	addi	r2,r2,-32712
100112e0:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
100112e4:	d0a6fb17 	ldw	r2,-25620(gp)
100112e8:	e0bfff15 	stw	r2,-4(fp)
100112ec:	00000206 	br	100112f8 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
100112f0:	d026fa15 	stw	zero,-25624(gp)
		is_sd_card_formated_as_FAT16 = false;
100112f4:	d026fb15 	stw	zero,-25620(gp)
	}

	return result;
100112f8:	e0bfff17 	ldw	r2,-4(fp)
}
100112fc:	e037883a 	mov	sp,fp
10011300:	dfc00117 	ldw	ra,4(sp)
10011304:	df000017 	ldw	fp,0(sp)
10011308:	dec00204 	addi	sp,sp,8
1001130c:	f800283a 	ret

10011310 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
10011310:	deffea04 	addi	sp,sp,-88
10011314:	dfc01515 	stw	ra,84(sp)
10011318:	df001415 	stw	fp,80(sp)
1001131c:	df001404 	addi	fp,sp,80
10011320:	e13ffe15 	stw	r4,-8(fp)
10011324:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
10011328:	00800084 	movi	r2,2
1001132c:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
10011330:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
10011334:	10002426 	beq	r2,zero,100113c8 <alt_up_sd_card_find_first+0xb8>
10011338:	d0a6fb17 	ldw	r2,-25620(gp)
1001133c:	10002226 	beq	r2,zero,100113c8 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
10011340:	e0ffee04 	addi	r3,fp,-72
10011344:	e0bfed04 	addi	r2,fp,-76
10011348:	180d883a 	mov	r6,r3
1001134c:	100b883a 	mov	r5,r2
10011350:	e13ffe17 	ldw	r4,-8(fp)
10011354:	000fc900 	call	1000fc90 <get_home_directory_cluster_for_file>
10011358:	10001926 	beq	r2,zero,100113c0 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
1001135c:	e0bfed17 	ldw	r2,-76(fp)
10011360:	1007883a 	mov	r3,r2
10011364:	008400b4 	movhi	r2,4098
10011368:	10a00e04 	addi	r2,r2,-32712
1001136c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
10011370:	e0bfed17 	ldw	r2,-76(fp)
10011374:	1007883a 	mov	r3,r2
10011378:	008400b4 	movhi	r2,4098
1001137c:	10a00e04 	addi	r2,r2,-32712
10011380:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
10011384:	008400b4 	movhi	r2,4098
10011388:	10a00e04 	addi	r2,r2,-32712
1001138c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
10011390:	008400b4 	movhi	r2,4098
10011394:	10a00e04 	addi	r2,r2,-32712
10011398:	00ffffc4 	movi	r3,-1
1001139c:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
100113a0:	008400b4 	movhi	r2,4098
100113a4:	10a00e04 	addi	r2,r2,-32712
100113a8:	00c00044 	movi	r3,1
100113ac:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
100113b0:	e13fff17 	ldw	r4,-4(fp)
100113b4:	00113e00 	call	100113e0 <alt_up_sd_card_find_next>
100113b8:	e0bfec0d 	sth	r2,-80(fp)
100113bc:	00000206 	br	100113c8 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
100113c0:	00800044 	movi	r2,1
100113c4:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
100113c8:	e0bfec0b 	ldhu	r2,-80(fp)
}
100113cc:	e037883a 	mov	sp,fp
100113d0:	dfc00117 	ldw	ra,4(sp)
100113d4:	df000017 	ldw	fp,0(sp)
100113d8:	dec00204 	addi	sp,sp,8
100113dc:	f800283a 	ret

100113e0 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
100113e0:	deffe404 	addi	sp,sp,-112
100113e4:	dfc01b15 	stw	ra,108(sp)
100113e8:	df001a15 	stw	fp,104(sp)
100113ec:	df001a04 	addi	fp,sp,104
100113f0:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
100113f4:	00800084 	movi	r2,2
100113f8:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
100113fc:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
10011400:	1000e126 	beq	r2,zero,10011788 <alt_up_sd_card_find_next+0x3a8>
10011404:	d0a6fb17 	ldw	r2,-25620(gp)
10011408:	1000df26 	beq	r2,zero,10011788 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
1001140c:	008400b4 	movhi	r2,4098
10011410:	10a00e04 	addi	r2,r2,-32712
10011414:	10800417 	ldw	r2,16(r2)
10011418:	1000d926 	beq	r2,zero,10011780 <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
1001141c:	008400b4 	movhi	r2,4098
10011420:	10a00e04 	addi	r2,r2,-32712
10011424:	10800117 	ldw	r2,4(r2)
10011428:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
1001142c:	e0bfe717 	ldw	r2,-100(fp)
10011430:	1000581e 	bne	r2,zero,10011594 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
10011434:	008400b4 	movhi	r2,4098
10011438:	10a01304 	addi	r2,r2,-32692
1001143c:	1080050b 	ldhu	r2,20(r2)
10011440:	10bfffcc 	andi	r2,r2,65535
10011444:	1006917a 	slli	r3,r2,5
10011448:	008400b4 	movhi	r2,4098
1001144c:	10a01304 	addi	r2,r2,-32692
10011450:	1080030b 	ldhu	r2,12(r2)
10011454:	10bfffcc 	andi	r2,r2,65535
10011458:	100b883a 	mov	r5,r2
1001145c:	1809883a 	mov	r4,r3
10011460:	000aed40 	call	1000aed4 <__divsi3>
10011464:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
10011468:	008400b4 	movhi	r2,4098
1001146c:	10a00e04 	addi	r2,r2,-32712
10011470:	10800217 	ldw	r2,8(r2)
10011474:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
10011478:	008400b4 	movhi	r2,4098
1001147c:	10a00e04 	addi	r2,r2,-32712
10011480:	1080030b 	ldhu	r2,12(r2)
10011484:	10bfffcc 	andi	r2,r2,65535
10011488:	10a0001c 	xori	r2,r2,32768
1001148c:	10a00004 	addi	r2,r2,-32768
10011490:	10800044 	addi	r2,r2,1
10011494:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
10011498:	00003606 	br	10011574 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
1001149c:	008400b4 	movhi	r2,4098
100114a0:	10a01304 	addi	r2,r2,-32692
100114a4:	10c01317 	ldw	r3,76(r2)
100114a8:	e0bfe817 	ldw	r2,-96(fp)
100114ac:	1885883a 	add	r2,r3,r2
100114b0:	1007883a 	mov	r3,r2
100114b4:	d0a70217 	ldw	r2,-25592(gp)
100114b8:	100b883a 	mov	r5,r2
100114bc:	1809883a 	mov	r4,r3
100114c0:	000e5680 	call	1000e568 <Read_Sector_Data>
100114c4:	10002f26 	beq	r2,zero,10011584 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
100114c8:	00002306 	br	10011558 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
100114cc:	e0bfe917 	ldw	r2,-92(fp)
100114d0:	1004917a 	slli	r2,r2,5
100114d4:	e13fe817 	ldw	r4,-96(fp)
100114d8:	e0ffef04 	addi	r3,fp,-68
100114dc:	200f883a 	mov	r7,r4
100114e0:	000d883a 	mov	r6,zero
100114e4:	180b883a 	mov	r5,r3
100114e8:	1009883a 	mov	r4,r2
100114ec:	000e9780 	call	1000e978 <Read_File_Record_At_Offset>
100114f0:	10001626 	beq	r2,zero,1001154c <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
100114f4:	e0bfef03 	ldbu	r2,-68(fp)
100114f8:	10803fcc 	andi	r2,r2,255
100114fc:	10001326 	beq	r2,zero,1001154c <alt_up_sd_card_find_next+0x16c>
10011500:	e0bfef03 	ldbu	r2,-68(fp)
10011504:	10803fcc 	andi	r2,r2,255
10011508:	10803960 	cmpeqi	r2,r2,229
1001150c:	10000f1e 	bne	r2,zero,1001154c <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
10011510:	e0bfe917 	ldw	r2,-92(fp)
10011514:	1007883a 	mov	r3,r2
10011518:	008400b4 	movhi	r2,4098
1001151c:	10a00e04 	addi	r2,r2,-32712
10011520:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
10011524:	e0ffe817 	ldw	r3,-96(fp)
10011528:	008400b4 	movhi	r2,4098
1001152c:	10a00e04 	addi	r2,r2,-32712
10011530:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
10011534:	e0bfef04 	addi	r2,fp,-68
10011538:	e17fff17 	ldw	r5,-4(fp)
1001153c:	1009883a 	mov	r4,r2
10011540:	0010fdc0 	call	10010fdc <copy_file_record_name_to_string>
									return 0;
10011544:	0005883a 	mov	r2,zero
10011548:	00009006 	br	1001178c <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
1001154c:	e0bfe917 	ldw	r2,-92(fp)
10011550:	10800044 	addi	r2,r2,1
10011554:	e0bfe915 	stw	r2,-92(fp)
10011558:	e0bfe917 	ldw	r2,-92(fp)
1001155c:	10800410 	cmplti	r2,r2,16
10011560:	103fda1e 	bne	r2,zero,100114cc <__alt_data_end+0xf80114cc>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
10011564:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
10011568:	e0bfe817 	ldw	r2,-96(fp)
1001156c:	10800044 	addi	r2,r2,1
10011570:	e0bfe815 	stw	r2,-96(fp)
10011574:	e0ffe817 	ldw	r3,-96(fp)
10011578:	e0bfec17 	ldw	r2,-80(fp)
1001157c:	18bfc716 	blt	r3,r2,1001149c <__alt_data_end+0xf801149c>
10011580:	00000106 	br	10011588 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
10011584:	0001883a 	nop
					}
				}
				result = -1;
10011588:	00bfffc4 	movi	r2,-1
1001158c:	e0bfe60d 	sth	r2,-104(fp)
10011590:	00007d06 	br	10011788 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
10011594:	008400b4 	movhi	r2,4098
10011598:	10a00e04 	addi	r2,r2,-32712
1001159c:	1080030b 	ldhu	r2,12(r2)
100115a0:	10bfffcc 	andi	r2,r2,65535
100115a4:	10a0001c 	xori	r2,r2,32768
100115a8:	10a00004 	addi	r2,r2,-32768
100115ac:	10800044 	addi	r2,r2,1
100115b0:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
100115b4:	e0bfe717 	ldw	r2,-100(fp)
100115b8:	10ffff84 	addi	r3,r2,-2
100115bc:	008400b4 	movhi	r2,4098
100115c0:	10a01304 	addi	r2,r2,-32692
100115c4:	10800383 	ldbu	r2,14(r2)
100115c8:	10803fcc 	andi	r2,r2,255
100115cc:	1885383a 	mul	r2,r3,r2
100115d0:	1007883a 	mov	r3,r2
100115d4:	008400b4 	movhi	r2,4098
100115d8:	10a01304 	addi	r2,r2,-32692
100115dc:	10801417 	ldw	r2,80(r2)
100115e0:	1885883a 	add	r2,r3,r2
100115e4:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
100115e8:	008400b4 	movhi	r2,4098
100115ec:	10a00e04 	addi	r2,r2,-32712
100115f0:	10800217 	ldw	r2,8(r2)
100115f4:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
100115f8:	00003806 	br	100116dc <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
100115fc:	e0ffeb17 	ldw	r3,-84(fp)
10011600:	e0bfed17 	ldw	r2,-76(fp)
10011604:	1885883a 	add	r2,r3,r2
10011608:	d0e70217 	ldw	r3,-25592(gp)
1001160c:	180b883a 	mov	r5,r3
10011610:	1009883a 	mov	r4,r2
10011614:	000e5680 	call	1000e568 <Read_Sector_Data>
10011618:	10003726 	beq	r2,zero,100116f8 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
1001161c:	00002806 	br	100116c0 <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
10011620:	e0bfea17 	ldw	r2,-88(fp)
10011624:	1004917a 	slli	r2,r2,5
10011628:	e13fe717 	ldw	r4,-100(fp)
1001162c:	e17feb17 	ldw	r5,-84(fp)
10011630:	e0ffef04 	addi	r3,fp,-68
10011634:	280f883a 	mov	r7,r5
10011638:	200d883a 	mov	r6,r4
1001163c:	180b883a 	mov	r5,r3
10011640:	1009883a 	mov	r4,r2
10011644:	000e9780 	call	1000e978 <Read_File_Record_At_Offset>
10011648:	10001a26 	beq	r2,zero,100116b4 <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
1001164c:	e0bfef03 	ldbu	r2,-68(fp)
10011650:	10803fcc 	andi	r2,r2,255
10011654:	10001726 	beq	r2,zero,100116b4 <alt_up_sd_card_find_next+0x2d4>
10011658:	e0bfef03 	ldbu	r2,-68(fp)
1001165c:	10803fcc 	andi	r2,r2,255
10011660:	10803960 	cmpeqi	r2,r2,229
10011664:	1000131e 	bne	r2,zero,100116b4 <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
10011668:	e0ffe717 	ldw	r3,-100(fp)
1001166c:	008400b4 	movhi	r2,4098
10011670:	10a00e04 	addi	r2,r2,-32712
10011674:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
10011678:	e0bfea17 	ldw	r2,-88(fp)
1001167c:	1007883a 	mov	r3,r2
10011680:	008400b4 	movhi	r2,4098
10011684:	10a00e04 	addi	r2,r2,-32712
10011688:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
1001168c:	e0ffeb17 	ldw	r3,-84(fp)
10011690:	008400b4 	movhi	r2,4098
10011694:	10a00e04 	addi	r2,r2,-32712
10011698:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
1001169c:	e0bfef04 	addi	r2,fp,-68
100116a0:	e17fff17 	ldw	r5,-4(fp)
100116a4:	1009883a 	mov	r4,r2
100116a8:	0010fdc0 	call	10010fdc <copy_file_record_name_to_string>
										return 0;
100116ac:	0005883a 	mov	r2,zero
100116b0:	00003606 	br	1001178c <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
100116b4:	e0bfea17 	ldw	r2,-88(fp)
100116b8:	10800044 	addi	r2,r2,1
100116bc:	e0bfea15 	stw	r2,-88(fp)
100116c0:	e0bfea17 	ldw	r2,-88(fp)
100116c4:	10800410 	cmplti	r2,r2,16
100116c8:	103fd51e 	bne	r2,zero,10011620 <__alt_data_end+0xf8011620>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
100116cc:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
100116d0:	e0bfeb17 	ldw	r2,-84(fp)
100116d4:	10800044 	addi	r2,r2,1
100116d8:	e0bfeb15 	stw	r2,-84(fp)
100116dc:	008400b4 	movhi	r2,4098
100116e0:	10a01304 	addi	r2,r2,-32692
100116e4:	10800383 	ldbu	r2,14(r2)
100116e8:	10803fcc 	andi	r2,r2,255
100116ec:	e0ffeb17 	ldw	r3,-84(fp)
100116f0:	18bfc216 	blt	r3,r2,100115fc <__alt_data_end+0xf80115fc>
100116f4:	00000106 	br	100116fc <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
100116f8:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
100116fc:	008400b4 	movhi	r2,4098
10011700:	10a01304 	addi	r2,r2,-32692
10011704:	10800383 	ldbu	r2,14(r2)
10011708:	10803fcc 	andi	r2,r2,255
1001170c:	e0ffeb17 	ldw	r3,-84(fp)
10011710:	18801716 	blt	r3,r2,10011770 <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
10011714:	e0bfe717 	ldw	r2,-100(fp)
10011718:	e0ffee04 	addi	r3,fp,-72
1001171c:	180b883a 	mov	r5,r3
10011720:	1009883a 	mov	r4,r2
10011724:	000e6400 	call	1000e640 <get_cluster_flag>
10011728:	10000f26 	beq	r2,zero,10011768 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
1001172c:	e0bfee0b 	ldhu	r2,-72(fp)
10011730:	10bfffcc 	andi	r2,r2,65535
10011734:	10fffe0c 	andi	r3,r2,65528
10011738:	00bffe14 	movui	r2,65528
1001173c:	1880051e 	bne	r3,r2,10011754 <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
10011740:	00bfffc4 	movi	r2,-1
10011744:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
10011748:	008400b4 	movhi	r2,4098
1001174c:	10a00e04 	addi	r2,r2,-32712
10011750:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
10011754:	e0bfee0b 	ldhu	r2,-72(fp)
10011758:	10bfffcc 	andi	r2,r2,65535
1001175c:	10bffe0c 	andi	r2,r2,65528
10011760:	e0bfe715 	stw	r2,-100(fp)
10011764:	00000206 	br	10011770 <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
10011768:	00bfffc4 	movi	r2,-1
1001176c:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
10011770:	e0bfe717 	ldw	r2,-100(fp)
10011774:	00fffdd4 	movui	r3,65527
10011778:	18bf8e0e 	bge	r3,r2,100115b4 <__alt_data_end+0xf80115b4>
1001177c:	00000206 	br	10011788 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
10011780:	008000c4 	movi	r2,3
10011784:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
10011788:	e0bfe60b 	ldhu	r2,-104(fp)
}
1001178c:	e037883a 	mov	sp,fp
10011790:	dfc00117 	ldw	ra,4(sp)
10011794:	df000017 	ldw	fp,0(sp)
10011798:	dec00204 	addi	sp,sp,8
1001179c:	f800283a 	ret

100117a0 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
100117a0:	deffe904 	addi	sp,sp,-92
100117a4:	dfc01615 	stw	ra,88(sp)
100117a8:	df001515 	stw	fp,84(sp)
100117ac:	df001504 	addi	fp,sp,84
100117b0:	e13ffe15 	stw	r4,-8(fp)
100117b4:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
100117b8:	00bfffc4 	movi	r2,-1
100117bc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
100117c0:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
100117c4:	1000cf26 	beq	r2,zero,10011b04 <alt_up_sd_card_fopen+0x364>
100117c8:	d0a6fb17 	ldw	r2,-25620(gp)
100117cc:	1000cd26 	beq	r2,zero,10011b04 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
100117d0:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
100117d4:	e13ffe17 	ldw	r4,-8(fp)
100117d8:	000f60c0 	call	1000f60c <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
100117dc:	e13ffe17 	ldw	r4,-8(fp)
100117e0:	000f6d00 	call	1000f6d0 <check_file_name_for_FAT16_compliance>
100117e4:	1000c726 	beq	r2,zero,10011b04 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
100117e8:	e0ffee04 	addi	r3,fp,-72
100117ec:	e0bfed04 	addi	r2,fp,-76
100117f0:	180d883a 	mov	r6,r3
100117f4:	100b883a 	mov	r5,r2
100117f8:	e13ffe17 	ldw	r4,-8(fp)
100117fc:	000fc900 	call	1000fc90 <get_home_directory_cluster_for_file>
10011800:	1000021e 	bne	r2,zero,1001180c <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
10011804:	e0bfeb0b 	ldhu	r2,-84(fp)
10011808:	0000bf06 	br	10011b08 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
1001180c:	e03fec15 	stw	zero,-80(fp)
10011810:	00000e06 	br	1001184c <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
10011814:	008400b4 	movhi	r2,4098
10011818:	10a02804 	addi	r2,r2,-32608
1001181c:	e0ffec17 	ldw	r3,-80(fp)
10011820:	180691ba 	slli	r3,r3,6
10011824:	10c5883a 	add	r2,r2,r3
10011828:	10800f04 	addi	r2,r2,60
1001182c:	10800017 	ldw	r2,0(r2)
10011830:	1000031e 	bne	r2,zero,10011840 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
10011834:	e0bfec17 	ldw	r2,-80(fp)
10011838:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
1001183c:	00000606 	br	10011858 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
10011840:	e0bfec17 	ldw	r2,-80(fp)
10011844:	10800044 	addi	r2,r2,1
10011848:	e0bfec15 	stw	r2,-80(fp)
1001184c:	e0bfec17 	ldw	r2,-80(fp)
10011850:	10800510 	cmplti	r2,r2,20
10011854:	103fef1e 	bne	r2,zero,10011814 <__alt_data_end+0xf8011814>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
10011858:	e0bfeb0f 	ldh	r2,-84(fp)
1001185c:	1000a916 	blt	r2,zero,10011b04 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
10011860:	e0bfed17 	ldw	r2,-76(fp)
10011864:	1009883a 	mov	r4,r2
10011868:	e0bfeb0f 	ldh	r2,-84(fp)
1001186c:	100691ba 	slli	r3,r2,6
10011870:	008400b4 	movhi	r2,4098
10011874:	10a02804 	addi	r2,r2,-32608
10011878:	1885883a 	add	r2,r3,r2
1001187c:	100d883a 	mov	r6,r2
10011880:	e17ffe17 	ldw	r5,-8(fp)
10011884:	00101d00 	call	100101d0 <find_file_in_directory>
10011888:	10007b26 	beq	r2,zero,10011a78 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
1001188c:	e0bfff17 	ldw	r2,-4(fp)
10011890:	10000226 	beq	r2,zero,1001189c <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
10011894:	00bfffc4 	movi	r2,-1
10011898:	00009b06 	br	10011b08 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
1001189c:	e13feb0f 	ldh	r4,-84(fp)
100118a0:	e0ffeb0f 	ldh	r3,-84(fp)
100118a4:	008400b4 	movhi	r2,4098
100118a8:	10a02804 	addi	r2,r2,-32608
100118ac:	180691ba 	slli	r3,r3,6
100118b0:	10c5883a 	add	r2,r2,r3
100118b4:	10800584 	addi	r2,r2,22
100118b8:	1080000b 	ldhu	r2,0(r2)
100118bc:	10ffffcc 	andi	r3,r2,65535
100118c0:	008400b4 	movhi	r2,4098
100118c4:	10a02804 	addi	r2,r2,-32608
100118c8:	200891ba 	slli	r4,r4,6
100118cc:	1105883a 	add	r2,r2,r4
100118d0:	10800704 	addi	r2,r2,28
100118d4:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
100118d8:	e0ffeb0f 	ldh	r3,-84(fp)
100118dc:	008400b4 	movhi	r2,4098
100118e0:	10a02804 	addi	r2,r2,-32608
100118e4:	180691ba 	slli	r3,r3,6
100118e8:	10c5883a 	add	r2,r2,r3
100118ec:	10800804 	addi	r2,r2,32
100118f0:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
100118f4:	e0ffeb0f 	ldh	r3,-84(fp)
100118f8:	008400b4 	movhi	r2,4098
100118fc:	10a02804 	addi	r2,r2,-32608
10011900:	180691ba 	slli	r3,r3,6
10011904:	10c5883a 	add	r2,r2,r3
10011908:	10800904 	addi	r2,r2,36
1001190c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
10011910:	e0ffeb0f 	ldh	r3,-84(fp)
10011914:	008400b4 	movhi	r2,4098
10011918:	10a02804 	addi	r2,r2,-32608
1001191c:	180691ba 	slli	r3,r3,6
10011920:	10c5883a 	add	r2,r2,r3
10011924:	10800f04 	addi	r2,r2,60
10011928:	00c00044 	movi	r3,1
1001192c:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
10011930:	e0ffeb0f 	ldh	r3,-84(fp)
10011934:	008400b4 	movhi	r2,4098
10011938:	10a02804 	addi	r2,r2,-32608
1001193c:	180691ba 	slli	r3,r3,6
10011940:	10c5883a 	add	r2,r2,r3
10011944:	10800e04 	addi	r2,r2,56
10011948:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
1001194c:	e03fec15 	stw	zero,-80(fp)
10011950:	00004506 	br	10011a68 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
10011954:	e0ffeb0f 	ldh	r3,-84(fp)
10011958:	e0bfec17 	ldw	r2,-80(fp)
1001195c:	18803f26 	beq	r3,r2,10011a5c <alt_up_sd_card_fopen+0x2bc>
10011960:	008400b4 	movhi	r2,4098
10011964:	10a02804 	addi	r2,r2,-32608
10011968:	e0ffec17 	ldw	r3,-80(fp)
1001196c:	180691ba 	slli	r3,r3,6
10011970:	10c5883a 	add	r2,r2,r3
10011974:	10800f04 	addi	r2,r2,60
10011978:	10800017 	ldw	r2,0(r2)
1001197c:	10800058 	cmpnei	r2,r2,1
10011980:	1000361e 	bne	r2,zero,10011a5c <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
10011984:	e0ffeb0f 	ldh	r3,-84(fp)
10011988:	008400b4 	movhi	r2,4098
1001198c:	10a02804 	addi	r2,r2,-32608
10011990:	180691ba 	slli	r3,r3,6
10011994:	10c5883a 	add	r2,r2,r3
10011998:	10800a04 	addi	r2,r2,40
1001199c:	10c00017 	ldw	r3,0(r2)
100119a0:	008400b4 	movhi	r2,4098
100119a4:	10a02804 	addi	r2,r2,-32608
100119a8:	e13fec17 	ldw	r4,-80(fp)
100119ac:	200891ba 	slli	r4,r4,6
100119b0:	1105883a 	add	r2,r2,r4
100119b4:	10800a04 	addi	r2,r2,40
100119b8:	10800017 	ldw	r2,0(r2)
100119bc:	1880271e 	bne	r3,r2,10011a5c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
100119c0:	e0ffeb0f 	ldh	r3,-84(fp)
100119c4:	008400b4 	movhi	r2,4098
100119c8:	10a02804 	addi	r2,r2,-32608
100119cc:	180691ba 	slli	r3,r3,6
100119d0:	10c5883a 	add	r2,r2,r3
100119d4:	10800b04 	addi	r2,r2,44
100119d8:	10c00017 	ldw	r3,0(r2)
100119dc:	008400b4 	movhi	r2,4098
100119e0:	10a02804 	addi	r2,r2,-32608
100119e4:	e13fec17 	ldw	r4,-80(fp)
100119e8:	200891ba 	slli	r4,r4,6
100119ec:	1105883a 	add	r2,r2,r4
100119f0:	10800b04 	addi	r2,r2,44
100119f4:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
100119f8:	1880181e 	bne	r3,r2,10011a5c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
100119fc:	e0ffeb0f 	ldh	r3,-84(fp)
10011a00:	008400b4 	movhi	r2,4098
10011a04:	10a02804 	addi	r2,r2,-32608
10011a08:	180691ba 	slli	r3,r3,6
10011a0c:	10c5883a 	add	r2,r2,r3
10011a10:	10800c04 	addi	r2,r2,48
10011a14:	1100000b 	ldhu	r4,0(r2)
10011a18:	008400b4 	movhi	r2,4098
10011a1c:	10a02804 	addi	r2,r2,-32608
10011a20:	e0ffec17 	ldw	r3,-80(fp)
10011a24:	180691ba 	slli	r3,r3,6
10011a28:	10c5883a 	add	r2,r2,r3
10011a2c:	10800c04 	addi	r2,r2,48
10011a30:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
10011a34:	20ffffcc 	andi	r3,r4,65535
10011a38:	18e0001c 	xori	r3,r3,32768
10011a3c:	18e00004 	addi	r3,r3,-32768
10011a40:	10bfffcc 	andi	r2,r2,65535
10011a44:	10a0001c 	xori	r2,r2,32768
10011a48:	10a00004 	addi	r2,r2,-32768
10011a4c:	1880031e 	bne	r3,r2,10011a5c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
10011a50:	00bfff84 	movi	r2,-2
10011a54:	e0bfeb0d 	sth	r2,-84(fp)
								break;
10011a58:	00002a06 	br	10011b04 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
10011a5c:	e0bfec17 	ldw	r2,-80(fp)
10011a60:	10800044 	addi	r2,r2,1
10011a64:	e0bfec15 	stw	r2,-80(fp)
10011a68:	e0bfec17 	ldw	r2,-80(fp)
10011a6c:	10800510 	cmplti	r2,r2,20
10011a70:	103fb81e 	bne	r2,zero,10011954 <__alt_data_end+0xf8011954>
10011a74:	00002306 	br	10011b04 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
10011a78:	e0bfff17 	ldw	r2,-4(fp)
10011a7c:	10001f26 	beq	r2,zero,10011afc <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
10011a80:	e0bfeb0f 	ldh	r2,-84(fp)
10011a84:	100691ba 	slli	r3,r2,6
10011a88:	008400b4 	movhi	r2,4098
10011a8c:	10a02804 	addi	r2,r2,-32608
10011a90:	1885883a 	add	r2,r3,r2
10011a94:	e0ffee04 	addi	r3,fp,-72
10011a98:	180d883a 	mov	r6,r3
10011a9c:	100b883a 	mov	r5,r2
10011aa0:	e13ffe17 	ldw	r4,-8(fp)
10011aa4:	0010d140 	call	10010d14 <create_file>
10011aa8:	10001126 	beq	r2,zero,10011af0 <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
10011aac:	e0ffeb0f 	ldh	r3,-84(fp)
10011ab0:	008400b4 	movhi	r2,4098
10011ab4:	10a02804 	addi	r2,r2,-32608
10011ab8:	180691ba 	slli	r3,r3,6
10011abc:	10c5883a 	add	r2,r2,r3
10011ac0:	10800f04 	addi	r2,r2,60
10011ac4:	00c00044 	movi	r3,1
10011ac8:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
10011acc:	e0ffeb0f 	ldh	r3,-84(fp)
10011ad0:	008400b4 	movhi	r2,4098
10011ad4:	10a02804 	addi	r2,r2,-32608
10011ad8:	180691ba 	slli	r3,r3,6
10011adc:	10c5883a 	add	r2,r2,r3
10011ae0:	10800e04 	addi	r2,r2,56
10011ae4:	00c00044 	movi	r3,1
10011ae8:	10c00015 	stw	r3,0(r2)
10011aec:	00000506 	br	10011b04 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
10011af0:	00bfffc4 	movi	r2,-1
10011af4:	e0bfeb0d 	sth	r2,-84(fp)
10011af8:	00000206 	br	10011b04 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
10011afc:	00bfffc4 	movi	r2,-1
10011b00:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
10011b04:	e0bfeb0b 	ldhu	r2,-84(fp)
}
10011b08:	e037883a 	mov	sp,fp
10011b0c:	dfc00117 	ldw	ra,4(sp)
10011b10:	df000017 	ldw	fp,0(sp)
10011b14:	dec00204 	addi	sp,sp,8
10011b18:	f800283a 	ret

10011b1c <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
10011b1c:	defffd04 	addi	sp,sp,-12
10011b20:	df000215 	stw	fp,8(sp)
10011b24:	df000204 	addi	fp,sp,8
10011b28:	2007883a 	mov	r3,r4
10011b2c:	2805883a 	mov	r2,r5
10011b30:	e0fffe0d 	sth	r3,-8(fp)
10011b34:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
10011b38:	e0bffe0f 	ldh	r2,-8(fp)
10011b3c:	10001416 	blt	r2,zero,10011b90 <alt_up_sd_card_set_attributes+0x74>
10011b40:	e0bffe0f 	ldh	r2,-8(fp)
10011b44:	10800508 	cmpgei	r2,r2,20
10011b48:	1000111e 	bne	r2,zero,10011b90 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
10011b4c:	e0fffe0f 	ldh	r3,-8(fp)
10011b50:	008400b4 	movhi	r2,4098
10011b54:	10a02804 	addi	r2,r2,-32608
10011b58:	180691ba 	slli	r3,r3,6
10011b5c:	10c5883a 	add	r2,r2,r3
10011b60:	10800f04 	addi	r2,r2,60
10011b64:	10800017 	ldw	r2,0(r2)
10011b68:	10000926 	beq	r2,zero,10011b90 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
10011b6c:	e0fffe0f 	ldh	r3,-8(fp)
10011b70:	e0bfff0b 	ldhu	r2,-4(fp)
10011b74:	1009883a 	mov	r4,r2
10011b78:	008400b4 	movhi	r2,4098
10011b7c:	10a02804 	addi	r2,r2,-32608
10011b80:	180691ba 	slli	r3,r3,6
10011b84:	10c5883a 	add	r2,r2,r3
10011b88:	108002c4 	addi	r2,r2,11
10011b8c:	11000005 	stb	r4,0(r2)
        }
    }
}
10011b90:	0001883a 	nop
10011b94:	e037883a 	mov	sp,fp
10011b98:	df000017 	ldw	fp,0(sp)
10011b9c:	dec00104 	addi	sp,sp,4
10011ba0:	f800283a 	ret

10011ba4 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
10011ba4:	defffd04 	addi	sp,sp,-12
10011ba8:	df000215 	stw	fp,8(sp)
10011bac:	df000204 	addi	fp,sp,8
10011bb0:	2005883a 	mov	r2,r4
10011bb4:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
10011bb8:	00bfffc4 	movi	r2,-1
10011bbc:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
10011bc0:	e0bfff0f 	ldh	r2,-4(fp)
10011bc4:	10001416 	blt	r2,zero,10011c18 <alt_up_sd_card_get_attributes+0x74>
10011bc8:	e0bfff0f 	ldh	r2,-4(fp)
10011bcc:	10800508 	cmpgei	r2,r2,20
10011bd0:	1000111e 	bne	r2,zero,10011c18 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
10011bd4:	e0ffff0f 	ldh	r3,-4(fp)
10011bd8:	008400b4 	movhi	r2,4098
10011bdc:	10a02804 	addi	r2,r2,-32608
10011be0:	180691ba 	slli	r3,r3,6
10011be4:	10c5883a 	add	r2,r2,r3
10011be8:	10800f04 	addi	r2,r2,60
10011bec:	10800017 	ldw	r2,0(r2)
10011bf0:	10000926 	beq	r2,zero,10011c18 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
10011bf4:	e0ffff0f 	ldh	r3,-4(fp)
10011bf8:	008400b4 	movhi	r2,4098
10011bfc:	10a02804 	addi	r2,r2,-32608
10011c00:	180691ba 	slli	r3,r3,6
10011c04:	10c5883a 	add	r2,r2,r3
10011c08:	108002c4 	addi	r2,r2,11
10011c0c:	10800003 	ldbu	r2,0(r2)
10011c10:	10803fcc 	andi	r2,r2,255
10011c14:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
10011c18:	e0bffe0b 	ldhu	r2,-8(fp)
}
10011c1c:	e037883a 	mov	sp,fp
10011c20:	df000017 	ldw	fp,0(sp)
10011c24:	dec00104 	addi	sp,sp,4
10011c28:	f800283a 	ret

10011c2c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
10011c2c:	defffa04 	addi	sp,sp,-24
10011c30:	dfc00515 	stw	ra,20(sp)
10011c34:	df000415 	stw	fp,16(sp)
10011c38:	df000404 	addi	fp,sp,16
10011c3c:	2005883a 	mov	r2,r4
10011c40:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
10011c44:	00bfffc4 	movi	r2,-1
10011c48:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
10011c4c:	e0bfff0f 	ldh	r2,-4(fp)
10011c50:	1000ce16 	blt	r2,zero,10011f8c <alt_up_sd_card_read+0x360>
10011c54:	e0bfff0f 	ldh	r2,-4(fp)
10011c58:	10800508 	cmpgei	r2,r2,20
10011c5c:	1000cb1e 	bne	r2,zero,10011f8c <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
10011c60:	e0ffff0f 	ldh	r3,-4(fp)
10011c64:	008400b4 	movhi	r2,4098
10011c68:	10a02804 	addi	r2,r2,-32608
10011c6c:	180691ba 	slli	r3,r3,6
10011c70:	10c5883a 	add	r2,r2,r3
10011c74:	10800f04 	addi	r2,r2,60
10011c78:	10800017 	ldw	r2,0(r2)
10011c7c:	1000c326 	beq	r2,zero,10011f8c <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
10011c80:	e0ffff0f 	ldh	r3,-4(fp)
10011c84:	008400b4 	movhi	r2,4098
10011c88:	10a02804 	addi	r2,r2,-32608
10011c8c:	180691ba 	slli	r3,r3,6
10011c90:	10c5883a 	add	r2,r2,r3
10011c94:	10800904 	addi	r2,r2,36
10011c98:	10c00017 	ldw	r3,0(r2)
10011c9c:	e13fff0f 	ldh	r4,-4(fp)
10011ca0:	008400b4 	movhi	r2,4098
10011ca4:	10a02804 	addi	r2,r2,-32608
10011ca8:	200891ba 	slli	r4,r4,6
10011cac:	1105883a 	add	r2,r2,r4
10011cb0:	10800604 	addi	r2,r2,24
10011cb4:	10800017 	ldw	r2,0(r2)
10011cb8:	1880b42e 	bgeu	r3,r2,10011f8c <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011cbc:	008400b4 	movhi	r2,4098
10011cc0:	10a01304 	addi	r2,r2,-32692
10011cc4:	10c01417 	ldw	r3,80(r2)
10011cc8:	e13fff0f 	ldh	r4,-4(fp)
10011ccc:	008400b4 	movhi	r2,4098
10011cd0:	10a02804 	addi	r2,r2,-32608
10011cd4:	200891ba 	slli	r4,r4,6
10011cd8:	1105883a 	add	r2,r2,r4
10011cdc:	10800704 	addi	r2,r2,28
10011ce0:	10800017 	ldw	r2,0(r2)
10011ce4:	113fff84 	addi	r4,r2,-2
10011ce8:	008400b4 	movhi	r2,4098
10011cec:	10a01304 	addi	r2,r2,-32692
10011cf0:	10800383 	ldbu	r2,14(r2)
10011cf4:	10803fcc 	andi	r2,r2,255
10011cf8:	2085383a 	mul	r2,r4,r2
10011cfc:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
10011d00:	e13fff0f 	ldh	r4,-4(fp)
10011d04:	008400b4 	movhi	r2,4098
10011d08:	10a02804 	addi	r2,r2,-32608
10011d0c:	200891ba 	slli	r4,r4,6
10011d10:	1105883a 	add	r2,r2,r4
10011d14:	10800804 	addi	r2,r2,32
10011d18:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011d1c:	1885883a 	add	r2,r3,r2
10011d20:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
10011d24:	e0ffff0f 	ldh	r3,-4(fp)
10011d28:	008400b4 	movhi	r2,4098
10011d2c:	10a02804 	addi	r2,r2,-32608
10011d30:	180691ba 	slli	r3,r3,6
10011d34:	10c5883a 	add	r2,r2,r3
10011d38:	10800904 	addi	r2,r2,36
10011d3c:	10800017 	ldw	r2,0(r2)
10011d40:	10006826 	beq	r2,zero,10011ee4 <alt_up_sd_card_read+0x2b8>
10011d44:	e0ffff0f 	ldh	r3,-4(fp)
10011d48:	008400b4 	movhi	r2,4098
10011d4c:	10a02804 	addi	r2,r2,-32608
10011d50:	180691ba 	slli	r3,r3,6
10011d54:	10c5883a 	add	r2,r2,r3
10011d58:	10800904 	addi	r2,r2,36
10011d5c:	10800017 	ldw	r2,0(r2)
10011d60:	10807fcc 	andi	r2,r2,511
10011d64:	10005f1e 	bne	r2,zero,10011ee4 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
10011d68:	e0ffff0f 	ldh	r3,-4(fp)
10011d6c:	008400b4 	movhi	r2,4098
10011d70:	10a02804 	addi	r2,r2,-32608
10011d74:	180691ba 	slli	r3,r3,6
10011d78:	10c5883a 	add	r2,r2,r3
10011d7c:	10800804 	addi	r2,r2,32
10011d80:	10c00017 	ldw	r3,0(r2)
10011d84:	008400b4 	movhi	r2,4098
10011d88:	10a01304 	addi	r2,r2,-32692
10011d8c:	10800383 	ldbu	r2,14(r2)
10011d90:	10803fcc 	andi	r2,r2,255
10011d94:	10bfffc4 	addi	r2,r2,-1
10011d98:	1880401e 	bne	r3,r2,10011e9c <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
10011d9c:	e0ffff0f 	ldh	r3,-4(fp)
10011da0:	008400b4 	movhi	r2,4098
10011da4:	10a02804 	addi	r2,r2,-32608
10011da8:	180691ba 	slli	r3,r3,6
10011dac:	10c5883a 	add	r2,r2,r3
10011db0:	10800704 	addi	r2,r2,28
10011db4:	10800017 	ldw	r2,0(r2)
10011db8:	e0fffe04 	addi	r3,fp,-8
10011dbc:	180b883a 	mov	r5,r3
10011dc0:	1009883a 	mov	r4,r2
10011dc4:	000e6400 	call	1000e640 <get_cluster_flag>
10011dc8:	10003226 	beq	r2,zero,10011e94 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
10011dcc:	e0bffe0b 	ldhu	r2,-8(fp)
10011dd0:	10bfffcc 	andi	r2,r2,65535
10011dd4:	10fffe0c 	andi	r3,r2,65528
10011dd8:	00bffe14 	movui	r2,65528
10011ddc:	1880021e 	bne	r3,r2,10011de8 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
10011de0:	00bfffc4 	movi	r2,-1
10011de4:	00006a06 	br	10011f90 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
10011de8:	e13fff0f 	ldh	r4,-4(fp)
10011dec:	e0bffe0b 	ldhu	r2,-8(fp)
10011df0:	10ffffcc 	andi	r3,r2,65535
10011df4:	008400b4 	movhi	r2,4098
10011df8:	10a02804 	addi	r2,r2,-32608
10011dfc:	200891ba 	slli	r4,r4,6
10011e00:	1105883a 	add	r2,r2,r4
10011e04:	10800704 	addi	r2,r2,28
10011e08:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
10011e0c:	e0ffff0f 	ldh	r3,-4(fp)
10011e10:	008400b4 	movhi	r2,4098
10011e14:	10a02804 	addi	r2,r2,-32608
10011e18:	180691ba 	slli	r3,r3,6
10011e1c:	10c5883a 	add	r2,r2,r3
10011e20:	10800804 	addi	r2,r2,32
10011e24:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011e28:	008400b4 	movhi	r2,4098
10011e2c:	10a01304 	addi	r2,r2,-32692
10011e30:	10c01417 	ldw	r3,80(r2)
10011e34:	e13fff0f 	ldh	r4,-4(fp)
10011e38:	008400b4 	movhi	r2,4098
10011e3c:	10a02804 	addi	r2,r2,-32608
10011e40:	200891ba 	slli	r4,r4,6
10011e44:	1105883a 	add	r2,r2,r4
10011e48:	10800704 	addi	r2,r2,28
10011e4c:	10800017 	ldw	r2,0(r2)
10011e50:	113fff84 	addi	r4,r2,-2
10011e54:	008400b4 	movhi	r2,4098
10011e58:	10a01304 	addi	r2,r2,-32692
10011e5c:	10800383 	ldbu	r2,14(r2)
10011e60:	10803fcc 	andi	r2,r2,255
10011e64:	2085383a 	mul	r2,r4,r2
10011e68:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
10011e6c:	e13fff0f 	ldh	r4,-4(fp)
10011e70:	008400b4 	movhi	r2,4098
10011e74:	10a02804 	addi	r2,r2,-32608
10011e78:	200891ba 	slli	r4,r4,6
10011e7c:	1105883a 	add	r2,r2,r4
10011e80:	10800804 	addi	r2,r2,32
10011e84:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10011e88:	1885883a 	add	r2,r3,r2
10011e8c:	e0bffd15 	stw	r2,-12(fp)
10011e90:	00001406 	br	10011ee4 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
10011e94:	00bfff84 	movi	r2,-2
10011e98:	00003d06 	br	10011f90 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
10011e9c:	e13fff0f 	ldh	r4,-4(fp)
10011ea0:	e0ffff0f 	ldh	r3,-4(fp)
10011ea4:	008400b4 	movhi	r2,4098
10011ea8:	10a02804 	addi	r2,r2,-32608
10011eac:	180691ba 	slli	r3,r3,6
10011eb0:	10c5883a 	add	r2,r2,r3
10011eb4:	10800804 	addi	r2,r2,32
10011eb8:	10800017 	ldw	r2,0(r2)
10011ebc:	10c00044 	addi	r3,r2,1
10011ec0:	008400b4 	movhi	r2,4098
10011ec4:	10a02804 	addi	r2,r2,-32608
10011ec8:	200891ba 	slli	r4,r4,6
10011ecc:	1105883a 	add	r2,r2,r4
10011ed0:	10800804 	addi	r2,r2,32
10011ed4:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
10011ed8:	e0bffd17 	ldw	r2,-12(fp)
10011edc:	10800044 	addi	r2,r2,1
10011ee0:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
10011ee4:	d0e70217 	ldw	r3,-25592(gp)
10011ee8:	e0bffd17 	ldw	r2,-12(fp)
10011eec:	1885883a 	add	r2,r3,r2
10011ef0:	1007883a 	mov	r3,r2
10011ef4:	d0a70617 	ldw	r2,-25576(gp)
10011ef8:	18800726 	beq	r3,r2,10011f18 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
10011efc:	d0a70217 	ldw	r2,-25592(gp)
10011f00:	100b883a 	mov	r5,r2
10011f04:	e13ffd17 	ldw	r4,-12(fp)
10011f08:	000e5680 	call	1000e568 <Read_Sector_Data>
10011f0c:	1000021e 	bne	r2,zero,10011f18 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
10011f10:	00bfff84 	movi	r2,-2
10011f14:	00001e06 	br	10011f90 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
10011f18:	d0e70117 	ldw	r3,-25596(gp)
10011f1c:	e13fff0f 	ldh	r4,-4(fp)
10011f20:	008400b4 	movhi	r2,4098
10011f24:	10a02804 	addi	r2,r2,-32608
10011f28:	200891ba 	slli	r4,r4,6
10011f2c:	1105883a 	add	r2,r2,r4
10011f30:	10800904 	addi	r2,r2,36
10011f34:	10800017 	ldw	r2,0(r2)
10011f38:	10807fcc 	andi	r2,r2,511
10011f3c:	1885883a 	add	r2,r3,r2
10011f40:	10800023 	ldbuio	r2,0(r2)
10011f44:	10803fcc 	andi	r2,r2,255
10011f48:	10803fcc 	andi	r2,r2,255
10011f4c:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
10011f50:	e13fff0f 	ldh	r4,-4(fp)
10011f54:	e0ffff0f 	ldh	r3,-4(fp)
10011f58:	008400b4 	movhi	r2,4098
10011f5c:	10a02804 	addi	r2,r2,-32608
10011f60:	180691ba 	slli	r3,r3,6
10011f64:	10c5883a 	add	r2,r2,r3
10011f68:	10800904 	addi	r2,r2,36
10011f6c:	10800017 	ldw	r2,0(r2)
10011f70:	10c00044 	addi	r3,r2,1
10011f74:	008400b4 	movhi	r2,4098
10011f78:	10a02804 	addi	r2,r2,-32608
10011f7c:	200891ba 	slli	r4,r4,6
10011f80:	1105883a 	add	r2,r2,r4
10011f84:	10800904 	addi	r2,r2,36
10011f88:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
10011f8c:	e0bffc0b 	ldhu	r2,-16(fp)
}
10011f90:	e037883a 	mov	sp,fp
10011f94:	dfc00117 	ldw	ra,4(sp)
10011f98:	df000017 	ldw	fp,0(sp)
10011f9c:	dec00204 	addi	sp,sp,8
10011fa0:	f800283a 	ret

10011fa4 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
10011fa4:	defff704 	addi	sp,sp,-36
10011fa8:	dfc00815 	stw	ra,32(sp)
10011fac:	df000715 	stw	fp,28(sp)
10011fb0:	dc000615 	stw	r16,24(sp)
10011fb4:	df000704 	addi	fp,sp,28
10011fb8:	2007883a 	mov	r3,r4
10011fbc:	2805883a 	mov	r2,r5
10011fc0:	e0fffd0d 	sth	r3,-12(fp)
10011fc4:	e0bffe05 	stb	r2,-8(fp)
    bool result = false;
10011fc8:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
10011fcc:	e0bffd0f 	ldh	r2,-12(fp)
10011fd0:	10017a16 	blt	r2,zero,100125bc <alt_up_sd_card_write+0x618>
10011fd4:	e0bffd0f 	ldh	r2,-12(fp)
10011fd8:	10800508 	cmpgei	r2,r2,20
10011fdc:	1001771e 	bne	r2,zero,100125bc <alt_up_sd_card_write+0x618>
    {
        if (active_files[file_handle].in_use)
10011fe0:	e0fffd0f 	ldh	r3,-12(fp)
10011fe4:	008400b4 	movhi	r2,4098
10011fe8:	10a02804 	addi	r2,r2,-32608
10011fec:	180691ba 	slli	r3,r3,6
10011ff0:	10c5883a 	add	r2,r2,r3
10011ff4:	10800f04 	addi	r2,r2,60
10011ff8:	10800017 	ldw	r2,0(r2)
10011ffc:	10016f26 	beq	r2,zero,100125bc <alt_up_sd_card_write+0x618>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10012000:	008400b4 	movhi	r2,4098
10012004:	10a01304 	addi	r2,r2,-32692
10012008:	10c01417 	ldw	r3,80(r2)
1001200c:	e13ffd0f 	ldh	r4,-12(fp)
10012010:	008400b4 	movhi	r2,4098
10012014:	10a02804 	addi	r2,r2,-32608
10012018:	200891ba 	slli	r4,r4,6
1001201c:	1105883a 	add	r2,r2,r4
10012020:	10800704 	addi	r2,r2,28
10012024:	10800017 	ldw	r2,0(r2)
10012028:	113fff84 	addi	r4,r2,-2
1001202c:	008400b4 	movhi	r2,4098
10012030:	10a01304 	addi	r2,r2,-32692
10012034:	10800383 	ldbu	r2,14(r2)
10012038:	10803fcc 	andi	r2,r2,255
1001203c:	2085383a 	mul	r2,r4,r2
10012040:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
10012044:	e13ffd0f 	ldh	r4,-12(fp)
10012048:	008400b4 	movhi	r2,4098
1001204c:	10a02804 	addi	r2,r2,-32608
10012050:	200891ba 	slli	r4,r4,6
10012054:	1105883a 	add	r2,r2,r4
10012058:	10800804 	addi	r2,r2,32
1001205c:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10012060:	1885883a 	add	r2,r3,r2
10012064:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
10012068:	e0fffd0f 	ldh	r3,-12(fp)
1001206c:	008400b4 	movhi	r2,4098
10012070:	10a02804 	addi	r2,r2,-32608
10012074:	180691ba 	slli	r3,r3,6
10012078:	10c5883a 	add	r2,r2,r3
1001207c:	10800904 	addi	r2,r2,36
10012080:	10c00017 	ldw	r3,0(r2)
10012084:	008400b4 	movhi	r2,4098
10012088:	10a01304 	addi	r2,r2,-32692
1001208c:	1080030b 	ldhu	r2,12(r2)
10012090:	10bfffcc 	andi	r2,r2,65535
10012094:	100b883a 	mov	r5,r2
10012098:	1809883a 	mov	r4,r3
1001209c:	000b0300 	call	1000b030 <__umodsi3>
100120a0:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
100120a4:	e0fffd0f 	ldh	r3,-12(fp)
100120a8:	008400b4 	movhi	r2,4098
100120ac:	10a02804 	addi	r2,r2,-32608
100120b0:	180691ba 	slli	r3,r3,6
100120b4:	10c5883a 	add	r2,r2,r3
100120b8:	10800904 	addi	r2,r2,36
100120bc:	10c00017 	ldw	r3,0(r2)
100120c0:	e13ffd0f 	ldh	r4,-12(fp)
100120c4:	008400b4 	movhi	r2,4098
100120c8:	10a02804 	addi	r2,r2,-32608
100120cc:	200891ba 	slli	r4,r4,6
100120d0:	1105883a 	add	r2,r2,r4
100120d4:	10800604 	addi	r2,r2,24
100120d8:	10800017 	ldw	r2,0(r2)
100120dc:	1880672e 	bgeu	r3,r2,1001227c <alt_up_sd_card_write+0x2d8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
100120e0:	e0fffd0f 	ldh	r3,-12(fp)
100120e4:	008400b4 	movhi	r2,4098
100120e8:	10a02804 	addi	r2,r2,-32608
100120ec:	180691ba 	slli	r3,r3,6
100120f0:	10c5883a 	add	r2,r2,r3
100120f4:	10800904 	addi	r2,r2,36
100120f8:	10800017 	ldw	r2,0(r2)
100120fc:	1000e426 	beq	r2,zero,10012490 <alt_up_sd_card_write+0x4ec>
10012100:	e0bffb0f 	ldh	r2,-20(fp)
10012104:	1000e21e 	bne	r2,zero,10012490 <alt_up_sd_card_write+0x4ec>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
10012108:	e0fffd0f 	ldh	r3,-12(fp)
1001210c:	008400b4 	movhi	r2,4098
10012110:	10a02804 	addi	r2,r2,-32608
10012114:	180691ba 	slli	r3,r3,6
10012118:	10c5883a 	add	r2,r2,r3
1001211c:	10800804 	addi	r2,r2,32
10012120:	10c00017 	ldw	r3,0(r2)
10012124:	008400b4 	movhi	r2,4098
10012128:	10a01304 	addi	r2,r2,-32692
1001212c:	10800383 	ldbu	r2,14(r2)
10012130:	10803fcc 	andi	r2,r2,255
10012134:	10bfffc4 	addi	r2,r2,-1
10012138:	18803d1e 	bne	r3,r2,10012230 <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
1001213c:	e0fffd0f 	ldh	r3,-12(fp)
10012140:	008400b4 	movhi	r2,4098
10012144:	10a02804 	addi	r2,r2,-32608
10012148:	180691ba 	slli	r3,r3,6
1001214c:	10c5883a 	add	r2,r2,r3
10012150:	10800704 	addi	r2,r2,28
10012154:	10800017 	ldw	r2,0(r2)
10012158:	e0fffb84 	addi	r3,fp,-18
1001215c:	180b883a 	mov	r5,r3
10012160:	1009883a 	mov	r4,r2
10012164:	000e6400 	call	1000e640 <get_cluster_flag>
10012168:	10002f26 	beq	r2,zero,10012228 <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
1001216c:	e0bffb8b 	ldhu	r2,-18(fp)
10012170:	10bfffcc 	andi	r2,r2,65535
10012174:	10bffe28 	cmpgeui	r2,r2,65528
10012178:	1000c51e 	bne	r2,zero,10012490 <alt_up_sd_card_write+0x4ec>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
1001217c:	e13ffd0f 	ldh	r4,-12(fp)
10012180:	e0bffb8b 	ldhu	r2,-18(fp)
10012184:	10ffffcc 	andi	r3,r2,65535
10012188:	008400b4 	movhi	r2,4098
1001218c:	10a02804 	addi	r2,r2,-32608
10012190:	200891ba 	slli	r4,r4,6
10012194:	1105883a 	add	r2,r2,r4
10012198:	10800704 	addi	r2,r2,28
1001219c:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
100121a0:	e0fffd0f 	ldh	r3,-12(fp)
100121a4:	008400b4 	movhi	r2,4098
100121a8:	10a02804 	addi	r2,r2,-32608
100121ac:	180691ba 	slli	r3,r3,6
100121b0:	10c5883a 	add	r2,r2,r3
100121b4:	10800804 	addi	r2,r2,32
100121b8:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
100121bc:	008400b4 	movhi	r2,4098
100121c0:	10a01304 	addi	r2,r2,-32692
100121c4:	10c01417 	ldw	r3,80(r2)
100121c8:	e13ffd0f 	ldh	r4,-12(fp)
100121cc:	008400b4 	movhi	r2,4098
100121d0:	10a02804 	addi	r2,r2,-32608
100121d4:	200891ba 	slli	r4,r4,6
100121d8:	1105883a 	add	r2,r2,r4
100121dc:	10800704 	addi	r2,r2,28
100121e0:	10800017 	ldw	r2,0(r2)
100121e4:	113fff84 	addi	r4,r2,-2
100121e8:	008400b4 	movhi	r2,4098
100121ec:	10a01304 	addi	r2,r2,-32692
100121f0:	10800383 	ldbu	r2,14(r2)
100121f4:	10803fcc 	andi	r2,r2,255
100121f8:	2085383a 	mul	r2,r4,r2
100121fc:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
10012200:	e13ffd0f 	ldh	r4,-12(fp)
10012204:	008400b4 	movhi	r2,4098
10012208:	10a02804 	addi	r2,r2,-32608
1001220c:	200891ba 	slli	r4,r4,6
10012210:	1105883a 	add	r2,r2,r4
10012214:	10800804 	addi	r2,r2,32
10012218:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
1001221c:	1885883a 	add	r2,r3,r2
10012220:	e0bffa15 	stw	r2,-24(fp)
10012224:	00009a06 	br	10012490 <alt_up_sd_card_write+0x4ec>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
10012228:	0005883a 	mov	r2,zero
1001222c:	0000e406 	br	100125c0 <alt_up_sd_card_write+0x61c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
10012230:	e13ffd0f 	ldh	r4,-12(fp)
10012234:	e0fffd0f 	ldh	r3,-12(fp)
10012238:	008400b4 	movhi	r2,4098
1001223c:	10a02804 	addi	r2,r2,-32608
10012240:	180691ba 	slli	r3,r3,6
10012244:	10c5883a 	add	r2,r2,r3
10012248:	10800804 	addi	r2,r2,32
1001224c:	10800017 	ldw	r2,0(r2)
10012250:	10c00044 	addi	r3,r2,1
10012254:	008400b4 	movhi	r2,4098
10012258:	10a02804 	addi	r2,r2,-32608
1001225c:	200891ba 	slli	r4,r4,6
10012260:	1105883a 	add	r2,r2,r4
10012264:	10800804 	addi	r2,r2,32
10012268:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
1001226c:	e0bffa17 	ldw	r2,-24(fp)
10012270:	10800044 	addi	r2,r2,1
10012274:	e0bffa15 	stw	r2,-24(fp)
10012278:	00008506 	br	10012490 <alt_up_sd_card_write+0x4ec>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
1001227c:	e0fffd0f 	ldh	r3,-12(fp)
10012280:	008400b4 	movhi	r2,4098
10012284:	10a02804 	addi	r2,r2,-32608
10012288:	180691ba 	slli	r3,r3,6
1001228c:	10c5883a 	add	r2,r2,r3
10012290:	10800904 	addi	r2,r2,36
10012294:	10800017 	ldw	r2,0(r2)
10012298:	10007d26 	beq	r2,zero,10012490 <alt_up_sd_card_write+0x4ec>
1001229c:	e0bffb0f 	ldh	r2,-20(fp)
100122a0:	10007b1e 	bne	r2,zero,10012490 <alt_up_sd_card_write+0x4ec>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
100122a4:	e0fffd0f 	ldh	r3,-12(fp)
100122a8:	008400b4 	movhi	r2,4098
100122ac:	10a02804 	addi	r2,r2,-32608
100122b0:	180691ba 	slli	r3,r3,6
100122b4:	10c5883a 	add	r2,r2,r3
100122b8:	10800804 	addi	r2,r2,32
100122bc:	10c00017 	ldw	r3,0(r2)
100122c0:	008400b4 	movhi	r2,4098
100122c4:	10a01304 	addi	r2,r2,-32692
100122c8:	10800383 	ldbu	r2,14(r2)
100122cc:	10803fcc 	andi	r2,r2,255
100122d0:	10bfffc4 	addi	r2,r2,-1
100122d4:	18803e1e 	bne	r3,r2,100123d0 <alt_up_sd_card_write+0x42c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
100122d8:	e0bffc04 	addi	r2,fp,-16
100122dc:	1009883a 	mov	r4,r2
100122e0:	001064c0 	call	1001064c <find_first_empty_cluster>
100122e4:	10003826 	beq	r2,zero,100123c8 <alt_up_sd_card_write+0x424>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
100122e8:	e0fffd0f 	ldh	r3,-12(fp)
100122ec:	008400b4 	movhi	r2,4098
100122f0:	10a02804 	addi	r2,r2,-32608
100122f4:	180691ba 	slli	r3,r3,6
100122f8:	10c5883a 	add	r2,r2,r3
100122fc:	10800704 	addi	r2,r2,28
10012300:	10800017 	ldw	r2,0(r2)
10012304:	e0fffc17 	ldw	r3,-16(fp)
10012308:	18ffffcc 	andi	r3,r3,65535
1001230c:	18e0001c 	xori	r3,r3,32768
10012310:	18e00004 	addi	r3,r3,-32768
10012314:	01800044 	movi	r6,1
10012318:	180b883a 	mov	r5,r3
1001231c:	1009883a 	mov	r4,r2
10012320:	000e6f40 	call	1000e6f4 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
10012324:	e0bffc17 	ldw	r2,-16(fp)
10012328:	01800044 	movi	r6,1
1001232c:	017fffc4 	movi	r5,-1
10012330:	1009883a 	mov	r4,r2
10012334:	000e6f40 	call	1000e6f4 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
10012338:	e0fffd0f 	ldh	r3,-12(fp)
1001233c:	008400b4 	movhi	r2,4098
10012340:	10a02804 	addi	r2,r2,-32608
10012344:	180691ba 	slli	r3,r3,6
10012348:	10c5883a 	add	r2,r2,r3
1001234c:	10800704 	addi	r2,r2,28
10012350:	10800017 	ldw	r2,0(r2)
10012354:	e0fffc17 	ldw	r3,-16(fp)
10012358:	18ffffcc 	andi	r3,r3,65535
1001235c:	18e0001c 	xori	r3,r3,32768
10012360:	18e00004 	addi	r3,r3,-32768
10012364:	000d883a 	mov	r6,zero
10012368:	180b883a 	mov	r5,r3
1001236c:	1009883a 	mov	r4,r2
10012370:	000e6f40 	call	1000e6f4 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
10012374:	e0bffc17 	ldw	r2,-16(fp)
10012378:	000d883a 	mov	r6,zero
1001237c:	017fffc4 	movi	r5,-1
10012380:	1009883a 	mov	r4,r2
10012384:	000e6f40 	call	1000e6f4 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
10012388:	e13ffd0f 	ldh	r4,-12(fp)
1001238c:	e0fffc17 	ldw	r3,-16(fp)
10012390:	008400b4 	movhi	r2,4098
10012394:	10a02804 	addi	r2,r2,-32608
10012398:	200891ba 	slli	r4,r4,6
1001239c:	1105883a 	add	r2,r2,r4
100123a0:	10800704 	addi	r2,r2,28
100123a4:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
100123a8:	e0fffd0f 	ldh	r3,-12(fp)
100123ac:	008400b4 	movhi	r2,4098
100123b0:	10a02804 	addi	r2,r2,-32608
100123b4:	180691ba 	slli	r3,r3,6
100123b8:	10c5883a 	add	r2,r2,r3
100123bc:	10800804 	addi	r2,r2,32
100123c0:	10000015 	stw	zero,0(r2)
100123c4:	00001806 	br	10012428 <alt_up_sd_card_write+0x484>
						}
						else
						{
							return false;
100123c8:	0005883a 	mov	r2,zero
100123cc:	00007c06 	br	100125c0 <alt_up_sd_card_write+0x61c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
100123d0:	e43ffd0f 	ldh	r16,-12(fp)
100123d4:	e0fffd0f 	ldh	r3,-12(fp)
100123d8:	008400b4 	movhi	r2,4098
100123dc:	10a02804 	addi	r2,r2,-32608
100123e0:	180691ba 	slli	r3,r3,6
100123e4:	10c5883a 	add	r2,r2,r3
100123e8:	10800904 	addi	r2,r2,36
100123ec:	10c00017 	ldw	r3,0(r2)
100123f0:	008400b4 	movhi	r2,4098
100123f4:	10a01304 	addi	r2,r2,-32692
100123f8:	1080030b 	ldhu	r2,12(r2)
100123fc:	10bfffcc 	andi	r2,r2,65535
10012400:	100b883a 	mov	r5,r2
10012404:	1809883a 	mov	r4,r3
10012408:	000afcc0 	call	1000afcc <__udivsi3>
1001240c:	1009883a 	mov	r4,r2
10012410:	008400b4 	movhi	r2,4098
10012414:	10a02804 	addi	r2,r2,-32608
10012418:	800691ba 	slli	r3,r16,6
1001241c:	10c5883a 	add	r2,r2,r3
10012420:	10800804 	addi	r2,r2,32
10012424:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10012428:	008400b4 	movhi	r2,4098
1001242c:	10a01304 	addi	r2,r2,-32692
10012430:	10c01417 	ldw	r3,80(r2)
10012434:	e13ffd0f 	ldh	r4,-12(fp)
10012438:	008400b4 	movhi	r2,4098
1001243c:	10a02804 	addi	r2,r2,-32608
10012440:	200891ba 	slli	r4,r4,6
10012444:	1105883a 	add	r2,r2,r4
10012448:	10800704 	addi	r2,r2,28
1001244c:	10800017 	ldw	r2,0(r2)
10012450:	113fff84 	addi	r4,r2,-2
10012454:	008400b4 	movhi	r2,4098
10012458:	10a01304 	addi	r2,r2,-32692
1001245c:	10800383 	ldbu	r2,14(r2)
10012460:	10803fcc 	andi	r2,r2,255
10012464:	2085383a 	mul	r2,r4,r2
10012468:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
1001246c:	e13ffd0f 	ldh	r4,-12(fp)
10012470:	008400b4 	movhi	r2,4098
10012474:	10a02804 	addi	r2,r2,-32608
10012478:	200891ba 	slli	r4,r4,6
1001247c:	1105883a 	add	r2,r2,r4
10012480:	10800804 	addi	r2,r2,32
10012484:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
10012488:	1885883a 	add	r2,r3,r2
1001248c:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
10012490:	d0e70217 	ldw	r3,-25592(gp)
10012494:	e0bffa17 	ldw	r2,-24(fp)
10012498:	1885883a 	add	r2,r3,r2
1001249c:	1007883a 	mov	r3,r2
100124a0:	d0a70617 	ldw	r2,-25576(gp)
100124a4:	18800726 	beq	r3,r2,100124c4 <alt_up_sd_card_write+0x520>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
100124a8:	d0a70217 	ldw	r2,-25592(gp)
100124ac:	100b883a 	mov	r5,r2
100124b0:	e13ffa17 	ldw	r4,-24(fp)
100124b4:	000e5680 	call	1000e568 <Read_Sector_Data>
100124b8:	1000021e 	bne	r2,zero,100124c4 <alt_up_sd_card_write+0x520>
                {
					return false;
100124bc:	0005883a 	mov	r2,zero
100124c0:	00003f06 	br	100125c0 <alt_up_sd_card_write+0x61c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
100124c4:	d0e70117 	ldw	r3,-25596(gp)
100124c8:	e0bffb0f 	ldh	r2,-20(fp)
100124cc:	1885883a 	add	r2,r3,r2
100124d0:	e0fffe07 	ldb	r3,-8(fp)
100124d4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
100124d8:	e13ffd0f 	ldh	r4,-12(fp)
100124dc:	e0fffd0f 	ldh	r3,-12(fp)
100124e0:	008400b4 	movhi	r2,4098
100124e4:	10a02804 	addi	r2,r2,-32608
100124e8:	180691ba 	slli	r3,r3,6
100124ec:	10c5883a 	add	r2,r2,r3
100124f0:	10800904 	addi	r2,r2,36
100124f4:	10800017 	ldw	r2,0(r2)
100124f8:	10c00044 	addi	r3,r2,1
100124fc:	008400b4 	movhi	r2,4098
10012500:	10a02804 	addi	r2,r2,-32608
10012504:	200891ba 	slli	r4,r4,6
10012508:	1105883a 	add	r2,r2,r4
1001250c:	10800904 	addi	r2,r2,36
10012510:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
10012514:	e0fffd0f 	ldh	r3,-12(fp)
10012518:	008400b4 	movhi	r2,4098
1001251c:	10a02804 	addi	r2,r2,-32608
10012520:	180691ba 	slli	r3,r3,6
10012524:	10c5883a 	add	r2,r2,r3
10012528:	10800904 	addi	r2,r2,36
1001252c:	10c00017 	ldw	r3,0(r2)
10012530:	e13ffd0f 	ldh	r4,-12(fp)
10012534:	008400b4 	movhi	r2,4098
10012538:	10a02804 	addi	r2,r2,-32608
1001253c:	200891ba 	slli	r4,r4,6
10012540:	1105883a 	add	r2,r2,r4
10012544:	10800604 	addi	r2,r2,24
10012548:	10800017 	ldw	r2,0(r2)
1001254c:	18801736 	bltu	r3,r2,100125ac <alt_up_sd_card_write+0x608>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
10012550:	e13ffd0f 	ldh	r4,-12(fp)
10012554:	e0fffd0f 	ldh	r3,-12(fp)
10012558:	008400b4 	movhi	r2,4098
1001255c:	10a02804 	addi	r2,r2,-32608
10012560:	180691ba 	slli	r3,r3,6
10012564:	10c5883a 	add	r2,r2,r3
10012568:	10800604 	addi	r2,r2,24
1001256c:	10800017 	ldw	r2,0(r2)
10012570:	10c00044 	addi	r3,r2,1
10012574:	008400b4 	movhi	r2,4098
10012578:	10a02804 	addi	r2,r2,-32608
1001257c:	200891ba 	slli	r4,r4,6
10012580:	1105883a 	add	r2,r2,r4
10012584:	10800604 	addi	r2,r2,24
10012588:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
1001258c:	e0fffd0f 	ldh	r3,-12(fp)
10012590:	008400b4 	movhi	r2,4098
10012594:	10a02804 	addi	r2,r2,-32608
10012598:	180691ba 	slli	r3,r3,6
1001259c:	10c5883a 	add	r2,r2,r3
100125a0:	10800e04 	addi	r2,r2,56
100125a4:	00c00044 	movi	r3,1
100125a8:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
100125ac:	00800044 	movi	r2,1
100125b0:	d0a70515 	stw	r2,-25580(gp)
			result = true;
100125b4:	00800044 	movi	r2,1
100125b8:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
100125bc:	e0bff917 	ldw	r2,-28(fp)
}
100125c0:	e6ffff04 	addi	sp,fp,-4
100125c4:	dfc00217 	ldw	ra,8(sp)
100125c8:	df000117 	ldw	fp,4(sp)
100125cc:	dc000017 	ldw	r16,0(sp)
100125d0:	dec00304 	addi	sp,sp,12
100125d4:	f800283a 	ret

100125d8 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
100125d8:	defffb04 	addi	sp,sp,-20
100125dc:	dfc00415 	stw	ra,16(sp)
100125e0:	df000315 	stw	fp,12(sp)
100125e4:	df000304 	addi	fp,sp,12
100125e8:	2005883a 	mov	r2,r4
100125ec:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
100125f0:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
100125f4:	00111e00 	call	100111e0 <alt_up_sd_card_is_Present>
100125f8:	10006026 	beq	r2,zero,1001277c <alt_up_sd_card_fclose+0x1a4>
100125fc:	d0a6fb17 	ldw	r2,-25620(gp)
10012600:	10005e26 	beq	r2,zero,1001277c <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
10012604:	e0ffff0f 	ldh	r3,-4(fp)
10012608:	008400b4 	movhi	r2,4098
1001260c:	10a02804 	addi	r2,r2,-32608
10012610:	180691ba 	slli	r3,r3,6
10012614:	10c5883a 	add	r2,r2,r3
10012618:	10800f04 	addi	r2,r2,60
1001261c:	10800017 	ldw	r2,0(r2)
10012620:	10005626 	beq	r2,zero,1001277c <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
10012624:	e0ffff0f 	ldh	r3,-4(fp)
10012628:	008400b4 	movhi	r2,4098
1001262c:	10a02804 	addi	r2,r2,-32608
10012630:	180691ba 	slli	r3,r3,6
10012634:	10c5883a 	add	r2,r2,r3
10012638:	10800e04 	addi	r2,r2,56
1001263c:	10800017 	ldw	r2,0(r2)
10012640:	10004526 	beq	r2,zero,10012758 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
10012644:	e0ffff0f 	ldh	r3,-4(fp)
10012648:	008400b4 	movhi	r2,4098
1001264c:	10a02804 	addi	r2,r2,-32608
10012650:	180691ba 	slli	r3,r3,6
10012654:	10c5883a 	add	r2,r2,r3
10012658:	10800b04 	addi	r2,r2,44
1001265c:	10800017 	ldw	r2,0(r2)
10012660:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
10012664:	e0ffff0f 	ldh	r3,-4(fp)
10012668:	008400b4 	movhi	r2,4098
1001266c:	10a02804 	addi	r2,r2,-32608
10012670:	180691ba 	slli	r3,r3,6
10012674:	10c5883a 	add	r2,r2,r3
10012678:	10800a04 	addi	r2,r2,40
1001267c:	10800017 	ldw	r2,0(r2)
10012680:	1000071e 	bne	r2,zero,100126a0 <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
10012684:	008400b4 	movhi	r2,4098
10012688:	10a01304 	addi	r2,r2,-32692
1001268c:	10801317 	ldw	r2,76(r2)
10012690:	e0fffe17 	ldw	r3,-8(fp)
10012694:	1885883a 	add	r2,r3,r2
10012698:	e0bffe15 	stw	r2,-8(fp)
1001269c:	00001406 	br	100126f0 <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
100126a0:	008400b4 	movhi	r2,4098
100126a4:	10a01304 	addi	r2,r2,-32692
100126a8:	10c01417 	ldw	r3,80(r2)
100126ac:	e0bffe17 	ldw	r2,-8(fp)
100126b0:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
100126b4:	e13fff0f 	ldh	r4,-4(fp)
100126b8:	008400b4 	movhi	r2,4098
100126bc:	10a02804 	addi	r2,r2,-32608
100126c0:	200891ba 	slli	r4,r4,6
100126c4:	1105883a 	add	r2,r2,r4
100126c8:	10800a04 	addi	r2,r2,40
100126cc:	10800017 	ldw	r2,0(r2)
100126d0:	113fff84 	addi	r4,r2,-2
100126d4:	008400b4 	movhi	r2,4098
100126d8:	10a01304 	addi	r2,r2,-32692
100126dc:	10800383 	ldbu	r2,14(r2)
100126e0:	10803fcc 	andi	r2,r2,255
100126e4:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
100126e8:	1885883a 	add	r2,r3,r2
100126ec:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
100126f0:	e0bffe17 	ldw	r2,-8(fp)
100126f4:	d0e70217 	ldw	r3,-25592(gp)
100126f8:	180b883a 	mov	r5,r3
100126fc:	1009883a 	mov	r4,r2
10012700:	000e5680 	call	1000e568 <Read_Sector_Data>
10012704:	10001426 	beq	r2,zero,10012758 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
10012708:	e0ffff0f 	ldh	r3,-4(fp)
1001270c:	008400b4 	movhi	r2,4098
10012710:	10a02804 	addi	r2,r2,-32608
10012714:	180691ba 	slli	r3,r3,6
10012718:	10c5883a 	add	r2,r2,r3
1001271c:	10800c04 	addi	r2,r2,48
10012720:	1080000b 	ldhu	r2,0(r2)
10012724:	113fffcc 	andi	r4,r2,65535
10012728:	2120001c 	xori	r4,r4,32768
1001272c:	21200004 	addi	r4,r4,-32768
10012730:	e0bfff0f 	ldh	r2,-4(fp)
10012734:	100691ba 	slli	r3,r2,6
10012738:	008400b4 	movhi	r2,4098
1001273c:	10a02804 	addi	r2,r2,-32608
10012740:	1885883a 	add	r2,r3,r2
10012744:	100b883a 	mov	r5,r2
10012748:	000ebf40 	call	1000ebf4 <Write_File_Record_At_Offset>
1001274c:	10000226 	beq	r2,zero,10012758 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
10012750:	000e51c0 	call	1000e51c <Save_Modified_Sector>
10012754:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
10012758:	e0ffff0f 	ldh	r3,-4(fp)
1001275c:	008400b4 	movhi	r2,4098
10012760:	10a02804 	addi	r2,r2,-32608
10012764:	180691ba 	slli	r3,r3,6
10012768:	10c5883a 	add	r2,r2,r3
1001276c:	10800f04 	addi	r2,r2,60
10012770:	10000015 	stw	zero,0(r2)
			result = true;
10012774:	00800044 	movi	r2,1
10012778:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
1001277c:	e0bffd17 	ldw	r2,-12(fp)
}
10012780:	e037883a 	mov	sp,fp
10012784:	dfc00117 	ldw	ra,4(sp)
10012788:	df000017 	ldw	fp,0(sp)
1001278c:	dec00204 	addi	sp,sp,8
10012790:	f800283a 	ret

10012794 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10012794:	defffa04 	addi	sp,sp,-24
10012798:	dfc00515 	stw	ra,20(sp)
1001279c:	df000415 	stw	fp,16(sp)
100127a0:	df000404 	addi	fp,sp,16
100127a4:	e13ffd15 	stw	r4,-12(fp)
100127a8:	e17ffe15 	stw	r5,-8(fp)
100127ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100127b0:	e0bffd17 	ldw	r2,-12(fp)
100127b4:	10800017 	ldw	r2,0(r2)
100127b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100127bc:	e0bffc17 	ldw	r2,-16(fp)
100127c0:	10c00a04 	addi	r3,r2,40
100127c4:	e0bffd17 	ldw	r2,-12(fp)
100127c8:	10800217 	ldw	r2,8(r2)
100127cc:	100f883a 	mov	r7,r2
100127d0:	e1bfff17 	ldw	r6,-4(fp)
100127d4:	e17ffe17 	ldw	r5,-8(fp)
100127d8:	1809883a 	mov	r4,r3
100127dc:	0012dbc0 	call	10012dbc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100127e0:	e037883a 	mov	sp,fp
100127e4:	dfc00117 	ldw	ra,4(sp)
100127e8:	df000017 	ldw	fp,0(sp)
100127ec:	dec00204 	addi	sp,sp,8
100127f0:	f800283a 	ret

100127f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100127f4:	defffa04 	addi	sp,sp,-24
100127f8:	dfc00515 	stw	ra,20(sp)
100127fc:	df000415 	stw	fp,16(sp)
10012800:	df000404 	addi	fp,sp,16
10012804:	e13ffd15 	stw	r4,-12(fp)
10012808:	e17ffe15 	stw	r5,-8(fp)
1001280c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012810:	e0bffd17 	ldw	r2,-12(fp)
10012814:	10800017 	ldw	r2,0(r2)
10012818:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001281c:	e0bffc17 	ldw	r2,-16(fp)
10012820:	10c00a04 	addi	r3,r2,40
10012824:	e0bffd17 	ldw	r2,-12(fp)
10012828:	10800217 	ldw	r2,8(r2)
1001282c:	100f883a 	mov	r7,r2
10012830:	e1bfff17 	ldw	r6,-4(fp)
10012834:	e17ffe17 	ldw	r5,-8(fp)
10012838:	1809883a 	mov	r4,r3
1001283c:	0012fd80 	call	10012fd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10012840:	e037883a 	mov	sp,fp
10012844:	dfc00117 	ldw	ra,4(sp)
10012848:	df000017 	ldw	fp,0(sp)
1001284c:	dec00204 	addi	sp,sp,8
10012850:	f800283a 	ret

10012854 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10012854:	defffc04 	addi	sp,sp,-16
10012858:	dfc00315 	stw	ra,12(sp)
1001285c:	df000215 	stw	fp,8(sp)
10012860:	df000204 	addi	fp,sp,8
10012864:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012868:	e0bfff17 	ldw	r2,-4(fp)
1001286c:	10800017 	ldw	r2,0(r2)
10012870:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10012874:	e0bffe17 	ldw	r2,-8(fp)
10012878:	10c00a04 	addi	r3,r2,40
1001287c:	e0bfff17 	ldw	r2,-4(fp)
10012880:	10800217 	ldw	r2,8(r2)
10012884:	100b883a 	mov	r5,r2
10012888:	1809883a 	mov	r4,r3
1001288c:	0012c640 	call	10012c64 <altera_avalon_jtag_uart_close>
}
10012890:	e037883a 	mov	sp,fp
10012894:	dfc00117 	ldw	ra,4(sp)
10012898:	df000017 	ldw	fp,0(sp)
1001289c:	dec00204 	addi	sp,sp,8
100128a0:	f800283a 	ret

100128a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100128a4:	defffa04 	addi	sp,sp,-24
100128a8:	dfc00515 	stw	ra,20(sp)
100128ac:	df000415 	stw	fp,16(sp)
100128b0:	df000404 	addi	fp,sp,16
100128b4:	e13ffd15 	stw	r4,-12(fp)
100128b8:	e17ffe15 	stw	r5,-8(fp)
100128bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100128c0:	e0bffd17 	ldw	r2,-12(fp)
100128c4:	10800017 	ldw	r2,0(r2)
100128c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100128cc:	e0bffc17 	ldw	r2,-16(fp)
100128d0:	10800a04 	addi	r2,r2,40
100128d4:	e1bfff17 	ldw	r6,-4(fp)
100128d8:	e17ffe17 	ldw	r5,-8(fp)
100128dc:	1009883a 	mov	r4,r2
100128e0:	0012ccc0 	call	10012ccc <altera_avalon_jtag_uart_ioctl>
}
100128e4:	e037883a 	mov	sp,fp
100128e8:	dfc00117 	ldw	ra,4(sp)
100128ec:	df000017 	ldw	fp,0(sp)
100128f0:	dec00204 	addi	sp,sp,8
100128f4:	f800283a 	ret

100128f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100128f8:	defffa04 	addi	sp,sp,-24
100128fc:	dfc00515 	stw	ra,20(sp)
10012900:	df000415 	stw	fp,16(sp)
10012904:	df000404 	addi	fp,sp,16
10012908:	e13ffd15 	stw	r4,-12(fp)
1001290c:	e17ffe15 	stw	r5,-8(fp)
10012910:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012914:	e0bffd17 	ldw	r2,-12(fp)
10012918:	00c00044 	movi	r3,1
1001291c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10012920:	e0bffd17 	ldw	r2,-12(fp)
10012924:	10800017 	ldw	r2,0(r2)
10012928:	10800104 	addi	r2,r2,4
1001292c:	1007883a 	mov	r3,r2
10012930:	e0bffd17 	ldw	r2,-12(fp)
10012934:	10800817 	ldw	r2,32(r2)
10012938:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001293c:	e0bffe17 	ldw	r2,-8(fp)
10012940:	e0ffff17 	ldw	r3,-4(fp)
10012944:	d8000015 	stw	zero,0(sp)
10012948:	e1fffd17 	ldw	r7,-12(fp)
1001294c:	01840074 	movhi	r6,4097
10012950:	318a6e04 	addi	r6,r6,10680
10012954:	180b883a 	mov	r5,r3
10012958:	1009883a 	mov	r4,r2
1001295c:	00136c80 	call	100136c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10012960:	e0bffd17 	ldw	r2,-12(fp)
10012964:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10012968:	e0bffd17 	ldw	r2,-12(fp)
1001296c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10012970:	d0e70717 	ldw	r3,-25572(gp)
10012974:	e1fffd17 	ldw	r7,-12(fp)
10012978:	01840074 	movhi	r6,4097
1001297c:	318af104 	addi	r6,r6,11204
10012980:	180b883a 	mov	r5,r3
10012984:	1009883a 	mov	r4,r2
10012988:	00132f00 	call	100132f0 <alt_alarm_start>
1001298c:	1000040e 	bge	r2,zero,100129a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012990:	e0fffd17 	ldw	r3,-12(fp)
10012994:	00a00034 	movhi	r2,32768
10012998:	10bfffc4 	addi	r2,r2,-1
1001299c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100129a0:	0001883a 	nop
100129a4:	e037883a 	mov	sp,fp
100129a8:	dfc00117 	ldw	ra,4(sp)
100129ac:	df000017 	ldw	fp,0(sp)
100129b0:	dec00204 	addi	sp,sp,8
100129b4:	f800283a 	ret

100129b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100129b8:	defff804 	addi	sp,sp,-32
100129bc:	df000715 	stw	fp,28(sp)
100129c0:	df000704 	addi	fp,sp,28
100129c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100129c8:	e0bfff17 	ldw	r2,-4(fp)
100129cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100129d0:	e0bffb17 	ldw	r2,-20(fp)
100129d4:	10800017 	ldw	r2,0(r2)
100129d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100129dc:	e0bffc17 	ldw	r2,-16(fp)
100129e0:	10800104 	addi	r2,r2,4
100129e4:	10800037 	ldwio	r2,0(r2)
100129e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100129ec:	e0bffd17 	ldw	r2,-12(fp)
100129f0:	1080c00c 	andi	r2,r2,768
100129f4:	10006d26 	beq	r2,zero,10012bac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100129f8:	e0bffd17 	ldw	r2,-12(fp)
100129fc:	1080400c 	andi	r2,r2,256
10012a00:	10003526 	beq	r2,zero,10012ad8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10012a04:	00800074 	movhi	r2,1
10012a08:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012a0c:	e0bffb17 	ldw	r2,-20(fp)
10012a10:	10800a17 	ldw	r2,40(r2)
10012a14:	10800044 	addi	r2,r2,1
10012a18:	1081ffcc 	andi	r2,r2,2047
10012a1c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012a20:	e0bffb17 	ldw	r2,-20(fp)
10012a24:	10c00b17 	ldw	r3,44(r2)
10012a28:	e0bffe17 	ldw	r2,-8(fp)
10012a2c:	18801526 	beq	r3,r2,10012a84 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012a30:	e0bffc17 	ldw	r2,-16(fp)
10012a34:	10800037 	ldwio	r2,0(r2)
10012a38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10012a3c:	e0bff917 	ldw	r2,-28(fp)
10012a40:	10a0000c 	andi	r2,r2,32768
10012a44:	10001126 	beq	r2,zero,10012a8c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012a48:	e0bffb17 	ldw	r2,-20(fp)
10012a4c:	10800a17 	ldw	r2,40(r2)
10012a50:	e0fff917 	ldw	r3,-28(fp)
10012a54:	1809883a 	mov	r4,r3
10012a58:	e0fffb17 	ldw	r3,-20(fp)
10012a5c:	1885883a 	add	r2,r3,r2
10012a60:	10800e04 	addi	r2,r2,56
10012a64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012a68:	e0bffb17 	ldw	r2,-20(fp)
10012a6c:	10800a17 	ldw	r2,40(r2)
10012a70:	10800044 	addi	r2,r2,1
10012a74:	10c1ffcc 	andi	r3,r2,2047
10012a78:	e0bffb17 	ldw	r2,-20(fp)
10012a7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012a80:	003fe206 	br	10012a0c <__alt_data_end+0xf8012a0c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10012a84:	0001883a 	nop
10012a88:	00000106 	br	10012a90 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10012a8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012a90:	e0bff917 	ldw	r2,-28(fp)
10012a94:	10bfffec 	andhi	r2,r2,65535
10012a98:	10000f26 	beq	r2,zero,10012ad8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012a9c:	e0bffb17 	ldw	r2,-20(fp)
10012aa0:	10c00817 	ldw	r3,32(r2)
10012aa4:	00bfff84 	movi	r2,-2
10012aa8:	1886703a 	and	r3,r3,r2
10012aac:	e0bffb17 	ldw	r2,-20(fp)
10012ab0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10012ab4:	e0bffc17 	ldw	r2,-16(fp)
10012ab8:	10800104 	addi	r2,r2,4
10012abc:	1007883a 	mov	r3,r2
10012ac0:	e0bffb17 	ldw	r2,-20(fp)
10012ac4:	10800817 	ldw	r2,32(r2)
10012ac8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012acc:	e0bffc17 	ldw	r2,-16(fp)
10012ad0:	10800104 	addi	r2,r2,4
10012ad4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012ad8:	e0bffd17 	ldw	r2,-12(fp)
10012adc:	1080800c 	andi	r2,r2,512
10012ae0:	103fbe26 	beq	r2,zero,100129dc <__alt_data_end+0xf80129dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10012ae4:	e0bffd17 	ldw	r2,-12(fp)
10012ae8:	1004d43a 	srli	r2,r2,16
10012aec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10012af0:	00001406 	br	10012b44 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10012af4:	e0bffc17 	ldw	r2,-16(fp)
10012af8:	e0fffb17 	ldw	r3,-20(fp)
10012afc:	18c00d17 	ldw	r3,52(r3)
10012b00:	e13ffb17 	ldw	r4,-20(fp)
10012b04:	20c7883a 	add	r3,r4,r3
10012b08:	18c20e04 	addi	r3,r3,2104
10012b0c:	18c00003 	ldbu	r3,0(r3)
10012b10:	18c03fcc 	andi	r3,r3,255
10012b14:	18c0201c 	xori	r3,r3,128
10012b18:	18ffe004 	addi	r3,r3,-128
10012b1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012b20:	e0bffb17 	ldw	r2,-20(fp)
10012b24:	10800d17 	ldw	r2,52(r2)
10012b28:	10800044 	addi	r2,r2,1
10012b2c:	10c1ffcc 	andi	r3,r2,2047
10012b30:	e0bffb17 	ldw	r2,-20(fp)
10012b34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012b38:	e0bffa17 	ldw	r2,-24(fp)
10012b3c:	10bfffc4 	addi	r2,r2,-1
10012b40:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10012b44:	e0bffa17 	ldw	r2,-24(fp)
10012b48:	10000526 	beq	r2,zero,10012b60 <altera_avalon_jtag_uart_irq+0x1a8>
10012b4c:	e0bffb17 	ldw	r2,-20(fp)
10012b50:	10c00d17 	ldw	r3,52(r2)
10012b54:	e0bffb17 	ldw	r2,-20(fp)
10012b58:	10800c17 	ldw	r2,48(r2)
10012b5c:	18bfe51e 	bne	r3,r2,10012af4 <__alt_data_end+0xf8012af4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10012b60:	e0bffa17 	ldw	r2,-24(fp)
10012b64:	103f9d26 	beq	r2,zero,100129dc <__alt_data_end+0xf80129dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012b68:	e0bffb17 	ldw	r2,-20(fp)
10012b6c:	10c00817 	ldw	r3,32(r2)
10012b70:	00bfff44 	movi	r2,-3
10012b74:	1886703a 	and	r3,r3,r2
10012b78:	e0bffb17 	ldw	r2,-20(fp)
10012b7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012b80:	e0bffb17 	ldw	r2,-20(fp)
10012b84:	10800017 	ldw	r2,0(r2)
10012b88:	10800104 	addi	r2,r2,4
10012b8c:	1007883a 	mov	r3,r2
10012b90:	e0bffb17 	ldw	r2,-20(fp)
10012b94:	10800817 	ldw	r2,32(r2)
10012b98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012b9c:	e0bffc17 	ldw	r2,-16(fp)
10012ba0:	10800104 	addi	r2,r2,4
10012ba4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012ba8:	003f8c06 	br	100129dc <__alt_data_end+0xf80129dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10012bac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10012bb0:	0001883a 	nop
10012bb4:	e037883a 	mov	sp,fp
10012bb8:	df000017 	ldw	fp,0(sp)
10012bbc:	dec00104 	addi	sp,sp,4
10012bc0:	f800283a 	ret

10012bc4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10012bc4:	defff804 	addi	sp,sp,-32
10012bc8:	df000715 	stw	fp,28(sp)
10012bcc:	df000704 	addi	fp,sp,28
10012bd0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10012bd4:	e0bffb17 	ldw	r2,-20(fp)
10012bd8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012bdc:	e0bff917 	ldw	r2,-28(fp)
10012be0:	10800017 	ldw	r2,0(r2)
10012be4:	10800104 	addi	r2,r2,4
10012be8:	10800037 	ldwio	r2,0(r2)
10012bec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012bf0:	e0bffa17 	ldw	r2,-24(fp)
10012bf4:	1081000c 	andi	r2,r2,1024
10012bf8:	10000b26 	beq	r2,zero,10012c28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012bfc:	e0bff917 	ldw	r2,-28(fp)
10012c00:	10800017 	ldw	r2,0(r2)
10012c04:	10800104 	addi	r2,r2,4
10012c08:	1007883a 	mov	r3,r2
10012c0c:	e0bff917 	ldw	r2,-28(fp)
10012c10:	10800817 	ldw	r2,32(r2)
10012c14:	10810014 	ori	r2,r2,1024
10012c18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012c1c:	e0bff917 	ldw	r2,-28(fp)
10012c20:	10000915 	stw	zero,36(r2)
10012c24:	00000a06 	br	10012c50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012c28:	e0bff917 	ldw	r2,-28(fp)
10012c2c:	10c00917 	ldw	r3,36(r2)
10012c30:	00a00034 	movhi	r2,32768
10012c34:	10bfff04 	addi	r2,r2,-4
10012c38:	10c00536 	bltu	r2,r3,10012c50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012c3c:	e0bff917 	ldw	r2,-28(fp)
10012c40:	10800917 	ldw	r2,36(r2)
10012c44:	10c00044 	addi	r3,r2,1
10012c48:	e0bff917 	ldw	r2,-28(fp)
10012c4c:	10c00915 	stw	r3,36(r2)
10012c50:	d0a70717 	ldw	r2,-25572(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10012c54:	e037883a 	mov	sp,fp
10012c58:	df000017 	ldw	fp,0(sp)
10012c5c:	dec00104 	addi	sp,sp,4
10012c60:	f800283a 	ret

10012c64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10012c64:	defffd04 	addi	sp,sp,-12
10012c68:	df000215 	stw	fp,8(sp)
10012c6c:	df000204 	addi	fp,sp,8
10012c70:	e13ffe15 	stw	r4,-8(fp)
10012c74:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012c78:	00000506 	br	10012c90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012c7c:	e0bfff17 	ldw	r2,-4(fp)
10012c80:	1090000c 	andi	r2,r2,16384
10012c84:	10000226 	beq	r2,zero,10012c90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012c88:	00bffd44 	movi	r2,-11
10012c8c:	00000b06 	br	10012cbc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012c90:	e0bffe17 	ldw	r2,-8(fp)
10012c94:	10c00d17 	ldw	r3,52(r2)
10012c98:	e0bffe17 	ldw	r2,-8(fp)
10012c9c:	10800c17 	ldw	r2,48(r2)
10012ca0:	18800526 	beq	r3,r2,10012cb8 <altera_avalon_jtag_uart_close+0x54>
10012ca4:	e0bffe17 	ldw	r2,-8(fp)
10012ca8:	10c00917 	ldw	r3,36(r2)
10012cac:	e0bffe17 	ldw	r2,-8(fp)
10012cb0:	10800117 	ldw	r2,4(r2)
10012cb4:	18bff136 	bltu	r3,r2,10012c7c <__alt_data_end+0xf8012c7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012cb8:	0005883a 	mov	r2,zero
}
10012cbc:	e037883a 	mov	sp,fp
10012cc0:	df000017 	ldw	fp,0(sp)
10012cc4:	dec00104 	addi	sp,sp,4
10012cc8:	f800283a 	ret

10012ccc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012ccc:	defffa04 	addi	sp,sp,-24
10012cd0:	df000515 	stw	fp,20(sp)
10012cd4:	df000504 	addi	fp,sp,20
10012cd8:	e13ffd15 	stw	r4,-12(fp)
10012cdc:	e17ffe15 	stw	r5,-8(fp)
10012ce0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10012ce4:	00bff9c4 	movi	r2,-25
10012ce8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012cec:	e0bffe17 	ldw	r2,-8(fp)
10012cf0:	10da8060 	cmpeqi	r3,r2,27137
10012cf4:	1800031e 	bne	r3,zero,10012d04 <altera_avalon_jtag_uart_ioctl+0x38>
10012cf8:	109a80a0 	cmpeqi	r2,r2,27138
10012cfc:	1000181e 	bne	r2,zero,10012d60 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012d00:	00002906 	br	10012da8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10012d04:	e0bffd17 	ldw	r2,-12(fp)
10012d08:	10c00117 	ldw	r3,4(r2)
10012d0c:	00a00034 	movhi	r2,32768
10012d10:	10bfffc4 	addi	r2,r2,-1
10012d14:	18802126 	beq	r3,r2,10012d9c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012d18:	e0bfff17 	ldw	r2,-4(fp)
10012d1c:	10800017 	ldw	r2,0(r2)
10012d20:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10012d24:	e0bffc17 	ldw	r2,-16(fp)
10012d28:	10800090 	cmplti	r2,r2,2
10012d2c:	1000061e 	bne	r2,zero,10012d48 <altera_avalon_jtag_uart_ioctl+0x7c>
10012d30:	e0fffc17 	ldw	r3,-16(fp)
10012d34:	00a00034 	movhi	r2,32768
10012d38:	10bfffc4 	addi	r2,r2,-1
10012d3c:	18800226 	beq	r3,r2,10012d48 <altera_avalon_jtag_uart_ioctl+0x7c>
10012d40:	e0bffc17 	ldw	r2,-16(fp)
10012d44:	00000206 	br	10012d50 <altera_avalon_jtag_uart_ioctl+0x84>
10012d48:	00a00034 	movhi	r2,32768
10012d4c:	10bfff84 	addi	r2,r2,-2
10012d50:	e0fffd17 	ldw	r3,-12(fp)
10012d54:	18800115 	stw	r2,4(r3)
      rc = 0;
10012d58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012d5c:	00000f06 	br	10012d9c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012d60:	e0bffd17 	ldw	r2,-12(fp)
10012d64:	10c00117 	ldw	r3,4(r2)
10012d68:	00a00034 	movhi	r2,32768
10012d6c:	10bfffc4 	addi	r2,r2,-1
10012d70:	18800c26 	beq	r3,r2,10012da4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10012d74:	e0bffd17 	ldw	r2,-12(fp)
10012d78:	10c00917 	ldw	r3,36(r2)
10012d7c:	e0bffd17 	ldw	r2,-12(fp)
10012d80:	10800117 	ldw	r2,4(r2)
10012d84:	1885803a 	cmpltu	r2,r3,r2
10012d88:	10c03fcc 	andi	r3,r2,255
10012d8c:	e0bfff17 	ldw	r2,-4(fp)
10012d90:	10c00015 	stw	r3,0(r2)
      rc = 0;
10012d94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012d98:	00000206 	br	10012da4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012d9c:	0001883a 	nop
10012da0:	00000106 	br	10012da8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10012da4:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012da8:	e0bffb17 	ldw	r2,-20(fp)
}
10012dac:	e037883a 	mov	sp,fp
10012db0:	df000017 	ldw	fp,0(sp)
10012db4:	dec00104 	addi	sp,sp,4
10012db8:	f800283a 	ret

10012dbc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012dbc:	defff304 	addi	sp,sp,-52
10012dc0:	dfc00c15 	stw	ra,48(sp)
10012dc4:	df000b15 	stw	fp,44(sp)
10012dc8:	df000b04 	addi	fp,sp,44
10012dcc:	e13ffc15 	stw	r4,-16(fp)
10012dd0:	e17ffd15 	stw	r5,-12(fp)
10012dd4:	e1bffe15 	stw	r6,-8(fp)
10012dd8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012ddc:	e0bffd17 	ldw	r2,-12(fp)
10012de0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012de4:	00004706 	br	10012f04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012de8:	e0bffc17 	ldw	r2,-16(fp)
10012dec:	10800a17 	ldw	r2,40(r2)
10012df0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10012df4:	e0bffc17 	ldw	r2,-16(fp)
10012df8:	10800b17 	ldw	r2,44(r2)
10012dfc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012e00:	e0fff717 	ldw	r3,-36(fp)
10012e04:	e0bff817 	ldw	r2,-32(fp)
10012e08:	18800536 	bltu	r3,r2,10012e20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012e0c:	e0fff717 	ldw	r3,-36(fp)
10012e10:	e0bff817 	ldw	r2,-32(fp)
10012e14:	1885c83a 	sub	r2,r3,r2
10012e18:	e0bff615 	stw	r2,-40(fp)
10012e1c:	00000406 	br	10012e30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012e20:	00c20004 	movi	r3,2048
10012e24:	e0bff817 	ldw	r2,-32(fp)
10012e28:	1885c83a 	sub	r2,r3,r2
10012e2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012e30:	e0bff617 	ldw	r2,-40(fp)
10012e34:	10001e26 	beq	r2,zero,10012eb0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10012e38:	e0fffe17 	ldw	r3,-8(fp)
10012e3c:	e0bff617 	ldw	r2,-40(fp)
10012e40:	1880022e 	bgeu	r3,r2,10012e4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10012e44:	e0bffe17 	ldw	r2,-8(fp)
10012e48:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012e4c:	e0bffc17 	ldw	r2,-16(fp)
10012e50:	10c00e04 	addi	r3,r2,56
10012e54:	e0bff817 	ldw	r2,-32(fp)
10012e58:	1885883a 	add	r2,r3,r2
10012e5c:	e1bff617 	ldw	r6,-40(fp)
10012e60:	100b883a 	mov	r5,r2
10012e64:	e13ff517 	ldw	r4,-44(fp)
10012e68:	000689c0 	call	1000689c <memcpy>
      ptr   += n;
10012e6c:	e0fff517 	ldw	r3,-44(fp)
10012e70:	e0bff617 	ldw	r2,-40(fp)
10012e74:	1885883a 	add	r2,r3,r2
10012e78:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012e7c:	e0fffe17 	ldw	r3,-8(fp)
10012e80:	e0bff617 	ldw	r2,-40(fp)
10012e84:	1885c83a 	sub	r2,r3,r2
10012e88:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012e8c:	e0fff817 	ldw	r3,-32(fp)
10012e90:	e0bff617 	ldw	r2,-40(fp)
10012e94:	1885883a 	add	r2,r3,r2
10012e98:	10c1ffcc 	andi	r3,r2,2047
10012e9c:	e0bffc17 	ldw	r2,-16(fp)
10012ea0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10012ea4:	e0bffe17 	ldw	r2,-8(fp)
10012ea8:	00bfcf16 	blt	zero,r2,10012de8 <__alt_data_end+0xf8012de8>
10012eac:	00000106 	br	10012eb4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10012eb0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10012eb4:	e0fff517 	ldw	r3,-44(fp)
10012eb8:	e0bffd17 	ldw	r2,-12(fp)
10012ebc:	1880141e 	bne	r3,r2,10012f10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10012ec0:	e0bfff17 	ldw	r2,-4(fp)
10012ec4:	1090000c 	andi	r2,r2,16384
10012ec8:	1000131e 	bne	r2,zero,10012f18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012ecc:	0001883a 	nop
10012ed0:	e0bffc17 	ldw	r2,-16(fp)
10012ed4:	10c00a17 	ldw	r3,40(r2)
10012ed8:	e0bff717 	ldw	r2,-36(fp)
10012edc:	1880051e 	bne	r3,r2,10012ef4 <altera_avalon_jtag_uart_read+0x138>
10012ee0:	e0bffc17 	ldw	r2,-16(fp)
10012ee4:	10c00917 	ldw	r3,36(r2)
10012ee8:	e0bffc17 	ldw	r2,-16(fp)
10012eec:	10800117 	ldw	r2,4(r2)
10012ef0:	18bff736 	bltu	r3,r2,10012ed0 <__alt_data_end+0xf8012ed0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10012ef4:	e0bffc17 	ldw	r2,-16(fp)
10012ef8:	10c00a17 	ldw	r3,40(r2)
10012efc:	e0bff717 	ldw	r2,-36(fp)
10012f00:	18800726 	beq	r3,r2,10012f20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012f04:	e0bffe17 	ldw	r2,-8(fp)
10012f08:	00bfb716 	blt	zero,r2,10012de8 <__alt_data_end+0xf8012de8>
10012f0c:	00000506 	br	10012f24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012f10:	0001883a 	nop
10012f14:	00000306 	br	10012f24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10012f18:	0001883a 	nop
10012f1c:	00000106 	br	10012f24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10012f20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10012f24:	e0fff517 	ldw	r3,-44(fp)
10012f28:	e0bffd17 	ldw	r2,-12(fp)
10012f2c:	18801826 	beq	r3,r2,10012f90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012f30:	0005303a 	rdctl	r2,status
10012f34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012f38:	e0fffb17 	ldw	r3,-20(fp)
10012f3c:	00bfff84 	movi	r2,-2
10012f40:	1884703a 	and	r2,r3,r2
10012f44:	1001703a 	wrctl	status,r2
  
  return context;
10012f48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10012f4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012f50:	e0bffc17 	ldw	r2,-16(fp)
10012f54:	10800817 	ldw	r2,32(r2)
10012f58:	10c00054 	ori	r3,r2,1
10012f5c:	e0bffc17 	ldw	r2,-16(fp)
10012f60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012f64:	e0bffc17 	ldw	r2,-16(fp)
10012f68:	10800017 	ldw	r2,0(r2)
10012f6c:	10800104 	addi	r2,r2,4
10012f70:	1007883a 	mov	r3,r2
10012f74:	e0bffc17 	ldw	r2,-16(fp)
10012f78:	10800817 	ldw	r2,32(r2)
10012f7c:	18800035 	stwio	r2,0(r3)
10012f80:	e0bffa17 	ldw	r2,-24(fp)
10012f84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012f88:	e0bff917 	ldw	r2,-28(fp)
10012f8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012f90:	e0fff517 	ldw	r3,-44(fp)
10012f94:	e0bffd17 	ldw	r2,-12(fp)
10012f98:	18800426 	beq	r3,r2,10012fac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10012f9c:	e0fff517 	ldw	r3,-44(fp)
10012fa0:	e0bffd17 	ldw	r2,-12(fp)
10012fa4:	1885c83a 	sub	r2,r3,r2
10012fa8:	00000606 	br	10012fc4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10012fac:	e0bfff17 	ldw	r2,-4(fp)
10012fb0:	1090000c 	andi	r2,r2,16384
10012fb4:	10000226 	beq	r2,zero,10012fc0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10012fb8:	00bffd44 	movi	r2,-11
10012fbc:	00000106 	br	10012fc4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10012fc0:	00bffec4 	movi	r2,-5
}
10012fc4:	e037883a 	mov	sp,fp
10012fc8:	dfc00117 	ldw	ra,4(sp)
10012fcc:	df000017 	ldw	fp,0(sp)
10012fd0:	dec00204 	addi	sp,sp,8
10012fd4:	f800283a 	ret

10012fd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10012fd8:	defff304 	addi	sp,sp,-52
10012fdc:	dfc00c15 	stw	ra,48(sp)
10012fe0:	df000b15 	stw	fp,44(sp)
10012fe4:	df000b04 	addi	fp,sp,44
10012fe8:	e13ffc15 	stw	r4,-16(fp)
10012fec:	e17ffd15 	stw	r5,-12(fp)
10012ff0:	e1bffe15 	stw	r6,-8(fp)
10012ff4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10012ff8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10012ffc:	e0bffd17 	ldw	r2,-12(fp)
10013000:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10013004:	00003706 	br	100130e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10013008:	e0bffc17 	ldw	r2,-16(fp)
1001300c:	10800c17 	ldw	r2,48(r2)
10013010:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10013014:	e0bffc17 	ldw	r2,-16(fp)
10013018:	10800d17 	ldw	r2,52(r2)
1001301c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10013020:	e0fff917 	ldw	r3,-28(fp)
10013024:	e0bff517 	ldw	r2,-44(fp)
10013028:	1880062e 	bgeu	r3,r2,10013044 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001302c:	e0fff517 	ldw	r3,-44(fp)
10013030:	e0bff917 	ldw	r2,-28(fp)
10013034:	1885c83a 	sub	r2,r3,r2
10013038:	10bfffc4 	addi	r2,r2,-1
1001303c:	e0bff615 	stw	r2,-40(fp)
10013040:	00000b06 	br	10013070 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10013044:	e0bff517 	ldw	r2,-44(fp)
10013048:	10000526 	beq	r2,zero,10013060 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001304c:	00c20004 	movi	r3,2048
10013050:	e0bff917 	ldw	r2,-28(fp)
10013054:	1885c83a 	sub	r2,r3,r2
10013058:	e0bff615 	stw	r2,-40(fp)
1001305c:	00000406 	br	10013070 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10013060:	00c1ffc4 	movi	r3,2047
10013064:	e0bff917 	ldw	r2,-28(fp)
10013068:	1885c83a 	sub	r2,r3,r2
1001306c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10013070:	e0bff617 	ldw	r2,-40(fp)
10013074:	10001e26 	beq	r2,zero,100130f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10013078:	e0fffe17 	ldw	r3,-8(fp)
1001307c:	e0bff617 	ldw	r2,-40(fp)
10013080:	1880022e 	bgeu	r3,r2,1001308c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10013084:	e0bffe17 	ldw	r2,-8(fp)
10013088:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1001308c:	e0bffc17 	ldw	r2,-16(fp)
10013090:	10c20e04 	addi	r3,r2,2104
10013094:	e0bff917 	ldw	r2,-28(fp)
10013098:	1885883a 	add	r2,r3,r2
1001309c:	e1bff617 	ldw	r6,-40(fp)
100130a0:	e17ffd17 	ldw	r5,-12(fp)
100130a4:	1009883a 	mov	r4,r2
100130a8:	000689c0 	call	1000689c <memcpy>
      ptr   += n;
100130ac:	e0fffd17 	ldw	r3,-12(fp)
100130b0:	e0bff617 	ldw	r2,-40(fp)
100130b4:	1885883a 	add	r2,r3,r2
100130b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100130bc:	e0fffe17 	ldw	r3,-8(fp)
100130c0:	e0bff617 	ldw	r2,-40(fp)
100130c4:	1885c83a 	sub	r2,r3,r2
100130c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100130cc:	e0fff917 	ldw	r3,-28(fp)
100130d0:	e0bff617 	ldw	r2,-40(fp)
100130d4:	1885883a 	add	r2,r3,r2
100130d8:	10c1ffcc 	andi	r3,r2,2047
100130dc:	e0bffc17 	ldw	r2,-16(fp)
100130e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100130e4:	e0bffe17 	ldw	r2,-8(fp)
100130e8:	00bfc716 	blt	zero,r2,10013008 <__alt_data_end+0xf8013008>
100130ec:	00000106 	br	100130f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100130f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100130f4:	0005303a 	rdctl	r2,status
100130f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100130fc:	e0fffb17 	ldw	r3,-20(fp)
10013100:	00bfff84 	movi	r2,-2
10013104:	1884703a 	and	r2,r3,r2
10013108:	1001703a 	wrctl	status,r2
  
  return context;
1001310c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10013110:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10013114:	e0bffc17 	ldw	r2,-16(fp)
10013118:	10800817 	ldw	r2,32(r2)
1001311c:	10c00094 	ori	r3,r2,2
10013120:	e0bffc17 	ldw	r2,-16(fp)
10013124:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10013128:	e0bffc17 	ldw	r2,-16(fp)
1001312c:	10800017 	ldw	r2,0(r2)
10013130:	10800104 	addi	r2,r2,4
10013134:	1007883a 	mov	r3,r2
10013138:	e0bffc17 	ldw	r2,-16(fp)
1001313c:	10800817 	ldw	r2,32(r2)
10013140:	18800035 	stwio	r2,0(r3)
10013144:	e0bffa17 	ldw	r2,-24(fp)
10013148:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001314c:	e0bff817 	ldw	r2,-32(fp)
10013150:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10013154:	e0bffe17 	ldw	r2,-8(fp)
10013158:	0080100e 	bge	zero,r2,1001319c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1001315c:	e0bfff17 	ldw	r2,-4(fp)
10013160:	1090000c 	andi	r2,r2,16384
10013164:	1000101e 	bne	r2,zero,100131a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10013168:	0001883a 	nop
1001316c:	e0bffc17 	ldw	r2,-16(fp)
10013170:	10c00d17 	ldw	r3,52(r2)
10013174:	e0bff517 	ldw	r2,-44(fp)
10013178:	1880051e 	bne	r3,r2,10013190 <altera_avalon_jtag_uart_write+0x1b8>
1001317c:	e0bffc17 	ldw	r2,-16(fp)
10013180:	10c00917 	ldw	r3,36(r2)
10013184:	e0bffc17 	ldw	r2,-16(fp)
10013188:	10800117 	ldw	r2,4(r2)
1001318c:	18bff736 	bltu	r3,r2,1001316c <__alt_data_end+0xf801316c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10013190:	e0bffc17 	ldw	r2,-16(fp)
10013194:	10800917 	ldw	r2,36(r2)
10013198:	1000051e 	bne	r2,zero,100131b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1001319c:	e0bffe17 	ldw	r2,-8(fp)
100131a0:	00bfd016 	blt	zero,r2,100130e4 <__alt_data_end+0xf80130e4>
100131a4:	00000306 	br	100131b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
100131a8:	0001883a 	nop
100131ac:	00000106 	br	100131b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
100131b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100131b4:	e0fffd17 	ldw	r3,-12(fp)
100131b8:	e0bff717 	ldw	r2,-36(fp)
100131bc:	18800426 	beq	r3,r2,100131d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100131c0:	e0fffd17 	ldw	r3,-12(fp)
100131c4:	e0bff717 	ldw	r2,-36(fp)
100131c8:	1885c83a 	sub	r2,r3,r2
100131cc:	00000606 	br	100131e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100131d0:	e0bfff17 	ldw	r2,-4(fp)
100131d4:	1090000c 	andi	r2,r2,16384
100131d8:	10000226 	beq	r2,zero,100131e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100131dc:	00bffd44 	movi	r2,-11
100131e0:	00000106 	br	100131e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100131e4:	00bffec4 	movi	r2,-5
}
100131e8:	e037883a 	mov	sp,fp
100131ec:	dfc00117 	ldw	ra,4(sp)
100131f0:	df000017 	ldw	fp,0(sp)
100131f4:	dec00204 	addi	sp,sp,8
100131f8:	f800283a 	ret

100131fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
100131fc:	defffa04 	addi	sp,sp,-24
10013200:	dfc00515 	stw	ra,20(sp)
10013204:	df000415 	stw	fp,16(sp)
10013208:	df000404 	addi	fp,sp,16
1001320c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
10013210:	0007883a 	mov	r3,zero
10013214:	e0bfff17 	ldw	r2,-4(fp)
10013218:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
1001321c:	e0bfff17 	ldw	r2,-4(fp)
10013220:	10800104 	addi	r2,r2,4
10013224:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013228:	0005303a 	rdctl	r2,status
1001322c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013230:	e0fffd17 	ldw	r3,-12(fp)
10013234:	00bfff84 	movi	r2,-2
10013238:	1884703a 	and	r2,r3,r2
1001323c:	1001703a 	wrctl	status,r2
  
  return context;
10013240:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
10013244:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
10013248:	0013d980 	call	10013d98 <alt_tick>
1001324c:	e0bffc17 	ldw	r2,-16(fp)
10013250:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013254:	e0bffe17 	ldw	r2,-8(fp)
10013258:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
1001325c:	0001883a 	nop
10013260:	e037883a 	mov	sp,fp
10013264:	dfc00117 	ldw	ra,4(sp)
10013268:	df000017 	ldw	fp,0(sp)
1001326c:	dec00204 	addi	sp,sp,8
10013270:	f800283a 	ret

10013274 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
10013274:	defff804 	addi	sp,sp,-32
10013278:	dfc00715 	stw	ra,28(sp)
1001327c:	df000615 	stw	fp,24(sp)
10013280:	df000604 	addi	fp,sp,24
10013284:	e13ffc15 	stw	r4,-16(fp)
10013288:	e17ffd15 	stw	r5,-12(fp)
1001328c:	e1bffe15 	stw	r6,-8(fp)
10013290:	e1ffff15 	stw	r7,-4(fp)
10013294:	e0bfff17 	ldw	r2,-4(fp)
10013298:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
1001329c:	d0a70717 	ldw	r2,-25572(gp)
100132a0:	1000021e 	bne	r2,zero,100132ac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
100132a4:	e0bffb17 	ldw	r2,-20(fp)
100132a8:	d0a70715 	stw	r2,-25572(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
100132ac:	e0bffc17 	ldw	r2,-16(fp)
100132b0:	10800104 	addi	r2,r2,4
100132b4:	00c001c4 	movi	r3,7
100132b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
100132bc:	d8000015 	stw	zero,0(sp)
100132c0:	e1fffc17 	ldw	r7,-16(fp)
100132c4:	01840074 	movhi	r6,4097
100132c8:	318c7f04 	addi	r6,r6,12796
100132cc:	e17ffe17 	ldw	r5,-8(fp)
100132d0:	e13ffd17 	ldw	r4,-12(fp)
100132d4:	00136c80 	call	100136c8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
100132d8:	0001883a 	nop
100132dc:	e037883a 	mov	sp,fp
100132e0:	dfc00117 	ldw	ra,4(sp)
100132e4:	df000017 	ldw	fp,0(sp)
100132e8:	dec00204 	addi	sp,sp,8
100132ec:	f800283a 	ret

100132f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100132f0:	defff504 	addi	sp,sp,-44
100132f4:	df000a15 	stw	fp,40(sp)
100132f8:	df000a04 	addi	fp,sp,40
100132fc:	e13ffc15 	stw	r4,-16(fp)
10013300:	e17ffd15 	stw	r5,-12(fp)
10013304:	e1bffe15 	stw	r6,-8(fp)
10013308:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1001330c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10013310:	d0a70717 	ldw	r2,-25572(gp)
  
  if (alt_ticks_per_second ())
10013314:	10003c26 	beq	r2,zero,10013408 <alt_alarm_start+0x118>
  {
    if (alarm)
10013318:	e0bffc17 	ldw	r2,-16(fp)
1001331c:	10003826 	beq	r2,zero,10013400 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10013320:	e0bffc17 	ldw	r2,-16(fp)
10013324:	e0fffe17 	ldw	r3,-8(fp)
10013328:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001332c:	e0bffc17 	ldw	r2,-16(fp)
10013330:	e0ffff17 	ldw	r3,-4(fp)
10013334:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013338:	0005303a 	rdctl	r2,status
1001333c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013340:	e0fff917 	ldw	r3,-28(fp)
10013344:	00bfff84 	movi	r2,-2
10013348:	1884703a 	and	r2,r3,r2
1001334c:	1001703a 	wrctl	status,r2
  
  return context;
10013350:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10013354:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10013358:	d0a70817 	ldw	r2,-25568(gp)
      
      current_nticks = alt_nticks();
1001335c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10013360:	e0fffd17 	ldw	r3,-12(fp)
10013364:	e0bff617 	ldw	r2,-40(fp)
10013368:	1885883a 	add	r2,r3,r2
1001336c:	10c00044 	addi	r3,r2,1
10013370:	e0bffc17 	ldw	r2,-16(fp)
10013374:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10013378:	e0bffc17 	ldw	r2,-16(fp)
1001337c:	10c00217 	ldw	r3,8(r2)
10013380:	e0bff617 	ldw	r2,-40(fp)
10013384:	1880042e 	bgeu	r3,r2,10013398 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10013388:	e0bffc17 	ldw	r2,-16(fp)
1001338c:	00c00044 	movi	r3,1
10013390:	10c00405 	stb	r3,16(r2)
10013394:	00000206 	br	100133a0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10013398:	e0bffc17 	ldw	r2,-16(fp)
1001339c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100133a0:	e0bffc17 	ldw	r2,-16(fp)
100133a4:	d0e00e04 	addi	r3,gp,-32712
100133a8:	e0fffa15 	stw	r3,-24(fp)
100133ac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100133b0:	e0bffb17 	ldw	r2,-20(fp)
100133b4:	e0fffa17 	ldw	r3,-24(fp)
100133b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100133bc:	e0bffa17 	ldw	r2,-24(fp)
100133c0:	10c00017 	ldw	r3,0(r2)
100133c4:	e0bffb17 	ldw	r2,-20(fp)
100133c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100133cc:	e0bffa17 	ldw	r2,-24(fp)
100133d0:	10800017 	ldw	r2,0(r2)
100133d4:	e0fffb17 	ldw	r3,-20(fp)
100133d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100133dc:	e0bffa17 	ldw	r2,-24(fp)
100133e0:	e0fffb17 	ldw	r3,-20(fp)
100133e4:	10c00015 	stw	r3,0(r2)
100133e8:	e0bff817 	ldw	r2,-32(fp)
100133ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100133f0:	e0bff717 	ldw	r2,-36(fp)
100133f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100133f8:	0005883a 	mov	r2,zero
100133fc:	00000306 	br	1001340c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10013400:	00bffa84 	movi	r2,-22
10013404:	00000106 	br	1001340c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10013408:	00bfde84 	movi	r2,-134
  }
}
1001340c:	e037883a 	mov	sp,fp
10013410:	df000017 	ldw	fp,0(sp)
10013414:	dec00104 	addi	sp,sp,4
10013418:	f800283a 	ret

1001341c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1001341c:	defffe04 	addi	sp,sp,-8
10013420:	df000115 	stw	fp,4(sp)
10013424:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10013428:	e03fff15 	stw	zero,-4(fp)
1001342c:	00000506 	br	10013444 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10013430:	e0bfff17 	ldw	r2,-4(fp)
10013434:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10013438:	e0bfff17 	ldw	r2,-4(fp)
1001343c:	10800804 	addi	r2,r2,32
10013440:	e0bfff15 	stw	r2,-4(fp)
10013444:	e0bfff17 	ldw	r2,-4(fp)
10013448:	10820030 	cmpltui	r2,r2,2048
1001344c:	103ff81e 	bne	r2,zero,10013430 <__alt_data_end+0xf8013430>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10013450:	0001883a 	nop
10013454:	e037883a 	mov	sp,fp
10013458:	df000017 	ldw	fp,0(sp)
1001345c:	dec00104 	addi	sp,sp,4
10013460:	f800283a 	ret

10013464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013464:	defffe04 	addi	sp,sp,-8
10013468:	dfc00115 	stw	ra,4(sp)
1001346c:	df000015 	stw	fp,0(sp)
10013470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013474:	d0a00b17 	ldw	r2,-32724(gp)
10013478:	10000326 	beq	r2,zero,10013488 <alt_get_errno+0x24>
1001347c:	d0a00b17 	ldw	r2,-32724(gp)
10013480:	103ee83a 	callr	r2
10013484:	00000106 	br	1001348c <alt_get_errno+0x28>
10013488:	d0a6f504 	addi	r2,gp,-25644
}
1001348c:	e037883a 	mov	sp,fp
10013490:	dfc00117 	ldw	ra,4(sp)
10013494:	df000017 	ldw	fp,0(sp)
10013498:	dec00204 	addi	sp,sp,8
1001349c:	f800283a 	ret

100134a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100134a0:	defffa04 	addi	sp,sp,-24
100134a4:	dfc00515 	stw	ra,20(sp)
100134a8:	df000415 	stw	fp,16(sp)
100134ac:	df000404 	addi	fp,sp,16
100134b0:	e13ffe15 	stw	r4,-8(fp)
100134b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100134b8:	e0bffe17 	ldw	r2,-8(fp)
100134bc:	10000326 	beq	r2,zero,100134cc <alt_dev_llist_insert+0x2c>
100134c0:	e0bffe17 	ldw	r2,-8(fp)
100134c4:	10800217 	ldw	r2,8(r2)
100134c8:	1000061e 	bne	r2,zero,100134e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100134cc:	00134640 	call	10013464 <alt_get_errno>
100134d0:	1007883a 	mov	r3,r2
100134d4:	00800584 	movi	r2,22
100134d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100134dc:	00bffa84 	movi	r2,-22
100134e0:	00001306 	br	10013530 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100134e4:	e0bffe17 	ldw	r2,-8(fp)
100134e8:	e0ffff17 	ldw	r3,-4(fp)
100134ec:	e0fffc15 	stw	r3,-16(fp)
100134f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100134f4:	e0bffd17 	ldw	r2,-12(fp)
100134f8:	e0fffc17 	ldw	r3,-16(fp)
100134fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10013500:	e0bffc17 	ldw	r2,-16(fp)
10013504:	10c00017 	ldw	r3,0(r2)
10013508:	e0bffd17 	ldw	r2,-12(fp)
1001350c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10013510:	e0bffc17 	ldw	r2,-16(fp)
10013514:	10800017 	ldw	r2,0(r2)
10013518:	e0fffd17 	ldw	r3,-12(fp)
1001351c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10013520:	e0bffc17 	ldw	r2,-16(fp)
10013524:	e0fffd17 	ldw	r3,-12(fp)
10013528:	10c00015 	stw	r3,0(r2)

  return 0;  
1001352c:	0005883a 	mov	r2,zero
}
10013530:	e037883a 	mov	sp,fp
10013534:	dfc00117 	ldw	ra,4(sp)
10013538:	df000017 	ldw	fp,0(sp)
1001353c:	dec00204 	addi	sp,sp,8
10013540:	f800283a 	ret

10013544 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10013544:	defffd04 	addi	sp,sp,-12
10013548:	dfc00215 	stw	ra,8(sp)
1001354c:	df000115 	stw	fp,4(sp)
10013550:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013554:	00840074 	movhi	r2,4097
10013558:	10912404 	addi	r2,r2,17552
1001355c:	e0bfff15 	stw	r2,-4(fp)
10013560:	00000606 	br	1001357c <_do_ctors+0x38>
        (*ctor) (); 
10013564:	e0bfff17 	ldw	r2,-4(fp)
10013568:	10800017 	ldw	r2,0(r2)
1001356c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013570:	e0bfff17 	ldw	r2,-4(fp)
10013574:	10bfff04 	addi	r2,r2,-4
10013578:	e0bfff15 	stw	r2,-4(fp)
1001357c:	e0ffff17 	ldw	r3,-4(fp)
10013580:	00840074 	movhi	r2,4097
10013584:	10912504 	addi	r2,r2,17556
10013588:	18bff62e 	bgeu	r3,r2,10013564 <__alt_data_end+0xf8013564>
        (*ctor) (); 
}
1001358c:	0001883a 	nop
10013590:	e037883a 	mov	sp,fp
10013594:	dfc00117 	ldw	ra,4(sp)
10013598:	df000017 	ldw	fp,0(sp)
1001359c:	dec00204 	addi	sp,sp,8
100135a0:	f800283a 	ret

100135a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100135a4:	defffd04 	addi	sp,sp,-12
100135a8:	dfc00215 	stw	ra,8(sp)
100135ac:	df000115 	stw	fp,4(sp)
100135b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100135b4:	00840074 	movhi	r2,4097
100135b8:	10912404 	addi	r2,r2,17552
100135bc:	e0bfff15 	stw	r2,-4(fp)
100135c0:	00000606 	br	100135dc <_do_dtors+0x38>
        (*dtor) (); 
100135c4:	e0bfff17 	ldw	r2,-4(fp)
100135c8:	10800017 	ldw	r2,0(r2)
100135cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100135d0:	e0bfff17 	ldw	r2,-4(fp)
100135d4:	10bfff04 	addi	r2,r2,-4
100135d8:	e0bfff15 	stw	r2,-4(fp)
100135dc:	e0ffff17 	ldw	r3,-4(fp)
100135e0:	00840074 	movhi	r2,4097
100135e4:	10912504 	addi	r2,r2,17556
100135e8:	18bff62e 	bgeu	r3,r2,100135c4 <__alt_data_end+0xf80135c4>
        (*dtor) (); 
}
100135ec:	0001883a 	nop
100135f0:	e037883a 	mov	sp,fp
100135f4:	dfc00117 	ldw	ra,4(sp)
100135f8:	df000017 	ldw	fp,0(sp)
100135fc:	dec00204 	addi	sp,sp,8
10013600:	f800283a 	ret

10013604 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013604:	defffa04 	addi	sp,sp,-24
10013608:	dfc00515 	stw	ra,20(sp)
1001360c:	df000415 	stw	fp,16(sp)
10013610:	df000404 	addi	fp,sp,16
10013614:	e13ffe15 	stw	r4,-8(fp)
10013618:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1001361c:	e0bfff17 	ldw	r2,-4(fp)
10013620:	10800017 	ldw	r2,0(r2)
10013624:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013628:	e13ffe17 	ldw	r4,-8(fp)
1001362c:	0000f100 	call	10000f10 <strlen>
10013630:	10800044 	addi	r2,r2,1
10013634:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013638:	00000d06 	br	10013670 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001363c:	e0bffc17 	ldw	r2,-16(fp)
10013640:	10800217 	ldw	r2,8(r2)
10013644:	e0fffd17 	ldw	r3,-12(fp)
10013648:	180d883a 	mov	r6,r3
1001364c:	e17ffe17 	ldw	r5,-8(fp)
10013650:	1009883a 	mov	r4,r2
10013654:	001414c0 	call	1001414c <memcmp>
10013658:	1000021e 	bne	r2,zero,10013664 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001365c:	e0bffc17 	ldw	r2,-16(fp)
10013660:	00000706 	br	10013680 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013664:	e0bffc17 	ldw	r2,-16(fp)
10013668:	10800017 	ldw	r2,0(r2)
1001366c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013670:	e0fffc17 	ldw	r3,-16(fp)
10013674:	e0bfff17 	ldw	r2,-4(fp)
10013678:	18bff01e 	bne	r3,r2,1001363c <__alt_data_end+0xf801363c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1001367c:	0005883a 	mov	r2,zero
}
10013680:	e037883a 	mov	sp,fp
10013684:	dfc00117 	ldw	ra,4(sp)
10013688:	df000017 	ldw	fp,0(sp)
1001368c:	dec00204 	addi	sp,sp,8
10013690:	f800283a 	ret

10013694 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10013694:	defffe04 	addi	sp,sp,-8
10013698:	dfc00115 	stw	ra,4(sp)
1001369c:	df000015 	stw	fp,0(sp)
100136a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
100136a4:	01440004 	movi	r5,4096
100136a8:	0009883a 	mov	r4,zero
100136ac:	00140700 	call	10014070 <alt_icache_flush>
#endif
}
100136b0:	0001883a 	nop
100136b4:	e037883a 	mov	sp,fp
100136b8:	dfc00117 	ldw	ra,4(sp)
100136bc:	df000017 	ldw	fp,0(sp)
100136c0:	dec00204 	addi	sp,sp,8
100136c4:	f800283a 	ret

100136c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100136c8:	defff904 	addi	sp,sp,-28
100136cc:	dfc00615 	stw	ra,24(sp)
100136d0:	df000515 	stw	fp,20(sp)
100136d4:	df000504 	addi	fp,sp,20
100136d8:	e13ffc15 	stw	r4,-16(fp)
100136dc:	e17ffd15 	stw	r5,-12(fp)
100136e0:	e1bffe15 	stw	r6,-8(fp)
100136e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100136e8:	e0800217 	ldw	r2,8(fp)
100136ec:	d8800015 	stw	r2,0(sp)
100136f0:	e1ffff17 	ldw	r7,-4(fp)
100136f4:	e1bffe17 	ldw	r6,-8(fp)
100136f8:	e17ffd17 	ldw	r5,-12(fp)
100136fc:	e13ffc17 	ldw	r4,-16(fp)
10013700:	00138780 	call	10013878 <alt_iic_isr_register>
}  
10013704:	e037883a 	mov	sp,fp
10013708:	dfc00117 	ldw	ra,4(sp)
1001370c:	df000017 	ldw	fp,0(sp)
10013710:	dec00204 	addi	sp,sp,8
10013714:	f800283a 	ret

10013718 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10013718:	defff904 	addi	sp,sp,-28
1001371c:	df000615 	stw	fp,24(sp)
10013720:	df000604 	addi	fp,sp,24
10013724:	e13ffe15 	stw	r4,-8(fp)
10013728:	e17fff15 	stw	r5,-4(fp)
1001372c:	e0bfff17 	ldw	r2,-4(fp)
10013730:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013734:	0005303a 	rdctl	r2,status
10013738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001373c:	e0fffb17 	ldw	r3,-20(fp)
10013740:	00bfff84 	movi	r2,-2
10013744:	1884703a 	and	r2,r3,r2
10013748:	1001703a 	wrctl	status,r2
  
  return context;
1001374c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013750:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10013754:	00c00044 	movi	r3,1
10013758:	e0bffa17 	ldw	r2,-24(fp)
1001375c:	1884983a 	sll	r2,r3,r2
10013760:	1007883a 	mov	r3,r2
10013764:	d0a6f617 	ldw	r2,-25640(gp)
10013768:	1884b03a 	or	r2,r3,r2
1001376c:	d0a6f615 	stw	r2,-25640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013770:	d0a6f617 	ldw	r2,-25640(gp)
10013774:	100170fa 	wrctl	ienable,r2
10013778:	e0bffc17 	ldw	r2,-16(fp)
1001377c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013780:	e0bffd17 	ldw	r2,-12(fp)
10013784:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013788:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001378c:	0001883a 	nop
}
10013790:	e037883a 	mov	sp,fp
10013794:	df000017 	ldw	fp,0(sp)
10013798:	dec00104 	addi	sp,sp,4
1001379c:	f800283a 	ret

100137a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100137a0:	defff904 	addi	sp,sp,-28
100137a4:	df000615 	stw	fp,24(sp)
100137a8:	df000604 	addi	fp,sp,24
100137ac:	e13ffe15 	stw	r4,-8(fp)
100137b0:	e17fff15 	stw	r5,-4(fp)
100137b4:	e0bfff17 	ldw	r2,-4(fp)
100137b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100137bc:	0005303a 	rdctl	r2,status
100137c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100137c4:	e0fffb17 	ldw	r3,-20(fp)
100137c8:	00bfff84 	movi	r2,-2
100137cc:	1884703a 	and	r2,r3,r2
100137d0:	1001703a 	wrctl	status,r2
  
  return context;
100137d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100137d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100137dc:	00c00044 	movi	r3,1
100137e0:	e0bffa17 	ldw	r2,-24(fp)
100137e4:	1884983a 	sll	r2,r3,r2
100137e8:	0084303a 	nor	r2,zero,r2
100137ec:	1007883a 	mov	r3,r2
100137f0:	d0a6f617 	ldw	r2,-25640(gp)
100137f4:	1884703a 	and	r2,r3,r2
100137f8:	d0a6f615 	stw	r2,-25640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100137fc:	d0a6f617 	ldw	r2,-25640(gp)
10013800:	100170fa 	wrctl	ienable,r2
10013804:	e0bffc17 	ldw	r2,-16(fp)
10013808:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001380c:	e0bffd17 	ldw	r2,-12(fp)
10013810:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013814:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013818:	0001883a 	nop
}
1001381c:	e037883a 	mov	sp,fp
10013820:	df000017 	ldw	fp,0(sp)
10013824:	dec00104 	addi	sp,sp,4
10013828:	f800283a 	ret

1001382c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001382c:	defffc04 	addi	sp,sp,-16
10013830:	df000315 	stw	fp,12(sp)
10013834:	df000304 	addi	fp,sp,12
10013838:	e13ffe15 	stw	r4,-8(fp)
1001383c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10013840:	000530fa 	rdctl	r2,ienable
10013844:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10013848:	00c00044 	movi	r3,1
1001384c:	e0bfff17 	ldw	r2,-4(fp)
10013850:	1884983a 	sll	r2,r3,r2
10013854:	1007883a 	mov	r3,r2
10013858:	e0bffd17 	ldw	r2,-12(fp)
1001385c:	1884703a 	and	r2,r3,r2
10013860:	1004c03a 	cmpne	r2,r2,zero
10013864:	10803fcc 	andi	r2,r2,255
}
10013868:	e037883a 	mov	sp,fp
1001386c:	df000017 	ldw	fp,0(sp)
10013870:	dec00104 	addi	sp,sp,4
10013874:	f800283a 	ret

10013878 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013878:	defff504 	addi	sp,sp,-44
1001387c:	dfc00a15 	stw	ra,40(sp)
10013880:	df000915 	stw	fp,36(sp)
10013884:	df000904 	addi	fp,sp,36
10013888:	e13ffc15 	stw	r4,-16(fp)
1001388c:	e17ffd15 	stw	r5,-12(fp)
10013890:	e1bffe15 	stw	r6,-8(fp)
10013894:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10013898:	00bffa84 	movi	r2,-22
1001389c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100138a0:	e0bffd17 	ldw	r2,-12(fp)
100138a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100138a8:	e0bff817 	ldw	r2,-32(fp)
100138ac:	10800808 	cmpgei	r2,r2,32
100138b0:	1000271e 	bne	r2,zero,10013950 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100138b4:	0005303a 	rdctl	r2,status
100138b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100138bc:	e0fffb17 	ldw	r3,-20(fp)
100138c0:	00bfff84 	movi	r2,-2
100138c4:	1884703a 	and	r2,r3,r2
100138c8:	1001703a 	wrctl	status,r2
  
  return context;
100138cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100138d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100138d4:	008400b4 	movhi	r2,4098
100138d8:	10a16804 	addi	r2,r2,-31328
100138dc:	e0fff817 	ldw	r3,-32(fp)
100138e0:	180690fa 	slli	r3,r3,3
100138e4:	10c5883a 	add	r2,r2,r3
100138e8:	e0fffe17 	ldw	r3,-8(fp)
100138ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100138f0:	008400b4 	movhi	r2,4098
100138f4:	10a16804 	addi	r2,r2,-31328
100138f8:	e0fff817 	ldw	r3,-32(fp)
100138fc:	180690fa 	slli	r3,r3,3
10013900:	10c5883a 	add	r2,r2,r3
10013904:	10800104 	addi	r2,r2,4
10013908:	e0ffff17 	ldw	r3,-4(fp)
1001390c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10013910:	e0bffe17 	ldw	r2,-8(fp)
10013914:	10000526 	beq	r2,zero,1001392c <alt_iic_isr_register+0xb4>
10013918:	e0bff817 	ldw	r2,-32(fp)
1001391c:	100b883a 	mov	r5,r2
10013920:	e13ffc17 	ldw	r4,-16(fp)
10013924:	00137180 	call	10013718 <alt_ic_irq_enable>
10013928:	00000406 	br	1001393c <alt_iic_isr_register+0xc4>
1001392c:	e0bff817 	ldw	r2,-32(fp)
10013930:	100b883a 	mov	r5,r2
10013934:	e13ffc17 	ldw	r4,-16(fp)
10013938:	00137a00 	call	100137a0 <alt_ic_irq_disable>
1001393c:	e0bff715 	stw	r2,-36(fp)
10013940:	e0bffa17 	ldw	r2,-24(fp)
10013944:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013948:	e0bff917 	ldw	r2,-28(fp)
1001394c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10013950:	e0bff717 	ldw	r2,-36(fp)
}
10013954:	e037883a 	mov	sp,fp
10013958:	dfc00117 	ldw	ra,4(sp)
1001395c:	df000017 	ldw	fp,0(sp)
10013960:	dec00204 	addi	sp,sp,8
10013964:	f800283a 	ret

10013968 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013968:	defff904 	addi	sp,sp,-28
1001396c:	dfc00615 	stw	ra,24(sp)
10013970:	df000515 	stw	fp,20(sp)
10013974:	df000504 	addi	fp,sp,20
10013978:	e13ffc15 	stw	r4,-16(fp)
1001397c:	e17ffd15 	stw	r5,-12(fp)
10013980:	e1bffe15 	stw	r6,-8(fp)
10013984:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10013988:	e1bfff17 	ldw	r6,-4(fp)
1001398c:	e17ffe17 	ldw	r5,-8(fp)
10013990:	e13ffd17 	ldw	r4,-12(fp)
10013994:	0013ba80 	call	10013ba8 <open>
10013998:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1001399c:	e0bffb17 	ldw	r2,-20(fp)
100139a0:	10001c16 	blt	r2,zero,10013a14 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
100139a4:	00840074 	movhi	r2,4097
100139a8:	10946304 	addi	r2,r2,20876
100139ac:	e0fffb17 	ldw	r3,-20(fp)
100139b0:	18c00324 	muli	r3,r3,12
100139b4:	10c5883a 	add	r2,r2,r3
100139b8:	10c00017 	ldw	r3,0(r2)
100139bc:	e0bffc17 	ldw	r2,-16(fp)
100139c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100139c4:	00840074 	movhi	r2,4097
100139c8:	10946304 	addi	r2,r2,20876
100139cc:	e0fffb17 	ldw	r3,-20(fp)
100139d0:	18c00324 	muli	r3,r3,12
100139d4:	10c5883a 	add	r2,r2,r3
100139d8:	10800104 	addi	r2,r2,4
100139dc:	10c00017 	ldw	r3,0(r2)
100139e0:	e0bffc17 	ldw	r2,-16(fp)
100139e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100139e8:	00840074 	movhi	r2,4097
100139ec:	10946304 	addi	r2,r2,20876
100139f0:	e0fffb17 	ldw	r3,-20(fp)
100139f4:	18c00324 	muli	r3,r3,12
100139f8:	10c5883a 	add	r2,r2,r3
100139fc:	10800204 	addi	r2,r2,8
10013a00:	10c00017 	ldw	r3,0(r2)
10013a04:	e0bffc17 	ldw	r2,-16(fp)
10013a08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013a0c:	e13ffb17 	ldw	r4,-20(fp)
10013a10:	000df6c0 	call	1000df6c <alt_release_fd>
  }
} 
10013a14:	0001883a 	nop
10013a18:	e037883a 	mov	sp,fp
10013a1c:	dfc00117 	ldw	ra,4(sp)
10013a20:	df000017 	ldw	fp,0(sp)
10013a24:	dec00204 	addi	sp,sp,8
10013a28:	f800283a 	ret

10013a2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10013a2c:	defffb04 	addi	sp,sp,-20
10013a30:	dfc00415 	stw	ra,16(sp)
10013a34:	df000315 	stw	fp,12(sp)
10013a38:	df000304 	addi	fp,sp,12
10013a3c:	e13ffd15 	stw	r4,-12(fp)
10013a40:	e17ffe15 	stw	r5,-8(fp)
10013a44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013a48:	01c07fc4 	movi	r7,511
10013a4c:	01800044 	movi	r6,1
10013a50:	e17ffd17 	ldw	r5,-12(fp)
10013a54:	01040074 	movhi	r4,4097
10013a58:	21146604 	addi	r4,r4,20888
10013a5c:	00139680 	call	10013968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013a60:	01c07fc4 	movi	r7,511
10013a64:	000d883a 	mov	r6,zero
10013a68:	e17ffe17 	ldw	r5,-8(fp)
10013a6c:	01040074 	movhi	r4,4097
10013a70:	21146304 	addi	r4,r4,20876
10013a74:	00139680 	call	10013968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013a78:	01c07fc4 	movi	r7,511
10013a7c:	01800044 	movi	r6,1
10013a80:	e17fff17 	ldw	r5,-4(fp)
10013a84:	01040074 	movhi	r4,4097
10013a88:	21146904 	addi	r4,r4,20900
10013a8c:	00139680 	call	10013968 <alt_open_fd>
}  
10013a90:	0001883a 	nop
10013a94:	e037883a 	mov	sp,fp
10013a98:	dfc00117 	ldw	ra,4(sp)
10013a9c:	df000017 	ldw	fp,0(sp)
10013aa0:	dec00204 	addi	sp,sp,8
10013aa4:	f800283a 	ret

10013aa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013aa8:	defffe04 	addi	sp,sp,-8
10013aac:	dfc00115 	stw	ra,4(sp)
10013ab0:	df000015 	stw	fp,0(sp)
10013ab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013ab8:	d0a00b17 	ldw	r2,-32724(gp)
10013abc:	10000326 	beq	r2,zero,10013acc <alt_get_errno+0x24>
10013ac0:	d0a00b17 	ldw	r2,-32724(gp)
10013ac4:	103ee83a 	callr	r2
10013ac8:	00000106 	br	10013ad0 <alt_get_errno+0x28>
10013acc:	d0a6f504 	addi	r2,gp,-25644
}
10013ad0:	e037883a 	mov	sp,fp
10013ad4:	dfc00117 	ldw	ra,4(sp)
10013ad8:	df000017 	ldw	fp,0(sp)
10013adc:	dec00204 	addi	sp,sp,8
10013ae0:	f800283a 	ret

10013ae4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013ae4:	defffd04 	addi	sp,sp,-12
10013ae8:	df000215 	stw	fp,8(sp)
10013aec:	df000204 	addi	fp,sp,8
10013af0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10013af4:	e0bfff17 	ldw	r2,-4(fp)
10013af8:	10800217 	ldw	r2,8(r2)
10013afc:	10d00034 	orhi	r3,r2,16384
10013b00:	e0bfff17 	ldw	r2,-4(fp)
10013b04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013b08:	e03ffe15 	stw	zero,-8(fp)
10013b0c:	00001d06 	br	10013b84 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013b10:	00840074 	movhi	r2,4097
10013b14:	10946304 	addi	r2,r2,20876
10013b18:	e0fffe17 	ldw	r3,-8(fp)
10013b1c:	18c00324 	muli	r3,r3,12
10013b20:	10c5883a 	add	r2,r2,r3
10013b24:	10c00017 	ldw	r3,0(r2)
10013b28:	e0bfff17 	ldw	r2,-4(fp)
10013b2c:	10800017 	ldw	r2,0(r2)
10013b30:	1880111e 	bne	r3,r2,10013b78 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013b34:	00840074 	movhi	r2,4097
10013b38:	10946304 	addi	r2,r2,20876
10013b3c:	e0fffe17 	ldw	r3,-8(fp)
10013b40:	18c00324 	muli	r3,r3,12
10013b44:	10c5883a 	add	r2,r2,r3
10013b48:	10800204 	addi	r2,r2,8
10013b4c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013b50:	1000090e 	bge	r2,zero,10013b78 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10013b54:	e0bffe17 	ldw	r2,-8(fp)
10013b58:	10c00324 	muli	r3,r2,12
10013b5c:	00840074 	movhi	r2,4097
10013b60:	10946304 	addi	r2,r2,20876
10013b64:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013b68:	e0bfff17 	ldw	r2,-4(fp)
10013b6c:	18800226 	beq	r3,r2,10013b78 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013b70:	00bffcc4 	movi	r2,-13
10013b74:	00000806 	br	10013b98 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013b78:	e0bffe17 	ldw	r2,-8(fp)
10013b7c:	10800044 	addi	r2,r2,1
10013b80:	e0bffe15 	stw	r2,-8(fp)
10013b84:	d0a00a17 	ldw	r2,-32728(gp)
10013b88:	1007883a 	mov	r3,r2
10013b8c:	e0bffe17 	ldw	r2,-8(fp)
10013b90:	18bfdf2e 	bgeu	r3,r2,10013b10 <__alt_data_end+0xf8013b10>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10013b94:	0005883a 	mov	r2,zero
}
10013b98:	e037883a 	mov	sp,fp
10013b9c:	df000017 	ldw	fp,0(sp)
10013ba0:	dec00104 	addi	sp,sp,4
10013ba4:	f800283a 	ret

10013ba8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013ba8:	defff604 	addi	sp,sp,-40
10013bac:	dfc00915 	stw	ra,36(sp)
10013bb0:	df000815 	stw	fp,32(sp)
10013bb4:	df000804 	addi	fp,sp,32
10013bb8:	e13ffd15 	stw	r4,-12(fp)
10013bbc:	e17ffe15 	stw	r5,-8(fp)
10013bc0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10013bc4:	00bfffc4 	movi	r2,-1
10013bc8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10013bcc:	00bffb44 	movi	r2,-19
10013bd0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10013bd4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013bd8:	d1600804 	addi	r5,gp,-32736
10013bdc:	e13ffd17 	ldw	r4,-12(fp)
10013be0:	00136040 	call	10013604 <alt_find_dev>
10013be4:	e0bff815 	stw	r2,-32(fp)
10013be8:	e0bff817 	ldw	r2,-32(fp)
10013bec:	1000051e 	bne	r2,zero,10013c04 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013bf0:	e13ffd17 	ldw	r4,-12(fp)
10013bf4:	0013ec40 	call	10013ec4 <alt_find_file>
10013bf8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013bfc:	00800044 	movi	r2,1
10013c00:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10013c04:	e0bff817 	ldw	r2,-32(fp)
10013c08:	10002926 	beq	r2,zero,10013cb0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013c0c:	e13ff817 	ldw	r4,-32(fp)
10013c10:	0013fcc0 	call	10013fcc <alt_get_fd>
10013c14:	e0bff915 	stw	r2,-28(fp)
10013c18:	e0bff917 	ldw	r2,-28(fp)
10013c1c:	1000030e 	bge	r2,zero,10013c2c <open+0x84>
    {
      status = index;
10013c20:	e0bff917 	ldw	r2,-28(fp)
10013c24:	e0bffa15 	stw	r2,-24(fp)
10013c28:	00002306 	br	10013cb8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10013c2c:	e0bff917 	ldw	r2,-28(fp)
10013c30:	10c00324 	muli	r3,r2,12
10013c34:	00840074 	movhi	r2,4097
10013c38:	10946304 	addi	r2,r2,20876
10013c3c:	1885883a 	add	r2,r3,r2
10013c40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013c44:	e0fffe17 	ldw	r3,-8(fp)
10013c48:	00900034 	movhi	r2,16384
10013c4c:	10bfffc4 	addi	r2,r2,-1
10013c50:	1886703a 	and	r3,r3,r2
10013c54:	e0bffc17 	ldw	r2,-16(fp)
10013c58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10013c5c:	e0bffb17 	ldw	r2,-20(fp)
10013c60:	1000051e 	bne	r2,zero,10013c78 <open+0xd0>
10013c64:	e13ffc17 	ldw	r4,-16(fp)
10013c68:	0013ae40 	call	10013ae4 <alt_file_locked>
10013c6c:	e0bffa15 	stw	r2,-24(fp)
10013c70:	e0bffa17 	ldw	r2,-24(fp)
10013c74:	10001016 	blt	r2,zero,10013cb8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013c78:	e0bff817 	ldw	r2,-32(fp)
10013c7c:	10800317 	ldw	r2,12(r2)
10013c80:	10000826 	beq	r2,zero,10013ca4 <open+0xfc>
10013c84:	e0bff817 	ldw	r2,-32(fp)
10013c88:	10800317 	ldw	r2,12(r2)
10013c8c:	e1ffff17 	ldw	r7,-4(fp)
10013c90:	e1bffe17 	ldw	r6,-8(fp)
10013c94:	e17ffd17 	ldw	r5,-12(fp)
10013c98:	e13ffc17 	ldw	r4,-16(fp)
10013c9c:	103ee83a 	callr	r2
10013ca0:	00000106 	br	10013ca8 <open+0x100>
10013ca4:	0005883a 	mov	r2,zero
10013ca8:	e0bffa15 	stw	r2,-24(fp)
10013cac:	00000206 	br	10013cb8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013cb0:	00bffb44 	movi	r2,-19
10013cb4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013cb8:	e0bffa17 	ldw	r2,-24(fp)
10013cbc:	1000090e 	bge	r2,zero,10013ce4 <open+0x13c>
  {
    alt_release_fd (index);  
10013cc0:	e13ff917 	ldw	r4,-28(fp)
10013cc4:	000df6c0 	call	1000df6c <alt_release_fd>
    ALT_ERRNO = -status;
10013cc8:	0013aa80 	call	10013aa8 <alt_get_errno>
10013ccc:	1007883a 	mov	r3,r2
10013cd0:	e0bffa17 	ldw	r2,-24(fp)
10013cd4:	0085c83a 	sub	r2,zero,r2
10013cd8:	18800015 	stw	r2,0(r3)
    return -1;
10013cdc:	00bfffc4 	movi	r2,-1
10013ce0:	00000106 	br	10013ce8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10013ce4:	e0bff917 	ldw	r2,-28(fp)
}
10013ce8:	e037883a 	mov	sp,fp
10013cec:	dfc00117 	ldw	ra,4(sp)
10013cf0:	df000017 	ldw	fp,0(sp)
10013cf4:	dec00204 	addi	sp,sp,8
10013cf8:	f800283a 	ret

10013cfc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10013cfc:	defffa04 	addi	sp,sp,-24
10013d00:	df000515 	stw	fp,20(sp)
10013d04:	df000504 	addi	fp,sp,20
10013d08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013d0c:	0005303a 	rdctl	r2,status
10013d10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013d14:	e0fffc17 	ldw	r3,-16(fp)
10013d18:	00bfff84 	movi	r2,-2
10013d1c:	1884703a 	and	r2,r3,r2
10013d20:	1001703a 	wrctl	status,r2
  
  return context;
10013d24:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013d28:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10013d2c:	e0bfff17 	ldw	r2,-4(fp)
10013d30:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013d34:	e0bffd17 	ldw	r2,-12(fp)
10013d38:	10800017 	ldw	r2,0(r2)
10013d3c:	e0fffd17 	ldw	r3,-12(fp)
10013d40:	18c00117 	ldw	r3,4(r3)
10013d44:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013d48:	e0bffd17 	ldw	r2,-12(fp)
10013d4c:	10800117 	ldw	r2,4(r2)
10013d50:	e0fffd17 	ldw	r3,-12(fp)
10013d54:	18c00017 	ldw	r3,0(r3)
10013d58:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10013d5c:	e0bffd17 	ldw	r2,-12(fp)
10013d60:	e0fffd17 	ldw	r3,-12(fp)
10013d64:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013d68:	e0bffd17 	ldw	r2,-12(fp)
10013d6c:	e0fffd17 	ldw	r3,-12(fp)
10013d70:	10c00015 	stw	r3,0(r2)
10013d74:	e0bffb17 	ldw	r2,-20(fp)
10013d78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013d7c:	e0bffe17 	ldw	r2,-8(fp)
10013d80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10013d84:	0001883a 	nop
10013d88:	e037883a 	mov	sp,fp
10013d8c:	df000017 	ldw	fp,0(sp)
10013d90:	dec00104 	addi	sp,sp,4
10013d94:	f800283a 	ret

10013d98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013d98:	defffb04 	addi	sp,sp,-20
10013d9c:	dfc00415 	stw	ra,16(sp)
10013da0:	df000315 	stw	fp,12(sp)
10013da4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013da8:	d0a00e17 	ldw	r2,-32712(gp)
10013dac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013db0:	d0a70817 	ldw	r2,-25568(gp)
10013db4:	10800044 	addi	r2,r2,1
10013db8:	d0a70815 	stw	r2,-25568(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013dbc:	00002e06 	br	10013e78 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10013dc0:	e0bffd17 	ldw	r2,-12(fp)
10013dc4:	10800017 	ldw	r2,0(r2)
10013dc8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10013dcc:	e0bffd17 	ldw	r2,-12(fp)
10013dd0:	10800403 	ldbu	r2,16(r2)
10013dd4:	10803fcc 	andi	r2,r2,255
10013dd8:	10000426 	beq	r2,zero,10013dec <alt_tick+0x54>
10013ddc:	d0a70817 	ldw	r2,-25568(gp)
10013de0:	1000021e 	bne	r2,zero,10013dec <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013de4:	e0bffd17 	ldw	r2,-12(fp)
10013de8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10013dec:	e0bffd17 	ldw	r2,-12(fp)
10013df0:	10800217 	ldw	r2,8(r2)
10013df4:	d0e70817 	ldw	r3,-25568(gp)
10013df8:	18801d36 	bltu	r3,r2,10013e70 <alt_tick+0xd8>
10013dfc:	e0bffd17 	ldw	r2,-12(fp)
10013e00:	10800403 	ldbu	r2,16(r2)
10013e04:	10803fcc 	andi	r2,r2,255
10013e08:	1000191e 	bne	r2,zero,10013e70 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10013e0c:	e0bffd17 	ldw	r2,-12(fp)
10013e10:	10800317 	ldw	r2,12(r2)
10013e14:	e0fffd17 	ldw	r3,-12(fp)
10013e18:	18c00517 	ldw	r3,20(r3)
10013e1c:	1809883a 	mov	r4,r3
10013e20:	103ee83a 	callr	r2
10013e24:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013e28:	e0bfff17 	ldw	r2,-4(fp)
10013e2c:	1000031e 	bne	r2,zero,10013e3c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013e30:	e13ffd17 	ldw	r4,-12(fp)
10013e34:	0013cfc0 	call	10013cfc <alt_alarm_stop>
10013e38:	00000d06 	br	10013e70 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10013e3c:	e0bffd17 	ldw	r2,-12(fp)
10013e40:	10c00217 	ldw	r3,8(r2)
10013e44:	e0bfff17 	ldw	r2,-4(fp)
10013e48:	1887883a 	add	r3,r3,r2
10013e4c:	e0bffd17 	ldw	r2,-12(fp)
10013e50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013e54:	e0bffd17 	ldw	r2,-12(fp)
10013e58:	10c00217 	ldw	r3,8(r2)
10013e5c:	d0a70817 	ldw	r2,-25568(gp)
10013e60:	1880032e 	bgeu	r3,r2,10013e70 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013e64:	e0bffd17 	ldw	r2,-12(fp)
10013e68:	00c00044 	movi	r3,1
10013e6c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013e70:	e0bffe17 	ldw	r2,-8(fp)
10013e74:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013e78:	e0fffd17 	ldw	r3,-12(fp)
10013e7c:	d0a00e04 	addi	r2,gp,-32712
10013e80:	18bfcf1e 	bne	r3,r2,10013dc0 <__alt_data_end+0xf8013dc0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10013e84:	0001883a 	nop
}
10013e88:	0001883a 	nop
10013e8c:	e037883a 	mov	sp,fp
10013e90:	dfc00117 	ldw	ra,4(sp)
10013e94:	df000017 	ldw	fp,0(sp)
10013e98:	dec00204 	addi	sp,sp,8
10013e9c:	f800283a 	ret

10013ea0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
10013ea0:	deffff04 	addi	sp,sp,-4
10013ea4:	df000015 	stw	fp,0(sp)
10013ea8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10013eac:	000170fa 	wrctl	ienable,zero
}
10013eb0:	0001883a 	nop
10013eb4:	e037883a 	mov	sp,fp
10013eb8:	df000017 	ldw	fp,0(sp)
10013ebc:	dec00104 	addi	sp,sp,4
10013ec0:	f800283a 	ret

10013ec4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10013ec4:	defffb04 	addi	sp,sp,-20
10013ec8:	dfc00415 	stw	ra,16(sp)
10013ecc:	df000315 	stw	fp,12(sp)
10013ed0:	df000304 	addi	fp,sp,12
10013ed4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10013ed8:	d0a00617 	ldw	r2,-32744(gp)
10013edc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013ee0:	00003106 	br	10013fa8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10013ee4:	e0bffd17 	ldw	r2,-12(fp)
10013ee8:	10800217 	ldw	r2,8(r2)
10013eec:	1009883a 	mov	r4,r2
10013ef0:	0000f100 	call	10000f10 <strlen>
10013ef4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10013ef8:	e0bffd17 	ldw	r2,-12(fp)
10013efc:	10c00217 	ldw	r3,8(r2)
10013f00:	e0bffe17 	ldw	r2,-8(fp)
10013f04:	10bfffc4 	addi	r2,r2,-1
10013f08:	1885883a 	add	r2,r3,r2
10013f0c:	10800003 	ldbu	r2,0(r2)
10013f10:	10803fcc 	andi	r2,r2,255
10013f14:	1080201c 	xori	r2,r2,128
10013f18:	10bfe004 	addi	r2,r2,-128
10013f1c:	10800bd8 	cmpnei	r2,r2,47
10013f20:	1000031e 	bne	r2,zero,10013f30 <alt_find_file+0x6c>
    {
      len -= 1;
10013f24:	e0bffe17 	ldw	r2,-8(fp)
10013f28:	10bfffc4 	addi	r2,r2,-1
10013f2c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013f30:	e0bffe17 	ldw	r2,-8(fp)
10013f34:	e0ffff17 	ldw	r3,-4(fp)
10013f38:	1885883a 	add	r2,r3,r2
10013f3c:	10800003 	ldbu	r2,0(r2)
10013f40:	10803fcc 	andi	r2,r2,255
10013f44:	1080201c 	xori	r2,r2,128
10013f48:	10bfe004 	addi	r2,r2,-128
10013f4c:	10800be0 	cmpeqi	r2,r2,47
10013f50:	1000081e 	bne	r2,zero,10013f74 <alt_find_file+0xb0>
10013f54:	e0bffe17 	ldw	r2,-8(fp)
10013f58:	e0ffff17 	ldw	r3,-4(fp)
10013f5c:	1885883a 	add	r2,r3,r2
10013f60:	10800003 	ldbu	r2,0(r2)
10013f64:	10803fcc 	andi	r2,r2,255
10013f68:	1080201c 	xori	r2,r2,128
10013f6c:	10bfe004 	addi	r2,r2,-128
10013f70:	10000a1e 	bne	r2,zero,10013f9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10013f74:	e0bffd17 	ldw	r2,-12(fp)
10013f78:	10800217 	ldw	r2,8(r2)
10013f7c:	e0fffe17 	ldw	r3,-8(fp)
10013f80:	180d883a 	mov	r6,r3
10013f84:	e17fff17 	ldw	r5,-4(fp)
10013f88:	1009883a 	mov	r4,r2
10013f8c:	001414c0 	call	1001414c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013f90:	1000021e 	bne	r2,zero,10013f9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10013f94:	e0bffd17 	ldw	r2,-12(fp)
10013f98:	00000706 	br	10013fb8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10013f9c:	e0bffd17 	ldw	r2,-12(fp)
10013fa0:	10800017 	ldw	r2,0(r2)
10013fa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013fa8:	e0fffd17 	ldw	r3,-12(fp)
10013fac:	d0a00604 	addi	r2,gp,-32744
10013fb0:	18bfcc1e 	bne	r3,r2,10013ee4 <__alt_data_end+0xf8013ee4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10013fb4:	0005883a 	mov	r2,zero
}
10013fb8:	e037883a 	mov	sp,fp
10013fbc:	dfc00117 	ldw	ra,4(sp)
10013fc0:	df000017 	ldw	fp,0(sp)
10013fc4:	dec00204 	addi	sp,sp,8
10013fc8:	f800283a 	ret

10013fcc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10013fcc:	defffc04 	addi	sp,sp,-16
10013fd0:	df000315 	stw	fp,12(sp)
10013fd4:	df000304 	addi	fp,sp,12
10013fd8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10013fdc:	00bffa04 	movi	r2,-24
10013fe0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10013fe4:	e03ffd15 	stw	zero,-12(fp)
10013fe8:	00001906 	br	10014050 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10013fec:	00840074 	movhi	r2,4097
10013ff0:	10946304 	addi	r2,r2,20876
10013ff4:	e0fffd17 	ldw	r3,-12(fp)
10013ff8:	18c00324 	muli	r3,r3,12
10013ffc:	10c5883a 	add	r2,r2,r3
10014000:	10800017 	ldw	r2,0(r2)
10014004:	10000f1e 	bne	r2,zero,10014044 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10014008:	00840074 	movhi	r2,4097
1001400c:	10946304 	addi	r2,r2,20876
10014010:	e0fffd17 	ldw	r3,-12(fp)
10014014:	18c00324 	muli	r3,r3,12
10014018:	10c5883a 	add	r2,r2,r3
1001401c:	e0ffff17 	ldw	r3,-4(fp)
10014020:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10014024:	d0e00a17 	ldw	r3,-32728(gp)
10014028:	e0bffd17 	ldw	r2,-12(fp)
1001402c:	1880020e 	bge	r3,r2,10014038 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10014030:	e0bffd17 	ldw	r2,-12(fp)
10014034:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10014038:	e0bffd17 	ldw	r2,-12(fp)
1001403c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10014040:	00000606 	br	1001405c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10014044:	e0bffd17 	ldw	r2,-12(fp)
10014048:	10800044 	addi	r2,r2,1
1001404c:	e0bffd15 	stw	r2,-12(fp)
10014050:	e0bffd17 	ldw	r2,-12(fp)
10014054:	10800810 	cmplti	r2,r2,32
10014058:	103fe41e 	bne	r2,zero,10013fec <__alt_data_end+0xf8013fec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1001405c:	e0bffe17 	ldw	r2,-8(fp)
}
10014060:	e037883a 	mov	sp,fp
10014064:	df000017 	ldw	fp,0(sp)
10014068:	dec00104 	addi	sp,sp,4
1001406c:	f800283a 	ret

10014070 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10014070:	defffb04 	addi	sp,sp,-20
10014074:	df000415 	stw	fp,16(sp)
10014078:	df000404 	addi	fp,sp,16
1001407c:	e13ffe15 	stw	r4,-8(fp)
10014080:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10014084:	e0bfff17 	ldw	r2,-4(fp)
10014088:	10840070 	cmpltui	r2,r2,4097
1001408c:	1000021e 	bne	r2,zero,10014098 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10014090:	00840004 	movi	r2,4096
10014094:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10014098:	e0fffe17 	ldw	r3,-8(fp)
1001409c:	e0bfff17 	ldw	r2,-4(fp)
100140a0:	1885883a 	add	r2,r3,r2
100140a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
100140a8:	e0bffe17 	ldw	r2,-8(fp)
100140ac:	e0bffc15 	stw	r2,-16(fp)
100140b0:	00000506 	br	100140c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
100140b4:	e0bffc17 	ldw	r2,-16(fp)
100140b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
100140bc:	e0bffc17 	ldw	r2,-16(fp)
100140c0:	10800804 	addi	r2,r2,32
100140c4:	e0bffc15 	stw	r2,-16(fp)
100140c8:	e0fffc17 	ldw	r3,-16(fp)
100140cc:	e0bffd17 	ldw	r2,-12(fp)
100140d0:	18bff836 	bltu	r3,r2,100140b4 <__alt_data_end+0xf80140b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
100140d4:	e0bffe17 	ldw	r2,-8(fp)
100140d8:	108007cc 	andi	r2,r2,31
100140dc:	10000226 	beq	r2,zero,100140e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
100140e0:	e0bffc17 	ldw	r2,-16(fp)
100140e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
100140e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
100140ec:	0001883a 	nop
100140f0:	e037883a 	mov	sp,fp
100140f4:	df000017 	ldw	fp,0(sp)
100140f8:	dec00104 	addi	sp,sp,4
100140fc:	f800283a 	ret

10014100 <atexit>:
10014100:	200b883a 	mov	r5,r4
10014104:	000f883a 	mov	r7,zero
10014108:	000d883a 	mov	r6,zero
1001410c:	0009883a 	mov	r4,zero
10014110:	00141c81 	jmpi	100141c8 <__register_exitproc>

10014114 <exit>:
10014114:	defffe04 	addi	sp,sp,-8
10014118:	000b883a 	mov	r5,zero
1001411c:	dc000015 	stw	r16,0(sp)
10014120:	dfc00115 	stw	ra,4(sp)
10014124:	2021883a 	mov	r16,r4
10014128:	00142e00 	call	100142e0 <__call_exitprocs>
1001412c:	00840074 	movhi	r2,4097
10014130:	1098fb04 	addi	r2,r2,25580
10014134:	11000017 	ldw	r4,0(r2)
10014138:	20800f17 	ldw	r2,60(r4)
1001413c:	10000126 	beq	r2,zero,10014144 <exit+0x30>
10014140:	103ee83a 	callr	r2
10014144:	8009883a 	mov	r4,r16
10014148:	00144600 	call	10014460 <_exit>

1001414c <memcmp>:
1001414c:	01c000c4 	movi	r7,3
10014150:	3980192e 	bgeu	r7,r6,100141b8 <memcmp+0x6c>
10014154:	2144b03a 	or	r2,r4,r5
10014158:	11c4703a 	and	r2,r2,r7
1001415c:	10000f26 	beq	r2,zero,1001419c <memcmp+0x50>
10014160:	20800003 	ldbu	r2,0(r4)
10014164:	28c00003 	ldbu	r3,0(r5)
10014168:	10c0151e 	bne	r2,r3,100141c0 <memcmp+0x74>
1001416c:	31bfff84 	addi	r6,r6,-2
10014170:	01ffffc4 	movi	r7,-1
10014174:	00000406 	br	10014188 <memcmp+0x3c>
10014178:	20800003 	ldbu	r2,0(r4)
1001417c:	28c00003 	ldbu	r3,0(r5)
10014180:	31bfffc4 	addi	r6,r6,-1
10014184:	10c00e1e 	bne	r2,r3,100141c0 <memcmp+0x74>
10014188:	21000044 	addi	r4,r4,1
1001418c:	29400044 	addi	r5,r5,1
10014190:	31fff91e 	bne	r6,r7,10014178 <__alt_data_end+0xf8014178>
10014194:	0005883a 	mov	r2,zero
10014198:	f800283a 	ret
1001419c:	20c00017 	ldw	r3,0(r4)
100141a0:	28800017 	ldw	r2,0(r5)
100141a4:	18bfee1e 	bne	r3,r2,10014160 <__alt_data_end+0xf8014160>
100141a8:	31bfff04 	addi	r6,r6,-4
100141ac:	21000104 	addi	r4,r4,4
100141b0:	29400104 	addi	r5,r5,4
100141b4:	39bff936 	bltu	r7,r6,1001419c <__alt_data_end+0xf801419c>
100141b8:	303fe91e 	bne	r6,zero,10014160 <__alt_data_end+0xf8014160>
100141bc:	003ff506 	br	10014194 <__alt_data_end+0xf8014194>
100141c0:	10c5c83a 	sub	r2,r2,r3
100141c4:	f800283a 	ret

100141c8 <__register_exitproc>:
100141c8:	defffa04 	addi	sp,sp,-24
100141cc:	dc000315 	stw	r16,12(sp)
100141d0:	04040074 	movhi	r16,4097
100141d4:	8418fb04 	addi	r16,r16,25580
100141d8:	80c00017 	ldw	r3,0(r16)
100141dc:	dc400415 	stw	r17,16(sp)
100141e0:	dfc00515 	stw	ra,20(sp)
100141e4:	18805217 	ldw	r2,328(r3)
100141e8:	2023883a 	mov	r17,r4
100141ec:	10003726 	beq	r2,zero,100142cc <__register_exitproc+0x104>
100141f0:	10c00117 	ldw	r3,4(r2)
100141f4:	010007c4 	movi	r4,31
100141f8:	20c00e16 	blt	r4,r3,10014234 <__register_exitproc+0x6c>
100141fc:	1a000044 	addi	r8,r3,1
10014200:	8800221e 	bne	r17,zero,1001428c <__register_exitproc+0xc4>
10014204:	18c00084 	addi	r3,r3,2
10014208:	18c7883a 	add	r3,r3,r3
1001420c:	18c7883a 	add	r3,r3,r3
10014210:	12000115 	stw	r8,4(r2)
10014214:	10c7883a 	add	r3,r2,r3
10014218:	19400015 	stw	r5,0(r3)
1001421c:	0005883a 	mov	r2,zero
10014220:	dfc00517 	ldw	ra,20(sp)
10014224:	dc400417 	ldw	r17,16(sp)
10014228:	dc000317 	ldw	r16,12(sp)
1001422c:	dec00604 	addi	sp,sp,24
10014230:	f800283a 	ret
10014234:	00800034 	movhi	r2,0
10014238:	10800004 	addi	r2,r2,0
1001423c:	10002626 	beq	r2,zero,100142d8 <__register_exitproc+0x110>
10014240:	01006404 	movi	r4,400
10014244:	d9400015 	stw	r5,0(sp)
10014248:	d9800115 	stw	r6,4(sp)
1001424c:	d9c00215 	stw	r7,8(sp)
10014250:	00000000 	call	10000000 <__alt_mem_SDRAM>
10014254:	d9400017 	ldw	r5,0(sp)
10014258:	d9800117 	ldw	r6,4(sp)
1001425c:	d9c00217 	ldw	r7,8(sp)
10014260:	10001d26 	beq	r2,zero,100142d8 <__register_exitproc+0x110>
10014264:	81000017 	ldw	r4,0(r16)
10014268:	10000115 	stw	zero,4(r2)
1001426c:	02000044 	movi	r8,1
10014270:	22405217 	ldw	r9,328(r4)
10014274:	0007883a 	mov	r3,zero
10014278:	12400015 	stw	r9,0(r2)
1001427c:	20805215 	stw	r2,328(r4)
10014280:	10006215 	stw	zero,392(r2)
10014284:	10006315 	stw	zero,396(r2)
10014288:	883fde26 	beq	r17,zero,10014204 <__alt_data_end+0xf8014204>
1001428c:	18c9883a 	add	r4,r3,r3
10014290:	2109883a 	add	r4,r4,r4
10014294:	1109883a 	add	r4,r2,r4
10014298:	21802215 	stw	r6,136(r4)
1001429c:	01800044 	movi	r6,1
100142a0:	12406217 	ldw	r9,392(r2)
100142a4:	30cc983a 	sll	r6,r6,r3
100142a8:	4992b03a 	or	r9,r9,r6
100142ac:	12406215 	stw	r9,392(r2)
100142b0:	21c04215 	stw	r7,264(r4)
100142b4:	01000084 	movi	r4,2
100142b8:	893fd21e 	bne	r17,r4,10014204 <__alt_data_end+0xf8014204>
100142bc:	11006317 	ldw	r4,396(r2)
100142c0:	218cb03a 	or	r6,r4,r6
100142c4:	11806315 	stw	r6,396(r2)
100142c8:	003fce06 	br	10014204 <__alt_data_end+0xf8014204>
100142cc:	18805304 	addi	r2,r3,332
100142d0:	18805215 	stw	r2,328(r3)
100142d4:	003fc606 	br	100141f0 <__alt_data_end+0xf80141f0>
100142d8:	00bfffc4 	movi	r2,-1
100142dc:	003fd006 	br	10014220 <__alt_data_end+0xf8014220>

100142e0 <__call_exitprocs>:
100142e0:	defff504 	addi	sp,sp,-44
100142e4:	df000915 	stw	fp,36(sp)
100142e8:	dd400615 	stw	r21,24(sp)
100142ec:	dc800315 	stw	r18,12(sp)
100142f0:	dfc00a15 	stw	ra,40(sp)
100142f4:	ddc00815 	stw	r23,32(sp)
100142f8:	dd800715 	stw	r22,28(sp)
100142fc:	dd000515 	stw	r20,20(sp)
10014300:	dcc00415 	stw	r19,16(sp)
10014304:	dc400215 	stw	r17,8(sp)
10014308:	dc000115 	stw	r16,4(sp)
1001430c:	d9000015 	stw	r4,0(sp)
10014310:	2839883a 	mov	fp,r5
10014314:	04800044 	movi	r18,1
10014318:	057fffc4 	movi	r21,-1
1001431c:	00840074 	movhi	r2,4097
10014320:	1098fb04 	addi	r2,r2,25580
10014324:	12000017 	ldw	r8,0(r2)
10014328:	45005217 	ldw	r20,328(r8)
1001432c:	44c05204 	addi	r19,r8,328
10014330:	a0001c26 	beq	r20,zero,100143a4 <__call_exitprocs+0xc4>
10014334:	a0800117 	ldw	r2,4(r20)
10014338:	15ffffc4 	addi	r23,r2,-1
1001433c:	b8000d16 	blt	r23,zero,10014374 <__call_exitprocs+0x94>
10014340:	14000044 	addi	r16,r2,1
10014344:	8421883a 	add	r16,r16,r16
10014348:	8421883a 	add	r16,r16,r16
1001434c:	84402004 	addi	r17,r16,128
10014350:	a463883a 	add	r17,r20,r17
10014354:	a421883a 	add	r16,r20,r16
10014358:	e0001e26 	beq	fp,zero,100143d4 <__call_exitprocs+0xf4>
1001435c:	80804017 	ldw	r2,256(r16)
10014360:	e0801c26 	beq	fp,r2,100143d4 <__call_exitprocs+0xf4>
10014364:	bdffffc4 	addi	r23,r23,-1
10014368:	843fff04 	addi	r16,r16,-4
1001436c:	8c7fff04 	addi	r17,r17,-4
10014370:	bd7ff91e 	bne	r23,r21,10014358 <__alt_data_end+0xf8014358>
10014374:	00800034 	movhi	r2,0
10014378:	10800004 	addi	r2,r2,0
1001437c:	10000926 	beq	r2,zero,100143a4 <__call_exitprocs+0xc4>
10014380:	a0800117 	ldw	r2,4(r20)
10014384:	1000301e 	bne	r2,zero,10014448 <__call_exitprocs+0x168>
10014388:	a0800017 	ldw	r2,0(r20)
1001438c:	10003226 	beq	r2,zero,10014458 <__call_exitprocs+0x178>
10014390:	a009883a 	mov	r4,r20
10014394:	98800015 	stw	r2,0(r19)
10014398:	00000000 	call	10000000 <__alt_mem_SDRAM>
1001439c:	9d000017 	ldw	r20,0(r19)
100143a0:	a03fe41e 	bne	r20,zero,10014334 <__alt_data_end+0xf8014334>
100143a4:	dfc00a17 	ldw	ra,40(sp)
100143a8:	df000917 	ldw	fp,36(sp)
100143ac:	ddc00817 	ldw	r23,32(sp)
100143b0:	dd800717 	ldw	r22,28(sp)
100143b4:	dd400617 	ldw	r21,24(sp)
100143b8:	dd000517 	ldw	r20,20(sp)
100143bc:	dcc00417 	ldw	r19,16(sp)
100143c0:	dc800317 	ldw	r18,12(sp)
100143c4:	dc400217 	ldw	r17,8(sp)
100143c8:	dc000117 	ldw	r16,4(sp)
100143cc:	dec00b04 	addi	sp,sp,44
100143d0:	f800283a 	ret
100143d4:	a0800117 	ldw	r2,4(r20)
100143d8:	80c00017 	ldw	r3,0(r16)
100143dc:	10bfffc4 	addi	r2,r2,-1
100143e0:	15c01426 	beq	r2,r23,10014434 <__call_exitprocs+0x154>
100143e4:	80000015 	stw	zero,0(r16)
100143e8:	183fde26 	beq	r3,zero,10014364 <__alt_data_end+0xf8014364>
100143ec:	95c8983a 	sll	r4,r18,r23
100143f0:	a0806217 	ldw	r2,392(r20)
100143f4:	a5800117 	ldw	r22,4(r20)
100143f8:	2084703a 	and	r2,r4,r2
100143fc:	10000b26 	beq	r2,zero,1001442c <__call_exitprocs+0x14c>
10014400:	a0806317 	ldw	r2,396(r20)
10014404:	2088703a 	and	r4,r4,r2
10014408:	20000c1e 	bne	r4,zero,1001443c <__call_exitprocs+0x15c>
1001440c:	89400017 	ldw	r5,0(r17)
10014410:	d9000017 	ldw	r4,0(sp)
10014414:	183ee83a 	callr	r3
10014418:	a0800117 	ldw	r2,4(r20)
1001441c:	15bfbf1e 	bne	r2,r22,1001431c <__alt_data_end+0xf801431c>
10014420:	98800017 	ldw	r2,0(r19)
10014424:	153fcf26 	beq	r2,r20,10014364 <__alt_data_end+0xf8014364>
10014428:	003fbc06 	br	1001431c <__alt_data_end+0xf801431c>
1001442c:	183ee83a 	callr	r3
10014430:	003ff906 	br	10014418 <__alt_data_end+0xf8014418>
10014434:	a5c00115 	stw	r23,4(r20)
10014438:	003feb06 	br	100143e8 <__alt_data_end+0xf80143e8>
1001443c:	89000017 	ldw	r4,0(r17)
10014440:	183ee83a 	callr	r3
10014444:	003ff406 	br	10014418 <__alt_data_end+0xf8014418>
10014448:	a0800017 	ldw	r2,0(r20)
1001444c:	a027883a 	mov	r19,r20
10014450:	1029883a 	mov	r20,r2
10014454:	003fb606 	br	10014330 <__alt_data_end+0xf8014330>
10014458:	0005883a 	mov	r2,zero
1001445c:	003ffb06 	br	1001444c <__alt_data_end+0xf801444c>

10014460 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10014460:	defffd04 	addi	sp,sp,-12
10014464:	df000215 	stw	fp,8(sp)
10014468:	df000204 	addi	fp,sp,8
1001446c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10014470:	0001883a 	nop
10014474:	e0bfff17 	ldw	r2,-4(fp)
10014478:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1001447c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10014480:	10000226 	beq	r2,zero,1001448c <_exit+0x2c>
    ALT_SIM_FAIL();
10014484:	002af070 	cmpltui	zero,zero,43969
10014488:	00000106 	br	10014490 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1001448c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10014490:	003fff06 	br	10014490 <__alt_data_end+0xf8014490>
