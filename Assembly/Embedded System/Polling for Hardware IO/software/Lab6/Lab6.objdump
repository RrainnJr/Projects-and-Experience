
Lab6.elf:     file format elf32-littlenios2
Lab6.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000fadc memsz 0x0000fadc flags r-x
    LOAD off    0x00010afc vaddr 0x1000fafc paddr 0x100115e8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000130d4 vaddr 0x100130d4 paddr 0x100130d4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f610  100001c0  100001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000032c  1000f7d0  1000f7d0  000107d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  1000fafc  100115e8  00010afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  100130d4  100130d4  000130d4  2**2
                  ALLOC, SMALL_DATA
  6 .On_Chip_Mem  00000000  00000000  00000000  000125e8  2**0
                  CONTENTS
  7 .SDRAM        00000000  10013234  10013234  000125e8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000125e8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e68  00000000  00000000  00012610  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022b45  00000000  00000000  00013478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008dc6  00000000  00000000  00035fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b1ad  00000000  00000000  0003ed83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002114  00000000  00000000  00049f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003364  00000000  00000000  0004c044  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017751  00000000  00000000  0004f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00066afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001878  00000000  00000000  00066b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006b50e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  0006b511  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006b51a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006b51b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006b51c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006b520  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006b524  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0006b528  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0006b531  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0006b53a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0006b543  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0006b54d  2**0
                  CONTENTS, READONLY
 30 .jdi          00004426  00000000  00000000  0006b568  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000624e2  00000000  00000000  0006f98e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001c0 l    d  .text	00000000 .text
1000f7d0 l    d  .rodata	00000000 .rodata
1000fafc l    d  .rwdata	00000000 .rwdata
100130d4 l    d  .bss	00000000 .bss
00000000 l    d  .On_Chip_Mem	00000000 .On_Chip_Mem
10013234 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab6_bsp//obj/HAL/src/crt0.o
10000208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 part2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000f84a l     O .rodata	00000010 zeroes.4404
10002c30 l     F .text	000000bc __sbprintf
1000f85a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10002e40 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004970 l     F .text	00000008 __fp_unlock
10004984 l     F .text	0000019c __sinit.part.1
10004b20 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1000fafc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
1000ff40 l     O .rwdata	00000020 lc_ctype_charset
1000ff20 l     O .rwdata	00000020 lc_message_charset
1000ff60 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000f88c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10007438 l     F .text	000000fc __sprint_r.part.0
1000f9c0 l     O .rodata	00000010 blanks.4348
1000f9b0 l     O .rodata	00000010 zeroes.4349
100089c4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d048 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d154 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1000d3ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000d4cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000d5b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000d78c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100115dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000d9d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000db0c l     F .text	00000034 alt_dev_reg
10010548 l     O .rwdata	00001060 JTAG_UART
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000dde8 l     F .text	0000020c altera_avalon_jtag_uart_irq
1000dff4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000e7a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000ec14 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
1000ed54 l     F .text	0000003c alt_get_errno
1000ed90 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10006f48 g     F .text	00000074 _mprec_log10
10007034 g     F .text	0000008c __any_on
1000941c g     F .text	00000054 _isatty_r
1000f898 g     O .rodata	00000028 __mprec_tinytens
1000d6c8 g     F .text	0000007c alt_main
10013134 g     O .bss	00000100 alt_irq
10009470 g     F .text	00000060 _lseek_r
100115e8 g       *ABS*	00000000 __flash_rwdata_start
1000bb74 g     F .text	00000088 .hidden __eqdf2
10013234 g       *ABS*	00000000 __alt_heap_start
100009e0 g     F .text	0000003c printf
10009d48 g     F .text	0000009c _wcrtomb_r
00000000 g       *ABS*	00000000 __alt_mem_On_Chip_Mem
10007260 g     F .text	0000005c __sseek
10004cc0 g     F .text	00000010 __sinit
10009bf0 g     F .text	00000140 __swbuf_r
100052cc g     F .text	0000007c _setlocale_r
10004b28 g     F .text	00000068 __sfmoreglue
1000d768 g     F .text	00000024 __malloc_unlock
100094d0 g     F .text	0000015c memmove
10004ca8 g     F .text	00000018 _cleanup
100060c4 g     F .text	000000a8 _Balloc
1000bbfc g     F .text	000000dc .hidden __gtdf2
10000000 g     F .entry	0000001c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10008f04 g     F .text	0000005c _fstat_r
100130f0 g     O .bss	00000004 errno
100071dc g     F .text	00000008 __seofread
10000398 g     F .text	00000060 pio_init
100130fc g     O .bss	00000004 alt_argv
100195a8 g       *ABS*	00000000 _gp
100103c8 g     O .rwdata	00000180 alt_fd_list
1000f170 g     F .text	00000090 alt_find_dev
10005e54 g     F .text	00000148 memcpy
10000558 g     F .text	00000138 DecodeHex
10004978 g     F .text	0000000c _cleanup_r
1000ce60 g     F .text	000000dc .hidden __floatsidf
1000ecd8 g     F .text	0000007c alt_io_redirect
1000bcd8 g     F .text	000000f4 .hidden __ltdf2
1000f7d0 g       *ABS*	00000000 __DTOR_END__
100070c0 g     F .text	00000074 __fpclassifyd
10006ea4 g     F .text	000000a4 __ratio
100089a8 g     F .text	0000001c __vfiprintf_internal
1000e1ec g     F .text	0000021c altera_avalon_jtag_uart_read
100009b0 g     F .text	00000030 _printf_r
100008f4 g     F .text	00000064 .hidden __udivsi3
1000d428 g     F .text	000000a4 isatty
1000f8e8 g     O .rodata	000000c8 __mprec_tens
10005348 g     F .text	0000000c __locale_charset
1000f3ac g     F .text	00000090 alt_icache_flush
100130ec g     O .bss	00000004 __malloc_top_pad
100115b0 g     O .rwdata	00000004 __mb_cur_max
10005378 g     F .text	0000000c _localeconv_r
10008f60 g     F .text	000004bc __sfvwrite_r
100064d0 g     F .text	0000003c __i2b
10007134 g     F .text	00000054 _sbrk_r
1000962c g     F .text	00000060 _read_r
100115d0 g     O .rwdata	00000004 alt_max_fd
10008bf8 g     F .text	000000f0 _fclose_r
10004940 g     F .text	00000030 fflush
100130e8 g     O .bss	00000004 __malloc_max_sbrked_mem
1000d26c g     F .text	00000180 alt_irq_register
1000a9e0 g     F .text	000008ac .hidden __adddf3
10006c4c g     F .text	0000010c __b2d
1000a4a8 g     F .text	00000538 .hidden __umoddi3
1000d5f4 g     F .text	000000d4 lseek
100115a8 g     O .rwdata	00000004 _global_impure_ptr
1000968c g     F .text	00000564 _realloc_r
10013234 g       *ABS*	00000000 __bss_end
1000eb24 g     F .text	000000f0 alt_iic_isr_register
100003f8 g     F .text	00000160 display
1000f044 g     F .text	00000108 alt_tick
10009f30 g     F .text	00000578 .hidden __udivdi3
10008e60 g     F .text	00000024 _fputwc_r
1000f8c0 g     O .rodata	00000028 __mprec_bigtens
100062b4 g     F .text	00000104 __s2b
1000cf3c g     F .text	000000a8 .hidden __floatunsidf
1000698c g     F .text	00000060 __mcmp
10004ce0 g     F .text	00000018 __fp_lock_all
1000ead8 g     F .text	0000004c alt_ic_irq_enabled
1000efa8 g     F .text	0000009c alt_alarm_stop
100130f4 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d4 alt_irq_handler
100103a0 g     O .rwdata	00000028 alt_dev_null
1000e758 g     F .text	00000048 alt_dcache_flush_all
100063b8 g     F .text	00000068 __hi0bits
1000cde0 g     F .text	00000080 .hidden __fixdfsi
100115e8 g       *ABS*	00000000 __ram_rwdata_end
100115c8 g     O .rwdata	00000008 alt_dev_list
1000da14 g     F .text	000000f8 write
1000fafc g       *ABS*	00000000 __ram_rodata_end
1000d1bc g     F .text	000000b0 fstat
10000000 g       *ABS*	00000000 __alt_mem_SDRAM
1000bcd8 g     F .text	000000f4 .hidden __ledf2
10006704 g     F .text	00000140 __pow5mult
1000754c g     F .text	0000145c ___vfiprintf_internal_r
100130e0 g     O .bss	00000004 __nlocale_changed
10000958 g     F .text	00000058 .hidden __umodsi3
10013234 g       *ABS*	00000000 end
1000dd28 g     F .text	000000c0 altera_avalon_jtag_uart_init
1000f7d0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000cfe4 g     F .text	00000064 .hidden __clzsi2
1000e408 g     F .text	00000224 altera_avalon_jtag_uart_write
10004cd0 g     F .text	00000004 __sfp_lock_acquire
10005d70 g     F .text	000000e4 memchr
10000a1c g     F .text	000021f8 ___vfprintf_internal_r
10004e34 g     F .text	00000310 _free_r
10005354 g     F .text	00000010 __locale_mb_cur_max
1000f61c g     F .text	00000180 __call_exitprocs
100130dc g     O .bss	00000004 __mlocale_changed
100115b4 g     O .rwdata	00000004 __malloc_sbrk_base
100001c0 g     F .text	0000004c _start
10013104 g     O .bss	00000004 _alt_tick_rate
10006844 g     F .text	00000148 __lshift
10013108 g     O .bss	00000004 _alt_nticks
10000250 g     F .text	0000003c key3_isr
1000d7c8 g     F .text	000000fc read
1000db78 g     F .text	0000004c alt_sys_init
1000f504 g     F .text	00000118 __register_exitproc
1000650c g     F .text	000001f8 __multiply
1000e094 g     F .text	00000068 altera_avalon_jtag_uart_close
1000fafc g       *ABS*	00000000 __ram_rwdata_start
1000f7d0 g       *ABS*	00000000 __ram_rodata_start
1001310c g     O .bss	00000028 __malloc_current_mallinfo
10006d58 g     F .text	0000014c __d2b
10000714 g     F .text	00000080 decr
1000dbc4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000f308 g     F .text	000000a4 alt_get_fd
1000030c g     F .text	0000008c handle_key_interrupts
10008ae0 g     F .text	00000054 _close_r
1000f488 g     F .text	0000007c memcmp
1000dc84 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10013234 g       *ABS*	00000000 __alt_stack_base
1000dcd4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10002cec g     F .text	00000154 __swsetup_r
1000b28c g     F .text	000008e8 .hidden __divdf3
10004b90 g     F .text	00000118 __sfp
10006fbc g     F .text	00000078 __copybits
1000ff98 g     O .rwdata	00000408 __malloc_av_
10004cdc g     F .text	00000004 __sinit_lock_release
1000bdcc g     F .text	00000718 .hidden __muldf3
10007188 g     F .text	00000054 __sread
1000f200 g     F .text	00000108 alt_find_file
1000e7dc g     F .text	000000a4 alt_dev_llist_insert
1000d744 g     F .text	00000024 __malloc_lock
1000d928 g     F .text	000000b0 sbrk
100048e4 g     F .text	0000005c _fflush_r
10008b34 g     F .text	000000c4 _calloc_r
100130d4 g       *ABS*	00000000 __bss_start
10005f9c g     F .text	00000128 memset
10000794 g     F .text	00000068 main
10013100 g     O .bss	00000004 alt_envp
100130e4 g     O .bss	00000004 __malloc_max_total_mem
1000dc24 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10009d30 g     F .text	00000018 __swbuf
100072bc g     F .text	00000008 __sclose
100002c8 g     F .text	00000044 key1_isr
18000000 g       *ABS*	00000000 __alt_heap_limit
10008ce8 g     F .text	00000014 fclose
10003040 g     F .text	00001688 _dtoa_r
10005564 g     F .text	0000080c _malloc_r
100130d4 g     O .bss	00000004 IncDec
10009ea4 g     F .text	00000030 __ascii_wctomb
100115d4 g     O .rwdata	00000004 alt_errno
10005144 g     F .text	000000c4 _fwalk
1000028c g     F .text	0000003c key2_isr
100007fc g     F .text	00000084 .hidden __divsi3
10004d10 g     F .text	00000124 _malloc_trim_r
1000f7d0 g       *ABS*	00000000 __CTOR_END__
100072c4 g     F .text	000000dc strcmp
1000f7d0 g       *ABS*	00000000 __flash_rodata_start
1000f7d0 g       *ABS*	00000000 __DTOR_LIST__
1000bb74 g     F .text	00000088 .hidden __nedf2
1000db40 g     F .text	00000038 alt_irq_init
1000d8c4 g     F .text	00000064 alt_release_fd
1000f9d0 g     O .rodata	00000100 .hidden __clz_tab
100130d8 g     O .bss	00000004 _PathLocale
1000f43c g     F .text	00000014 atexit
10008a80 g     F .text	00000060 _write_r
10005384 g     F .text	00000018 setlocale
100115ac g     O .rwdata	00000004 _impure_ptr
100130f8 g     O .bss	00000004 alt_argc
100046c8 g     F .text	0000021c __sflush_r
1000e8e0 g     F .text	00000060 _do_dtors
10005370 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10006be8 g     F .text	00000064 __ulp
10004cf8 g     F .text	00000018 __fp_unlock_all
100115c0 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000539c g     F .text	0000000c localeconv
1000e974 g     F .text	00000050 alt_ic_isr_register
100115e8 g       *ABS*	00000000 _edata
10013234 g       *ABS*	00000000 _end
10008cfc g     F .text	00000164 __fputwc
100001c0 g       *ABS*	00000000 __ram_exceptions_end
1000e0fc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1000ea4c g     F .text	0000008c alt_ic_irq_disable
100071e4 g     F .text	0000007c __swrite
100115b8 g     O .rwdata	00000004 __malloc_trim_threshold
1000f14c g     F .text	00000024 altera_nios2_qsys_irq_init
10005364 g     F .text	0000000c __locale_msgcharset
1000f450 g     F .text	00000038 exit
10005208 g     F .text	000000c4 _fwalk_reent
100069ec g     F .text	000001fc __mdiff
10000880 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10004cd4 g     F .text	00000004 __sfp_lock_release
10000690 g     F .text	00000084 incr
1000f79c g     F .text	00000034 _exit
1000e62c g     F .text	0000012c alt_alarm_start
100053a8 g     F .text	000001bc __smakebuf_r
100073a0 g     F .text	00000098 strlen
1000ee54 g     F .text	00000154 open
1000020c g     F .text	00000044 delayfn
1000bbfc g     F .text	000000dc .hidden __gedf2
100115bc g     O .rwdata	00000004 __wctomb
10007534 g     F .text	00000018 __sprint_r
1000e940 g     F .text	00000034 alt_icache_flush_all
100115d8 g     O .rwdata	00000004 alt_priority_mask
1000e9c4 g     F .text	00000088 alt_ic_irq_enable
10002c14 g     F .text	0000001c __vfprintf_internal
10009ed4 g     F .text	0000005c _wctomb_r
1000c4e4 g     F .text	000008fc .hidden __subdf3
10006420 g     F .text	000000b0 __lo0bits
100115e0 g     O .rwdata	00000008 alt_alarm_list
1000e880 g     F .text	00000060 _do_ctors
10009de4 g     F .text	000000c0 wcrtomb
1000d084 g     F .text	000000d0 close
1000d534 g     F .text	00000084 alt_load
10008e84 g     F .text	00000080 fputwc
10004cd8 g     F .text	00000004 __sinit_lock_acquire
10006194 g     F .text	00000120 __multadd
1000616c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08407014 	ori	at,at,448
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	108c4d04 	addi	r2,r2,12596
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	108c4d04 	addi	r2,r2,12596
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	0001883a 	nop
100001ac:	e037883a 	mov	sp,fp
100001b0:	dfc00117 	ldw	ra,4(sp)
100001b4:	df000017 	ldw	fp,0(sp)
100001b8:	dec00204 	addi	sp,sp,8
100001bc:	f800283a 	ret

Disassembly of section .text:

100001c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
100001c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
100001c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
100001c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
100001cc:	00bffd16 	blt	zero,r2,100001c4 <__alt_data_end+0xf80001c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001d0:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001d8:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001dc:	d6a56a14 	ori	gp,gp,38312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001e0:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001e4:	108c3514 	ori	r2,r2,12500

    movhi r3, %hi(__bss_end)
100001e8:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001ec:	18cc8d14 	ori	r3,r3,12852

    beq r2, r3, 1f
100001f0:	10c00326 	beq	r2,r3,10000200 <_start+0x40>

0:
    stw zero, (r2)
100001f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001fc:	10fffd36 	bltu	r2,r3,100001f4 <__alt_data_end+0xf80001f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000200:	000d5340 	call	1000d534 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000204:	000d6c80 	call	1000d6c8 <alt_main>

10000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000208:	003fff06 	br	10000208 <__alt_data_end+0xf8000208>

1000020c <delayfn>:
#include "altera_avalon_pio_regs.h"
#include <stdio.h>

int IncDec = 0;

void delayfn(){
1000020c:	defffe04 	addi	sp,sp,-8
10000210:	df000115 	stw	fp,4(sp)
10000214:	df000104 	addi	fp,sp,4
	int delay = 0;
10000218:	e03fff15 	stw	zero,-4(fp)
		while(delay < 2000000)
1000021c:	00000306 	br	1000022c <delayfn+0x20>
		{
			delay++;
10000220:	e0bfff17 	ldw	r2,-4(fp)
10000224:	10800044 	addi	r2,r2,1
10000228:	e0bfff15 	stw	r2,-4(fp)

int IncDec = 0;

void delayfn(){
	int delay = 0;
		while(delay < 2000000)
1000022c:	e0ffff17 	ldw	r3,-4(fp)
10000230:	008007f4 	movhi	r2,31
10000234:	10a11fc4 	addi	r2,r2,-31617
10000238:	10fff90e 	bge	r2,r3,10000220 <__alt_data_end+0xf8000220>
		{
			delay++;
		}
}
1000023c:	0001883a 	nop
10000240:	e037883a 	mov	sp,fp
10000244:	df000017 	ldw	fp,0(sp)
10000248:	dec00104 	addi	sp,sp,4
1000024c:	f800283a 	ret

10000250 <key3_isr>:



void key3_isr(){
10000250:	deffff04 	addi	sp,sp,-4
10000254:	df000015 	stw	fp,0(sp)
10000258:	d839883a 	mov	fp,sp
	// Decrement the Num to 0
	IncDec = 2; //Turns IncDec to 2 in order to run Decrement in main
1000025c:	00800084 	movi	r2,2
10000260:	d0a6cb15 	stw	r2,-25812(gp)

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
10000264:	0007883a 	mov	r3,zero
10000268:	00880b04 	movi	r2,8236
1000026c:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
10000270:	00880b04 	movi	r2,8236
10000274:	10800037 	ldwio	r2,0(r2)
	return;
10000278:	0001883a 	nop
}
1000027c:	e037883a 	mov	sp,fp
10000280:	df000017 	ldw	fp,0(sp)
10000284:	dec00104 	addi	sp,sp,4
10000288:	f800283a 	ret

1000028c <key2_isr>:

void key2_isr(){
1000028c:	deffff04 	addi	sp,sp,-4
10000290:	df000015 	stw	fp,0(sp)
10000294:	d839883a 	mov	fp,sp
	// Increment to 99
	IncDec = 1; //Turns IncDec to 1 in order to run in main
10000298:	00800044 	movi	r2,1
1000029c:	d0a6cb15 	stw	r2,-25812(gp)

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
100002a0:	0007883a 	mov	r3,zero
100002a4:	00880b04 	movi	r2,8236
100002a8:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
100002ac:	00880b04 	movi	r2,8236
100002b0:	10800037 	ldwio	r2,0(r2)
	return;
100002b4:	0001883a 	nop
}
100002b8:	e037883a 	mov	sp,fp
100002bc:	df000017 	ldw	fp,0(sp)
100002c0:	dec00104 	addi	sp,sp,4
100002c4:	f800283a 	ret

100002c8 <key1_isr>:

void key1_isr(){
100002c8:	deffff04 	addi	sp,sp,-4
100002cc:	df000015 	stw	fp,0(sp)
100002d0:	d839883a 	mov	fp,sp
	// Set to 0
	IOWR(SEVSEGMENT_4LSB_BASE, 0, 0xFFFFFF40); //Sets to 0
100002d4:	00ffd004 	movi	r3,-192
100002d8:	00881404 	movi	r2,8272
100002dc:	10c00035 	stwio	r3,0(r2)
	IncDec = 0; //Stops inc or dec
100002e0:	d026cb15 	stw	zero,-25812(gp)

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
100002e4:	0007883a 	mov	r3,zero
100002e8:	00880b04 	movi	r2,8236
100002ec:	10c00035 	stwio	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
100002f0:	00880b04 	movi	r2,8236
100002f4:	10800037 	ldwio	r2,0(r2)
	return;
100002f8:	0001883a 	nop
}
100002fc:	e037883a 	mov	sp,fp
10000300:	df000017 	ldw	fp,0(sp)
10000304:	dec00104 	addi	sp,sp,4
10000308:	f800283a 	ret

1000030c <handle_key_interrupts>:

void handle_key_interrupts(void* context){
1000030c:	defffc04 	addi	sp,sp,-16
10000310:	dfc00315 	stw	ra,12(sp)
10000314:	df000215 	stw	fp,8(sp)
10000318:	df000204 	addi	fp,sp,8
1000031c:	e13fff15 	stw	r4,-4(fp)
	volatile int *edge_capture_ptr = (volatile int*) context;
10000320:	e0bfff17 	ldw	r2,-4(fp)
10000324:	e0bffe15 	stw	r2,-8(fp)
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
10000328:	00880b04 	movi	r2,8236
1000032c:	10c00037 	ldwio	r3,0(r2)
10000330:	e0bffe17 	ldw	r2,-8(fp)
10000334:	10c00015 	stw	r3,0(r2)
	if (*edge_capture_ptr & 0x8){
10000338:	e0bffe17 	ldw	r2,-8(fp)
1000033c:	10800017 	ldw	r2,0(r2)
10000340:	1080020c 	andi	r2,r2,8
10000344:	10000226 	beq	r2,zero,10000350 <handle_key_interrupts+0x44>
		key3_isr();
10000348:	00002500 	call	10000250 <key3_isr>
		key2_isr();
		}
	else if (*edge_capture_ptr & 0x2){
		key1_isr();
	}
	return;
1000034c:	00000c06 	br	10000380 <handle_key_interrupts+0x74>
	volatile int *edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
	if (*edge_capture_ptr & 0x8){
		key3_isr();
	}
	else if (*edge_capture_ptr & 0x4){
10000350:	e0bffe17 	ldw	r2,-8(fp)
10000354:	10800017 	ldw	r2,0(r2)
10000358:	1080010c 	andi	r2,r2,4
1000035c:	10000226 	beq	r2,zero,10000368 <handle_key_interrupts+0x5c>
		key2_isr();
10000360:	000028c0 	call	1000028c <key2_isr>
		}
	else if (*edge_capture_ptr & 0x2){
		key1_isr();
	}
	return;
10000364:	00000606 	br	10000380 <handle_key_interrupts+0x74>
		key3_isr();
	}
	else if (*edge_capture_ptr & 0x4){
		key2_isr();
		}
	else if (*edge_capture_ptr & 0x2){
10000368:	e0bffe17 	ldw	r2,-8(fp)
1000036c:	10800017 	ldw	r2,0(r2)
10000370:	1080008c 	andi	r2,r2,2
10000374:	10000226 	beq	r2,zero,10000380 <handle_key_interrupts+0x74>
		key1_isr();
10000378:	00002c80 	call	100002c8 <key1_isr>
	}
	return;
1000037c:	0001883a 	nop
10000380:	0001883a 	nop
}
10000384:	e037883a 	mov	sp,fp
10000388:	dfc00117 	ldw	ra,4(sp)
1000038c:	df000017 	ldw	fp,0(sp)
10000390:	dec00204 	addi	sp,sp,8
10000394:	f800283a 	ret

10000398 <pio_init>:

void pio_init(){
10000398:	defffd04 	addi	sp,sp,-12
1000039c:	dfc00215 	stw	ra,8(sp)
100003a0:	df000115 	stw	fp,4(sp)
100003a4:	df000104 	addi	fp,sp,4
	void* edge_capture_ptr = KEYS_EDGE_TYPE;
100003a8:	00840074 	movhi	r2,4097
100003ac:	10bdf404 	addi	r2,r2,-2096
100003b0:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0xE);
100003b4:	00c00384 	movi	r3,14
100003b8:	00880a04 	movi	r2,8232
100003bc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0x0);
100003c0:	0007883a 	mov	r3,zero
100003c4:	00880b04 	movi	r2,8236
100003c8:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(KEYS_IRQ, edge_capture_ptr, handle_key_interrupts);
100003cc:	01840034 	movhi	r6,4096
100003d0:	3180c304 	addi	r6,r6,780
100003d4:	e17fff17 	ldw	r5,-4(fp)
100003d8:	01000084 	movi	r4,2
100003dc:	000d26c0 	call	1000d26c <alt_irq_register>

	return;
100003e0:	0001883a 	nop
	}
100003e4:	e037883a 	mov	sp,fp
100003e8:	dfc00117 	ldw	ra,4(sp)
100003ec:	df000017 	ldw	fp,0(sp)
100003f0:	dec00204 	addi	sp,sp,8
100003f4:	f800283a 	ret

100003f8 <display>:

void display(int Value){
100003f8:	deffee04 	addi	sp,sp,-72
100003fc:	dfc01115 	stw	ra,68(sp)
10000400:	df001015 	stw	fp,64(sp)
10000404:	df001004 	addi	fp,sp,64
10000408:	e13fff15 	stw	r4,-4(fp)
	int SEVENSEGLUT[10] = {0b01000000, 0b01111001, 0b00100100, 0b00110000, 0b00011001, 0b00010010, 0b00000010, 0b01111000, 0b10000000, 0b00010000};
1000040c:	00801004 	movi	r2,64
10000410:	e0bff515 	stw	r2,-44(fp)
10000414:	00801e44 	movi	r2,121
10000418:	e0bff615 	stw	r2,-40(fp)
1000041c:	00800904 	movi	r2,36
10000420:	e0bff715 	stw	r2,-36(fp)
10000424:	00800c04 	movi	r2,48
10000428:	e0bff815 	stw	r2,-32(fp)
1000042c:	00800644 	movi	r2,25
10000430:	e0bff915 	stw	r2,-28(fp)
10000434:	00800484 	movi	r2,18
10000438:	e0bffa15 	stw	r2,-24(fp)
1000043c:	00800084 	movi	r2,2
10000440:	e0bffb15 	stw	r2,-20(fp)
10000444:	00801e04 	movi	r2,120
10000448:	e0bffc15 	stw	r2,-16(fp)
1000044c:	00802004 	movi	r2,128
10000450:	e0bffd15 	stw	r2,-12(fp)
10000454:	00800404 	movi	r2,16
10000458:	e0bffe15 	stw	r2,-8(fp)
	int R;
	int toDisplay = 0;
1000045c:	e03ff015 	stw	zero,-64(fp)
	int shiftVal = 0;
10000460:	e03ff115 	stw	zero,-60(fp)
	int FourthSeg = 0b11111111;
10000464:	00803fc4 	movi	r2,255
10000468:	e0bff215 	stw	r2,-56(fp)
	int toDisplayMask =0;
1000046c:	e03ff315 	stw	zero,-52(fp)

	while (Value != 0){ //Displays the value on the Hex Masks are for 0 values to not be displayed unless the LSB
10000470:	00001b06 	br	100004e0 <display+0xe8>
	R = Value % 10;
10000474:	e0bfff17 	ldw	r2,-4(fp)
10000478:	01400284 	movi	r5,10
1000047c:	1009883a 	mov	r4,r2
10000480:	00008800 	call	10000880 <__modsi3>
10000484:	e0bff415 	stw	r2,-48(fp)
	toDisplay = toDisplay + (SEVENSEGLUT[R] << shiftVal);
10000488:	e0bff417 	ldw	r2,-48(fp)
1000048c:	1085883a 	add	r2,r2,r2
10000490:	1085883a 	add	r2,r2,r2
10000494:	e0fff004 	addi	r3,fp,-64
10000498:	1885883a 	add	r2,r3,r2
1000049c:	10800504 	addi	r2,r2,20
100004a0:	10c00017 	ldw	r3,0(r2)
100004a4:	e0bff117 	ldw	r2,-60(fp)
100004a8:	1884983a 	sll	r2,r3,r2
100004ac:	e0fff017 	ldw	r3,-64(fp)
100004b0:	1885883a 	add	r2,r3,r2
100004b4:	e0bff015 	stw	r2,-64(fp)
	Value = (Value - R) / 10;
100004b8:	e0ffff17 	ldw	r3,-4(fp)
100004bc:	e0bff417 	ldw	r2,-48(fp)
100004c0:	1885c83a 	sub	r2,r3,r2
100004c4:	01400284 	movi	r5,10
100004c8:	1009883a 	mov	r4,r2
100004cc:	00007fc0 	call	100007fc <__divsi3>
100004d0:	e0bfff15 	stw	r2,-4(fp)
	shiftVal = shiftVal + 8;
100004d4:	e0bff117 	ldw	r2,-60(fp)
100004d8:	10800204 	addi	r2,r2,8
100004dc:	e0bff115 	stw	r2,-60(fp)
	int toDisplay = 0;
	int shiftVal = 0;
	int FourthSeg = 0b11111111;
	int toDisplayMask =0;

	while (Value != 0){ //Displays the value on the Hex Masks are for 0 values to not be displayed unless the LSB
100004e0:	e0bfff17 	ldw	r2,-4(fp)
100004e4:	103fe31e 	bne	r2,zero,10000474 <__alt_data_end+0xf8000474>
	R = Value % 10;
	toDisplay = toDisplay + (SEVENSEGLUT[R] << shiftVal);
	Value = (Value - R) / 10;
	shiftVal = shiftVal + 8;
	}
	toDisplay = toDisplay | 0xFFFF0000;
100004e8:	e0bff017 	ldw	r2,-64(fp)
100004ec:	10bffff4 	orhi	r2,r2,65535
100004f0:	e0bff015 	stw	r2,-64(fp)
	toDisplayMask = toDisplay & 0x0000FF00;
100004f4:	e0bff017 	ldw	r2,-64(fp)
100004f8:	10bfc00c 	andi	r2,r2,65280
100004fc:	e0bff315 	stw	r2,-52(fp)

	if (toDisplayMask == 0){
10000500:	e0bff317 	ldw	r2,-52(fp)
10000504:	1000041e 	bne	r2,zero,10000518 <display+0x120>
		toDisplay = toDisplay | 0xFFFFFF00;
10000508:	e0fff017 	ldw	r3,-64(fp)
1000050c:	00bfc004 	movi	r2,-256
10000510:	1884b03a 	or	r2,r3,r2
10000514:	e0bff015 	stw	r2,-64(fp)
	}
	toDisplayMask = toDisplay & 0x000000FF;
10000518:	e0bff017 	ldw	r2,-64(fp)
1000051c:	10803fcc 	andi	r2,r2,255
10000520:	e0bff315 	stw	r2,-52(fp)
	if (toDisplayMask == 0){
10000524:	e0bff317 	ldw	r2,-52(fp)
10000528:	1000021e 	bne	r2,zero,10000534 <display+0x13c>
		toDisplay = 0xFFFFFF40;
1000052c:	00bfd004 	movi	r2,-192
10000530:	e0bff015 	stw	r2,-64(fp)
	}

	IOWR(SEVSEGMENT_4LSB_BASE, 0, toDisplay);
10000534:	00881404 	movi	r2,8272
10000538:	e0fff017 	ldw	r3,-64(fp)
1000053c:	10c00035 	stwio	r3,0(r2)
	return;
10000540:	0001883a 	nop
}
10000544:	e037883a 	mov	sp,fp
10000548:	dfc00117 	ldw	ra,4(sp)
1000054c:	df000017 	ldw	fp,0(sp)
10000550:	dec00204 	addi	sp,sp,8
10000554:	f800283a 	ret

10000558 <DecodeHex>:

int DecodeHex(int Val){ //Decodes the HEX from the Seven Seg into an Integer, Used as Starting Point for Inc and Dec
10000558:	deffee04 	addi	sp,sp,-72
1000055c:	df001115 	stw	fp,68(sp)
10000560:	df001104 	addi	fp,sp,68
10000564:	e13fff15 	stw	r4,-4(fp)
	int SEVENSEGLUT[10] = {0b01000000, 0b01111001, 0b00100100, 0b00110000, 0b00011001, 0b00010010, 0b00000010, 0b01111000, 0b00000000, 0b00010000};
10000568:	00801004 	movi	r2,64
1000056c:	e0bff515 	stw	r2,-44(fp)
10000570:	00801e44 	movi	r2,121
10000574:	e0bff615 	stw	r2,-40(fp)
10000578:	00800904 	movi	r2,36
1000057c:	e0bff715 	stw	r2,-36(fp)
10000580:	00800c04 	movi	r2,48
10000584:	e0bff815 	stw	r2,-32(fp)
10000588:	00800644 	movi	r2,25
1000058c:	e0bff915 	stw	r2,-28(fp)
10000590:	00800484 	movi	r2,18
10000594:	e0bffa15 	stw	r2,-24(fp)
10000598:	00800084 	movi	r2,2
1000059c:	e0bffb15 	stw	r2,-20(fp)
100005a0:	00801e04 	movi	r2,120
100005a4:	e0bffc15 	stw	r2,-16(fp)
100005a8:	e03ffd15 	stw	zero,-12(fp)
100005ac:	00800404 	movi	r2,16
100005b0:	e0bffe15 	stw	r2,-8(fp)
	int i;
	int MASK = 0b01111111;
100005b4:	00801fc4 	movi	r2,127
100005b8:	e0bff415 	stw	r2,-48(fp)
	int Output = 0;
100005bc:	e03ff015 	stw	zero,-64(fp)
	int Lookup = Val & MASK;
100005c0:	e0ffff17 	ldw	r3,-4(fp)
100005c4:	e0bff417 	ldw	r2,-48(fp)
100005c8:	1884703a 	and	r2,r3,r2
100005cc:	e0bff115 	stw	r2,-60(fp)
	int ShiftAmt = 0;
100005d0:	e03ff215 	stw	zero,-56(fp)
	int Count = 1;
100005d4:	00800044 	movi	r2,1
100005d8:	e0bff315 	stw	r2,-52(fp)

	while (Lookup != 0b1111111){
100005dc:	00002406 	br	10000670 <DecodeHex+0x118>
	for (i = 0; Lookup != SEVENSEGLUT[i]; i++){};
100005e0:	e03fef15 	stw	zero,-68(fp)
100005e4:	00000306 	br	100005f4 <DecodeHex+0x9c>
100005e8:	e0bfef17 	ldw	r2,-68(fp)
100005ec:	10800044 	addi	r2,r2,1
100005f0:	e0bfef15 	stw	r2,-68(fp)
100005f4:	e0bfef17 	ldw	r2,-68(fp)
100005f8:	1085883a 	add	r2,r2,r2
100005fc:	1085883a 	add	r2,r2,r2
10000600:	e0ffef04 	addi	r3,fp,-68
10000604:	1885883a 	add	r2,r3,r2
10000608:	10800604 	addi	r2,r2,24
1000060c:	10c00017 	ldw	r3,0(r2)
10000610:	e0bff117 	ldw	r2,-60(fp)
10000614:	18bff41e 	bne	r3,r2,100005e8 <__alt_data_end+0xf80005e8>
	Output = Output + (i*Count);
10000618:	e0ffef17 	ldw	r3,-68(fp)
1000061c:	e0bff317 	ldw	r2,-52(fp)
10000620:	1885383a 	mul	r2,r3,r2
10000624:	e0fff017 	ldw	r3,-64(fp)
10000628:	1885883a 	add	r2,r3,r2
1000062c:	e0bff015 	stw	r2,-64(fp)
	Count = Count * 10;
10000630:	e0bff317 	ldw	r2,-52(fp)
10000634:	108002a4 	muli	r2,r2,10
10000638:	e0bff315 	stw	r2,-52(fp)
	ShiftAmt = ShiftAmt + 8;
1000063c:	e0bff217 	ldw	r2,-56(fp)
10000640:	10800204 	addi	r2,r2,8
10000644:	e0bff215 	stw	r2,-56(fp)
	Lookup = Val & (MASK << ShiftAmt);
10000648:	e0fff417 	ldw	r3,-48(fp)
1000064c:	e0bff217 	ldw	r2,-56(fp)
10000650:	1886983a 	sll	r3,r3,r2
10000654:	e0bfff17 	ldw	r2,-4(fp)
10000658:	1884703a 	and	r2,r3,r2
1000065c:	e0bff115 	stw	r2,-60(fp)
	Lookup = Lookup >> ShiftAmt;
10000660:	e0fff117 	ldw	r3,-60(fp)
10000664:	e0bff217 	ldw	r2,-56(fp)
10000668:	1885d83a 	sra	r2,r3,r2
1000066c:	e0bff115 	stw	r2,-60(fp)
	int Output = 0;
	int Lookup = Val & MASK;
	int ShiftAmt = 0;
	int Count = 1;

	while (Lookup != 0b1111111){
10000670:	e0bff117 	ldw	r2,-60(fp)
10000674:	10801fd8 	cmpnei	r2,r2,127
10000678:	103fd91e 	bne	r2,zero,100005e0 <__alt_data_end+0xf80005e0>
	Count = Count * 10;
	ShiftAmt = ShiftAmt + 8;
	Lookup = Val & (MASK << ShiftAmt);
	Lookup = Lookup >> ShiftAmt;
	}
	return Output;
1000067c:	e0bff017 	ldw	r2,-64(fp)
}
10000680:	e037883a 	mov	sp,fp
10000684:	df000017 	ldw	fp,0(sp)
10000688:	dec00104 	addi	sp,sp,4
1000068c:	f800283a 	ret

10000690 <incr>:

void incr(){ //Increments from where the Hex Display is to 99
10000690:	defffc04 	addi	sp,sp,-16
10000694:	dfc00315 	stw	ra,12(sp)
10000698:	df000215 	stw	fp,8(sp)
1000069c:	df000204 	addi	fp,sp,8
	int HexVal = 0;
100006a0:	e03fff15 	stw	zero,-4(fp)
	HexVal = IORD(SEVSEGMENT_4LSB_BASE, 0);
100006a4:	00881404 	movi	r2,8272
100006a8:	10800037 	ldwio	r2,0(r2)
100006ac:	e0bfff15 	stw	r2,-4(fp)
	HexVal = DecodeHex(HexVal);
100006b0:	e13fff17 	ldw	r4,-4(fp)
100006b4:	00005580 	call	10000558 <DecodeHex>
100006b8:	e0bfff15 	stw	r2,-4(fp)
	for (int i = HexVal; i <= 99 && IncDec == 1; i++){
100006bc:	e0bfff17 	ldw	r2,-4(fp)
100006c0:	e0bffe15 	stw	r2,-8(fp)
100006c4:	00000606 	br	100006e0 <incr+0x50>
		display(i);
100006c8:	e13ffe17 	ldw	r4,-8(fp)
100006cc:	00003f80 	call	100003f8 <display>
		delayfn();
100006d0:	000020c0 	call	1000020c <delayfn>

void incr(){ //Increments from where the Hex Display is to 99
	int HexVal = 0;
	HexVal = IORD(SEVSEGMENT_4LSB_BASE, 0);
	HexVal = DecodeHex(HexVal);
	for (int i = HexVal; i <= 99 && IncDec == 1; i++){
100006d4:	e0bffe17 	ldw	r2,-8(fp)
100006d8:	10800044 	addi	r2,r2,1
100006dc:	e0bffe15 	stw	r2,-8(fp)
100006e0:	e0bffe17 	ldw	r2,-8(fp)
100006e4:	10801908 	cmpgei	r2,r2,100
100006e8:	1000041e 	bne	r2,zero,100006fc <incr+0x6c>
100006ec:	d0a6cb17 	ldw	r2,-25812(gp)
100006f0:	10800060 	cmpeqi	r2,r2,1
100006f4:	103ff41e 	bne	r2,zero,100006c8 <__alt_data_end+0xf80006c8>
		display(i);
		delayfn();
	}
	return;
100006f8:	0001883a 	nop
100006fc:	0001883a 	nop
}
10000700:	e037883a 	mov	sp,fp
10000704:	dfc00117 	ldw	ra,4(sp)
10000708:	df000017 	ldw	fp,0(sp)
1000070c:	dec00204 	addi	sp,sp,8
10000710:	f800283a 	ret

10000714 <decr>:

void decr(){ //Decrements from Current val of hex display to 0
10000714:	defffc04 	addi	sp,sp,-16
10000718:	dfc00315 	stw	ra,12(sp)
1000071c:	df000215 	stw	fp,8(sp)
10000720:	df000204 	addi	fp,sp,8
	int HexVal = 0;
10000724:	e03fff15 	stw	zero,-4(fp)
	HexVal = IORD(SEVSEGMENT_4LSB_BASE, 0);
10000728:	00881404 	movi	r2,8272
1000072c:	10800037 	ldwio	r2,0(r2)
10000730:	e0bfff15 	stw	r2,-4(fp)
	HexVal = DecodeHex(HexVal);
10000734:	e13fff17 	ldw	r4,-4(fp)
10000738:	00005580 	call	10000558 <DecodeHex>
1000073c:	e0bfff15 	stw	r2,-4(fp)
	for (int i = HexVal; i >= 0 && IncDec == 2; i--){
10000740:	e0bfff17 	ldw	r2,-4(fp)
10000744:	e0bffe15 	stw	r2,-8(fp)
10000748:	00000606 	br	10000764 <decr+0x50>
		display(i);
1000074c:	e13ffe17 	ldw	r4,-8(fp)
10000750:	00003f80 	call	100003f8 <display>
		delayfn();
10000754:	000020c0 	call	1000020c <delayfn>

void decr(){ //Decrements from Current val of hex display to 0
	int HexVal = 0;
	HexVal = IORD(SEVSEGMENT_4LSB_BASE, 0);
	HexVal = DecodeHex(HexVal);
	for (int i = HexVal; i >= 0 && IncDec == 2; i--){
10000758:	e0bffe17 	ldw	r2,-8(fp)
1000075c:	10bfffc4 	addi	r2,r2,-1
10000760:	e0bffe15 	stw	r2,-8(fp)
10000764:	e0bffe17 	ldw	r2,-8(fp)
10000768:	10000416 	blt	r2,zero,1000077c <decr+0x68>
1000076c:	d0a6cb17 	ldw	r2,-25812(gp)
10000770:	108000a0 	cmpeqi	r2,r2,2
10000774:	103ff51e 	bne	r2,zero,1000074c <__alt_data_end+0xf800074c>
		display(i);
		delayfn();
	}
	return;
10000778:	0001883a 	nop
1000077c:	0001883a 	nop
}
10000780:	e037883a 	mov	sp,fp
10000784:	dfc00117 	ldw	ra,4(sp)
10000788:	df000017 	ldw	fp,0(sp)
1000078c:	dec00204 	addi	sp,sp,8
10000790:	f800283a 	ret

10000794 <main>:

int main(){ //Initializes the 7 Segment
10000794:	defffd04 	addi	sp,sp,-12
10000798:	dfc00215 	stw	ra,8(sp)
1000079c:	df000115 	stw	fp,4(sp)
100007a0:	df000104 	addi	fp,sp,4
	pio_init();
100007a4:	00003980 	call	10000398 <pio_init>
	int outSevenSeg = 0xFFFFFFFF;
100007a8:	00bfffc4 	movi	r2,-1
100007ac:	e0bfff15 	stw	r2,-4(fp)
	IOWR(SEVSEG4MSB_BASE, 0, outSevenSeg);
100007b0:	00880c04 	movi	r2,8240
100007b4:	e0ffff17 	ldw	r3,-4(fp)
100007b8:	10c00035 	stwio	r3,0(r2)
	IOWR(SEVSEGMENT_4LSB_BASE, 0, outSevenSeg);
100007bc:	00881404 	movi	r2,8272
100007c0:	e0ffff17 	ldw	r3,-4(fp)
100007c4:	10c00035 	stwio	r3,0(r2)

	printf("Key3: Decrement\nKey2: Increment\nKey1: Set to 0");
100007c8:	01040074 	movhi	r4,4097
100007cc:	213df604 	addi	r4,r4,-2088
100007d0:	00009e00 	call	100009e0 <printf>
	while(1){ //Loops through Calling Incr function if IncDec changes to 1 and Decr if to 0. Doing this here allows for these fns to be interrupted.
		if (IncDec == 1) incr();
100007d4:	d0a6cb17 	ldw	r2,-25812(gp)
100007d8:	10800058 	cmpnei	r2,r2,1
100007dc:	1000021e 	bne	r2,zero,100007e8 <main+0x54>
100007e0:	00006900 	call	10000690 <incr>
100007e4:	003ffb06 	br	100007d4 <__alt_data_end+0xf80007d4>
		else if (IncDec == 2) decr();
100007e8:	d0a6cb17 	ldw	r2,-25812(gp)
100007ec:	10800098 	cmpnei	r2,r2,2
100007f0:	103ff81e 	bne	r2,zero,100007d4 <__alt_data_end+0xf80007d4>
100007f4:	00007140 	call	10000714 <decr>
	}
100007f8:	003ff606 	br	100007d4 <__alt_data_end+0xf80007d4>

100007fc <__divsi3>:
100007fc:	20001b16 	blt	r4,zero,1000086c <__divsi3+0x70>
10000800:	000f883a 	mov	r7,zero
10000804:	28001616 	blt	r5,zero,10000860 <__divsi3+0x64>
10000808:	200d883a 	mov	r6,r4
1000080c:	29001a2e 	bgeu	r5,r4,10000878 <__divsi3+0x7c>
10000810:	00800804 	movi	r2,32
10000814:	00c00044 	movi	r3,1
10000818:	00000106 	br	10000820 <__divsi3+0x24>
1000081c:	10000d26 	beq	r2,zero,10000854 <__divsi3+0x58>
10000820:	294b883a 	add	r5,r5,r5
10000824:	10bfffc4 	addi	r2,r2,-1
10000828:	18c7883a 	add	r3,r3,r3
1000082c:	293ffb36 	bltu	r5,r4,1000081c <__alt_data_end+0xf800081c>
10000830:	0005883a 	mov	r2,zero
10000834:	18000726 	beq	r3,zero,10000854 <__divsi3+0x58>
10000838:	0005883a 	mov	r2,zero
1000083c:	31400236 	bltu	r6,r5,10000848 <__divsi3+0x4c>
10000840:	314dc83a 	sub	r6,r6,r5
10000844:	10c4b03a 	or	r2,r2,r3
10000848:	1806d07a 	srli	r3,r3,1
1000084c:	280ad07a 	srli	r5,r5,1
10000850:	183ffa1e 	bne	r3,zero,1000083c <__alt_data_end+0xf800083c>
10000854:	38000126 	beq	r7,zero,1000085c <__divsi3+0x60>
10000858:	0085c83a 	sub	r2,zero,r2
1000085c:	f800283a 	ret
10000860:	014bc83a 	sub	r5,zero,r5
10000864:	39c0005c 	xori	r7,r7,1
10000868:	003fe706 	br	10000808 <__alt_data_end+0xf8000808>
1000086c:	0109c83a 	sub	r4,zero,r4
10000870:	01c00044 	movi	r7,1
10000874:	003fe306 	br	10000804 <__alt_data_end+0xf8000804>
10000878:	00c00044 	movi	r3,1
1000087c:	003fee06 	br	10000838 <__alt_data_end+0xf8000838>

10000880 <__modsi3>:
10000880:	20001716 	blt	r4,zero,100008e0 <__modsi3+0x60>
10000884:	000f883a 	mov	r7,zero
10000888:	2005883a 	mov	r2,r4
1000088c:	28001216 	blt	r5,zero,100008d8 <__modsi3+0x58>
10000890:	2900162e 	bgeu	r5,r4,100008ec <__modsi3+0x6c>
10000894:	01800804 	movi	r6,32
10000898:	00c00044 	movi	r3,1
1000089c:	00000106 	br	100008a4 <__modsi3+0x24>
100008a0:	30000a26 	beq	r6,zero,100008cc <__modsi3+0x4c>
100008a4:	294b883a 	add	r5,r5,r5
100008a8:	31bfffc4 	addi	r6,r6,-1
100008ac:	18c7883a 	add	r3,r3,r3
100008b0:	293ffb36 	bltu	r5,r4,100008a0 <__alt_data_end+0xf80008a0>
100008b4:	18000526 	beq	r3,zero,100008cc <__modsi3+0x4c>
100008b8:	1806d07a 	srli	r3,r3,1
100008bc:	11400136 	bltu	r2,r5,100008c4 <__modsi3+0x44>
100008c0:	1145c83a 	sub	r2,r2,r5
100008c4:	280ad07a 	srli	r5,r5,1
100008c8:	183ffb1e 	bne	r3,zero,100008b8 <__alt_data_end+0xf80008b8>
100008cc:	38000126 	beq	r7,zero,100008d4 <__modsi3+0x54>
100008d0:	0085c83a 	sub	r2,zero,r2
100008d4:	f800283a 	ret
100008d8:	014bc83a 	sub	r5,zero,r5
100008dc:	003fec06 	br	10000890 <__alt_data_end+0xf8000890>
100008e0:	0109c83a 	sub	r4,zero,r4
100008e4:	01c00044 	movi	r7,1
100008e8:	003fe706 	br	10000888 <__alt_data_end+0xf8000888>
100008ec:	00c00044 	movi	r3,1
100008f0:	003ff106 	br	100008b8 <__alt_data_end+0xf80008b8>

100008f4 <__udivsi3>:
100008f4:	200d883a 	mov	r6,r4
100008f8:	2900152e 	bgeu	r5,r4,10000950 <__udivsi3+0x5c>
100008fc:	28001416 	blt	r5,zero,10000950 <__udivsi3+0x5c>
10000900:	00800804 	movi	r2,32
10000904:	00c00044 	movi	r3,1
10000908:	00000206 	br	10000914 <__udivsi3+0x20>
1000090c:	10000e26 	beq	r2,zero,10000948 <__udivsi3+0x54>
10000910:	28000516 	blt	r5,zero,10000928 <__udivsi3+0x34>
10000914:	294b883a 	add	r5,r5,r5
10000918:	10bfffc4 	addi	r2,r2,-1
1000091c:	18c7883a 	add	r3,r3,r3
10000920:	293ffa36 	bltu	r5,r4,1000090c <__alt_data_end+0xf800090c>
10000924:	18000826 	beq	r3,zero,10000948 <__udivsi3+0x54>
10000928:	0005883a 	mov	r2,zero
1000092c:	31400236 	bltu	r6,r5,10000938 <__udivsi3+0x44>
10000930:	314dc83a 	sub	r6,r6,r5
10000934:	10c4b03a 	or	r2,r2,r3
10000938:	1806d07a 	srli	r3,r3,1
1000093c:	280ad07a 	srli	r5,r5,1
10000940:	183ffa1e 	bne	r3,zero,1000092c <__alt_data_end+0xf800092c>
10000944:	f800283a 	ret
10000948:	0005883a 	mov	r2,zero
1000094c:	f800283a 	ret
10000950:	00c00044 	movi	r3,1
10000954:	003ff406 	br	10000928 <__alt_data_end+0xf8000928>

10000958 <__umodsi3>:
10000958:	2005883a 	mov	r2,r4
1000095c:	2900122e 	bgeu	r5,r4,100009a8 <__umodsi3+0x50>
10000960:	28001116 	blt	r5,zero,100009a8 <__umodsi3+0x50>
10000964:	01800804 	movi	r6,32
10000968:	00c00044 	movi	r3,1
1000096c:	00000206 	br	10000978 <__umodsi3+0x20>
10000970:	30000c26 	beq	r6,zero,100009a4 <__umodsi3+0x4c>
10000974:	28000516 	blt	r5,zero,1000098c <__umodsi3+0x34>
10000978:	294b883a 	add	r5,r5,r5
1000097c:	31bfffc4 	addi	r6,r6,-1
10000980:	18c7883a 	add	r3,r3,r3
10000984:	293ffa36 	bltu	r5,r4,10000970 <__alt_data_end+0xf8000970>
10000988:	18000626 	beq	r3,zero,100009a4 <__umodsi3+0x4c>
1000098c:	1806d07a 	srli	r3,r3,1
10000990:	11400136 	bltu	r2,r5,10000998 <__umodsi3+0x40>
10000994:	1145c83a 	sub	r2,r2,r5
10000998:	280ad07a 	srli	r5,r5,1
1000099c:	183ffb1e 	bne	r3,zero,1000098c <__alt_data_end+0xf800098c>
100009a0:	f800283a 	ret
100009a4:	f800283a 	ret
100009a8:	00c00044 	movi	r3,1
100009ac:	003ff706 	br	1000098c <__alt_data_end+0xf800098c>

100009b0 <_printf_r>:
100009b0:	defffd04 	addi	sp,sp,-12
100009b4:	2805883a 	mov	r2,r5
100009b8:	dfc00015 	stw	ra,0(sp)
100009bc:	d9800115 	stw	r6,4(sp)
100009c0:	d9c00215 	stw	r7,8(sp)
100009c4:	21400217 	ldw	r5,8(r4)
100009c8:	d9c00104 	addi	r7,sp,4
100009cc:	100d883a 	mov	r6,r2
100009d0:	0000a1c0 	call	10000a1c <___vfprintf_internal_r>
100009d4:	dfc00017 	ldw	ra,0(sp)
100009d8:	dec00304 	addi	sp,sp,12
100009dc:	f800283a 	ret

100009e0 <printf>:
100009e0:	defffc04 	addi	sp,sp,-16
100009e4:	dfc00015 	stw	ra,0(sp)
100009e8:	d9400115 	stw	r5,4(sp)
100009ec:	d9800215 	stw	r6,8(sp)
100009f0:	d9c00315 	stw	r7,12(sp)
100009f4:	00840074 	movhi	r2,4097
100009f8:	10856b04 	addi	r2,r2,5548
100009fc:	10800017 	ldw	r2,0(r2)
10000a00:	200b883a 	mov	r5,r4
10000a04:	d9800104 	addi	r6,sp,4
10000a08:	11000217 	ldw	r4,8(r2)
10000a0c:	0002c140 	call	10002c14 <__vfprintf_internal>
10000a10:	dfc00017 	ldw	ra,0(sp)
10000a14:	dec00404 	addi	sp,sp,16
10000a18:	f800283a 	ret

10000a1c <___vfprintf_internal_r>:
10000a1c:	deffb804 	addi	sp,sp,-288
10000a20:	dfc04715 	stw	ra,284(sp)
10000a24:	ddc04515 	stw	r23,276(sp)
10000a28:	dd404315 	stw	r21,268(sp)
10000a2c:	d9002c15 	stw	r4,176(sp)
10000a30:	282f883a 	mov	r23,r5
10000a34:	302b883a 	mov	r21,r6
10000a38:	d9c02d15 	stw	r7,180(sp)
10000a3c:	df004615 	stw	fp,280(sp)
10000a40:	dd804415 	stw	r22,272(sp)
10000a44:	dd004215 	stw	r20,264(sp)
10000a48:	dcc04115 	stw	r19,260(sp)
10000a4c:	dc804015 	stw	r18,256(sp)
10000a50:	dc403f15 	stw	r17,252(sp)
10000a54:	dc003e15 	stw	r16,248(sp)
10000a58:	00053780 	call	10005378 <_localeconv_r>
10000a5c:	10800017 	ldw	r2,0(r2)
10000a60:	1009883a 	mov	r4,r2
10000a64:	d8803415 	stw	r2,208(sp)
10000a68:	00073a00 	call	100073a0 <strlen>
10000a6c:	d8803715 	stw	r2,220(sp)
10000a70:	d8802c17 	ldw	r2,176(sp)
10000a74:	10000226 	beq	r2,zero,10000a80 <___vfprintf_internal_r+0x64>
10000a78:	10800e17 	ldw	r2,56(r2)
10000a7c:	1000f926 	beq	r2,zero,10000e64 <___vfprintf_internal_r+0x448>
10000a80:	b880030b 	ldhu	r2,12(r23)
10000a84:	10c8000c 	andi	r3,r2,8192
10000a88:	1800061e 	bne	r3,zero,10000aa4 <___vfprintf_internal_r+0x88>
10000a8c:	b9001917 	ldw	r4,100(r23)
10000a90:	00f7ffc4 	movi	r3,-8193
10000a94:	10880014 	ori	r2,r2,8192
10000a98:	20c6703a 	and	r3,r4,r3
10000a9c:	b880030d 	sth	r2,12(r23)
10000aa0:	b8c01915 	stw	r3,100(r23)
10000aa4:	10c0020c 	andi	r3,r2,8
10000aa8:	1800c126 	beq	r3,zero,10000db0 <___vfprintf_internal_r+0x394>
10000aac:	b8c00417 	ldw	r3,16(r23)
10000ab0:	1800bf26 	beq	r3,zero,10000db0 <___vfprintf_internal_r+0x394>
10000ab4:	1080068c 	andi	r2,r2,26
10000ab8:	00c00284 	movi	r3,10
10000abc:	10c0c426 	beq	r2,r3,10000dd0 <___vfprintf_internal_r+0x3b4>
10000ac0:	d8c00404 	addi	r3,sp,16
10000ac4:	05040074 	movhi	r20,4097
10000ac8:	d9001e04 	addi	r4,sp,120
10000acc:	a53e1284 	addi	r20,r20,-1974
10000ad0:	d8c01e15 	stw	r3,120(sp)
10000ad4:	d8002015 	stw	zero,128(sp)
10000ad8:	d8001f15 	stw	zero,124(sp)
10000adc:	d8003315 	stw	zero,204(sp)
10000ae0:	d8003615 	stw	zero,216(sp)
10000ae4:	d8003815 	stw	zero,224(sp)
10000ae8:	1811883a 	mov	r8,r3
10000aec:	d8003915 	stw	zero,228(sp)
10000af0:	d8003a15 	stw	zero,232(sp)
10000af4:	d8002f15 	stw	zero,188(sp)
10000af8:	d9002815 	stw	r4,160(sp)
10000afc:	a8800007 	ldb	r2,0(r21)
10000b00:	10027b26 	beq	r2,zero,100014f0 <___vfprintf_internal_r+0xad4>
10000b04:	00c00944 	movi	r3,37
10000b08:	a821883a 	mov	r16,r21
10000b0c:	10c0021e 	bne	r2,r3,10000b18 <___vfprintf_internal_r+0xfc>
10000b10:	00001406 	br	10000b64 <___vfprintf_internal_r+0x148>
10000b14:	10c00326 	beq	r2,r3,10000b24 <___vfprintf_internal_r+0x108>
10000b18:	84000044 	addi	r16,r16,1
10000b1c:	80800007 	ldb	r2,0(r16)
10000b20:	103ffc1e 	bne	r2,zero,10000b14 <__alt_data_end+0xf8000b14>
10000b24:	8563c83a 	sub	r17,r16,r21
10000b28:	88000e26 	beq	r17,zero,10000b64 <___vfprintf_internal_r+0x148>
10000b2c:	d8c02017 	ldw	r3,128(sp)
10000b30:	d8801f17 	ldw	r2,124(sp)
10000b34:	45400015 	stw	r21,0(r8)
10000b38:	1c47883a 	add	r3,r3,r17
10000b3c:	10800044 	addi	r2,r2,1
10000b40:	d8c02015 	stw	r3,128(sp)
10000b44:	44400115 	stw	r17,4(r8)
10000b48:	d8801f15 	stw	r2,124(sp)
10000b4c:	00c001c4 	movi	r3,7
10000b50:	1880a716 	blt	r3,r2,10000df0 <___vfprintf_internal_r+0x3d4>
10000b54:	42000204 	addi	r8,r8,8
10000b58:	d9402f17 	ldw	r5,188(sp)
10000b5c:	2c4b883a 	add	r5,r5,r17
10000b60:	d9402f15 	stw	r5,188(sp)
10000b64:	80800007 	ldb	r2,0(r16)
10000b68:	1000a826 	beq	r2,zero,10000e0c <___vfprintf_internal_r+0x3f0>
10000b6c:	84400047 	ldb	r17,1(r16)
10000b70:	00bfffc4 	movi	r2,-1
10000b74:	85400044 	addi	r21,r16,1
10000b78:	d8002785 	stb	zero,158(sp)
10000b7c:	0007883a 	mov	r3,zero
10000b80:	000f883a 	mov	r7,zero
10000b84:	d8802915 	stw	r2,164(sp)
10000b88:	d8003115 	stw	zero,196(sp)
10000b8c:	0025883a 	mov	r18,zero
10000b90:	01401604 	movi	r5,88
10000b94:	01800244 	movi	r6,9
10000b98:	02800a84 	movi	r10,42
10000b9c:	02401b04 	movi	r9,108
10000ba0:	ad400044 	addi	r21,r21,1
10000ba4:	88bff804 	addi	r2,r17,-32
10000ba8:	28830436 	bltu	r5,r2,100017bc <___vfprintf_internal_r+0xda0>
10000bac:	100490ba 	slli	r2,r2,2
10000bb0:	01040034 	movhi	r4,4096
10000bb4:	2102f104 	addi	r4,r4,3012
10000bb8:	1105883a 	add	r2,r2,r4
10000bbc:	10800017 	ldw	r2,0(r2)
10000bc0:	1000683a 	jmp	r2
10000bc4:	100016dc 	xori	zero,r2,91
10000bc8:	100017bc 	xorhi	zero,r2,94
10000bcc:	100017bc 	xorhi	zero,r2,94
10000bd0:	100016fc 	xorhi	zero,r2,91
10000bd4:	100017bc 	xorhi	zero,r2,94
10000bd8:	100017bc 	xorhi	zero,r2,94
10000bdc:	100017bc 	xorhi	zero,r2,94
10000be0:	100017bc 	xorhi	zero,r2,94
10000be4:	100017bc 	xorhi	zero,r2,94
10000be8:	100017bc 	xorhi	zero,r2,94
10000bec:	10000e70 	cmpltui	zero,r2,57
10000bf0:	10001618 	cmpnei	zero,r2,88
10000bf4:	100017bc 	xorhi	zero,r2,94
10000bf8:	10000d38 	rdprs	zero,r2,52
10000bfc:	10000e98 	cmpnei	zero,r2,58
10000c00:	100017bc 	xorhi	zero,r2,94
10000c04:	10000ed8 	cmpnei	zero,r2,59
10000c08:	10000ee4 	muli	zero,r2,59
10000c0c:	10000ee4 	muli	zero,r2,59
10000c10:	10000ee4 	muli	zero,r2,59
10000c14:	10000ee4 	muli	zero,r2,59
10000c18:	10000ee4 	muli	zero,r2,59
10000c1c:	10000ee4 	muli	zero,r2,59
10000c20:	10000ee4 	muli	zero,r2,59
10000c24:	10000ee4 	muli	zero,r2,59
10000c28:	10000ee4 	muli	zero,r2,59
10000c2c:	100017bc 	xorhi	zero,r2,94
10000c30:	100017bc 	xorhi	zero,r2,94
10000c34:	100017bc 	xorhi	zero,r2,94
10000c38:	100017bc 	xorhi	zero,r2,94
10000c3c:	100017bc 	xorhi	zero,r2,94
10000c40:	100017bc 	xorhi	zero,r2,94
10000c44:	100017bc 	xorhi	zero,r2,94
10000c48:	100017bc 	xorhi	zero,r2,94
10000c4c:	100017bc 	xorhi	zero,r2,94
10000c50:	100017bc 	xorhi	zero,r2,94
10000c54:	10000f18 	cmpnei	zero,r2,60
10000c58:	10000fd4 	ori	zero,r2,63
10000c5c:	100017bc 	xorhi	zero,r2,94
10000c60:	10000fd4 	ori	zero,r2,63
10000c64:	100017bc 	xorhi	zero,r2,94
10000c68:	100017bc 	xorhi	zero,r2,94
10000c6c:	100017bc 	xorhi	zero,r2,94
10000c70:	100017bc 	xorhi	zero,r2,94
10000c74:	10001074 	orhi	zero,r2,65
10000c78:	100017bc 	xorhi	zero,r2,94
10000c7c:	100017bc 	xorhi	zero,r2,94
10000c80:	10001080 	call	11000108 <_gp+0xfe6b60>
10000c84:	100017bc 	xorhi	zero,r2,94
10000c88:	100017bc 	xorhi	zero,r2,94
10000c8c:	100017bc 	xorhi	zero,r2,94
10000c90:	100017bc 	xorhi	zero,r2,94
10000c94:	100017bc 	xorhi	zero,r2,94
10000c98:	100014f8 	rdprs	zero,r2,83
10000c9c:	100017bc 	xorhi	zero,r2,94
10000ca0:	100017bc 	xorhi	zero,r2,94
10000ca4:	10001558 	cmpnei	zero,r2,85
10000ca8:	100017bc 	xorhi	zero,r2,94
10000cac:	100017bc 	xorhi	zero,r2,94
10000cb0:	100017bc 	xorhi	zero,r2,94
10000cb4:	100017bc 	xorhi	zero,r2,94
10000cb8:	100017bc 	xorhi	zero,r2,94
10000cbc:	100017bc 	xorhi	zero,r2,94
10000cc0:	100017bc 	xorhi	zero,r2,94
10000cc4:	100017bc 	xorhi	zero,r2,94
10000cc8:	100017bc 	xorhi	zero,r2,94
10000ccc:	100017bc 	xorhi	zero,r2,94
10000cd0:	10001768 	cmpgeui	zero,r2,93
10000cd4:	10001708 	cmpgei	zero,r2,92
10000cd8:	10000fd4 	ori	zero,r2,63
10000cdc:	10000fd4 	ori	zero,r2,63
10000ce0:	10000fd4 	ori	zero,r2,63
10000ce4:	10001718 	cmpnei	zero,r2,92
10000ce8:	10001708 	cmpgei	zero,r2,92
10000cec:	100017bc 	xorhi	zero,r2,94
10000cf0:	100017bc 	xorhi	zero,r2,94
10000cf4:	10001724 	muli	zero,r2,92
10000cf8:	100017bc 	xorhi	zero,r2,94
10000cfc:	10001734 	orhi	zero,r2,92
10000d00:	10001608 	cmpgei	zero,r2,88
10000d04:	10000d44 	addi	zero,r2,53
10000d08:	10001628 	cmpgeui	zero,r2,88
10000d0c:	100017bc 	xorhi	zero,r2,94
10000d10:	10001634 	orhi	zero,r2,88
10000d14:	100017bc 	xorhi	zero,r2,94
10000d18:	10001690 	cmplti	zero,r2,90
10000d1c:	100017bc 	xorhi	zero,r2,94
10000d20:	100017bc 	xorhi	zero,r2,94
10000d24:	100016a0 	cmpeqi	zero,r2,90
10000d28:	d9003117 	ldw	r4,196(sp)
10000d2c:	d8802d15 	stw	r2,180(sp)
10000d30:	0109c83a 	sub	r4,zero,r4
10000d34:	d9003115 	stw	r4,196(sp)
10000d38:	94800114 	ori	r18,r18,4
10000d3c:	ac400007 	ldb	r17,0(r21)
10000d40:	003f9706 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10000d44:	00800c04 	movi	r2,48
10000d48:	d9002d17 	ldw	r4,180(sp)
10000d4c:	d9402917 	ldw	r5,164(sp)
10000d50:	d8802705 	stb	r2,156(sp)
10000d54:	00801e04 	movi	r2,120
10000d58:	d8802745 	stb	r2,157(sp)
10000d5c:	d8002785 	stb	zero,158(sp)
10000d60:	20c00104 	addi	r3,r4,4
10000d64:	24c00017 	ldw	r19,0(r4)
10000d68:	002d883a 	mov	r22,zero
10000d6c:	90800094 	ori	r2,r18,2
10000d70:	28029a16 	blt	r5,zero,100017dc <___vfprintf_internal_r+0xdc0>
10000d74:	00bfdfc4 	movi	r2,-129
10000d78:	90a4703a 	and	r18,r18,r2
10000d7c:	d8c02d15 	stw	r3,180(sp)
10000d80:	94800094 	ori	r18,r18,2
10000d84:	9802871e 	bne	r19,zero,100017a4 <___vfprintf_internal_r+0xd88>
10000d88:	00840074 	movhi	r2,4097
10000d8c:	10be0b04 	addi	r2,r2,-2004
10000d90:	d8803915 	stw	r2,228(sp)
10000d94:	04401e04 	movi	r17,120
10000d98:	d8802917 	ldw	r2,164(sp)
10000d9c:	0039883a 	mov	fp,zero
10000da0:	1001e926 	beq	r2,zero,10001548 <___vfprintf_internal_r+0xb2c>
10000da4:	0027883a 	mov	r19,zero
10000da8:	002d883a 	mov	r22,zero
10000dac:	00020506 	br	100015c4 <___vfprintf_internal_r+0xba8>
10000db0:	d9002c17 	ldw	r4,176(sp)
10000db4:	b80b883a 	mov	r5,r23
10000db8:	0002cec0 	call	10002cec <__swsetup_r>
10000dbc:	1005ac1e 	bne	r2,zero,10002470 <___vfprintf_internal_r+0x1a54>
10000dc0:	b880030b 	ldhu	r2,12(r23)
10000dc4:	00c00284 	movi	r3,10
10000dc8:	1080068c 	andi	r2,r2,26
10000dcc:	10ff3c1e 	bne	r2,r3,10000ac0 <__alt_data_end+0xf8000ac0>
10000dd0:	b880038f 	ldh	r2,14(r23)
10000dd4:	103f3a16 	blt	r2,zero,10000ac0 <__alt_data_end+0xf8000ac0>
10000dd8:	d9c02d17 	ldw	r7,180(sp)
10000ddc:	d9002c17 	ldw	r4,176(sp)
10000de0:	a80d883a 	mov	r6,r21
10000de4:	b80b883a 	mov	r5,r23
10000de8:	0002c300 	call	10002c30 <__sbprintf>
10000dec:	00001106 	br	10000e34 <___vfprintf_internal_r+0x418>
10000df0:	d9002c17 	ldw	r4,176(sp)
10000df4:	d9801e04 	addi	r6,sp,120
10000df8:	b80b883a 	mov	r5,r23
10000dfc:	00075340 	call	10007534 <__sprint_r>
10000e00:	1000081e 	bne	r2,zero,10000e24 <___vfprintf_internal_r+0x408>
10000e04:	da000404 	addi	r8,sp,16
10000e08:	003f5306 	br	10000b58 <__alt_data_end+0xf8000b58>
10000e0c:	d8802017 	ldw	r2,128(sp)
10000e10:	10000426 	beq	r2,zero,10000e24 <___vfprintf_internal_r+0x408>
10000e14:	d9002c17 	ldw	r4,176(sp)
10000e18:	d9801e04 	addi	r6,sp,120
10000e1c:	b80b883a 	mov	r5,r23
10000e20:	00075340 	call	10007534 <__sprint_r>
10000e24:	b880030b 	ldhu	r2,12(r23)
10000e28:	1080100c 	andi	r2,r2,64
10000e2c:	1005901e 	bne	r2,zero,10002470 <___vfprintf_internal_r+0x1a54>
10000e30:	d8802f17 	ldw	r2,188(sp)
10000e34:	dfc04717 	ldw	ra,284(sp)
10000e38:	df004617 	ldw	fp,280(sp)
10000e3c:	ddc04517 	ldw	r23,276(sp)
10000e40:	dd804417 	ldw	r22,272(sp)
10000e44:	dd404317 	ldw	r21,268(sp)
10000e48:	dd004217 	ldw	r20,264(sp)
10000e4c:	dcc04117 	ldw	r19,260(sp)
10000e50:	dc804017 	ldw	r18,256(sp)
10000e54:	dc403f17 	ldw	r17,252(sp)
10000e58:	dc003e17 	ldw	r16,248(sp)
10000e5c:	dec04804 	addi	sp,sp,288
10000e60:	f800283a 	ret
10000e64:	d9002c17 	ldw	r4,176(sp)
10000e68:	0004cc00 	call	10004cc0 <__sinit>
10000e6c:	003f0406 	br	10000a80 <__alt_data_end+0xf8000a80>
10000e70:	d8802d17 	ldw	r2,180(sp)
10000e74:	d9002d17 	ldw	r4,180(sp)
10000e78:	10800017 	ldw	r2,0(r2)
10000e7c:	d8803115 	stw	r2,196(sp)
10000e80:	20800104 	addi	r2,r4,4
10000e84:	d9003117 	ldw	r4,196(sp)
10000e88:	203fa716 	blt	r4,zero,10000d28 <__alt_data_end+0xf8000d28>
10000e8c:	d8802d15 	stw	r2,180(sp)
10000e90:	ac400007 	ldb	r17,0(r21)
10000e94:	003f4206 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10000e98:	ac400007 	ldb	r17,0(r21)
10000e9c:	aac00044 	addi	r11,r21,1
10000ea0:	8a872826 	beq	r17,r10,10002b44 <___vfprintf_internal_r+0x2128>
10000ea4:	88bff404 	addi	r2,r17,-48
10000ea8:	0009883a 	mov	r4,zero
10000eac:	30867d36 	bltu	r6,r2,100028a4 <___vfprintf_internal_r+0x1e88>
10000eb0:	5c400007 	ldb	r17,0(r11)
10000eb4:	210002a4 	muli	r4,r4,10
10000eb8:	5d400044 	addi	r21,r11,1
10000ebc:	a817883a 	mov	r11,r21
10000ec0:	2089883a 	add	r4,r4,r2
10000ec4:	88bff404 	addi	r2,r17,-48
10000ec8:	30bff92e 	bgeu	r6,r2,10000eb0 <__alt_data_end+0xf8000eb0>
10000ecc:	2005c916 	blt	r4,zero,100025f4 <___vfprintf_internal_r+0x1bd8>
10000ed0:	d9002915 	stw	r4,164(sp)
10000ed4:	003f3306 	br	10000ba4 <__alt_data_end+0xf8000ba4>
10000ed8:	94802014 	ori	r18,r18,128
10000edc:	ac400007 	ldb	r17,0(r21)
10000ee0:	003f2f06 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10000ee4:	a809883a 	mov	r4,r21
10000ee8:	d8003115 	stw	zero,196(sp)
10000eec:	88bff404 	addi	r2,r17,-48
10000ef0:	0017883a 	mov	r11,zero
10000ef4:	24400007 	ldb	r17,0(r4)
10000ef8:	5ac002a4 	muli	r11,r11,10
10000efc:	ad400044 	addi	r21,r21,1
10000f00:	a809883a 	mov	r4,r21
10000f04:	12d7883a 	add	r11,r2,r11
10000f08:	88bff404 	addi	r2,r17,-48
10000f0c:	30bff92e 	bgeu	r6,r2,10000ef4 <__alt_data_end+0xf8000ef4>
10000f10:	dac03115 	stw	r11,196(sp)
10000f14:	003f2306 	br	10000ba4 <__alt_data_end+0xf8000ba4>
10000f18:	18c03fcc 	andi	r3,r3,255
10000f1c:	18072b1e 	bne	r3,zero,10002bcc <___vfprintf_internal_r+0x21b0>
10000f20:	94800414 	ori	r18,r18,16
10000f24:	9080080c 	andi	r2,r18,32
10000f28:	10037b26 	beq	r2,zero,10001d18 <___vfprintf_internal_r+0x12fc>
10000f2c:	d9402d17 	ldw	r5,180(sp)
10000f30:	28800117 	ldw	r2,4(r5)
10000f34:	2cc00017 	ldw	r19,0(r5)
10000f38:	29400204 	addi	r5,r5,8
10000f3c:	d9402d15 	stw	r5,180(sp)
10000f40:	102d883a 	mov	r22,r2
10000f44:	10044b16 	blt	r2,zero,10002074 <___vfprintf_internal_r+0x1658>
10000f48:	d9402917 	ldw	r5,164(sp)
10000f4c:	df002783 	ldbu	fp,158(sp)
10000f50:	2803bc16 	blt	r5,zero,10001e44 <___vfprintf_internal_r+0x1428>
10000f54:	00ffdfc4 	movi	r3,-129
10000f58:	9d84b03a 	or	r2,r19,r22
10000f5c:	90e4703a 	and	r18,r18,r3
10000f60:	10017726 	beq	r2,zero,10001540 <___vfprintf_internal_r+0xb24>
10000f64:	b0038326 	beq	r22,zero,10001d74 <___vfprintf_internal_r+0x1358>
10000f68:	dc402a15 	stw	r17,168(sp)
10000f6c:	dc001e04 	addi	r16,sp,120
10000f70:	b023883a 	mov	r17,r22
10000f74:	402d883a 	mov	r22,r8
10000f78:	9809883a 	mov	r4,r19
10000f7c:	880b883a 	mov	r5,r17
10000f80:	01800284 	movi	r6,10
10000f84:	000f883a 	mov	r7,zero
10000f88:	000a4a80 	call	1000a4a8 <__umoddi3>
10000f8c:	10800c04 	addi	r2,r2,48
10000f90:	843fffc4 	addi	r16,r16,-1
10000f94:	9809883a 	mov	r4,r19
10000f98:	880b883a 	mov	r5,r17
10000f9c:	80800005 	stb	r2,0(r16)
10000fa0:	01800284 	movi	r6,10
10000fa4:	000f883a 	mov	r7,zero
10000fa8:	0009f300 	call	10009f30 <__udivdi3>
10000fac:	1027883a 	mov	r19,r2
10000fb0:	10c4b03a 	or	r2,r2,r3
10000fb4:	1823883a 	mov	r17,r3
10000fb8:	103fef1e 	bne	r2,zero,10000f78 <__alt_data_end+0xf8000f78>
10000fbc:	d8c02817 	ldw	r3,160(sp)
10000fc0:	dc402a17 	ldw	r17,168(sp)
10000fc4:	b011883a 	mov	r8,r22
10000fc8:	1c07c83a 	sub	r3,r3,r16
10000fcc:	d8c02e15 	stw	r3,184(sp)
10000fd0:	00005906 	br	10001138 <___vfprintf_internal_r+0x71c>
10000fd4:	18c03fcc 	andi	r3,r3,255
10000fd8:	1806fa1e 	bne	r3,zero,10002bc4 <___vfprintf_internal_r+0x21a8>
10000fdc:	9080020c 	andi	r2,r18,8
10000fe0:	10048a26 	beq	r2,zero,1000220c <___vfprintf_internal_r+0x17f0>
10000fe4:	d8c02d17 	ldw	r3,180(sp)
10000fe8:	d9002d17 	ldw	r4,180(sp)
10000fec:	d9402d17 	ldw	r5,180(sp)
10000ff0:	18c00017 	ldw	r3,0(r3)
10000ff4:	21000117 	ldw	r4,4(r4)
10000ff8:	29400204 	addi	r5,r5,8
10000ffc:	d8c03615 	stw	r3,216(sp)
10001000:	d9003815 	stw	r4,224(sp)
10001004:	d9402d15 	stw	r5,180(sp)
10001008:	d9003617 	ldw	r4,216(sp)
1000100c:	d9403817 	ldw	r5,224(sp)
10001010:	da003d15 	stw	r8,244(sp)
10001014:	04000044 	movi	r16,1
10001018:	00070c00 	call	100070c0 <__fpclassifyd>
1000101c:	da003d17 	ldw	r8,244(sp)
10001020:	14041f1e 	bne	r2,r16,100020a0 <___vfprintf_internal_r+0x1684>
10001024:	d9003617 	ldw	r4,216(sp)
10001028:	d9403817 	ldw	r5,224(sp)
1000102c:	000d883a 	mov	r6,zero
10001030:	000f883a 	mov	r7,zero
10001034:	000bcd80 	call	1000bcd8 <__ledf2>
10001038:	da003d17 	ldw	r8,244(sp)
1000103c:	1005be16 	blt	r2,zero,10002738 <___vfprintf_internal_r+0x1d1c>
10001040:	df002783 	ldbu	fp,158(sp)
10001044:	008011c4 	movi	r2,71
10001048:	1445330e 	bge	r2,r17,10002518 <___vfprintf_internal_r+0x1afc>
1000104c:	04040074 	movhi	r16,4097
10001050:	843e0304 	addi	r16,r16,-2036
10001054:	00c000c4 	movi	r3,3
10001058:	00bfdfc4 	movi	r2,-129
1000105c:	d8c02a15 	stw	r3,168(sp)
10001060:	90a4703a 	and	r18,r18,r2
10001064:	d8c02e15 	stw	r3,184(sp)
10001068:	d8002915 	stw	zero,164(sp)
1000106c:	d8003215 	stw	zero,200(sp)
10001070:	00003706 	br	10001150 <___vfprintf_internal_r+0x734>
10001074:	94800214 	ori	r18,r18,8
10001078:	ac400007 	ldb	r17,0(r21)
1000107c:	003ec806 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10001080:	18c03fcc 	andi	r3,r3,255
10001084:	1806db1e 	bne	r3,zero,10002bf4 <___vfprintf_internal_r+0x21d8>
10001088:	94800414 	ori	r18,r18,16
1000108c:	9080080c 	andi	r2,r18,32
10001090:	1002d826 	beq	r2,zero,10001bf4 <___vfprintf_internal_r+0x11d8>
10001094:	d9402d17 	ldw	r5,180(sp)
10001098:	d8c02917 	ldw	r3,164(sp)
1000109c:	d8002785 	stb	zero,158(sp)
100010a0:	28800204 	addi	r2,r5,8
100010a4:	2cc00017 	ldw	r19,0(r5)
100010a8:	2d800117 	ldw	r22,4(r5)
100010ac:	18048f16 	blt	r3,zero,100022ec <___vfprintf_internal_r+0x18d0>
100010b0:	013fdfc4 	movi	r4,-129
100010b4:	9d86b03a 	or	r3,r19,r22
100010b8:	d8802d15 	stw	r2,180(sp)
100010bc:	9124703a 	and	r18,r18,r4
100010c0:	1802d91e 	bne	r3,zero,10001c28 <___vfprintf_internal_r+0x120c>
100010c4:	d8c02917 	ldw	r3,164(sp)
100010c8:	0039883a 	mov	fp,zero
100010cc:	1805c326 	beq	r3,zero,100027dc <___vfprintf_internal_r+0x1dc0>
100010d0:	0027883a 	mov	r19,zero
100010d4:	002d883a 	mov	r22,zero
100010d8:	dc001e04 	addi	r16,sp,120
100010dc:	9806d0fa 	srli	r3,r19,3
100010e0:	b008977a 	slli	r4,r22,29
100010e4:	b02cd0fa 	srli	r22,r22,3
100010e8:	9cc001cc 	andi	r19,r19,7
100010ec:	98800c04 	addi	r2,r19,48
100010f0:	843fffc4 	addi	r16,r16,-1
100010f4:	20e6b03a 	or	r19,r4,r3
100010f8:	80800005 	stb	r2,0(r16)
100010fc:	9d86b03a 	or	r3,r19,r22
10001100:	183ff61e 	bne	r3,zero,100010dc <__alt_data_end+0xf80010dc>
10001104:	90c0004c 	andi	r3,r18,1
10001108:	18013b26 	beq	r3,zero,100015f8 <___vfprintf_internal_r+0xbdc>
1000110c:	10803fcc 	andi	r2,r2,255
10001110:	1080201c 	xori	r2,r2,128
10001114:	10bfe004 	addi	r2,r2,-128
10001118:	00c00c04 	movi	r3,48
1000111c:	10c13626 	beq	r2,r3,100015f8 <___vfprintf_internal_r+0xbdc>
10001120:	80ffffc5 	stb	r3,-1(r16)
10001124:	d8c02817 	ldw	r3,160(sp)
10001128:	80bfffc4 	addi	r2,r16,-1
1000112c:	1021883a 	mov	r16,r2
10001130:	1887c83a 	sub	r3,r3,r2
10001134:	d8c02e15 	stw	r3,184(sp)
10001138:	d8802e17 	ldw	r2,184(sp)
1000113c:	d9002917 	ldw	r4,164(sp)
10001140:	1100010e 	bge	r2,r4,10001148 <___vfprintf_internal_r+0x72c>
10001144:	2005883a 	mov	r2,r4
10001148:	d8802a15 	stw	r2,168(sp)
1000114c:	d8003215 	stw	zero,200(sp)
10001150:	e7003fcc 	andi	fp,fp,255
10001154:	e700201c 	xori	fp,fp,128
10001158:	e73fe004 	addi	fp,fp,-128
1000115c:	e0000326 	beq	fp,zero,1000116c <___vfprintf_internal_r+0x750>
10001160:	d8c02a17 	ldw	r3,168(sp)
10001164:	18c00044 	addi	r3,r3,1
10001168:	d8c02a15 	stw	r3,168(sp)
1000116c:	90c0008c 	andi	r3,r18,2
10001170:	d8c02b15 	stw	r3,172(sp)
10001174:	18000326 	beq	r3,zero,10001184 <___vfprintf_internal_r+0x768>
10001178:	d8c02a17 	ldw	r3,168(sp)
1000117c:	18c00084 	addi	r3,r3,2
10001180:	d8c02a15 	stw	r3,168(sp)
10001184:	90c0210c 	andi	r3,r18,132
10001188:	d8c03015 	stw	r3,192(sp)
1000118c:	1801a31e 	bne	r3,zero,1000181c <___vfprintf_internal_r+0xe00>
10001190:	d9003117 	ldw	r4,196(sp)
10001194:	d8c02a17 	ldw	r3,168(sp)
10001198:	20e7c83a 	sub	r19,r4,r3
1000119c:	04c19f0e 	bge	zero,r19,1000181c <___vfprintf_internal_r+0xe00>
100011a0:	02400404 	movi	r9,16
100011a4:	d8c02017 	ldw	r3,128(sp)
100011a8:	d8801f17 	ldw	r2,124(sp)
100011ac:	4cc50d0e 	bge	r9,r19,100025e4 <___vfprintf_internal_r+0x1bc8>
100011b0:	01440074 	movhi	r5,4097
100011b4:	297e1684 	addi	r5,r5,-1958
100011b8:	dc403b15 	stw	r17,236(sp)
100011bc:	d9403515 	stw	r5,212(sp)
100011c0:	9823883a 	mov	r17,r19
100011c4:	482d883a 	mov	r22,r9
100011c8:	9027883a 	mov	r19,r18
100011cc:	070001c4 	movi	fp,7
100011d0:	8025883a 	mov	r18,r16
100011d4:	dc002c17 	ldw	r16,176(sp)
100011d8:	00000306 	br	100011e8 <___vfprintf_internal_r+0x7cc>
100011dc:	8c7ffc04 	addi	r17,r17,-16
100011e0:	42000204 	addi	r8,r8,8
100011e4:	b440130e 	bge	r22,r17,10001234 <___vfprintf_internal_r+0x818>
100011e8:	01040074 	movhi	r4,4097
100011ec:	18c00404 	addi	r3,r3,16
100011f0:	10800044 	addi	r2,r2,1
100011f4:	213e1684 	addi	r4,r4,-1958
100011f8:	41000015 	stw	r4,0(r8)
100011fc:	45800115 	stw	r22,4(r8)
10001200:	d8c02015 	stw	r3,128(sp)
10001204:	d8801f15 	stw	r2,124(sp)
10001208:	e0bff40e 	bge	fp,r2,100011dc <__alt_data_end+0xf80011dc>
1000120c:	d9801e04 	addi	r6,sp,120
10001210:	b80b883a 	mov	r5,r23
10001214:	8009883a 	mov	r4,r16
10001218:	00075340 	call	10007534 <__sprint_r>
1000121c:	103f011e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001220:	8c7ffc04 	addi	r17,r17,-16
10001224:	d8c02017 	ldw	r3,128(sp)
10001228:	d8801f17 	ldw	r2,124(sp)
1000122c:	da000404 	addi	r8,sp,16
10001230:	b47fed16 	blt	r22,r17,100011e8 <__alt_data_end+0xf80011e8>
10001234:	9021883a 	mov	r16,r18
10001238:	9825883a 	mov	r18,r19
1000123c:	8827883a 	mov	r19,r17
10001240:	dc403b17 	ldw	r17,236(sp)
10001244:	d9403517 	ldw	r5,212(sp)
10001248:	98c7883a 	add	r3,r19,r3
1000124c:	10800044 	addi	r2,r2,1
10001250:	41400015 	stw	r5,0(r8)
10001254:	44c00115 	stw	r19,4(r8)
10001258:	d8c02015 	stw	r3,128(sp)
1000125c:	d8801f15 	stw	r2,124(sp)
10001260:	010001c4 	movi	r4,7
10001264:	2082a316 	blt	r4,r2,10001cf4 <___vfprintf_internal_r+0x12d8>
10001268:	df002787 	ldb	fp,158(sp)
1000126c:	42000204 	addi	r8,r8,8
10001270:	e0000c26 	beq	fp,zero,100012a4 <___vfprintf_internal_r+0x888>
10001274:	d8801f17 	ldw	r2,124(sp)
10001278:	d9002784 	addi	r4,sp,158
1000127c:	18c00044 	addi	r3,r3,1
10001280:	10800044 	addi	r2,r2,1
10001284:	41000015 	stw	r4,0(r8)
10001288:	01000044 	movi	r4,1
1000128c:	41000115 	stw	r4,4(r8)
10001290:	d8c02015 	stw	r3,128(sp)
10001294:	d8801f15 	stw	r2,124(sp)
10001298:	010001c4 	movi	r4,7
1000129c:	20823c16 	blt	r4,r2,10001b90 <___vfprintf_internal_r+0x1174>
100012a0:	42000204 	addi	r8,r8,8
100012a4:	d8802b17 	ldw	r2,172(sp)
100012a8:	10000c26 	beq	r2,zero,100012dc <___vfprintf_internal_r+0x8c0>
100012ac:	d8801f17 	ldw	r2,124(sp)
100012b0:	d9002704 	addi	r4,sp,156
100012b4:	18c00084 	addi	r3,r3,2
100012b8:	10800044 	addi	r2,r2,1
100012bc:	41000015 	stw	r4,0(r8)
100012c0:	01000084 	movi	r4,2
100012c4:	41000115 	stw	r4,4(r8)
100012c8:	d8c02015 	stw	r3,128(sp)
100012cc:	d8801f15 	stw	r2,124(sp)
100012d0:	010001c4 	movi	r4,7
100012d4:	20823616 	blt	r4,r2,10001bb0 <___vfprintf_internal_r+0x1194>
100012d8:	42000204 	addi	r8,r8,8
100012dc:	d9003017 	ldw	r4,192(sp)
100012e0:	00802004 	movi	r2,128
100012e4:	20819926 	beq	r4,r2,1000194c <___vfprintf_internal_r+0xf30>
100012e8:	d9402917 	ldw	r5,164(sp)
100012ec:	d8802e17 	ldw	r2,184(sp)
100012f0:	28adc83a 	sub	r22,r5,r2
100012f4:	0580310e 	bge	zero,r22,100013bc <___vfprintf_internal_r+0x9a0>
100012f8:	07000404 	movi	fp,16
100012fc:	d8801f17 	ldw	r2,124(sp)
10001300:	e584140e 	bge	fp,r22,10002354 <___vfprintf_internal_r+0x1938>
10001304:	01440074 	movhi	r5,4097
10001308:	297e1284 	addi	r5,r5,-1974
1000130c:	dc402915 	stw	r17,164(sp)
10001310:	d9402b15 	stw	r5,172(sp)
10001314:	b023883a 	mov	r17,r22
10001318:	04c001c4 	movi	r19,7
1000131c:	a82d883a 	mov	r22,r21
10001320:	902b883a 	mov	r21,r18
10001324:	8025883a 	mov	r18,r16
10001328:	dc002c17 	ldw	r16,176(sp)
1000132c:	00000306 	br	1000133c <___vfprintf_internal_r+0x920>
10001330:	8c7ffc04 	addi	r17,r17,-16
10001334:	42000204 	addi	r8,r8,8
10001338:	e440110e 	bge	fp,r17,10001380 <___vfprintf_internal_r+0x964>
1000133c:	18c00404 	addi	r3,r3,16
10001340:	10800044 	addi	r2,r2,1
10001344:	45000015 	stw	r20,0(r8)
10001348:	47000115 	stw	fp,4(r8)
1000134c:	d8c02015 	stw	r3,128(sp)
10001350:	d8801f15 	stw	r2,124(sp)
10001354:	98bff60e 	bge	r19,r2,10001330 <__alt_data_end+0xf8001330>
10001358:	d9801e04 	addi	r6,sp,120
1000135c:	b80b883a 	mov	r5,r23
10001360:	8009883a 	mov	r4,r16
10001364:	00075340 	call	10007534 <__sprint_r>
10001368:	103eae1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
1000136c:	8c7ffc04 	addi	r17,r17,-16
10001370:	d8c02017 	ldw	r3,128(sp)
10001374:	d8801f17 	ldw	r2,124(sp)
10001378:	da000404 	addi	r8,sp,16
1000137c:	e47fef16 	blt	fp,r17,1000133c <__alt_data_end+0xf800133c>
10001380:	9021883a 	mov	r16,r18
10001384:	a825883a 	mov	r18,r21
10001388:	b02b883a 	mov	r21,r22
1000138c:	882d883a 	mov	r22,r17
10001390:	dc402917 	ldw	r17,164(sp)
10001394:	d9002b17 	ldw	r4,172(sp)
10001398:	1d87883a 	add	r3,r3,r22
1000139c:	10800044 	addi	r2,r2,1
100013a0:	41000015 	stw	r4,0(r8)
100013a4:	45800115 	stw	r22,4(r8)
100013a8:	d8c02015 	stw	r3,128(sp)
100013ac:	d8801f15 	stw	r2,124(sp)
100013b0:	010001c4 	movi	r4,7
100013b4:	2081ee16 	blt	r4,r2,10001b70 <___vfprintf_internal_r+0x1154>
100013b8:	42000204 	addi	r8,r8,8
100013bc:	9080400c 	andi	r2,r18,256
100013c0:	1001181e 	bne	r2,zero,10001824 <___vfprintf_internal_r+0xe08>
100013c4:	d9402e17 	ldw	r5,184(sp)
100013c8:	d8801f17 	ldw	r2,124(sp)
100013cc:	44000015 	stw	r16,0(r8)
100013d0:	1947883a 	add	r3,r3,r5
100013d4:	10800044 	addi	r2,r2,1
100013d8:	41400115 	stw	r5,4(r8)
100013dc:	d8c02015 	stw	r3,128(sp)
100013e0:	d8801f15 	stw	r2,124(sp)
100013e4:	010001c4 	movi	r4,7
100013e8:	2081d316 	blt	r4,r2,10001b38 <___vfprintf_internal_r+0x111c>
100013ec:	42000204 	addi	r8,r8,8
100013f0:	9480010c 	andi	r18,r18,4
100013f4:	90003226 	beq	r18,zero,100014c0 <___vfprintf_internal_r+0xaa4>
100013f8:	d9403117 	ldw	r5,196(sp)
100013fc:	d8802a17 	ldw	r2,168(sp)
10001400:	28a1c83a 	sub	r16,r5,r2
10001404:	04002e0e 	bge	zero,r16,100014c0 <___vfprintf_internal_r+0xaa4>
10001408:	04400404 	movi	r17,16
1000140c:	d8801f17 	ldw	r2,124(sp)
10001410:	8c04a20e 	bge	r17,r16,1000269c <___vfprintf_internal_r+0x1c80>
10001414:	01440074 	movhi	r5,4097
10001418:	297e1684 	addi	r5,r5,-1958
1000141c:	d9403515 	stw	r5,212(sp)
10001420:	048001c4 	movi	r18,7
10001424:	dcc02c17 	ldw	r19,176(sp)
10001428:	00000306 	br	10001438 <___vfprintf_internal_r+0xa1c>
1000142c:	843ffc04 	addi	r16,r16,-16
10001430:	42000204 	addi	r8,r8,8
10001434:	8c00130e 	bge	r17,r16,10001484 <___vfprintf_internal_r+0xa68>
10001438:	01040074 	movhi	r4,4097
1000143c:	18c00404 	addi	r3,r3,16
10001440:	10800044 	addi	r2,r2,1
10001444:	213e1684 	addi	r4,r4,-1958
10001448:	41000015 	stw	r4,0(r8)
1000144c:	44400115 	stw	r17,4(r8)
10001450:	d8c02015 	stw	r3,128(sp)
10001454:	d8801f15 	stw	r2,124(sp)
10001458:	90bff40e 	bge	r18,r2,1000142c <__alt_data_end+0xf800142c>
1000145c:	d9801e04 	addi	r6,sp,120
10001460:	b80b883a 	mov	r5,r23
10001464:	9809883a 	mov	r4,r19
10001468:	00075340 	call	10007534 <__sprint_r>
1000146c:	103e6d1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001470:	843ffc04 	addi	r16,r16,-16
10001474:	d8c02017 	ldw	r3,128(sp)
10001478:	d8801f17 	ldw	r2,124(sp)
1000147c:	da000404 	addi	r8,sp,16
10001480:	8c3fed16 	blt	r17,r16,10001438 <__alt_data_end+0xf8001438>
10001484:	d9403517 	ldw	r5,212(sp)
10001488:	1c07883a 	add	r3,r3,r16
1000148c:	10800044 	addi	r2,r2,1
10001490:	41400015 	stw	r5,0(r8)
10001494:	44000115 	stw	r16,4(r8)
10001498:	d8c02015 	stw	r3,128(sp)
1000149c:	d8801f15 	stw	r2,124(sp)
100014a0:	010001c4 	movi	r4,7
100014a4:	2080060e 	bge	r4,r2,100014c0 <___vfprintf_internal_r+0xaa4>
100014a8:	d9002c17 	ldw	r4,176(sp)
100014ac:	d9801e04 	addi	r6,sp,120
100014b0:	b80b883a 	mov	r5,r23
100014b4:	00075340 	call	10007534 <__sprint_r>
100014b8:	103e5a1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
100014bc:	d8c02017 	ldw	r3,128(sp)
100014c0:	d8803117 	ldw	r2,196(sp)
100014c4:	d9002a17 	ldw	r4,168(sp)
100014c8:	1100010e 	bge	r2,r4,100014d0 <___vfprintf_internal_r+0xab4>
100014cc:	2005883a 	mov	r2,r4
100014d0:	d9402f17 	ldw	r5,188(sp)
100014d4:	288b883a 	add	r5,r5,r2
100014d8:	d9402f15 	stw	r5,188(sp)
100014dc:	18019e1e 	bne	r3,zero,10001b58 <___vfprintf_internal_r+0x113c>
100014e0:	a8800007 	ldb	r2,0(r21)
100014e4:	d8001f15 	stw	zero,124(sp)
100014e8:	da000404 	addi	r8,sp,16
100014ec:	103d851e 	bne	r2,zero,10000b04 <__alt_data_end+0xf8000b04>
100014f0:	a821883a 	mov	r16,r21
100014f4:	003d9b06 	br	10000b64 <__alt_data_end+0xf8000b64>
100014f8:	18c03fcc 	andi	r3,r3,255
100014fc:	1805c11e 	bne	r3,zero,10002c04 <___vfprintf_internal_r+0x21e8>
10001500:	94800414 	ori	r18,r18,16
10001504:	9080080c 	andi	r2,r18,32
10001508:	10020c26 	beq	r2,zero,10001d3c <___vfprintf_internal_r+0x1320>
1000150c:	d8802d17 	ldw	r2,180(sp)
10001510:	d9002917 	ldw	r4,164(sp)
10001514:	d8002785 	stb	zero,158(sp)
10001518:	10c00204 	addi	r3,r2,8
1000151c:	14c00017 	ldw	r19,0(r2)
10001520:	15800117 	ldw	r22,4(r2)
10001524:	20040f16 	blt	r4,zero,10002564 <___vfprintf_internal_r+0x1b48>
10001528:	013fdfc4 	movi	r4,-129
1000152c:	9d84b03a 	or	r2,r19,r22
10001530:	d8c02d15 	stw	r3,180(sp)
10001534:	9124703a 	and	r18,r18,r4
10001538:	0039883a 	mov	fp,zero
1000153c:	103e891e 	bne	r2,zero,10000f64 <__alt_data_end+0xf8000f64>
10001540:	d9002917 	ldw	r4,164(sp)
10001544:	2002c11e 	bne	r4,zero,1000204c <___vfprintf_internal_r+0x1630>
10001548:	d8002915 	stw	zero,164(sp)
1000154c:	d8002e15 	stw	zero,184(sp)
10001550:	dc001e04 	addi	r16,sp,120
10001554:	003ef806 	br	10001138 <__alt_data_end+0xf8001138>
10001558:	18c03fcc 	andi	r3,r3,255
1000155c:	18059d1e 	bne	r3,zero,10002bd4 <___vfprintf_internal_r+0x21b8>
10001560:	01440074 	movhi	r5,4097
10001564:	297e0604 	addi	r5,r5,-2024
10001568:	d9403915 	stw	r5,228(sp)
1000156c:	9080080c 	andi	r2,r18,32
10001570:	10005226 	beq	r2,zero,100016bc <___vfprintf_internal_r+0xca0>
10001574:	d8802d17 	ldw	r2,180(sp)
10001578:	14c00017 	ldw	r19,0(r2)
1000157c:	15800117 	ldw	r22,4(r2)
10001580:	10800204 	addi	r2,r2,8
10001584:	d8802d15 	stw	r2,180(sp)
10001588:	9080004c 	andi	r2,r18,1
1000158c:	10019026 	beq	r2,zero,10001bd0 <___vfprintf_internal_r+0x11b4>
10001590:	9d84b03a 	or	r2,r19,r22
10001594:	10036926 	beq	r2,zero,1000233c <___vfprintf_internal_r+0x1920>
10001598:	d8c02917 	ldw	r3,164(sp)
1000159c:	00800c04 	movi	r2,48
100015a0:	d8802705 	stb	r2,156(sp)
100015a4:	dc402745 	stb	r17,157(sp)
100015a8:	d8002785 	stb	zero,158(sp)
100015ac:	90800094 	ori	r2,r18,2
100015b0:	18045d16 	blt	r3,zero,10002728 <___vfprintf_internal_r+0x1d0c>
100015b4:	00bfdfc4 	movi	r2,-129
100015b8:	90a4703a 	and	r18,r18,r2
100015bc:	94800094 	ori	r18,r18,2
100015c0:	0039883a 	mov	fp,zero
100015c4:	d9003917 	ldw	r4,228(sp)
100015c8:	dc001e04 	addi	r16,sp,120
100015cc:	988003cc 	andi	r2,r19,15
100015d0:	b006973a 	slli	r3,r22,28
100015d4:	2085883a 	add	r2,r4,r2
100015d8:	9826d13a 	srli	r19,r19,4
100015dc:	10800003 	ldbu	r2,0(r2)
100015e0:	b02cd13a 	srli	r22,r22,4
100015e4:	843fffc4 	addi	r16,r16,-1
100015e8:	1ce6b03a 	or	r19,r3,r19
100015ec:	80800005 	stb	r2,0(r16)
100015f0:	9d84b03a 	or	r2,r19,r22
100015f4:	103ff51e 	bne	r2,zero,100015cc <__alt_data_end+0xf80015cc>
100015f8:	d8c02817 	ldw	r3,160(sp)
100015fc:	1c07c83a 	sub	r3,r3,r16
10001600:	d8c02e15 	stw	r3,184(sp)
10001604:	003ecc06 	br	10001138 <__alt_data_end+0xf8001138>
10001608:	18c03fcc 	andi	r3,r3,255
1000160c:	183e9f26 	beq	r3,zero,1000108c <__alt_data_end+0xf800108c>
10001610:	d9c02785 	stb	r7,158(sp)
10001614:	003e9d06 	br	1000108c <__alt_data_end+0xf800108c>
10001618:	00c00044 	movi	r3,1
1000161c:	01c00ac4 	movi	r7,43
10001620:	ac400007 	ldb	r17,0(r21)
10001624:	003d5e06 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10001628:	94800814 	ori	r18,r18,32
1000162c:	ac400007 	ldb	r17,0(r21)
10001630:	003d5b06 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10001634:	d8c02d17 	ldw	r3,180(sp)
10001638:	d8002785 	stb	zero,158(sp)
1000163c:	1c000017 	ldw	r16,0(r3)
10001640:	1cc00104 	addi	r19,r3,4
10001644:	80041926 	beq	r16,zero,100026ac <___vfprintf_internal_r+0x1c90>
10001648:	d9002917 	ldw	r4,164(sp)
1000164c:	2003d016 	blt	r4,zero,10002590 <___vfprintf_internal_r+0x1b74>
10001650:	200d883a 	mov	r6,r4
10001654:	000b883a 	mov	r5,zero
10001658:	8009883a 	mov	r4,r16
1000165c:	da003d15 	stw	r8,244(sp)
10001660:	0005d700 	call	10005d70 <memchr>
10001664:	da003d17 	ldw	r8,244(sp)
10001668:	10045426 	beq	r2,zero,100027bc <___vfprintf_internal_r+0x1da0>
1000166c:	1405c83a 	sub	r2,r2,r16
10001670:	d8802e15 	stw	r2,184(sp)
10001674:	1003cc16 	blt	r2,zero,100025a8 <___vfprintf_internal_r+0x1b8c>
10001678:	df002783 	ldbu	fp,158(sp)
1000167c:	d8802a15 	stw	r2,168(sp)
10001680:	dcc02d15 	stw	r19,180(sp)
10001684:	d8002915 	stw	zero,164(sp)
10001688:	d8003215 	stw	zero,200(sp)
1000168c:	003eb006 	br	10001150 <__alt_data_end+0xf8001150>
10001690:	18c03fcc 	andi	r3,r3,255
10001694:	183f9b26 	beq	r3,zero,10001504 <__alt_data_end+0xf8001504>
10001698:	d9c02785 	stb	r7,158(sp)
1000169c:	003f9906 	br	10001504 <__alt_data_end+0xf8001504>
100016a0:	18c03fcc 	andi	r3,r3,255
100016a4:	1805551e 	bne	r3,zero,10002bfc <___vfprintf_internal_r+0x21e0>
100016a8:	01440074 	movhi	r5,4097
100016ac:	297e0b04 	addi	r5,r5,-2004
100016b0:	d9403915 	stw	r5,228(sp)
100016b4:	9080080c 	andi	r2,r18,32
100016b8:	103fae1e 	bne	r2,zero,10001574 <__alt_data_end+0xf8001574>
100016bc:	9080040c 	andi	r2,r18,16
100016c0:	1002de26 	beq	r2,zero,1000223c <___vfprintf_internal_r+0x1820>
100016c4:	d8c02d17 	ldw	r3,180(sp)
100016c8:	002d883a 	mov	r22,zero
100016cc:	1cc00017 	ldw	r19,0(r3)
100016d0:	18c00104 	addi	r3,r3,4
100016d4:	d8c02d15 	stw	r3,180(sp)
100016d8:	003fab06 	br	10001588 <__alt_data_end+0xf8001588>
100016dc:	38803fcc 	andi	r2,r7,255
100016e0:	1080201c 	xori	r2,r2,128
100016e4:	10bfe004 	addi	r2,r2,-128
100016e8:	1002d21e 	bne	r2,zero,10002234 <___vfprintf_internal_r+0x1818>
100016ec:	00c00044 	movi	r3,1
100016f0:	01c00804 	movi	r7,32
100016f4:	ac400007 	ldb	r17,0(r21)
100016f8:	003d2906 	br	10000ba0 <__alt_data_end+0xf8000ba0>
100016fc:	94800054 	ori	r18,r18,1
10001700:	ac400007 	ldb	r17,0(r21)
10001704:	003d2606 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10001708:	18c03fcc 	andi	r3,r3,255
1000170c:	183e0526 	beq	r3,zero,10000f24 <__alt_data_end+0xf8000f24>
10001710:	d9c02785 	stb	r7,158(sp)
10001714:	003e0306 	br	10000f24 <__alt_data_end+0xf8000f24>
10001718:	94801014 	ori	r18,r18,64
1000171c:	ac400007 	ldb	r17,0(r21)
10001720:	003d1f06 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10001724:	ac400007 	ldb	r17,0(r21)
10001728:	8a438726 	beq	r17,r9,10002548 <___vfprintf_internal_r+0x1b2c>
1000172c:	94800414 	ori	r18,r18,16
10001730:	003d1b06 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10001734:	18c03fcc 	andi	r3,r3,255
10001738:	1805341e 	bne	r3,zero,10002c0c <___vfprintf_internal_r+0x21f0>
1000173c:	9080080c 	andi	r2,r18,32
10001740:	1002cd26 	beq	r2,zero,10002278 <___vfprintf_internal_r+0x185c>
10001744:	d9402d17 	ldw	r5,180(sp)
10001748:	d9002f17 	ldw	r4,188(sp)
1000174c:	28800017 	ldw	r2,0(r5)
10001750:	2007d7fa 	srai	r3,r4,31
10001754:	29400104 	addi	r5,r5,4
10001758:	d9402d15 	stw	r5,180(sp)
1000175c:	11000015 	stw	r4,0(r2)
10001760:	10c00115 	stw	r3,4(r2)
10001764:	003ce506 	br	10000afc <__alt_data_end+0xf8000afc>
10001768:	d8c02d17 	ldw	r3,180(sp)
1000176c:	d9002d17 	ldw	r4,180(sp)
10001770:	d8002785 	stb	zero,158(sp)
10001774:	18800017 	ldw	r2,0(r3)
10001778:	21000104 	addi	r4,r4,4
1000177c:	00c00044 	movi	r3,1
10001780:	d8c02a15 	stw	r3,168(sp)
10001784:	d8801405 	stb	r2,80(sp)
10001788:	d9002d15 	stw	r4,180(sp)
1000178c:	d8c02e15 	stw	r3,184(sp)
10001790:	d8002915 	stw	zero,164(sp)
10001794:	d8003215 	stw	zero,200(sp)
10001798:	dc001404 	addi	r16,sp,80
1000179c:	0039883a 	mov	fp,zero
100017a0:	003e7206 	br	1000116c <__alt_data_end+0xf800116c>
100017a4:	01040074 	movhi	r4,4097
100017a8:	213e0b04 	addi	r4,r4,-2004
100017ac:	0039883a 	mov	fp,zero
100017b0:	d9003915 	stw	r4,228(sp)
100017b4:	04401e04 	movi	r17,120
100017b8:	003f8206 	br	100015c4 <__alt_data_end+0xf80015c4>
100017bc:	18c03fcc 	andi	r3,r3,255
100017c0:	1805061e 	bne	r3,zero,10002bdc <___vfprintf_internal_r+0x21c0>
100017c4:	883d9126 	beq	r17,zero,10000e0c <__alt_data_end+0xf8000e0c>
100017c8:	00c00044 	movi	r3,1
100017cc:	d8c02a15 	stw	r3,168(sp)
100017d0:	dc401405 	stb	r17,80(sp)
100017d4:	d8002785 	stb	zero,158(sp)
100017d8:	003fec06 	br	1000178c <__alt_data_end+0xf800178c>
100017dc:	01440074 	movhi	r5,4097
100017e0:	297e0b04 	addi	r5,r5,-2004
100017e4:	d9403915 	stw	r5,228(sp)
100017e8:	d8c02d15 	stw	r3,180(sp)
100017ec:	1025883a 	mov	r18,r2
100017f0:	04401e04 	movi	r17,120
100017f4:	9d84b03a 	or	r2,r19,r22
100017f8:	1000fc1e 	bne	r2,zero,10001bec <___vfprintf_internal_r+0x11d0>
100017fc:	0039883a 	mov	fp,zero
10001800:	00800084 	movi	r2,2
10001804:	10803fcc 	andi	r2,r2,255
10001808:	00c00044 	movi	r3,1
1000180c:	10c20f26 	beq	r2,r3,1000204c <___vfprintf_internal_r+0x1630>
10001810:	00c00084 	movi	r3,2
10001814:	10fd6326 	beq	r2,r3,10000da4 <__alt_data_end+0xf8000da4>
10001818:	003e2d06 	br	100010d0 <__alt_data_end+0xf80010d0>
1000181c:	d8c02017 	ldw	r3,128(sp)
10001820:	003e9306 	br	10001270 <__alt_data_end+0xf8001270>
10001824:	00801944 	movi	r2,101
10001828:	14407e0e 	bge	r2,r17,10001a24 <___vfprintf_internal_r+0x1008>
1000182c:	d9003617 	ldw	r4,216(sp)
10001830:	d9403817 	ldw	r5,224(sp)
10001834:	000d883a 	mov	r6,zero
10001838:	000f883a 	mov	r7,zero
1000183c:	d8c03c15 	stw	r3,240(sp)
10001840:	da003d15 	stw	r8,244(sp)
10001844:	000bb740 	call	1000bb74 <__eqdf2>
10001848:	d8c03c17 	ldw	r3,240(sp)
1000184c:	da003d17 	ldw	r8,244(sp)
10001850:	1000f71e 	bne	r2,zero,10001c30 <___vfprintf_internal_r+0x1214>
10001854:	d8801f17 	ldw	r2,124(sp)
10001858:	01040074 	movhi	r4,4097
1000185c:	213e1204 	addi	r4,r4,-1976
10001860:	18c00044 	addi	r3,r3,1
10001864:	10800044 	addi	r2,r2,1
10001868:	41000015 	stw	r4,0(r8)
1000186c:	01000044 	movi	r4,1
10001870:	41000115 	stw	r4,4(r8)
10001874:	d8c02015 	stw	r3,128(sp)
10001878:	d8801f15 	stw	r2,124(sp)
1000187c:	010001c4 	movi	r4,7
10001880:	2082b816 	blt	r4,r2,10002364 <___vfprintf_internal_r+0x1948>
10001884:	42000204 	addi	r8,r8,8
10001888:	d8802617 	ldw	r2,152(sp)
1000188c:	d9403317 	ldw	r5,204(sp)
10001890:	11400216 	blt	r2,r5,1000189c <___vfprintf_internal_r+0xe80>
10001894:	9080004c 	andi	r2,r18,1
10001898:	103ed526 	beq	r2,zero,100013f0 <__alt_data_end+0xf80013f0>
1000189c:	d8803717 	ldw	r2,220(sp)
100018a0:	d9003417 	ldw	r4,208(sp)
100018a4:	d9403717 	ldw	r5,220(sp)
100018a8:	1887883a 	add	r3,r3,r2
100018ac:	d8801f17 	ldw	r2,124(sp)
100018b0:	41000015 	stw	r4,0(r8)
100018b4:	41400115 	stw	r5,4(r8)
100018b8:	10800044 	addi	r2,r2,1
100018bc:	d8c02015 	stw	r3,128(sp)
100018c0:	d8801f15 	stw	r2,124(sp)
100018c4:	010001c4 	movi	r4,7
100018c8:	20832916 	blt	r4,r2,10002570 <___vfprintf_internal_r+0x1b54>
100018cc:	42000204 	addi	r8,r8,8
100018d0:	d8803317 	ldw	r2,204(sp)
100018d4:	143fffc4 	addi	r16,r2,-1
100018d8:	043ec50e 	bge	zero,r16,100013f0 <__alt_data_end+0xf80013f0>
100018dc:	04400404 	movi	r17,16
100018e0:	d8801f17 	ldw	r2,124(sp)
100018e4:	8c00880e 	bge	r17,r16,10001b08 <___vfprintf_internal_r+0x10ec>
100018e8:	01440074 	movhi	r5,4097
100018ec:	297e1284 	addi	r5,r5,-1974
100018f0:	d9402b15 	stw	r5,172(sp)
100018f4:	058001c4 	movi	r22,7
100018f8:	dcc02c17 	ldw	r19,176(sp)
100018fc:	00000306 	br	1000190c <___vfprintf_internal_r+0xef0>
10001900:	42000204 	addi	r8,r8,8
10001904:	843ffc04 	addi	r16,r16,-16
10001908:	8c00820e 	bge	r17,r16,10001b14 <___vfprintf_internal_r+0x10f8>
1000190c:	18c00404 	addi	r3,r3,16
10001910:	10800044 	addi	r2,r2,1
10001914:	45000015 	stw	r20,0(r8)
10001918:	44400115 	stw	r17,4(r8)
1000191c:	d8c02015 	stw	r3,128(sp)
10001920:	d8801f15 	stw	r2,124(sp)
10001924:	b0bff60e 	bge	r22,r2,10001900 <__alt_data_end+0xf8001900>
10001928:	d9801e04 	addi	r6,sp,120
1000192c:	b80b883a 	mov	r5,r23
10001930:	9809883a 	mov	r4,r19
10001934:	00075340 	call	10007534 <__sprint_r>
10001938:	103d3a1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
1000193c:	d8c02017 	ldw	r3,128(sp)
10001940:	d8801f17 	ldw	r2,124(sp)
10001944:	da000404 	addi	r8,sp,16
10001948:	003fee06 	br	10001904 <__alt_data_end+0xf8001904>
1000194c:	d9403117 	ldw	r5,196(sp)
10001950:	d8802a17 	ldw	r2,168(sp)
10001954:	28adc83a 	sub	r22,r5,r2
10001958:	05be630e 	bge	zero,r22,100012e8 <__alt_data_end+0xf80012e8>
1000195c:	07000404 	movi	fp,16
10001960:	d8801f17 	ldw	r2,124(sp)
10001964:	e5838f0e 	bge	fp,r22,100027a4 <___vfprintf_internal_r+0x1d88>
10001968:	01440074 	movhi	r5,4097
1000196c:	297e1284 	addi	r5,r5,-1974
10001970:	dc403015 	stw	r17,192(sp)
10001974:	d9402b15 	stw	r5,172(sp)
10001978:	b023883a 	mov	r17,r22
1000197c:	04c001c4 	movi	r19,7
10001980:	a82d883a 	mov	r22,r21
10001984:	902b883a 	mov	r21,r18
10001988:	8025883a 	mov	r18,r16
1000198c:	dc002c17 	ldw	r16,176(sp)
10001990:	00000306 	br	100019a0 <___vfprintf_internal_r+0xf84>
10001994:	8c7ffc04 	addi	r17,r17,-16
10001998:	42000204 	addi	r8,r8,8
1000199c:	e440110e 	bge	fp,r17,100019e4 <___vfprintf_internal_r+0xfc8>
100019a0:	18c00404 	addi	r3,r3,16
100019a4:	10800044 	addi	r2,r2,1
100019a8:	45000015 	stw	r20,0(r8)
100019ac:	47000115 	stw	fp,4(r8)
100019b0:	d8c02015 	stw	r3,128(sp)
100019b4:	d8801f15 	stw	r2,124(sp)
100019b8:	98bff60e 	bge	r19,r2,10001994 <__alt_data_end+0xf8001994>
100019bc:	d9801e04 	addi	r6,sp,120
100019c0:	b80b883a 	mov	r5,r23
100019c4:	8009883a 	mov	r4,r16
100019c8:	00075340 	call	10007534 <__sprint_r>
100019cc:	103d151e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
100019d0:	8c7ffc04 	addi	r17,r17,-16
100019d4:	d8c02017 	ldw	r3,128(sp)
100019d8:	d8801f17 	ldw	r2,124(sp)
100019dc:	da000404 	addi	r8,sp,16
100019e0:	e47fef16 	blt	fp,r17,100019a0 <__alt_data_end+0xf80019a0>
100019e4:	9021883a 	mov	r16,r18
100019e8:	a825883a 	mov	r18,r21
100019ec:	b02b883a 	mov	r21,r22
100019f0:	882d883a 	mov	r22,r17
100019f4:	dc403017 	ldw	r17,192(sp)
100019f8:	d9002b17 	ldw	r4,172(sp)
100019fc:	1d87883a 	add	r3,r3,r22
10001a00:	10800044 	addi	r2,r2,1
10001a04:	41000015 	stw	r4,0(r8)
10001a08:	45800115 	stw	r22,4(r8)
10001a0c:	d8c02015 	stw	r3,128(sp)
10001a10:	d8801f15 	stw	r2,124(sp)
10001a14:	010001c4 	movi	r4,7
10001a18:	20818e16 	blt	r4,r2,10002054 <___vfprintf_internal_r+0x1638>
10001a1c:	42000204 	addi	r8,r8,8
10001a20:	003e3106 	br	100012e8 <__alt_data_end+0xf80012e8>
10001a24:	d9403317 	ldw	r5,204(sp)
10001a28:	00800044 	movi	r2,1
10001a2c:	18c00044 	addi	r3,r3,1
10001a30:	1141530e 	bge	r2,r5,10001f80 <___vfprintf_internal_r+0x1564>
10001a34:	dc401f17 	ldw	r17,124(sp)
10001a38:	00800044 	movi	r2,1
10001a3c:	40800115 	stw	r2,4(r8)
10001a40:	8c400044 	addi	r17,r17,1
10001a44:	44000015 	stw	r16,0(r8)
10001a48:	d8c02015 	stw	r3,128(sp)
10001a4c:	dc401f15 	stw	r17,124(sp)
10001a50:	008001c4 	movi	r2,7
10001a54:	14416b16 	blt	r2,r17,10002004 <___vfprintf_internal_r+0x15e8>
10001a58:	42000204 	addi	r8,r8,8
10001a5c:	d8803717 	ldw	r2,220(sp)
10001a60:	d9003417 	ldw	r4,208(sp)
10001a64:	8c400044 	addi	r17,r17,1
10001a68:	10c7883a 	add	r3,r2,r3
10001a6c:	40800115 	stw	r2,4(r8)
10001a70:	41000015 	stw	r4,0(r8)
10001a74:	d8c02015 	stw	r3,128(sp)
10001a78:	dc401f15 	stw	r17,124(sp)
10001a7c:	008001c4 	movi	r2,7
10001a80:	14416916 	blt	r2,r17,10002028 <___vfprintf_internal_r+0x160c>
10001a84:	45800204 	addi	r22,r8,8
10001a88:	d9003617 	ldw	r4,216(sp)
10001a8c:	d9403817 	ldw	r5,224(sp)
10001a90:	000d883a 	mov	r6,zero
10001a94:	000f883a 	mov	r7,zero
10001a98:	d8c03c15 	stw	r3,240(sp)
10001a9c:	000bb740 	call	1000bb74 <__eqdf2>
10001aa0:	d8c03c17 	ldw	r3,240(sp)
10001aa4:	1000bc26 	beq	r2,zero,10001d98 <___vfprintf_internal_r+0x137c>
10001aa8:	d9403317 	ldw	r5,204(sp)
10001aac:	84000044 	addi	r16,r16,1
10001ab0:	8c400044 	addi	r17,r17,1
10001ab4:	28bfffc4 	addi	r2,r5,-1
10001ab8:	1887883a 	add	r3,r3,r2
10001abc:	b0800115 	stw	r2,4(r22)
10001ac0:	b4000015 	stw	r16,0(r22)
10001ac4:	d8c02015 	stw	r3,128(sp)
10001ac8:	dc401f15 	stw	r17,124(sp)
10001acc:	008001c4 	movi	r2,7
10001ad0:	14414316 	blt	r2,r17,10001fe0 <___vfprintf_internal_r+0x15c4>
10001ad4:	b5800204 	addi	r22,r22,8
10001ad8:	d9003a17 	ldw	r4,232(sp)
10001adc:	df0022c4 	addi	fp,sp,139
10001ae0:	8c400044 	addi	r17,r17,1
10001ae4:	20c7883a 	add	r3,r4,r3
10001ae8:	b7000015 	stw	fp,0(r22)
10001aec:	b1000115 	stw	r4,4(r22)
10001af0:	d8c02015 	stw	r3,128(sp)
10001af4:	dc401f15 	stw	r17,124(sp)
10001af8:	008001c4 	movi	r2,7
10001afc:	14400e16 	blt	r2,r17,10001b38 <___vfprintf_internal_r+0x111c>
10001b00:	b2000204 	addi	r8,r22,8
10001b04:	003e3a06 	br	100013f0 <__alt_data_end+0xf80013f0>
10001b08:	01040074 	movhi	r4,4097
10001b0c:	213e1284 	addi	r4,r4,-1974
10001b10:	d9002b15 	stw	r4,172(sp)
10001b14:	d9002b17 	ldw	r4,172(sp)
10001b18:	1c07883a 	add	r3,r3,r16
10001b1c:	44000115 	stw	r16,4(r8)
10001b20:	41000015 	stw	r4,0(r8)
10001b24:	10800044 	addi	r2,r2,1
10001b28:	d8c02015 	stw	r3,128(sp)
10001b2c:	d8801f15 	stw	r2,124(sp)
10001b30:	010001c4 	movi	r4,7
10001b34:	20be2d0e 	bge	r4,r2,100013ec <__alt_data_end+0xf80013ec>
10001b38:	d9002c17 	ldw	r4,176(sp)
10001b3c:	d9801e04 	addi	r6,sp,120
10001b40:	b80b883a 	mov	r5,r23
10001b44:	00075340 	call	10007534 <__sprint_r>
10001b48:	103cb61e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001b4c:	d8c02017 	ldw	r3,128(sp)
10001b50:	da000404 	addi	r8,sp,16
10001b54:	003e2606 	br	100013f0 <__alt_data_end+0xf80013f0>
10001b58:	d9002c17 	ldw	r4,176(sp)
10001b5c:	d9801e04 	addi	r6,sp,120
10001b60:	b80b883a 	mov	r5,r23
10001b64:	00075340 	call	10007534 <__sprint_r>
10001b68:	103e5d26 	beq	r2,zero,100014e0 <__alt_data_end+0xf80014e0>
10001b6c:	003cad06 	br	10000e24 <__alt_data_end+0xf8000e24>
10001b70:	d9002c17 	ldw	r4,176(sp)
10001b74:	d9801e04 	addi	r6,sp,120
10001b78:	b80b883a 	mov	r5,r23
10001b7c:	00075340 	call	10007534 <__sprint_r>
10001b80:	103ca81e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001b84:	d8c02017 	ldw	r3,128(sp)
10001b88:	da000404 	addi	r8,sp,16
10001b8c:	003e0b06 	br	100013bc <__alt_data_end+0xf80013bc>
10001b90:	d9002c17 	ldw	r4,176(sp)
10001b94:	d9801e04 	addi	r6,sp,120
10001b98:	b80b883a 	mov	r5,r23
10001b9c:	00075340 	call	10007534 <__sprint_r>
10001ba0:	103ca01e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001ba4:	d8c02017 	ldw	r3,128(sp)
10001ba8:	da000404 	addi	r8,sp,16
10001bac:	003dbd06 	br	100012a4 <__alt_data_end+0xf80012a4>
10001bb0:	d9002c17 	ldw	r4,176(sp)
10001bb4:	d9801e04 	addi	r6,sp,120
10001bb8:	b80b883a 	mov	r5,r23
10001bbc:	00075340 	call	10007534 <__sprint_r>
10001bc0:	103c981e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001bc4:	d8c02017 	ldw	r3,128(sp)
10001bc8:	da000404 	addi	r8,sp,16
10001bcc:	003dc306 	br	100012dc <__alt_data_end+0xf80012dc>
10001bd0:	d8802917 	ldw	r2,164(sp)
10001bd4:	d8002785 	stb	zero,158(sp)
10001bd8:	103f0616 	blt	r2,zero,100017f4 <__alt_data_end+0xf80017f4>
10001bdc:	00ffdfc4 	movi	r3,-129
10001be0:	9d84b03a 	or	r2,r19,r22
10001be4:	90e4703a 	and	r18,r18,r3
10001be8:	103c6b26 	beq	r2,zero,10000d98 <__alt_data_end+0xf8000d98>
10001bec:	0039883a 	mov	fp,zero
10001bf0:	003e7406 	br	100015c4 <__alt_data_end+0xf80015c4>
10001bf4:	9080040c 	andi	r2,r18,16
10001bf8:	1001b326 	beq	r2,zero,100022c8 <___vfprintf_internal_r+0x18ac>
10001bfc:	d9002d17 	ldw	r4,180(sp)
10001c00:	d9402917 	ldw	r5,164(sp)
10001c04:	d8002785 	stb	zero,158(sp)
10001c08:	20800104 	addi	r2,r4,4
10001c0c:	24c00017 	ldw	r19,0(r4)
10001c10:	002d883a 	mov	r22,zero
10001c14:	2801b516 	blt	r5,zero,100022ec <___vfprintf_internal_r+0x18d0>
10001c18:	00ffdfc4 	movi	r3,-129
10001c1c:	d8802d15 	stw	r2,180(sp)
10001c20:	90e4703a 	and	r18,r18,r3
10001c24:	983d2726 	beq	r19,zero,100010c4 <__alt_data_end+0xf80010c4>
10001c28:	0039883a 	mov	fp,zero
10001c2c:	003d2a06 	br	100010d8 <__alt_data_end+0xf80010d8>
10001c30:	dc402617 	ldw	r17,152(sp)
10001c34:	0441d30e 	bge	zero,r17,10002384 <___vfprintf_internal_r+0x1968>
10001c38:	dc403217 	ldw	r17,200(sp)
10001c3c:	d8803317 	ldw	r2,204(sp)
10001c40:	1440010e 	bge	r2,r17,10001c48 <___vfprintf_internal_r+0x122c>
10001c44:	1023883a 	mov	r17,r2
10001c48:	04400a0e 	bge	zero,r17,10001c74 <___vfprintf_internal_r+0x1258>
10001c4c:	d8801f17 	ldw	r2,124(sp)
10001c50:	1c47883a 	add	r3,r3,r17
10001c54:	44000015 	stw	r16,0(r8)
10001c58:	10800044 	addi	r2,r2,1
10001c5c:	44400115 	stw	r17,4(r8)
10001c60:	d8c02015 	stw	r3,128(sp)
10001c64:	d8801f15 	stw	r2,124(sp)
10001c68:	010001c4 	movi	r4,7
10001c6c:	20826516 	blt	r4,r2,10002604 <___vfprintf_internal_r+0x1be8>
10001c70:	42000204 	addi	r8,r8,8
10001c74:	88026116 	blt	r17,zero,100025fc <___vfprintf_internal_r+0x1be0>
10001c78:	d9003217 	ldw	r4,200(sp)
10001c7c:	2463c83a 	sub	r17,r4,r17
10001c80:	04407b0e 	bge	zero,r17,10001e70 <___vfprintf_internal_r+0x1454>
10001c84:	05800404 	movi	r22,16
10001c88:	d8801f17 	ldw	r2,124(sp)
10001c8c:	b4419d0e 	bge	r22,r17,10002304 <___vfprintf_internal_r+0x18e8>
10001c90:	01040074 	movhi	r4,4097
10001c94:	213e1284 	addi	r4,r4,-1974
10001c98:	d9002b15 	stw	r4,172(sp)
10001c9c:	070001c4 	movi	fp,7
10001ca0:	dcc02c17 	ldw	r19,176(sp)
10001ca4:	00000306 	br	10001cb4 <___vfprintf_internal_r+0x1298>
10001ca8:	42000204 	addi	r8,r8,8
10001cac:	8c7ffc04 	addi	r17,r17,-16
10001cb0:	b441970e 	bge	r22,r17,10002310 <___vfprintf_internal_r+0x18f4>
10001cb4:	18c00404 	addi	r3,r3,16
10001cb8:	10800044 	addi	r2,r2,1
10001cbc:	45000015 	stw	r20,0(r8)
10001cc0:	45800115 	stw	r22,4(r8)
10001cc4:	d8c02015 	stw	r3,128(sp)
10001cc8:	d8801f15 	stw	r2,124(sp)
10001ccc:	e0bff60e 	bge	fp,r2,10001ca8 <__alt_data_end+0xf8001ca8>
10001cd0:	d9801e04 	addi	r6,sp,120
10001cd4:	b80b883a 	mov	r5,r23
10001cd8:	9809883a 	mov	r4,r19
10001cdc:	00075340 	call	10007534 <__sprint_r>
10001ce0:	103c501e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001ce4:	d8c02017 	ldw	r3,128(sp)
10001ce8:	d8801f17 	ldw	r2,124(sp)
10001cec:	da000404 	addi	r8,sp,16
10001cf0:	003fee06 	br	10001cac <__alt_data_end+0xf8001cac>
10001cf4:	d9002c17 	ldw	r4,176(sp)
10001cf8:	d9801e04 	addi	r6,sp,120
10001cfc:	b80b883a 	mov	r5,r23
10001d00:	00075340 	call	10007534 <__sprint_r>
10001d04:	103c471e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001d08:	d8c02017 	ldw	r3,128(sp)
10001d0c:	df002787 	ldb	fp,158(sp)
10001d10:	da000404 	addi	r8,sp,16
10001d14:	003d5606 	br	10001270 <__alt_data_end+0xf8001270>
10001d18:	9080040c 	andi	r2,r18,16
10001d1c:	10016126 	beq	r2,zero,100022a4 <___vfprintf_internal_r+0x1888>
10001d20:	d8802d17 	ldw	r2,180(sp)
10001d24:	14c00017 	ldw	r19,0(r2)
10001d28:	10800104 	addi	r2,r2,4
10001d2c:	d8802d15 	stw	r2,180(sp)
10001d30:	982dd7fa 	srai	r22,r19,31
10001d34:	b005883a 	mov	r2,r22
10001d38:	003c8206 	br	10000f44 <__alt_data_end+0xf8000f44>
10001d3c:	9080040c 	andi	r2,r18,16
10001d40:	10003526 	beq	r2,zero,10001e18 <___vfprintf_internal_r+0x13fc>
10001d44:	d9402d17 	ldw	r5,180(sp)
10001d48:	d8c02917 	ldw	r3,164(sp)
10001d4c:	d8002785 	stb	zero,158(sp)
10001d50:	28800104 	addi	r2,r5,4
10001d54:	2cc00017 	ldw	r19,0(r5)
10001d58:	002d883a 	mov	r22,zero
10001d5c:	18003716 	blt	r3,zero,10001e3c <___vfprintf_internal_r+0x1420>
10001d60:	00ffdfc4 	movi	r3,-129
10001d64:	d8802d15 	stw	r2,180(sp)
10001d68:	90e4703a 	and	r18,r18,r3
10001d6c:	0039883a 	mov	fp,zero
10001d70:	983df326 	beq	r19,zero,10001540 <__alt_data_end+0xf8001540>
10001d74:	00800244 	movi	r2,9
10001d78:	14fc7b36 	bltu	r2,r19,10000f68 <__alt_data_end+0xf8000f68>
10001d7c:	d8c02817 	ldw	r3,160(sp)
10001d80:	dc001dc4 	addi	r16,sp,119
10001d84:	9cc00c04 	addi	r19,r19,48
10001d88:	1c07c83a 	sub	r3,r3,r16
10001d8c:	dcc01dc5 	stb	r19,119(sp)
10001d90:	d8c02e15 	stw	r3,184(sp)
10001d94:	003ce806 	br	10001138 <__alt_data_end+0xf8001138>
10001d98:	d8803317 	ldw	r2,204(sp)
10001d9c:	143fffc4 	addi	r16,r2,-1
10001da0:	043f4d0e 	bge	zero,r16,10001ad8 <__alt_data_end+0xf8001ad8>
10001da4:	07000404 	movi	fp,16
10001da8:	e400810e 	bge	fp,r16,10001fb0 <___vfprintf_internal_r+0x1594>
10001dac:	01440074 	movhi	r5,4097
10001db0:	297e1284 	addi	r5,r5,-1974
10001db4:	d9402b15 	stw	r5,172(sp)
10001db8:	01c001c4 	movi	r7,7
10001dbc:	dcc02c17 	ldw	r19,176(sp)
10001dc0:	00000306 	br	10001dd0 <___vfprintf_internal_r+0x13b4>
10001dc4:	b5800204 	addi	r22,r22,8
10001dc8:	843ffc04 	addi	r16,r16,-16
10001dcc:	e4007b0e 	bge	fp,r16,10001fbc <___vfprintf_internal_r+0x15a0>
10001dd0:	18c00404 	addi	r3,r3,16
10001dd4:	8c400044 	addi	r17,r17,1
10001dd8:	b5000015 	stw	r20,0(r22)
10001ddc:	b7000115 	stw	fp,4(r22)
10001de0:	d8c02015 	stw	r3,128(sp)
10001de4:	dc401f15 	stw	r17,124(sp)
10001de8:	3c7ff60e 	bge	r7,r17,10001dc4 <__alt_data_end+0xf8001dc4>
10001dec:	d9801e04 	addi	r6,sp,120
10001df0:	b80b883a 	mov	r5,r23
10001df4:	9809883a 	mov	r4,r19
10001df8:	d9c03c15 	stw	r7,240(sp)
10001dfc:	00075340 	call	10007534 <__sprint_r>
10001e00:	d9c03c17 	ldw	r7,240(sp)
10001e04:	103c071e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001e08:	d8c02017 	ldw	r3,128(sp)
10001e0c:	dc401f17 	ldw	r17,124(sp)
10001e10:	dd800404 	addi	r22,sp,16
10001e14:	003fec06 	br	10001dc8 <__alt_data_end+0xf8001dc8>
10001e18:	9080100c 	andi	r2,r18,64
10001e1c:	d8002785 	stb	zero,158(sp)
10001e20:	10010e26 	beq	r2,zero,1000225c <___vfprintf_internal_r+0x1840>
10001e24:	d9002d17 	ldw	r4,180(sp)
10001e28:	d9402917 	ldw	r5,164(sp)
10001e2c:	002d883a 	mov	r22,zero
10001e30:	20800104 	addi	r2,r4,4
10001e34:	24c0000b 	ldhu	r19,0(r4)
10001e38:	283fc90e 	bge	r5,zero,10001d60 <__alt_data_end+0xf8001d60>
10001e3c:	d8802d15 	stw	r2,180(sp)
10001e40:	0039883a 	mov	fp,zero
10001e44:	9d84b03a 	or	r2,r19,r22
10001e48:	103c461e 	bne	r2,zero,10000f64 <__alt_data_end+0xf8000f64>
10001e4c:	00800044 	movi	r2,1
10001e50:	003e6c06 	br	10001804 <__alt_data_end+0xf8001804>
10001e54:	d9002c17 	ldw	r4,176(sp)
10001e58:	d9801e04 	addi	r6,sp,120
10001e5c:	b80b883a 	mov	r5,r23
10001e60:	00075340 	call	10007534 <__sprint_r>
10001e64:	103bef1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001e68:	d8c02017 	ldw	r3,128(sp)
10001e6c:	da000404 	addi	r8,sp,16
10001e70:	d9003217 	ldw	r4,200(sp)
10001e74:	d8802617 	ldw	r2,152(sp)
10001e78:	d9403317 	ldw	r5,204(sp)
10001e7c:	8123883a 	add	r17,r16,r4
10001e80:	11400216 	blt	r2,r5,10001e8c <___vfprintf_internal_r+0x1470>
10001e84:	9100004c 	andi	r4,r18,1
10001e88:	20000d26 	beq	r4,zero,10001ec0 <___vfprintf_internal_r+0x14a4>
10001e8c:	d9003717 	ldw	r4,220(sp)
10001e90:	d9403417 	ldw	r5,208(sp)
10001e94:	1907883a 	add	r3,r3,r4
10001e98:	d9001f17 	ldw	r4,124(sp)
10001e9c:	41400015 	stw	r5,0(r8)
10001ea0:	d9403717 	ldw	r5,220(sp)
10001ea4:	21000044 	addi	r4,r4,1
10001ea8:	d8c02015 	stw	r3,128(sp)
10001eac:	41400115 	stw	r5,4(r8)
10001eb0:	d9001f15 	stw	r4,124(sp)
10001eb4:	014001c4 	movi	r5,7
10001eb8:	2901e816 	blt	r5,r4,1000265c <___vfprintf_internal_r+0x1c40>
10001ebc:	42000204 	addi	r8,r8,8
10001ec0:	d9003317 	ldw	r4,204(sp)
10001ec4:	8121883a 	add	r16,r16,r4
10001ec8:	2085c83a 	sub	r2,r4,r2
10001ecc:	8461c83a 	sub	r16,r16,r17
10001ed0:	1400010e 	bge	r2,r16,10001ed8 <___vfprintf_internal_r+0x14bc>
10001ed4:	1021883a 	mov	r16,r2
10001ed8:	04000a0e 	bge	zero,r16,10001f04 <___vfprintf_internal_r+0x14e8>
10001edc:	d9001f17 	ldw	r4,124(sp)
10001ee0:	1c07883a 	add	r3,r3,r16
10001ee4:	44400015 	stw	r17,0(r8)
10001ee8:	21000044 	addi	r4,r4,1
10001eec:	44000115 	stw	r16,4(r8)
10001ef0:	d8c02015 	stw	r3,128(sp)
10001ef4:	d9001f15 	stw	r4,124(sp)
10001ef8:	014001c4 	movi	r5,7
10001efc:	2901fb16 	blt	r5,r4,100026ec <___vfprintf_internal_r+0x1cd0>
10001f00:	42000204 	addi	r8,r8,8
10001f04:	8001f716 	blt	r16,zero,100026e4 <___vfprintf_internal_r+0x1cc8>
10001f08:	1421c83a 	sub	r16,r2,r16
10001f0c:	043d380e 	bge	zero,r16,100013f0 <__alt_data_end+0xf80013f0>
10001f10:	04400404 	movi	r17,16
10001f14:	d8801f17 	ldw	r2,124(sp)
10001f18:	8c3efb0e 	bge	r17,r16,10001b08 <__alt_data_end+0xf8001b08>
10001f1c:	01440074 	movhi	r5,4097
10001f20:	297e1284 	addi	r5,r5,-1974
10001f24:	d9402b15 	stw	r5,172(sp)
10001f28:	058001c4 	movi	r22,7
10001f2c:	dcc02c17 	ldw	r19,176(sp)
10001f30:	00000306 	br	10001f40 <___vfprintf_internal_r+0x1524>
10001f34:	42000204 	addi	r8,r8,8
10001f38:	843ffc04 	addi	r16,r16,-16
10001f3c:	8c3ef50e 	bge	r17,r16,10001b14 <__alt_data_end+0xf8001b14>
10001f40:	18c00404 	addi	r3,r3,16
10001f44:	10800044 	addi	r2,r2,1
10001f48:	45000015 	stw	r20,0(r8)
10001f4c:	44400115 	stw	r17,4(r8)
10001f50:	d8c02015 	stw	r3,128(sp)
10001f54:	d8801f15 	stw	r2,124(sp)
10001f58:	b0bff60e 	bge	r22,r2,10001f34 <__alt_data_end+0xf8001f34>
10001f5c:	d9801e04 	addi	r6,sp,120
10001f60:	b80b883a 	mov	r5,r23
10001f64:	9809883a 	mov	r4,r19
10001f68:	00075340 	call	10007534 <__sprint_r>
10001f6c:	103bad1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001f70:	d8c02017 	ldw	r3,128(sp)
10001f74:	d8801f17 	ldw	r2,124(sp)
10001f78:	da000404 	addi	r8,sp,16
10001f7c:	003fee06 	br	10001f38 <__alt_data_end+0xf8001f38>
10001f80:	9088703a 	and	r4,r18,r2
10001f84:	203eab1e 	bne	r4,zero,10001a34 <__alt_data_end+0xf8001a34>
10001f88:	dc401f17 	ldw	r17,124(sp)
10001f8c:	40800115 	stw	r2,4(r8)
10001f90:	44000015 	stw	r16,0(r8)
10001f94:	8c400044 	addi	r17,r17,1
10001f98:	d8c02015 	stw	r3,128(sp)
10001f9c:	dc401f15 	stw	r17,124(sp)
10001fa0:	008001c4 	movi	r2,7
10001fa4:	14400e16 	blt	r2,r17,10001fe0 <___vfprintf_internal_r+0x15c4>
10001fa8:	45800204 	addi	r22,r8,8
10001fac:	003eca06 	br	10001ad8 <__alt_data_end+0xf8001ad8>
10001fb0:	01040074 	movhi	r4,4097
10001fb4:	213e1284 	addi	r4,r4,-1974
10001fb8:	d9002b15 	stw	r4,172(sp)
10001fbc:	d8802b17 	ldw	r2,172(sp)
10001fc0:	1c07883a 	add	r3,r3,r16
10001fc4:	8c400044 	addi	r17,r17,1
10001fc8:	b0800015 	stw	r2,0(r22)
10001fcc:	b4000115 	stw	r16,4(r22)
10001fd0:	d8c02015 	stw	r3,128(sp)
10001fd4:	dc401f15 	stw	r17,124(sp)
10001fd8:	008001c4 	movi	r2,7
10001fdc:	147ebd0e 	bge	r2,r17,10001ad4 <__alt_data_end+0xf8001ad4>
10001fe0:	d9002c17 	ldw	r4,176(sp)
10001fe4:	d9801e04 	addi	r6,sp,120
10001fe8:	b80b883a 	mov	r5,r23
10001fec:	00075340 	call	10007534 <__sprint_r>
10001ff0:	103b8c1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10001ff4:	d8c02017 	ldw	r3,128(sp)
10001ff8:	dc401f17 	ldw	r17,124(sp)
10001ffc:	dd800404 	addi	r22,sp,16
10002000:	003eb506 	br	10001ad8 <__alt_data_end+0xf8001ad8>
10002004:	d9002c17 	ldw	r4,176(sp)
10002008:	d9801e04 	addi	r6,sp,120
1000200c:	b80b883a 	mov	r5,r23
10002010:	00075340 	call	10007534 <__sprint_r>
10002014:	103b831e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002018:	d8c02017 	ldw	r3,128(sp)
1000201c:	dc401f17 	ldw	r17,124(sp)
10002020:	da000404 	addi	r8,sp,16
10002024:	003e8d06 	br	10001a5c <__alt_data_end+0xf8001a5c>
10002028:	d9002c17 	ldw	r4,176(sp)
1000202c:	d9801e04 	addi	r6,sp,120
10002030:	b80b883a 	mov	r5,r23
10002034:	00075340 	call	10007534 <__sprint_r>
10002038:	103b7a1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
1000203c:	d8c02017 	ldw	r3,128(sp)
10002040:	dc401f17 	ldw	r17,124(sp)
10002044:	dd800404 	addi	r22,sp,16
10002048:	003e8f06 	br	10001a88 <__alt_data_end+0xf8001a88>
1000204c:	0027883a 	mov	r19,zero
10002050:	003f4a06 	br	10001d7c <__alt_data_end+0xf8001d7c>
10002054:	d9002c17 	ldw	r4,176(sp)
10002058:	d9801e04 	addi	r6,sp,120
1000205c:	b80b883a 	mov	r5,r23
10002060:	00075340 	call	10007534 <__sprint_r>
10002064:	103b6f1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002068:	d8c02017 	ldw	r3,128(sp)
1000206c:	da000404 	addi	r8,sp,16
10002070:	003c9d06 	br	100012e8 <__alt_data_end+0xf80012e8>
10002074:	04e7c83a 	sub	r19,zero,r19
10002078:	9804c03a 	cmpne	r2,r19,zero
1000207c:	05adc83a 	sub	r22,zero,r22
10002080:	b0adc83a 	sub	r22,r22,r2
10002084:	d8802917 	ldw	r2,164(sp)
10002088:	07000b44 	movi	fp,45
1000208c:	df002785 	stb	fp,158(sp)
10002090:	10017b16 	blt	r2,zero,10002680 <___vfprintf_internal_r+0x1c64>
10002094:	00bfdfc4 	movi	r2,-129
10002098:	90a4703a 	and	r18,r18,r2
1000209c:	003bb106 	br	10000f64 <__alt_data_end+0xf8000f64>
100020a0:	d9003617 	ldw	r4,216(sp)
100020a4:	d9403817 	ldw	r5,224(sp)
100020a8:	da003d15 	stw	r8,244(sp)
100020ac:	00070c00 	call	100070c0 <__fpclassifyd>
100020b0:	da003d17 	ldw	r8,244(sp)
100020b4:	1000f026 	beq	r2,zero,10002478 <___vfprintf_internal_r+0x1a5c>
100020b8:	d9002917 	ldw	r4,164(sp)
100020bc:	05bff7c4 	movi	r22,-33
100020c0:	00bfffc4 	movi	r2,-1
100020c4:	8dac703a 	and	r22,r17,r22
100020c8:	20820026 	beq	r4,r2,100028cc <___vfprintf_internal_r+0x1eb0>
100020cc:	008011c4 	movi	r2,71
100020d0:	b081f726 	beq	r22,r2,100028b0 <___vfprintf_internal_r+0x1e94>
100020d4:	d9003817 	ldw	r4,224(sp)
100020d8:	90c04014 	ori	r3,r18,256
100020dc:	d8c02b15 	stw	r3,172(sp)
100020e0:	20021516 	blt	r4,zero,10002938 <___vfprintf_internal_r+0x1f1c>
100020e4:	dcc03817 	ldw	r19,224(sp)
100020e8:	d8002a05 	stb	zero,168(sp)
100020ec:	00801984 	movi	r2,102
100020f0:	8881f926 	beq	r17,r2,100028d8 <___vfprintf_internal_r+0x1ebc>
100020f4:	00801184 	movi	r2,70
100020f8:	88821c26 	beq	r17,r2,1000296c <___vfprintf_internal_r+0x1f50>
100020fc:	00801144 	movi	r2,69
10002100:	b081ef26 	beq	r22,r2,100028c0 <___vfprintf_internal_r+0x1ea4>
10002104:	d8c02917 	ldw	r3,164(sp)
10002108:	d8802104 	addi	r2,sp,132
1000210c:	d8800315 	stw	r2,12(sp)
10002110:	d9403617 	ldw	r5,216(sp)
10002114:	d8802504 	addi	r2,sp,148
10002118:	d9002c17 	ldw	r4,176(sp)
1000211c:	d8800215 	stw	r2,8(sp)
10002120:	d8802604 	addi	r2,sp,152
10002124:	d8c00015 	stw	r3,0(sp)
10002128:	d8800115 	stw	r2,4(sp)
1000212c:	01c00084 	movi	r7,2
10002130:	980d883a 	mov	r6,r19
10002134:	d8c03c15 	stw	r3,240(sp)
10002138:	da003d15 	stw	r8,244(sp)
1000213c:	00030400 	call	10003040 <_dtoa_r>
10002140:	1021883a 	mov	r16,r2
10002144:	008019c4 	movi	r2,103
10002148:	d8c03c17 	ldw	r3,240(sp)
1000214c:	da003d17 	ldw	r8,244(sp)
10002150:	88817126 	beq	r17,r2,10002718 <___vfprintf_internal_r+0x1cfc>
10002154:	008011c4 	movi	r2,71
10002158:	88829226 	beq	r17,r2,10002ba4 <___vfprintf_internal_r+0x2188>
1000215c:	80f9883a 	add	fp,r16,r3
10002160:	d9003617 	ldw	r4,216(sp)
10002164:	000d883a 	mov	r6,zero
10002168:	000f883a 	mov	r7,zero
1000216c:	980b883a 	mov	r5,r19
10002170:	da003d15 	stw	r8,244(sp)
10002174:	000bb740 	call	1000bb74 <__eqdf2>
10002178:	da003d17 	ldw	r8,244(sp)
1000217c:	10018d26 	beq	r2,zero,100027b4 <___vfprintf_internal_r+0x1d98>
10002180:	d8802117 	ldw	r2,132(sp)
10002184:	1700062e 	bgeu	r2,fp,100021a0 <___vfprintf_internal_r+0x1784>
10002188:	01000c04 	movi	r4,48
1000218c:	10c00044 	addi	r3,r2,1
10002190:	d8c02115 	stw	r3,132(sp)
10002194:	11000005 	stb	r4,0(r2)
10002198:	d8802117 	ldw	r2,132(sp)
1000219c:	173ffb36 	bltu	r2,fp,1000218c <__alt_data_end+0xf800218c>
100021a0:	1405c83a 	sub	r2,r2,r16
100021a4:	d8803315 	stw	r2,204(sp)
100021a8:	008011c4 	movi	r2,71
100021ac:	b0817626 	beq	r22,r2,10002788 <___vfprintf_internal_r+0x1d6c>
100021b0:	00801944 	movi	r2,101
100021b4:	1442810e 	bge	r2,r17,10002bbc <___vfprintf_internal_r+0x21a0>
100021b8:	d8c02617 	ldw	r3,152(sp)
100021bc:	00801984 	movi	r2,102
100021c0:	d8c03215 	stw	r3,200(sp)
100021c4:	8881fe26 	beq	r17,r2,100029c0 <___vfprintf_internal_r+0x1fa4>
100021c8:	d8c03217 	ldw	r3,200(sp)
100021cc:	d9003317 	ldw	r4,204(sp)
100021d0:	1901dd16 	blt	r3,r4,10002948 <___vfprintf_internal_r+0x1f2c>
100021d4:	9480004c 	andi	r18,r18,1
100021d8:	90022b1e 	bne	r18,zero,10002a88 <___vfprintf_internal_r+0x206c>
100021dc:	1805883a 	mov	r2,r3
100021e0:	18028016 	blt	r3,zero,10002be4 <___vfprintf_internal_r+0x21c8>
100021e4:	d8c03217 	ldw	r3,200(sp)
100021e8:	044019c4 	movi	r17,103
100021ec:	d8c02e15 	stw	r3,184(sp)
100021f0:	df002a07 	ldb	fp,168(sp)
100021f4:	e001531e 	bne	fp,zero,10002744 <___vfprintf_internal_r+0x1d28>
100021f8:	df002783 	ldbu	fp,158(sp)
100021fc:	d8802a15 	stw	r2,168(sp)
10002200:	dc802b17 	ldw	r18,172(sp)
10002204:	d8002915 	stw	zero,164(sp)
10002208:	003bd106 	br	10001150 <__alt_data_end+0xf8001150>
1000220c:	d8802d17 	ldw	r2,180(sp)
10002210:	d8c02d17 	ldw	r3,180(sp)
10002214:	d9002d17 	ldw	r4,180(sp)
10002218:	10800017 	ldw	r2,0(r2)
1000221c:	18c00117 	ldw	r3,4(r3)
10002220:	21000204 	addi	r4,r4,8
10002224:	d8803615 	stw	r2,216(sp)
10002228:	d8c03815 	stw	r3,224(sp)
1000222c:	d9002d15 	stw	r4,180(sp)
10002230:	003b7506 	br	10001008 <__alt_data_end+0xf8001008>
10002234:	ac400007 	ldb	r17,0(r21)
10002238:	003a5906 	br	10000ba0 <__alt_data_end+0xf8000ba0>
1000223c:	9080100c 	andi	r2,r18,64
10002240:	1000a826 	beq	r2,zero,100024e4 <___vfprintf_internal_r+0x1ac8>
10002244:	d9002d17 	ldw	r4,180(sp)
10002248:	002d883a 	mov	r22,zero
1000224c:	24c0000b 	ldhu	r19,0(r4)
10002250:	21000104 	addi	r4,r4,4
10002254:	d9002d15 	stw	r4,180(sp)
10002258:	003ccb06 	br	10001588 <__alt_data_end+0xf8001588>
1000225c:	d8c02d17 	ldw	r3,180(sp)
10002260:	d9002917 	ldw	r4,164(sp)
10002264:	002d883a 	mov	r22,zero
10002268:	18800104 	addi	r2,r3,4
1000226c:	1cc00017 	ldw	r19,0(r3)
10002270:	203ebb0e 	bge	r4,zero,10001d60 <__alt_data_end+0xf8001d60>
10002274:	003ef106 	br	10001e3c <__alt_data_end+0xf8001e3c>
10002278:	9080040c 	andi	r2,r18,16
1000227c:	1000921e 	bne	r2,zero,100024c8 <___vfprintf_internal_r+0x1aac>
10002280:	9480100c 	andi	r18,r18,64
10002284:	90013926 	beq	r18,zero,1000276c <___vfprintf_internal_r+0x1d50>
10002288:	d9002d17 	ldw	r4,180(sp)
1000228c:	d9402f17 	ldw	r5,188(sp)
10002290:	20800017 	ldw	r2,0(r4)
10002294:	21000104 	addi	r4,r4,4
10002298:	d9002d15 	stw	r4,180(sp)
1000229c:	1140000d 	sth	r5,0(r2)
100022a0:	003a1606 	br	10000afc <__alt_data_end+0xf8000afc>
100022a4:	9080100c 	andi	r2,r18,64
100022a8:	10008026 	beq	r2,zero,100024ac <___vfprintf_internal_r+0x1a90>
100022ac:	d8c02d17 	ldw	r3,180(sp)
100022b0:	1cc0000f 	ldh	r19,0(r3)
100022b4:	18c00104 	addi	r3,r3,4
100022b8:	d8c02d15 	stw	r3,180(sp)
100022bc:	982dd7fa 	srai	r22,r19,31
100022c0:	b005883a 	mov	r2,r22
100022c4:	003b1f06 	br	10000f44 <__alt_data_end+0xf8000f44>
100022c8:	9080100c 	andi	r2,r18,64
100022cc:	d8002785 	stb	zero,158(sp)
100022d0:	10008a1e 	bne	r2,zero,100024fc <___vfprintf_internal_r+0x1ae0>
100022d4:	d9402d17 	ldw	r5,180(sp)
100022d8:	d8c02917 	ldw	r3,164(sp)
100022dc:	002d883a 	mov	r22,zero
100022e0:	28800104 	addi	r2,r5,4
100022e4:	2cc00017 	ldw	r19,0(r5)
100022e8:	183e4b0e 	bge	r3,zero,10001c18 <__alt_data_end+0xf8001c18>
100022ec:	9d86b03a 	or	r3,r19,r22
100022f0:	d8802d15 	stw	r2,180(sp)
100022f4:	183e4c1e 	bne	r3,zero,10001c28 <__alt_data_end+0xf8001c28>
100022f8:	0039883a 	mov	fp,zero
100022fc:	0005883a 	mov	r2,zero
10002300:	003d4006 	br	10001804 <__alt_data_end+0xf8001804>
10002304:	01440074 	movhi	r5,4097
10002308:	297e1284 	addi	r5,r5,-1974
1000230c:	d9402b15 	stw	r5,172(sp)
10002310:	d9402b17 	ldw	r5,172(sp)
10002314:	1c47883a 	add	r3,r3,r17
10002318:	10800044 	addi	r2,r2,1
1000231c:	41400015 	stw	r5,0(r8)
10002320:	44400115 	stw	r17,4(r8)
10002324:	d8c02015 	stw	r3,128(sp)
10002328:	d8801f15 	stw	r2,124(sp)
1000232c:	010001c4 	movi	r4,7
10002330:	20bec816 	blt	r4,r2,10001e54 <__alt_data_end+0xf8001e54>
10002334:	42000204 	addi	r8,r8,8
10002338:	003ecd06 	br	10001e70 <__alt_data_end+0xf8001e70>
1000233c:	d9002917 	ldw	r4,164(sp)
10002340:	d8002785 	stb	zero,158(sp)
10002344:	203d2d16 	blt	r4,zero,100017fc <__alt_data_end+0xf80017fc>
10002348:	00bfdfc4 	movi	r2,-129
1000234c:	90a4703a 	and	r18,r18,r2
10002350:	003a9106 	br	10000d98 <__alt_data_end+0xf8000d98>
10002354:	01040074 	movhi	r4,4097
10002358:	213e1284 	addi	r4,r4,-1974
1000235c:	d9002b15 	stw	r4,172(sp)
10002360:	003c0c06 	br	10001394 <__alt_data_end+0xf8001394>
10002364:	d9002c17 	ldw	r4,176(sp)
10002368:	d9801e04 	addi	r6,sp,120
1000236c:	b80b883a 	mov	r5,r23
10002370:	00075340 	call	10007534 <__sprint_r>
10002374:	103aab1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002378:	d8c02017 	ldw	r3,128(sp)
1000237c:	da000404 	addi	r8,sp,16
10002380:	003d4106 	br	10001888 <__alt_data_end+0xf8001888>
10002384:	d8801f17 	ldw	r2,124(sp)
10002388:	01440074 	movhi	r5,4097
1000238c:	01000044 	movi	r4,1
10002390:	18c00044 	addi	r3,r3,1
10002394:	10800044 	addi	r2,r2,1
10002398:	297e1204 	addi	r5,r5,-1976
1000239c:	41000115 	stw	r4,4(r8)
100023a0:	41400015 	stw	r5,0(r8)
100023a4:	d8c02015 	stw	r3,128(sp)
100023a8:	d8801f15 	stw	r2,124(sp)
100023ac:	010001c4 	movi	r4,7
100023b0:	20805c16 	blt	r4,r2,10002524 <___vfprintf_internal_r+0x1b08>
100023b4:	42000204 	addi	r8,r8,8
100023b8:	8800041e 	bne	r17,zero,100023cc <___vfprintf_internal_r+0x19b0>
100023bc:	d8803317 	ldw	r2,204(sp)
100023c0:	1000021e 	bne	r2,zero,100023cc <___vfprintf_internal_r+0x19b0>
100023c4:	9080004c 	andi	r2,r18,1
100023c8:	103c0926 	beq	r2,zero,100013f0 <__alt_data_end+0xf80013f0>
100023cc:	d9003717 	ldw	r4,220(sp)
100023d0:	d8801f17 	ldw	r2,124(sp)
100023d4:	d9403417 	ldw	r5,208(sp)
100023d8:	20c7883a 	add	r3,r4,r3
100023dc:	10800044 	addi	r2,r2,1
100023e0:	41000115 	stw	r4,4(r8)
100023e4:	41400015 	stw	r5,0(r8)
100023e8:	d8c02015 	stw	r3,128(sp)
100023ec:	d8801f15 	stw	r2,124(sp)
100023f0:	010001c4 	movi	r4,7
100023f4:	20812116 	blt	r4,r2,1000287c <___vfprintf_internal_r+0x1e60>
100023f8:	42000204 	addi	r8,r8,8
100023fc:	0463c83a 	sub	r17,zero,r17
10002400:	0440730e 	bge	zero,r17,100025d0 <___vfprintf_internal_r+0x1bb4>
10002404:	05800404 	movi	r22,16
10002408:	b440860e 	bge	r22,r17,10002624 <___vfprintf_internal_r+0x1c08>
1000240c:	01440074 	movhi	r5,4097
10002410:	297e1284 	addi	r5,r5,-1974
10002414:	d9402b15 	stw	r5,172(sp)
10002418:	070001c4 	movi	fp,7
1000241c:	dcc02c17 	ldw	r19,176(sp)
10002420:	00000306 	br	10002430 <___vfprintf_internal_r+0x1a14>
10002424:	42000204 	addi	r8,r8,8
10002428:	8c7ffc04 	addi	r17,r17,-16
1000242c:	b440800e 	bge	r22,r17,10002630 <___vfprintf_internal_r+0x1c14>
10002430:	18c00404 	addi	r3,r3,16
10002434:	10800044 	addi	r2,r2,1
10002438:	45000015 	stw	r20,0(r8)
1000243c:	45800115 	stw	r22,4(r8)
10002440:	d8c02015 	stw	r3,128(sp)
10002444:	d8801f15 	stw	r2,124(sp)
10002448:	e0bff60e 	bge	fp,r2,10002424 <__alt_data_end+0xf8002424>
1000244c:	d9801e04 	addi	r6,sp,120
10002450:	b80b883a 	mov	r5,r23
10002454:	9809883a 	mov	r4,r19
10002458:	00075340 	call	10007534 <__sprint_r>
1000245c:	103a711e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002460:	d8c02017 	ldw	r3,128(sp)
10002464:	d8801f17 	ldw	r2,124(sp)
10002468:	da000404 	addi	r8,sp,16
1000246c:	003fee06 	br	10002428 <__alt_data_end+0xf8002428>
10002470:	00bfffc4 	movi	r2,-1
10002474:	003a6f06 	br	10000e34 <__alt_data_end+0xf8000e34>
10002478:	008011c4 	movi	r2,71
1000247c:	1440b816 	blt	r2,r17,10002760 <___vfprintf_internal_r+0x1d44>
10002480:	04040074 	movhi	r16,4097
10002484:	843e0404 	addi	r16,r16,-2032
10002488:	00c000c4 	movi	r3,3
1000248c:	00bfdfc4 	movi	r2,-129
10002490:	d8c02a15 	stw	r3,168(sp)
10002494:	90a4703a 	and	r18,r18,r2
10002498:	df002783 	ldbu	fp,158(sp)
1000249c:	d8c02e15 	stw	r3,184(sp)
100024a0:	d8002915 	stw	zero,164(sp)
100024a4:	d8003215 	stw	zero,200(sp)
100024a8:	003b2906 	br	10001150 <__alt_data_end+0xf8001150>
100024ac:	d9002d17 	ldw	r4,180(sp)
100024b0:	24c00017 	ldw	r19,0(r4)
100024b4:	21000104 	addi	r4,r4,4
100024b8:	d9002d15 	stw	r4,180(sp)
100024bc:	982dd7fa 	srai	r22,r19,31
100024c0:	b005883a 	mov	r2,r22
100024c4:	003a9f06 	br	10000f44 <__alt_data_end+0xf8000f44>
100024c8:	d9402d17 	ldw	r5,180(sp)
100024cc:	d8c02f17 	ldw	r3,188(sp)
100024d0:	28800017 	ldw	r2,0(r5)
100024d4:	29400104 	addi	r5,r5,4
100024d8:	d9402d15 	stw	r5,180(sp)
100024dc:	10c00015 	stw	r3,0(r2)
100024e0:	00398606 	br	10000afc <__alt_data_end+0xf8000afc>
100024e4:	d9402d17 	ldw	r5,180(sp)
100024e8:	002d883a 	mov	r22,zero
100024ec:	2cc00017 	ldw	r19,0(r5)
100024f0:	29400104 	addi	r5,r5,4
100024f4:	d9402d15 	stw	r5,180(sp)
100024f8:	003c2306 	br	10001588 <__alt_data_end+0xf8001588>
100024fc:	d8c02d17 	ldw	r3,180(sp)
10002500:	d9002917 	ldw	r4,164(sp)
10002504:	002d883a 	mov	r22,zero
10002508:	18800104 	addi	r2,r3,4
1000250c:	1cc0000b 	ldhu	r19,0(r3)
10002510:	203dc10e 	bge	r4,zero,10001c18 <__alt_data_end+0xf8001c18>
10002514:	003f7506 	br	100022ec <__alt_data_end+0xf80022ec>
10002518:	04040074 	movhi	r16,4097
1000251c:	843e0204 	addi	r16,r16,-2040
10002520:	003acc06 	br	10001054 <__alt_data_end+0xf8001054>
10002524:	d9002c17 	ldw	r4,176(sp)
10002528:	d9801e04 	addi	r6,sp,120
1000252c:	b80b883a 	mov	r5,r23
10002530:	00075340 	call	10007534 <__sprint_r>
10002534:	103a3b1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002538:	dc402617 	ldw	r17,152(sp)
1000253c:	d8c02017 	ldw	r3,128(sp)
10002540:	da000404 	addi	r8,sp,16
10002544:	003f9c06 	br	100023b8 <__alt_data_end+0xf80023b8>
10002548:	ac400043 	ldbu	r17,1(r21)
1000254c:	94800814 	ori	r18,r18,32
10002550:	ad400044 	addi	r21,r21,1
10002554:	8c403fcc 	andi	r17,r17,255
10002558:	8c40201c 	xori	r17,r17,128
1000255c:	8c7fe004 	addi	r17,r17,-128
10002560:	00398f06 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10002564:	d8c02d15 	stw	r3,180(sp)
10002568:	0039883a 	mov	fp,zero
1000256c:	003e3506 	br	10001e44 <__alt_data_end+0xf8001e44>
10002570:	d9002c17 	ldw	r4,176(sp)
10002574:	d9801e04 	addi	r6,sp,120
10002578:	b80b883a 	mov	r5,r23
1000257c:	00075340 	call	10007534 <__sprint_r>
10002580:	103a281e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002584:	d8c02017 	ldw	r3,128(sp)
10002588:	da000404 	addi	r8,sp,16
1000258c:	003cd006 	br	100018d0 <__alt_data_end+0xf80018d0>
10002590:	8009883a 	mov	r4,r16
10002594:	da003d15 	stw	r8,244(sp)
10002598:	00073a00 	call	100073a0 <strlen>
1000259c:	d8802e15 	stw	r2,184(sp)
100025a0:	da003d17 	ldw	r8,244(sp)
100025a4:	103c340e 	bge	r2,zero,10001678 <__alt_data_end+0xf8001678>
100025a8:	0005883a 	mov	r2,zero
100025ac:	003c3206 	br	10001678 <__alt_data_end+0xf8001678>
100025b0:	d9002c17 	ldw	r4,176(sp)
100025b4:	d9801e04 	addi	r6,sp,120
100025b8:	b80b883a 	mov	r5,r23
100025bc:	00075340 	call	10007534 <__sprint_r>
100025c0:	103a181e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
100025c4:	d8c02017 	ldw	r3,128(sp)
100025c8:	d8801f17 	ldw	r2,124(sp)
100025cc:	da000404 	addi	r8,sp,16
100025d0:	d9403317 	ldw	r5,204(sp)
100025d4:	10800044 	addi	r2,r2,1
100025d8:	44000015 	stw	r16,0(r8)
100025dc:	28c7883a 	add	r3,r5,r3
100025e0:	003b7d06 	br	100013d8 <__alt_data_end+0xf80013d8>
100025e4:	01040074 	movhi	r4,4097
100025e8:	213e1684 	addi	r4,r4,-1958
100025ec:	d9003515 	stw	r4,212(sp)
100025f0:	003b1406 	br	10001244 <__alt_data_end+0xf8001244>
100025f4:	013fffc4 	movi	r4,-1
100025f8:	003a3506 	br	10000ed0 <__alt_data_end+0xf8000ed0>
100025fc:	0023883a 	mov	r17,zero
10002600:	003d9d06 	br	10001c78 <__alt_data_end+0xf8001c78>
10002604:	d9002c17 	ldw	r4,176(sp)
10002608:	d9801e04 	addi	r6,sp,120
1000260c:	b80b883a 	mov	r5,r23
10002610:	00075340 	call	10007534 <__sprint_r>
10002614:	103a031e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002618:	d8c02017 	ldw	r3,128(sp)
1000261c:	da000404 	addi	r8,sp,16
10002620:	003d9406 	br	10001c74 <__alt_data_end+0xf8001c74>
10002624:	01040074 	movhi	r4,4097
10002628:	213e1284 	addi	r4,r4,-1974
1000262c:	d9002b15 	stw	r4,172(sp)
10002630:	d9002b17 	ldw	r4,172(sp)
10002634:	1c47883a 	add	r3,r3,r17
10002638:	10800044 	addi	r2,r2,1
1000263c:	41000015 	stw	r4,0(r8)
10002640:	44400115 	stw	r17,4(r8)
10002644:	d8c02015 	stw	r3,128(sp)
10002648:	d8801f15 	stw	r2,124(sp)
1000264c:	010001c4 	movi	r4,7
10002650:	20bfd716 	blt	r4,r2,100025b0 <__alt_data_end+0xf80025b0>
10002654:	42000204 	addi	r8,r8,8
10002658:	003fdd06 	br	100025d0 <__alt_data_end+0xf80025d0>
1000265c:	d9002c17 	ldw	r4,176(sp)
10002660:	d9801e04 	addi	r6,sp,120
10002664:	b80b883a 	mov	r5,r23
10002668:	00075340 	call	10007534 <__sprint_r>
1000266c:	1039ed1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002670:	d8802617 	ldw	r2,152(sp)
10002674:	d8c02017 	ldw	r3,128(sp)
10002678:	da000404 	addi	r8,sp,16
1000267c:	003e1006 	br	10001ec0 <__alt_data_end+0xf8001ec0>
10002680:	00800044 	movi	r2,1
10002684:	10803fcc 	andi	r2,r2,255
10002688:	00c00044 	movi	r3,1
1000268c:	10fa3526 	beq	r2,r3,10000f64 <__alt_data_end+0xf8000f64>
10002690:	00c00084 	movi	r3,2
10002694:	10fbcb26 	beq	r2,r3,100015c4 <__alt_data_end+0xf80015c4>
10002698:	003a8f06 	br	100010d8 <__alt_data_end+0xf80010d8>
1000269c:	01040074 	movhi	r4,4097
100026a0:	213e1684 	addi	r4,r4,-1958
100026a4:	d9003515 	stw	r4,212(sp)
100026a8:	003b7606 	br	10001484 <__alt_data_end+0xf8001484>
100026ac:	d8802917 	ldw	r2,164(sp)
100026b0:	00c00184 	movi	r3,6
100026b4:	1880012e 	bgeu	r3,r2,100026bc <___vfprintf_internal_r+0x1ca0>
100026b8:	1805883a 	mov	r2,r3
100026bc:	d8802e15 	stw	r2,184(sp)
100026c0:	1000ef16 	blt	r2,zero,10002a80 <___vfprintf_internal_r+0x2064>
100026c4:	04040074 	movhi	r16,4097
100026c8:	d8802a15 	stw	r2,168(sp)
100026cc:	dcc02d15 	stw	r19,180(sp)
100026d0:	d8002915 	stw	zero,164(sp)
100026d4:	d8003215 	stw	zero,200(sp)
100026d8:	843e1004 	addi	r16,r16,-1984
100026dc:	0039883a 	mov	fp,zero
100026e0:	003aa206 	br	1000116c <__alt_data_end+0xf800116c>
100026e4:	0021883a 	mov	r16,zero
100026e8:	003e0706 	br	10001f08 <__alt_data_end+0xf8001f08>
100026ec:	d9002c17 	ldw	r4,176(sp)
100026f0:	d9801e04 	addi	r6,sp,120
100026f4:	b80b883a 	mov	r5,r23
100026f8:	00075340 	call	10007534 <__sprint_r>
100026fc:	1039c91e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002700:	d8802617 	ldw	r2,152(sp)
10002704:	d9403317 	ldw	r5,204(sp)
10002708:	d8c02017 	ldw	r3,128(sp)
1000270c:	da000404 	addi	r8,sp,16
10002710:	2885c83a 	sub	r2,r5,r2
10002714:	003dfb06 	br	10001f04 <__alt_data_end+0xf8001f04>
10002718:	9080004c 	andi	r2,r18,1
1000271c:	103e8f1e 	bne	r2,zero,1000215c <__alt_data_end+0xf800215c>
10002720:	d8802117 	ldw	r2,132(sp)
10002724:	003e9e06 	br	100021a0 <__alt_data_end+0xf80021a0>
10002728:	1025883a 	mov	r18,r2
1000272c:	0039883a 	mov	fp,zero
10002730:	00800084 	movi	r2,2
10002734:	003fd306 	br	10002684 <__alt_data_end+0xf8002684>
10002738:	07000b44 	movi	fp,45
1000273c:	df002785 	stb	fp,158(sp)
10002740:	003a4006 	br	10001044 <__alt_data_end+0xf8001044>
10002744:	00c00b44 	movi	r3,45
10002748:	d8c02785 	stb	r3,158(sp)
1000274c:	d8802a15 	stw	r2,168(sp)
10002750:	dc802b17 	ldw	r18,172(sp)
10002754:	d8002915 	stw	zero,164(sp)
10002758:	07000b44 	movi	fp,45
1000275c:	003a8006 	br	10001160 <__alt_data_end+0xf8001160>
10002760:	04040074 	movhi	r16,4097
10002764:	843e0504 	addi	r16,r16,-2028
10002768:	003f4706 	br	10002488 <__alt_data_end+0xf8002488>
1000276c:	d8c02d17 	ldw	r3,180(sp)
10002770:	d9002f17 	ldw	r4,188(sp)
10002774:	18800017 	ldw	r2,0(r3)
10002778:	18c00104 	addi	r3,r3,4
1000277c:	d8c02d15 	stw	r3,180(sp)
10002780:	11000015 	stw	r4,0(r2)
10002784:	0038dd06 	br	10000afc <__alt_data_end+0xf8000afc>
10002788:	dd802617 	ldw	r22,152(sp)
1000278c:	00bfff44 	movi	r2,-3
10002790:	b0801c16 	blt	r22,r2,10002804 <___vfprintf_internal_r+0x1de8>
10002794:	d9402917 	ldw	r5,164(sp)
10002798:	2d801a16 	blt	r5,r22,10002804 <___vfprintf_internal_r+0x1de8>
1000279c:	dd803215 	stw	r22,200(sp)
100027a0:	003e8906 	br	100021c8 <__alt_data_end+0xf80021c8>
100027a4:	01040074 	movhi	r4,4097
100027a8:	213e1284 	addi	r4,r4,-1974
100027ac:	d9002b15 	stw	r4,172(sp)
100027b0:	003c9106 	br	100019f8 <__alt_data_end+0xf80019f8>
100027b4:	e005883a 	mov	r2,fp
100027b8:	003e7906 	br	100021a0 <__alt_data_end+0xf80021a0>
100027bc:	d9402917 	ldw	r5,164(sp)
100027c0:	df002783 	ldbu	fp,158(sp)
100027c4:	dcc02d15 	stw	r19,180(sp)
100027c8:	d9402a15 	stw	r5,168(sp)
100027cc:	d9402e15 	stw	r5,184(sp)
100027d0:	d8002915 	stw	zero,164(sp)
100027d4:	d8003215 	stw	zero,200(sp)
100027d8:	003a5d06 	br	10001150 <__alt_data_end+0xf8001150>
100027dc:	9080004c 	andi	r2,r18,1
100027e0:	0039883a 	mov	fp,zero
100027e4:	10000426 	beq	r2,zero,100027f8 <___vfprintf_internal_r+0x1ddc>
100027e8:	00800c04 	movi	r2,48
100027ec:	dc001dc4 	addi	r16,sp,119
100027f0:	d8801dc5 	stb	r2,119(sp)
100027f4:	003b8006 	br	100015f8 <__alt_data_end+0xf80015f8>
100027f8:	d8002e15 	stw	zero,184(sp)
100027fc:	dc001e04 	addi	r16,sp,120
10002800:	003a4d06 	br	10001138 <__alt_data_end+0xf8001138>
10002804:	8c7fff84 	addi	r17,r17,-2
10002808:	b5bfffc4 	addi	r22,r22,-1
1000280c:	dd802615 	stw	r22,152(sp)
10002810:	dc4022c5 	stb	r17,139(sp)
10002814:	b000bf16 	blt	r22,zero,10002b14 <___vfprintf_internal_r+0x20f8>
10002818:	00800ac4 	movi	r2,43
1000281c:	d8802305 	stb	r2,140(sp)
10002820:	00800244 	movi	r2,9
10002824:	15807016 	blt	r2,r22,100029e8 <___vfprintf_internal_r+0x1fcc>
10002828:	00800c04 	movi	r2,48
1000282c:	b5800c04 	addi	r22,r22,48
10002830:	d8802345 	stb	r2,141(sp)
10002834:	dd802385 	stb	r22,142(sp)
10002838:	d88023c4 	addi	r2,sp,143
1000283c:	df0022c4 	addi	fp,sp,139
10002840:	d8c03317 	ldw	r3,204(sp)
10002844:	1739c83a 	sub	fp,r2,fp
10002848:	d9003317 	ldw	r4,204(sp)
1000284c:	e0c7883a 	add	r3,fp,r3
10002850:	df003a15 	stw	fp,232(sp)
10002854:	d8c02e15 	stw	r3,184(sp)
10002858:	00800044 	movi	r2,1
1000285c:	1100b30e 	bge	r2,r4,10002b2c <___vfprintf_internal_r+0x2110>
10002860:	d8c02e17 	ldw	r3,184(sp)
10002864:	18c00044 	addi	r3,r3,1
10002868:	d8c02e15 	stw	r3,184(sp)
1000286c:	1805883a 	mov	r2,r3
10002870:	1800ac16 	blt	r3,zero,10002b24 <___vfprintf_internal_r+0x2108>
10002874:	d8003215 	stw	zero,200(sp)
10002878:	003e5d06 	br	100021f0 <__alt_data_end+0xf80021f0>
1000287c:	d9002c17 	ldw	r4,176(sp)
10002880:	d9801e04 	addi	r6,sp,120
10002884:	b80b883a 	mov	r5,r23
10002888:	00075340 	call	10007534 <__sprint_r>
1000288c:	1039651e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10002890:	dc402617 	ldw	r17,152(sp)
10002894:	d8c02017 	ldw	r3,128(sp)
10002898:	d8801f17 	ldw	r2,124(sp)
1000289c:	da000404 	addi	r8,sp,16
100028a0:	003ed606 	br	100023fc <__alt_data_end+0xf80023fc>
100028a4:	582b883a 	mov	r21,r11
100028a8:	d8002915 	stw	zero,164(sp)
100028ac:	0038bd06 	br	10000ba4 <__alt_data_end+0xf8000ba4>
100028b0:	d8802917 	ldw	r2,164(sp)
100028b4:	103e071e 	bne	r2,zero,100020d4 <__alt_data_end+0xf80020d4>
100028b8:	dc002915 	stw	r16,164(sp)
100028bc:	003e0506 	br	100020d4 <__alt_data_end+0xf80020d4>
100028c0:	d9002917 	ldw	r4,164(sp)
100028c4:	20c00044 	addi	r3,r4,1
100028c8:	003e0f06 	br	10002108 <__alt_data_end+0xf8002108>
100028cc:	01400184 	movi	r5,6
100028d0:	d9402915 	stw	r5,164(sp)
100028d4:	003dff06 	br	100020d4 <__alt_data_end+0xf80020d4>
100028d8:	d8802104 	addi	r2,sp,132
100028dc:	d8800315 	stw	r2,12(sp)
100028e0:	d8802504 	addi	r2,sp,148
100028e4:	d8800215 	stw	r2,8(sp)
100028e8:	d8802604 	addi	r2,sp,152
100028ec:	d8800115 	stw	r2,4(sp)
100028f0:	d8802917 	ldw	r2,164(sp)
100028f4:	d9403617 	ldw	r5,216(sp)
100028f8:	d9002c17 	ldw	r4,176(sp)
100028fc:	d8800015 	stw	r2,0(sp)
10002900:	01c000c4 	movi	r7,3
10002904:	980d883a 	mov	r6,r19
10002908:	da003d15 	stw	r8,244(sp)
1000290c:	00030400 	call	10003040 <_dtoa_r>
10002910:	d8c02917 	ldw	r3,164(sp)
10002914:	da003d17 	ldw	r8,244(sp)
10002918:	1021883a 	mov	r16,r2
1000291c:	10f9883a 	add	fp,r2,r3
10002920:	81000007 	ldb	r4,0(r16)
10002924:	00800c04 	movi	r2,48
10002928:	20805e26 	beq	r4,r2,10002aa4 <___vfprintf_internal_r+0x2088>
1000292c:	d8c02617 	ldw	r3,152(sp)
10002930:	e0f9883a 	add	fp,fp,r3
10002934:	003e0a06 	br	10002160 <__alt_data_end+0xf8002160>
10002938:	00c00b44 	movi	r3,45
1000293c:	24e0003c 	xorhi	r19,r4,32768
10002940:	d8c02a05 	stb	r3,168(sp)
10002944:	003de906 	br	100020ec <__alt_data_end+0xf80020ec>
10002948:	d8c03217 	ldw	r3,200(sp)
1000294c:	00c07a0e 	bge	zero,r3,10002b38 <___vfprintf_internal_r+0x211c>
10002950:	00800044 	movi	r2,1
10002954:	d9003317 	ldw	r4,204(sp)
10002958:	1105883a 	add	r2,r2,r4
1000295c:	d8802e15 	stw	r2,184(sp)
10002960:	10004e16 	blt	r2,zero,10002a9c <___vfprintf_internal_r+0x2080>
10002964:	044019c4 	movi	r17,103
10002968:	003e2106 	br	100021f0 <__alt_data_end+0xf80021f0>
1000296c:	d9002917 	ldw	r4,164(sp)
10002970:	d8802104 	addi	r2,sp,132
10002974:	d8800315 	stw	r2,12(sp)
10002978:	d9000015 	stw	r4,0(sp)
1000297c:	d8802504 	addi	r2,sp,148
10002980:	d9403617 	ldw	r5,216(sp)
10002984:	d9002c17 	ldw	r4,176(sp)
10002988:	d8800215 	stw	r2,8(sp)
1000298c:	d8802604 	addi	r2,sp,152
10002990:	d8800115 	stw	r2,4(sp)
10002994:	01c000c4 	movi	r7,3
10002998:	980d883a 	mov	r6,r19
1000299c:	da003d15 	stw	r8,244(sp)
100029a0:	00030400 	call	10003040 <_dtoa_r>
100029a4:	d8c02917 	ldw	r3,164(sp)
100029a8:	da003d17 	ldw	r8,244(sp)
100029ac:	1021883a 	mov	r16,r2
100029b0:	00801184 	movi	r2,70
100029b4:	80f9883a 	add	fp,r16,r3
100029b8:	88bfd926 	beq	r17,r2,10002920 <__alt_data_end+0xf8002920>
100029bc:	003de806 	br	10002160 <__alt_data_end+0xf8002160>
100029c0:	d9002917 	ldw	r4,164(sp)
100029c4:	00c04d0e 	bge	zero,r3,10002afc <___vfprintf_internal_r+0x20e0>
100029c8:	2000441e 	bne	r4,zero,10002adc <___vfprintf_internal_r+0x20c0>
100029cc:	9480004c 	andi	r18,r18,1
100029d0:	9000421e 	bne	r18,zero,10002adc <___vfprintf_internal_r+0x20c0>
100029d4:	1805883a 	mov	r2,r3
100029d8:	18007016 	blt	r3,zero,10002b9c <___vfprintf_internal_r+0x2180>
100029dc:	d8c03217 	ldw	r3,200(sp)
100029e0:	d8c02e15 	stw	r3,184(sp)
100029e4:	003e0206 	br	100021f0 <__alt_data_end+0xf80021f0>
100029e8:	df0022c4 	addi	fp,sp,139
100029ec:	dc002915 	stw	r16,164(sp)
100029f0:	4027883a 	mov	r19,r8
100029f4:	e021883a 	mov	r16,fp
100029f8:	b009883a 	mov	r4,r22
100029fc:	01400284 	movi	r5,10
10002a00:	00008800 	call	10000880 <__modsi3>
10002a04:	10800c04 	addi	r2,r2,48
10002a08:	843fffc4 	addi	r16,r16,-1
10002a0c:	b009883a 	mov	r4,r22
10002a10:	01400284 	movi	r5,10
10002a14:	80800005 	stb	r2,0(r16)
10002a18:	00007fc0 	call	100007fc <__divsi3>
10002a1c:	102d883a 	mov	r22,r2
10002a20:	00800244 	movi	r2,9
10002a24:	15bff416 	blt	r2,r22,100029f8 <__alt_data_end+0xf80029f8>
10002a28:	9811883a 	mov	r8,r19
10002a2c:	b0800c04 	addi	r2,r22,48
10002a30:	8027883a 	mov	r19,r16
10002a34:	997fffc4 	addi	r5,r19,-1
10002a38:	98bfffc5 	stb	r2,-1(r19)
10002a3c:	dc002917 	ldw	r16,164(sp)
10002a40:	2f006a2e 	bgeu	r5,fp,10002bec <___vfprintf_internal_r+0x21d0>
10002a44:	d9c02384 	addi	r7,sp,142
10002a48:	3ccfc83a 	sub	r7,r7,r19
10002a4c:	d9002344 	addi	r4,sp,141
10002a50:	e1cf883a 	add	r7,fp,r7
10002a54:	00000106 	br	10002a5c <___vfprintf_internal_r+0x2040>
10002a58:	28800003 	ldbu	r2,0(r5)
10002a5c:	20800005 	stb	r2,0(r4)
10002a60:	21000044 	addi	r4,r4,1
10002a64:	29400044 	addi	r5,r5,1
10002a68:	393ffb1e 	bne	r7,r4,10002a58 <__alt_data_end+0xf8002a58>
10002a6c:	d8802304 	addi	r2,sp,140
10002a70:	14c5c83a 	sub	r2,r2,r19
10002a74:	d8c02344 	addi	r3,sp,141
10002a78:	1885883a 	add	r2,r3,r2
10002a7c:	003f7006 	br	10002840 <__alt_data_end+0xf8002840>
10002a80:	0005883a 	mov	r2,zero
10002a84:	003f0f06 	br	100026c4 <__alt_data_end+0xf80026c4>
10002a88:	d8c03217 	ldw	r3,200(sp)
10002a8c:	18c00044 	addi	r3,r3,1
10002a90:	d8c02e15 	stw	r3,184(sp)
10002a94:	1805883a 	mov	r2,r3
10002a98:	183fb20e 	bge	r3,zero,10002964 <__alt_data_end+0xf8002964>
10002a9c:	0005883a 	mov	r2,zero
10002aa0:	003fb006 	br	10002964 <__alt_data_end+0xf8002964>
10002aa4:	d9003617 	ldw	r4,216(sp)
10002aa8:	000d883a 	mov	r6,zero
10002aac:	000f883a 	mov	r7,zero
10002ab0:	980b883a 	mov	r5,r19
10002ab4:	d8c03c15 	stw	r3,240(sp)
10002ab8:	da003d15 	stw	r8,244(sp)
10002abc:	000bb740 	call	1000bb74 <__eqdf2>
10002ac0:	d8c03c17 	ldw	r3,240(sp)
10002ac4:	da003d17 	ldw	r8,244(sp)
10002ac8:	103f9826 	beq	r2,zero,1000292c <__alt_data_end+0xf800292c>
10002acc:	00800044 	movi	r2,1
10002ad0:	10c7c83a 	sub	r3,r2,r3
10002ad4:	d8c02615 	stw	r3,152(sp)
10002ad8:	003f9506 	br	10002930 <__alt_data_end+0xf8002930>
10002adc:	d9002917 	ldw	r4,164(sp)
10002ae0:	d8c03217 	ldw	r3,200(sp)
10002ae4:	20800044 	addi	r2,r4,1
10002ae8:	1885883a 	add	r2,r3,r2
10002aec:	d8802e15 	stw	r2,184(sp)
10002af0:	103dbf0e 	bge	r2,zero,100021f0 <__alt_data_end+0xf80021f0>
10002af4:	0005883a 	mov	r2,zero
10002af8:	003dbd06 	br	100021f0 <__alt_data_end+0xf80021f0>
10002afc:	2000211e 	bne	r4,zero,10002b84 <___vfprintf_internal_r+0x2168>
10002b00:	9480004c 	andi	r18,r18,1
10002b04:	90001f1e 	bne	r18,zero,10002b84 <___vfprintf_internal_r+0x2168>
10002b08:	00800044 	movi	r2,1
10002b0c:	d8802e15 	stw	r2,184(sp)
10002b10:	003db706 	br	100021f0 <__alt_data_end+0xf80021f0>
10002b14:	00800b44 	movi	r2,45
10002b18:	05adc83a 	sub	r22,zero,r22
10002b1c:	d8802305 	stb	r2,140(sp)
10002b20:	003f3f06 	br	10002820 <__alt_data_end+0xf8002820>
10002b24:	0005883a 	mov	r2,zero
10002b28:	003f5206 	br	10002874 <__alt_data_end+0xf8002874>
10002b2c:	90a4703a 	and	r18,r18,r2
10002b30:	903f4e26 	beq	r18,zero,1000286c <__alt_data_end+0xf800286c>
10002b34:	003f4a06 	br	10002860 <__alt_data_end+0xf8002860>
10002b38:	00800084 	movi	r2,2
10002b3c:	10c5c83a 	sub	r2,r2,r3
10002b40:	003f8406 	br	10002954 <__alt_data_end+0xf8002954>
10002b44:	d8802d17 	ldw	r2,180(sp)
10002b48:	d9002d17 	ldw	r4,180(sp)
10002b4c:	ac400043 	ldbu	r17,1(r21)
10002b50:	10800017 	ldw	r2,0(r2)
10002b54:	582b883a 	mov	r21,r11
10002b58:	d8802915 	stw	r2,164(sp)
10002b5c:	20800104 	addi	r2,r4,4
10002b60:	d9002917 	ldw	r4,164(sp)
10002b64:	d8802d15 	stw	r2,180(sp)
10002b68:	203e7a0e 	bge	r4,zero,10002554 <__alt_data_end+0xf8002554>
10002b6c:	8c403fcc 	andi	r17,r17,255
10002b70:	00bfffc4 	movi	r2,-1
10002b74:	8c40201c 	xori	r17,r17,128
10002b78:	d8802915 	stw	r2,164(sp)
10002b7c:	8c7fe004 	addi	r17,r17,-128
10002b80:	00380706 	br	10000ba0 <__alt_data_end+0xf8000ba0>
10002b84:	d8c02917 	ldw	r3,164(sp)
10002b88:	18c00084 	addi	r3,r3,2
10002b8c:	d8c02e15 	stw	r3,184(sp)
10002b90:	1805883a 	mov	r2,r3
10002b94:	183d960e 	bge	r3,zero,100021f0 <__alt_data_end+0xf80021f0>
10002b98:	003fd606 	br	10002af4 <__alt_data_end+0xf8002af4>
10002b9c:	0005883a 	mov	r2,zero
10002ba0:	003f8e06 	br	100029dc <__alt_data_end+0xf80029dc>
10002ba4:	9080004c 	andi	r2,r18,1
10002ba8:	103f811e 	bne	r2,zero,100029b0 <__alt_data_end+0xf80029b0>
10002bac:	d8802117 	ldw	r2,132(sp)
10002bb0:	1405c83a 	sub	r2,r2,r16
10002bb4:	d8803315 	stw	r2,204(sp)
10002bb8:	b47ef326 	beq	r22,r17,10002788 <__alt_data_end+0xf8002788>
10002bbc:	dd802617 	ldw	r22,152(sp)
10002bc0:	003f1106 	br	10002808 <__alt_data_end+0xf8002808>
10002bc4:	d9c02785 	stb	r7,158(sp)
10002bc8:	00390406 	br	10000fdc <__alt_data_end+0xf8000fdc>
10002bcc:	d9c02785 	stb	r7,158(sp)
10002bd0:	0038d306 	br	10000f20 <__alt_data_end+0xf8000f20>
10002bd4:	d9c02785 	stb	r7,158(sp)
10002bd8:	003a6106 	br	10001560 <__alt_data_end+0xf8001560>
10002bdc:	d9c02785 	stb	r7,158(sp)
10002be0:	003af806 	br	100017c4 <__alt_data_end+0xf80017c4>
10002be4:	0005883a 	mov	r2,zero
10002be8:	003d7e06 	br	100021e4 <__alt_data_end+0xf80021e4>
10002bec:	d8802344 	addi	r2,sp,141
10002bf0:	003f1306 	br	10002840 <__alt_data_end+0xf8002840>
10002bf4:	d9c02785 	stb	r7,158(sp)
10002bf8:	00392306 	br	10001088 <__alt_data_end+0xf8001088>
10002bfc:	d9c02785 	stb	r7,158(sp)
10002c00:	003aa906 	br	100016a8 <__alt_data_end+0xf80016a8>
10002c04:	d9c02785 	stb	r7,158(sp)
10002c08:	003a3d06 	br	10001500 <__alt_data_end+0xf8001500>
10002c0c:	d9c02785 	stb	r7,158(sp)
10002c10:	003aca06 	br	1000173c <__alt_data_end+0xf800173c>

10002c14 <__vfprintf_internal>:
10002c14:	00840074 	movhi	r2,4097
10002c18:	10856b04 	addi	r2,r2,5548
10002c1c:	300f883a 	mov	r7,r6
10002c20:	280d883a 	mov	r6,r5
10002c24:	200b883a 	mov	r5,r4
10002c28:	11000017 	ldw	r4,0(r2)
10002c2c:	0000a1c1 	jmpi	10000a1c <___vfprintf_internal_r>

10002c30 <__sbprintf>:
10002c30:	2880030b 	ldhu	r2,12(r5)
10002c34:	2ac01917 	ldw	r11,100(r5)
10002c38:	2a80038b 	ldhu	r10,14(r5)
10002c3c:	2a400717 	ldw	r9,28(r5)
10002c40:	2a000917 	ldw	r8,36(r5)
10002c44:	defee204 	addi	sp,sp,-1144
10002c48:	00c10004 	movi	r3,1024
10002c4c:	dc011a15 	stw	r16,1128(sp)
10002c50:	10bfff4c 	andi	r2,r2,65533
10002c54:	2821883a 	mov	r16,r5
10002c58:	d8cb883a 	add	r5,sp,r3
10002c5c:	dc811c15 	stw	r18,1136(sp)
10002c60:	dc411b15 	stw	r17,1132(sp)
10002c64:	dfc11d15 	stw	ra,1140(sp)
10002c68:	2025883a 	mov	r18,r4
10002c6c:	d881030d 	sth	r2,1036(sp)
10002c70:	dac11915 	stw	r11,1124(sp)
10002c74:	da81038d 	sth	r10,1038(sp)
10002c78:	da410715 	stw	r9,1052(sp)
10002c7c:	da010915 	stw	r8,1060(sp)
10002c80:	dec10015 	stw	sp,1024(sp)
10002c84:	dec10415 	stw	sp,1040(sp)
10002c88:	d8c10215 	stw	r3,1032(sp)
10002c8c:	d8c10515 	stw	r3,1044(sp)
10002c90:	d8010615 	stw	zero,1048(sp)
10002c94:	0000a1c0 	call	10000a1c <___vfprintf_internal_r>
10002c98:	1023883a 	mov	r17,r2
10002c9c:	10000416 	blt	r2,zero,10002cb0 <__sbprintf+0x80>
10002ca0:	d9410004 	addi	r5,sp,1024
10002ca4:	9009883a 	mov	r4,r18
10002ca8:	00048e40 	call	100048e4 <_fflush_r>
10002cac:	10000d1e 	bne	r2,zero,10002ce4 <__sbprintf+0xb4>
10002cb0:	d881030b 	ldhu	r2,1036(sp)
10002cb4:	1080100c 	andi	r2,r2,64
10002cb8:	10000326 	beq	r2,zero,10002cc8 <__sbprintf+0x98>
10002cbc:	8080030b 	ldhu	r2,12(r16)
10002cc0:	10801014 	ori	r2,r2,64
10002cc4:	8080030d 	sth	r2,12(r16)
10002cc8:	8805883a 	mov	r2,r17
10002ccc:	dfc11d17 	ldw	ra,1140(sp)
10002cd0:	dc811c17 	ldw	r18,1136(sp)
10002cd4:	dc411b17 	ldw	r17,1132(sp)
10002cd8:	dc011a17 	ldw	r16,1128(sp)
10002cdc:	dec11e04 	addi	sp,sp,1144
10002ce0:	f800283a 	ret
10002ce4:	047fffc4 	movi	r17,-1
10002ce8:	003ff106 	br	10002cb0 <__alt_data_end+0xf8002cb0>

10002cec <__swsetup_r>:
10002cec:	00840074 	movhi	r2,4097
10002cf0:	defffd04 	addi	sp,sp,-12
10002cf4:	10856b04 	addi	r2,r2,5548
10002cf8:	dc400115 	stw	r17,4(sp)
10002cfc:	2023883a 	mov	r17,r4
10002d00:	11000017 	ldw	r4,0(r2)
10002d04:	dc000015 	stw	r16,0(sp)
10002d08:	dfc00215 	stw	ra,8(sp)
10002d0c:	2821883a 	mov	r16,r5
10002d10:	20000226 	beq	r4,zero,10002d1c <__swsetup_r+0x30>
10002d14:	20800e17 	ldw	r2,56(r4)
10002d18:	10003126 	beq	r2,zero,10002de0 <__swsetup_r+0xf4>
10002d1c:	8080030b 	ldhu	r2,12(r16)
10002d20:	10c0020c 	andi	r3,r2,8
10002d24:	1009883a 	mov	r4,r2
10002d28:	18000f26 	beq	r3,zero,10002d68 <__swsetup_r+0x7c>
10002d2c:	80c00417 	ldw	r3,16(r16)
10002d30:	18001526 	beq	r3,zero,10002d88 <__swsetup_r+0x9c>
10002d34:	1100004c 	andi	r4,r2,1
10002d38:	20001c1e 	bne	r4,zero,10002dac <__swsetup_r+0xc0>
10002d3c:	1080008c 	andi	r2,r2,2
10002d40:	1000291e 	bne	r2,zero,10002de8 <__swsetup_r+0xfc>
10002d44:	80800517 	ldw	r2,20(r16)
10002d48:	80800215 	stw	r2,8(r16)
10002d4c:	18001c26 	beq	r3,zero,10002dc0 <__swsetup_r+0xd4>
10002d50:	0005883a 	mov	r2,zero
10002d54:	dfc00217 	ldw	ra,8(sp)
10002d58:	dc400117 	ldw	r17,4(sp)
10002d5c:	dc000017 	ldw	r16,0(sp)
10002d60:	dec00304 	addi	sp,sp,12
10002d64:	f800283a 	ret
10002d68:	2080040c 	andi	r2,r4,16
10002d6c:	10002e26 	beq	r2,zero,10002e28 <__swsetup_r+0x13c>
10002d70:	2080010c 	andi	r2,r4,4
10002d74:	10001e1e 	bne	r2,zero,10002df0 <__swsetup_r+0x104>
10002d78:	80c00417 	ldw	r3,16(r16)
10002d7c:	20800214 	ori	r2,r4,8
10002d80:	8080030d 	sth	r2,12(r16)
10002d84:	183feb1e 	bne	r3,zero,10002d34 <__alt_data_end+0xf8002d34>
10002d88:	1100a00c 	andi	r4,r2,640
10002d8c:	01408004 	movi	r5,512
10002d90:	217fe826 	beq	r4,r5,10002d34 <__alt_data_end+0xf8002d34>
10002d94:	800b883a 	mov	r5,r16
10002d98:	8809883a 	mov	r4,r17
10002d9c:	00053a80 	call	100053a8 <__smakebuf_r>
10002da0:	8080030b 	ldhu	r2,12(r16)
10002da4:	80c00417 	ldw	r3,16(r16)
10002da8:	003fe206 	br	10002d34 <__alt_data_end+0xf8002d34>
10002dac:	80800517 	ldw	r2,20(r16)
10002db0:	80000215 	stw	zero,8(r16)
10002db4:	0085c83a 	sub	r2,zero,r2
10002db8:	80800615 	stw	r2,24(r16)
10002dbc:	183fe41e 	bne	r3,zero,10002d50 <__alt_data_end+0xf8002d50>
10002dc0:	80c0030b 	ldhu	r3,12(r16)
10002dc4:	0005883a 	mov	r2,zero
10002dc8:	1900200c 	andi	r4,r3,128
10002dcc:	203fe126 	beq	r4,zero,10002d54 <__alt_data_end+0xf8002d54>
10002dd0:	18c01014 	ori	r3,r3,64
10002dd4:	80c0030d 	sth	r3,12(r16)
10002dd8:	00bfffc4 	movi	r2,-1
10002ddc:	003fdd06 	br	10002d54 <__alt_data_end+0xf8002d54>
10002de0:	0004cc00 	call	10004cc0 <__sinit>
10002de4:	003fcd06 	br	10002d1c <__alt_data_end+0xf8002d1c>
10002de8:	0005883a 	mov	r2,zero
10002dec:	003fd606 	br	10002d48 <__alt_data_end+0xf8002d48>
10002df0:	81400c17 	ldw	r5,48(r16)
10002df4:	28000626 	beq	r5,zero,10002e10 <__swsetup_r+0x124>
10002df8:	80801004 	addi	r2,r16,64
10002dfc:	28800326 	beq	r5,r2,10002e0c <__swsetup_r+0x120>
10002e00:	8809883a 	mov	r4,r17
10002e04:	0004e340 	call	10004e34 <_free_r>
10002e08:	8100030b 	ldhu	r4,12(r16)
10002e0c:	80000c15 	stw	zero,48(r16)
10002e10:	80c00417 	ldw	r3,16(r16)
10002e14:	00bff6c4 	movi	r2,-37
10002e18:	1108703a 	and	r4,r2,r4
10002e1c:	80000115 	stw	zero,4(r16)
10002e20:	80c00015 	stw	r3,0(r16)
10002e24:	003fd506 	br	10002d7c <__alt_data_end+0xf8002d7c>
10002e28:	00800244 	movi	r2,9
10002e2c:	88800015 	stw	r2,0(r17)
10002e30:	20801014 	ori	r2,r4,64
10002e34:	8080030d 	sth	r2,12(r16)
10002e38:	00bfffc4 	movi	r2,-1
10002e3c:	003fc506 	br	10002d54 <__alt_data_end+0xf8002d54>

10002e40 <quorem>:
10002e40:	defff704 	addi	sp,sp,-36
10002e44:	dc800215 	stw	r18,8(sp)
10002e48:	20800417 	ldw	r2,16(r4)
10002e4c:	2c800417 	ldw	r18,16(r5)
10002e50:	dfc00815 	stw	ra,32(sp)
10002e54:	ddc00715 	stw	r23,28(sp)
10002e58:	dd800615 	stw	r22,24(sp)
10002e5c:	dd400515 	stw	r21,20(sp)
10002e60:	dd000415 	stw	r20,16(sp)
10002e64:	dcc00315 	stw	r19,12(sp)
10002e68:	dc400115 	stw	r17,4(sp)
10002e6c:	dc000015 	stw	r16,0(sp)
10002e70:	14807116 	blt	r2,r18,10003038 <quorem+0x1f8>
10002e74:	94bfffc4 	addi	r18,r18,-1
10002e78:	94ad883a 	add	r22,r18,r18
10002e7c:	b5ad883a 	add	r22,r22,r22
10002e80:	2c400504 	addi	r17,r5,20
10002e84:	8da9883a 	add	r20,r17,r22
10002e88:	25400504 	addi	r21,r4,20
10002e8c:	282f883a 	mov	r23,r5
10002e90:	adad883a 	add	r22,r21,r22
10002e94:	a1400017 	ldw	r5,0(r20)
10002e98:	2021883a 	mov	r16,r4
10002e9c:	b1000017 	ldw	r4,0(r22)
10002ea0:	29400044 	addi	r5,r5,1
10002ea4:	00008f40 	call	100008f4 <__udivsi3>
10002ea8:	1027883a 	mov	r19,r2
10002eac:	10002c26 	beq	r2,zero,10002f60 <quorem+0x120>
10002eb0:	a813883a 	mov	r9,r21
10002eb4:	880b883a 	mov	r5,r17
10002eb8:	0009883a 	mov	r4,zero
10002ebc:	000d883a 	mov	r6,zero
10002ec0:	2a000017 	ldw	r8,0(r5)
10002ec4:	49c00017 	ldw	r7,0(r9)
10002ec8:	29400104 	addi	r5,r5,4
10002ecc:	40bfffcc 	andi	r2,r8,65535
10002ed0:	14c5383a 	mul	r2,r2,r19
10002ed4:	4010d43a 	srli	r8,r8,16
10002ed8:	38ffffcc 	andi	r3,r7,65535
10002edc:	1105883a 	add	r2,r2,r4
10002ee0:	1008d43a 	srli	r4,r2,16
10002ee4:	44d1383a 	mul	r8,r8,r19
10002ee8:	198d883a 	add	r6,r3,r6
10002eec:	10ffffcc 	andi	r3,r2,65535
10002ef0:	30c7c83a 	sub	r3,r6,r3
10002ef4:	380ed43a 	srli	r7,r7,16
10002ef8:	4105883a 	add	r2,r8,r4
10002efc:	180dd43a 	srai	r6,r3,16
10002f00:	113fffcc 	andi	r4,r2,65535
10002f04:	390fc83a 	sub	r7,r7,r4
10002f08:	398d883a 	add	r6,r7,r6
10002f0c:	300e943a 	slli	r7,r6,16
10002f10:	18ffffcc 	andi	r3,r3,65535
10002f14:	1008d43a 	srli	r4,r2,16
10002f18:	38ceb03a 	or	r7,r7,r3
10002f1c:	49c00015 	stw	r7,0(r9)
10002f20:	300dd43a 	srai	r6,r6,16
10002f24:	4a400104 	addi	r9,r9,4
10002f28:	a17fe52e 	bgeu	r20,r5,10002ec0 <__alt_data_end+0xf8002ec0>
10002f2c:	b0800017 	ldw	r2,0(r22)
10002f30:	10000b1e 	bne	r2,zero,10002f60 <quorem+0x120>
10002f34:	b0bfff04 	addi	r2,r22,-4
10002f38:	a880082e 	bgeu	r21,r2,10002f5c <quorem+0x11c>
10002f3c:	b0ffff17 	ldw	r3,-4(r22)
10002f40:	18000326 	beq	r3,zero,10002f50 <quorem+0x110>
10002f44:	00000506 	br	10002f5c <quorem+0x11c>
10002f48:	10c00017 	ldw	r3,0(r2)
10002f4c:	1800031e 	bne	r3,zero,10002f5c <quorem+0x11c>
10002f50:	10bfff04 	addi	r2,r2,-4
10002f54:	94bfffc4 	addi	r18,r18,-1
10002f58:	a8bffb36 	bltu	r21,r2,10002f48 <__alt_data_end+0xf8002f48>
10002f5c:	84800415 	stw	r18,16(r16)
10002f60:	b80b883a 	mov	r5,r23
10002f64:	8009883a 	mov	r4,r16
10002f68:	000698c0 	call	1000698c <__mcmp>
10002f6c:	10002616 	blt	r2,zero,10003008 <quorem+0x1c8>
10002f70:	9cc00044 	addi	r19,r19,1
10002f74:	a805883a 	mov	r2,r21
10002f78:	000b883a 	mov	r5,zero
10002f7c:	11000017 	ldw	r4,0(r2)
10002f80:	89800017 	ldw	r6,0(r17)
10002f84:	10800104 	addi	r2,r2,4
10002f88:	20ffffcc 	andi	r3,r4,65535
10002f8c:	194b883a 	add	r5,r3,r5
10002f90:	30ffffcc 	andi	r3,r6,65535
10002f94:	28c7c83a 	sub	r3,r5,r3
10002f98:	300cd43a 	srli	r6,r6,16
10002f9c:	2008d43a 	srli	r4,r4,16
10002fa0:	180bd43a 	srai	r5,r3,16
10002fa4:	18ffffcc 	andi	r3,r3,65535
10002fa8:	2189c83a 	sub	r4,r4,r6
10002fac:	2149883a 	add	r4,r4,r5
10002fb0:	200c943a 	slli	r6,r4,16
10002fb4:	8c400104 	addi	r17,r17,4
10002fb8:	200bd43a 	srai	r5,r4,16
10002fbc:	30c6b03a 	or	r3,r6,r3
10002fc0:	10ffff15 	stw	r3,-4(r2)
10002fc4:	a47fed2e 	bgeu	r20,r17,10002f7c <__alt_data_end+0xf8002f7c>
10002fc8:	9485883a 	add	r2,r18,r18
10002fcc:	1085883a 	add	r2,r2,r2
10002fd0:	a887883a 	add	r3,r21,r2
10002fd4:	18800017 	ldw	r2,0(r3)
10002fd8:	10000b1e 	bne	r2,zero,10003008 <quorem+0x1c8>
10002fdc:	18bfff04 	addi	r2,r3,-4
10002fe0:	a880082e 	bgeu	r21,r2,10003004 <quorem+0x1c4>
10002fe4:	18ffff17 	ldw	r3,-4(r3)
10002fe8:	18000326 	beq	r3,zero,10002ff8 <quorem+0x1b8>
10002fec:	00000506 	br	10003004 <quorem+0x1c4>
10002ff0:	10c00017 	ldw	r3,0(r2)
10002ff4:	1800031e 	bne	r3,zero,10003004 <quorem+0x1c4>
10002ff8:	10bfff04 	addi	r2,r2,-4
10002ffc:	94bfffc4 	addi	r18,r18,-1
10003000:	a8bffb36 	bltu	r21,r2,10002ff0 <__alt_data_end+0xf8002ff0>
10003004:	84800415 	stw	r18,16(r16)
10003008:	9805883a 	mov	r2,r19
1000300c:	dfc00817 	ldw	ra,32(sp)
10003010:	ddc00717 	ldw	r23,28(sp)
10003014:	dd800617 	ldw	r22,24(sp)
10003018:	dd400517 	ldw	r21,20(sp)
1000301c:	dd000417 	ldw	r20,16(sp)
10003020:	dcc00317 	ldw	r19,12(sp)
10003024:	dc800217 	ldw	r18,8(sp)
10003028:	dc400117 	ldw	r17,4(sp)
1000302c:	dc000017 	ldw	r16,0(sp)
10003030:	dec00904 	addi	sp,sp,36
10003034:	f800283a 	ret
10003038:	0005883a 	mov	r2,zero
1000303c:	003ff306 	br	1000300c <__alt_data_end+0xf800300c>

10003040 <_dtoa_r>:
10003040:	20801017 	ldw	r2,64(r4)
10003044:	deffde04 	addi	sp,sp,-136
10003048:	df002015 	stw	fp,128(sp)
1000304c:	dcc01b15 	stw	r19,108(sp)
10003050:	dc801a15 	stw	r18,104(sp)
10003054:	dc401915 	stw	r17,100(sp)
10003058:	dc001815 	stw	r16,96(sp)
1000305c:	dfc02115 	stw	ra,132(sp)
10003060:	ddc01f15 	stw	r23,124(sp)
10003064:	dd801e15 	stw	r22,120(sp)
10003068:	dd401d15 	stw	r21,116(sp)
1000306c:	dd001c15 	stw	r20,112(sp)
10003070:	d9c00315 	stw	r7,12(sp)
10003074:	2039883a 	mov	fp,r4
10003078:	3023883a 	mov	r17,r6
1000307c:	2825883a 	mov	r18,r5
10003080:	dc002417 	ldw	r16,144(sp)
10003084:	3027883a 	mov	r19,r6
10003088:	10000826 	beq	r2,zero,100030ac <_dtoa_r+0x6c>
1000308c:	21801117 	ldw	r6,68(r4)
10003090:	00c00044 	movi	r3,1
10003094:	100b883a 	mov	r5,r2
10003098:	1986983a 	sll	r3,r3,r6
1000309c:	11800115 	stw	r6,4(r2)
100030a0:	10c00215 	stw	r3,8(r2)
100030a4:	000616c0 	call	1000616c <_Bfree>
100030a8:	e0001015 	stw	zero,64(fp)
100030ac:	88002e16 	blt	r17,zero,10003168 <_dtoa_r+0x128>
100030b0:	80000015 	stw	zero,0(r16)
100030b4:	889ffc2c 	andhi	r2,r17,32752
100030b8:	00dffc34 	movhi	r3,32752
100030bc:	10c01c26 	beq	r2,r3,10003130 <_dtoa_r+0xf0>
100030c0:	000d883a 	mov	r6,zero
100030c4:	000f883a 	mov	r7,zero
100030c8:	9009883a 	mov	r4,r18
100030cc:	980b883a 	mov	r5,r19
100030d0:	000bb740 	call	1000bb74 <__eqdf2>
100030d4:	10002b1e 	bne	r2,zero,10003184 <_dtoa_r+0x144>
100030d8:	d9c02317 	ldw	r7,140(sp)
100030dc:	00800044 	movi	r2,1
100030e0:	38800015 	stw	r2,0(r7)
100030e4:	d8802517 	ldw	r2,148(sp)
100030e8:	10019e26 	beq	r2,zero,10003764 <_dtoa_r+0x724>
100030ec:	d8c02517 	ldw	r3,148(sp)
100030f0:	00840074 	movhi	r2,4097
100030f4:	10be1244 	addi	r2,r2,-1975
100030f8:	18800015 	stw	r2,0(r3)
100030fc:	10bfffc4 	addi	r2,r2,-1
10003100:	dfc02117 	ldw	ra,132(sp)
10003104:	df002017 	ldw	fp,128(sp)
10003108:	ddc01f17 	ldw	r23,124(sp)
1000310c:	dd801e17 	ldw	r22,120(sp)
10003110:	dd401d17 	ldw	r21,116(sp)
10003114:	dd001c17 	ldw	r20,112(sp)
10003118:	dcc01b17 	ldw	r19,108(sp)
1000311c:	dc801a17 	ldw	r18,104(sp)
10003120:	dc401917 	ldw	r17,100(sp)
10003124:	dc001817 	ldw	r16,96(sp)
10003128:	dec02204 	addi	sp,sp,136
1000312c:	f800283a 	ret
10003130:	d8c02317 	ldw	r3,140(sp)
10003134:	0089c3c4 	movi	r2,9999
10003138:	18800015 	stw	r2,0(r3)
1000313c:	90017726 	beq	r18,zero,1000371c <_dtoa_r+0x6dc>
10003140:	00840074 	movhi	r2,4097
10003144:	10be1e04 	addi	r2,r2,-1928
10003148:	d9002517 	ldw	r4,148(sp)
1000314c:	203fec26 	beq	r4,zero,10003100 <__alt_data_end+0xf8003100>
10003150:	10c000c7 	ldb	r3,3(r2)
10003154:	1801781e 	bne	r3,zero,10003738 <_dtoa_r+0x6f8>
10003158:	10c000c4 	addi	r3,r2,3
1000315c:	d9802517 	ldw	r6,148(sp)
10003160:	30c00015 	stw	r3,0(r6)
10003164:	003fe606 	br	10003100 <__alt_data_end+0xf8003100>
10003168:	04e00034 	movhi	r19,32768
1000316c:	9cffffc4 	addi	r19,r19,-1
10003170:	00800044 	movi	r2,1
10003174:	8ce6703a 	and	r19,r17,r19
10003178:	80800015 	stw	r2,0(r16)
1000317c:	9823883a 	mov	r17,r19
10003180:	003fcc06 	br	100030b4 <__alt_data_end+0xf80030b4>
10003184:	d8800204 	addi	r2,sp,8
10003188:	d8800015 	stw	r2,0(sp)
1000318c:	d9c00104 	addi	r7,sp,4
10003190:	900b883a 	mov	r5,r18
10003194:	980d883a 	mov	r6,r19
10003198:	e009883a 	mov	r4,fp
1000319c:	8820d53a 	srli	r16,r17,20
100031a0:	0006d580 	call	10006d58 <__d2b>
100031a4:	d8800915 	stw	r2,36(sp)
100031a8:	8001651e 	bne	r16,zero,10003740 <_dtoa_r+0x700>
100031ac:	dd800217 	ldw	r22,8(sp)
100031b0:	dc000117 	ldw	r16,4(sp)
100031b4:	00800804 	movi	r2,32
100031b8:	b421883a 	add	r16,r22,r16
100031bc:	80c10c84 	addi	r3,r16,1074
100031c0:	10c2d10e 	bge	r2,r3,10003d08 <_dtoa_r+0xcc8>
100031c4:	00801004 	movi	r2,64
100031c8:	81010484 	addi	r4,r16,1042
100031cc:	10c7c83a 	sub	r3,r2,r3
100031d0:	9108d83a 	srl	r4,r18,r4
100031d4:	88e2983a 	sll	r17,r17,r3
100031d8:	2448b03a 	or	r4,r4,r17
100031dc:	000cf3c0 	call	1000cf3c <__floatunsidf>
100031e0:	017f8434 	movhi	r5,65040
100031e4:	01800044 	movi	r6,1
100031e8:	1009883a 	mov	r4,r2
100031ec:	194b883a 	add	r5,r3,r5
100031f0:	843fffc4 	addi	r16,r16,-1
100031f4:	d9801115 	stw	r6,68(sp)
100031f8:	000d883a 	mov	r6,zero
100031fc:	01cffe34 	movhi	r7,16376
10003200:	000c4e40 	call	1000c4e4 <__subdf3>
10003204:	0198dbf4 	movhi	r6,25455
10003208:	01cff4f4 	movhi	r7,16339
1000320c:	3190d844 	addi	r6,r6,17249
10003210:	39e1e9c4 	addi	r7,r7,-30809
10003214:	1009883a 	mov	r4,r2
10003218:	180b883a 	mov	r5,r3
1000321c:	000bdcc0 	call	1000bdcc <__muldf3>
10003220:	01a2d874 	movhi	r6,35681
10003224:	01cff1f4 	movhi	r7,16327
10003228:	31b22cc4 	addi	r6,r6,-14157
1000322c:	39e28a04 	addi	r7,r7,-30168
10003230:	180b883a 	mov	r5,r3
10003234:	1009883a 	mov	r4,r2
10003238:	000a9e00 	call	1000a9e0 <__adddf3>
1000323c:	8009883a 	mov	r4,r16
10003240:	1029883a 	mov	r20,r2
10003244:	1823883a 	mov	r17,r3
10003248:	000ce600 	call	1000ce60 <__floatsidf>
1000324c:	019427f4 	movhi	r6,20639
10003250:	01cff4f4 	movhi	r7,16339
10003254:	319e7ec4 	addi	r6,r6,31227
10003258:	39d104c4 	addi	r7,r7,17427
1000325c:	1009883a 	mov	r4,r2
10003260:	180b883a 	mov	r5,r3
10003264:	000bdcc0 	call	1000bdcc <__muldf3>
10003268:	100d883a 	mov	r6,r2
1000326c:	180f883a 	mov	r7,r3
10003270:	a009883a 	mov	r4,r20
10003274:	880b883a 	mov	r5,r17
10003278:	000a9e00 	call	1000a9e0 <__adddf3>
1000327c:	1009883a 	mov	r4,r2
10003280:	180b883a 	mov	r5,r3
10003284:	1029883a 	mov	r20,r2
10003288:	1823883a 	mov	r17,r3
1000328c:	000cde00 	call	1000cde0 <__fixdfsi>
10003290:	000d883a 	mov	r6,zero
10003294:	000f883a 	mov	r7,zero
10003298:	a009883a 	mov	r4,r20
1000329c:	880b883a 	mov	r5,r17
100032a0:	d8800515 	stw	r2,20(sp)
100032a4:	000bcd80 	call	1000bcd8 <__ledf2>
100032a8:	10028716 	blt	r2,zero,10003cc8 <_dtoa_r+0xc88>
100032ac:	d8c00517 	ldw	r3,20(sp)
100032b0:	00800584 	movi	r2,22
100032b4:	10c27536 	bltu	r2,r3,10003c8c <_dtoa_r+0xc4c>
100032b8:	180490fa 	slli	r2,r3,3
100032bc:	00c40074 	movhi	r3,4097
100032c0:	18fe3a04 	addi	r3,r3,-1816
100032c4:	1885883a 	add	r2,r3,r2
100032c8:	11000017 	ldw	r4,0(r2)
100032cc:	11400117 	ldw	r5,4(r2)
100032d0:	900d883a 	mov	r6,r18
100032d4:	980f883a 	mov	r7,r19
100032d8:	000bbfc0 	call	1000bbfc <__gedf2>
100032dc:	00828d0e 	bge	zero,r2,10003d14 <_dtoa_r+0xcd4>
100032e0:	d9000517 	ldw	r4,20(sp)
100032e4:	d8000e15 	stw	zero,56(sp)
100032e8:	213fffc4 	addi	r4,r4,-1
100032ec:	d9000515 	stw	r4,20(sp)
100032f0:	b42dc83a 	sub	r22,r22,r16
100032f4:	b5bfffc4 	addi	r22,r22,-1
100032f8:	b0026f16 	blt	r22,zero,10003cb8 <_dtoa_r+0xc78>
100032fc:	d8000815 	stw	zero,32(sp)
10003300:	d9c00517 	ldw	r7,20(sp)
10003304:	38026416 	blt	r7,zero,10003c98 <_dtoa_r+0xc58>
10003308:	b1ed883a 	add	r22,r22,r7
1000330c:	d9c00d15 	stw	r7,52(sp)
10003310:	d8000a15 	stw	zero,40(sp)
10003314:	d9800317 	ldw	r6,12(sp)
10003318:	00800244 	movi	r2,9
1000331c:	11811436 	bltu	r2,r6,10003770 <_dtoa_r+0x730>
10003320:	00800144 	movi	r2,5
10003324:	1184e10e 	bge	r2,r6,100046ac <_dtoa_r+0x166c>
10003328:	31bfff04 	addi	r6,r6,-4
1000332c:	d9800315 	stw	r6,12(sp)
10003330:	0023883a 	mov	r17,zero
10003334:	d9800317 	ldw	r6,12(sp)
10003338:	008000c4 	movi	r2,3
1000333c:	30836726 	beq	r6,r2,100040dc <_dtoa_r+0x109c>
10003340:	1183410e 	bge	r2,r6,10004048 <_dtoa_r+0x1008>
10003344:	d9c00317 	ldw	r7,12(sp)
10003348:	00800104 	movi	r2,4
1000334c:	38827c26 	beq	r7,r2,10003d40 <_dtoa_r+0xd00>
10003350:	00800144 	movi	r2,5
10003354:	3884c41e 	bne	r7,r2,10004668 <_dtoa_r+0x1628>
10003358:	00800044 	movi	r2,1
1000335c:	d8800b15 	stw	r2,44(sp)
10003360:	d8c00517 	ldw	r3,20(sp)
10003364:	d9002217 	ldw	r4,136(sp)
10003368:	1907883a 	add	r3,r3,r4
1000336c:	19800044 	addi	r6,r3,1
10003370:	d8c00c15 	stw	r3,48(sp)
10003374:	d9800615 	stw	r6,24(sp)
10003378:	0183a40e 	bge	zero,r6,1000420c <_dtoa_r+0x11cc>
1000337c:	d9800617 	ldw	r6,24(sp)
10003380:	3021883a 	mov	r16,r6
10003384:	e0001115 	stw	zero,68(fp)
10003388:	008005c4 	movi	r2,23
1000338c:	1184c92e 	bgeu	r2,r6,100046b4 <_dtoa_r+0x1674>
10003390:	00c00044 	movi	r3,1
10003394:	00800104 	movi	r2,4
10003398:	1085883a 	add	r2,r2,r2
1000339c:	11000504 	addi	r4,r2,20
100033a0:	180b883a 	mov	r5,r3
100033a4:	18c00044 	addi	r3,r3,1
100033a8:	313ffb2e 	bgeu	r6,r4,10003398 <__alt_data_end+0xf8003398>
100033ac:	e1401115 	stw	r5,68(fp)
100033b0:	e009883a 	mov	r4,fp
100033b4:	00060c40 	call	100060c4 <_Balloc>
100033b8:	d8800715 	stw	r2,28(sp)
100033bc:	e0801015 	stw	r2,64(fp)
100033c0:	00800384 	movi	r2,14
100033c4:	1400f736 	bltu	r2,r16,100037a4 <_dtoa_r+0x764>
100033c8:	8800f626 	beq	r17,zero,100037a4 <_dtoa_r+0x764>
100033cc:	d9c00517 	ldw	r7,20(sp)
100033d0:	01c39a0e 	bge	zero,r7,1000423c <_dtoa_r+0x11fc>
100033d4:	388003cc 	andi	r2,r7,15
100033d8:	100490fa 	slli	r2,r2,3
100033dc:	382bd13a 	srai	r21,r7,4
100033e0:	00c40074 	movhi	r3,4097
100033e4:	18fe3a04 	addi	r3,r3,-1816
100033e8:	1885883a 	add	r2,r3,r2
100033ec:	a8c0040c 	andi	r3,r21,16
100033f0:	12400017 	ldw	r9,0(r2)
100033f4:	12000117 	ldw	r8,4(r2)
100033f8:	18037926 	beq	r3,zero,100041e0 <_dtoa_r+0x11a0>
100033fc:	00840074 	movhi	r2,4097
10003400:	10be3004 	addi	r2,r2,-1856
10003404:	11800817 	ldw	r6,32(r2)
10003408:	11c00917 	ldw	r7,36(r2)
1000340c:	9009883a 	mov	r4,r18
10003410:	980b883a 	mov	r5,r19
10003414:	da001715 	stw	r8,92(sp)
10003418:	da401615 	stw	r9,88(sp)
1000341c:	000b28c0 	call	1000b28c <__divdf3>
10003420:	da001717 	ldw	r8,92(sp)
10003424:	da401617 	ldw	r9,88(sp)
10003428:	ad4003cc 	andi	r21,r21,15
1000342c:	040000c4 	movi	r16,3
10003430:	1023883a 	mov	r17,r2
10003434:	1829883a 	mov	r20,r3
10003438:	a8001126 	beq	r21,zero,10003480 <_dtoa_r+0x440>
1000343c:	05c40074 	movhi	r23,4097
10003440:	bdfe3004 	addi	r23,r23,-1856
10003444:	4805883a 	mov	r2,r9
10003448:	4007883a 	mov	r3,r8
1000344c:	a980004c 	andi	r6,r21,1
10003450:	1009883a 	mov	r4,r2
10003454:	a82bd07a 	srai	r21,r21,1
10003458:	180b883a 	mov	r5,r3
1000345c:	30000426 	beq	r6,zero,10003470 <_dtoa_r+0x430>
10003460:	b9800017 	ldw	r6,0(r23)
10003464:	b9c00117 	ldw	r7,4(r23)
10003468:	84000044 	addi	r16,r16,1
1000346c:	000bdcc0 	call	1000bdcc <__muldf3>
10003470:	bdc00204 	addi	r23,r23,8
10003474:	a83ff51e 	bne	r21,zero,1000344c <__alt_data_end+0xf800344c>
10003478:	1013883a 	mov	r9,r2
1000347c:	1811883a 	mov	r8,r3
10003480:	480d883a 	mov	r6,r9
10003484:	400f883a 	mov	r7,r8
10003488:	8809883a 	mov	r4,r17
1000348c:	a00b883a 	mov	r5,r20
10003490:	000b28c0 	call	1000b28c <__divdf3>
10003494:	d8800f15 	stw	r2,60(sp)
10003498:	d8c01015 	stw	r3,64(sp)
1000349c:	d8c00e17 	ldw	r3,56(sp)
100034a0:	18000626 	beq	r3,zero,100034bc <_dtoa_r+0x47c>
100034a4:	d9000f17 	ldw	r4,60(sp)
100034a8:	d9401017 	ldw	r5,64(sp)
100034ac:	000d883a 	mov	r6,zero
100034b0:	01cffc34 	movhi	r7,16368
100034b4:	000bcd80 	call	1000bcd8 <__ledf2>
100034b8:	10040b16 	blt	r2,zero,100044e8 <_dtoa_r+0x14a8>
100034bc:	8009883a 	mov	r4,r16
100034c0:	000ce600 	call	1000ce60 <__floatsidf>
100034c4:	d9800f17 	ldw	r6,60(sp)
100034c8:	d9c01017 	ldw	r7,64(sp)
100034cc:	1009883a 	mov	r4,r2
100034d0:	180b883a 	mov	r5,r3
100034d4:	000bdcc0 	call	1000bdcc <__muldf3>
100034d8:	000d883a 	mov	r6,zero
100034dc:	01d00734 	movhi	r7,16412
100034e0:	1009883a 	mov	r4,r2
100034e4:	180b883a 	mov	r5,r3
100034e8:	000a9e00 	call	1000a9e0 <__adddf3>
100034ec:	1021883a 	mov	r16,r2
100034f0:	d8800617 	ldw	r2,24(sp)
100034f4:	047f3034 	movhi	r17,64704
100034f8:	1c63883a 	add	r17,r3,r17
100034fc:	10031826 	beq	r2,zero,10004160 <_dtoa_r+0x1120>
10003500:	d8c00517 	ldw	r3,20(sp)
10003504:	db000617 	ldw	r12,24(sp)
10003508:	d8c01315 	stw	r3,76(sp)
1000350c:	d9000b17 	ldw	r4,44(sp)
10003510:	20038f26 	beq	r4,zero,10004350 <_dtoa_r+0x1310>
10003514:	60bfffc4 	addi	r2,r12,-1
10003518:	100490fa 	slli	r2,r2,3
1000351c:	00c40074 	movhi	r3,4097
10003520:	18fe3a04 	addi	r3,r3,-1816
10003524:	1885883a 	add	r2,r3,r2
10003528:	11800017 	ldw	r6,0(r2)
1000352c:	11c00117 	ldw	r7,4(r2)
10003530:	d8800717 	ldw	r2,28(sp)
10003534:	0009883a 	mov	r4,zero
10003538:	014ff834 	movhi	r5,16352
1000353c:	db001615 	stw	r12,88(sp)
10003540:	15c00044 	addi	r23,r2,1
10003544:	000b28c0 	call	1000b28c <__divdf3>
10003548:	800d883a 	mov	r6,r16
1000354c:	880f883a 	mov	r7,r17
10003550:	1009883a 	mov	r4,r2
10003554:	180b883a 	mov	r5,r3
10003558:	000c4e40 	call	1000c4e4 <__subdf3>
1000355c:	d9401017 	ldw	r5,64(sp)
10003560:	d9000f17 	ldw	r4,60(sp)
10003564:	102b883a 	mov	r21,r2
10003568:	d8c01215 	stw	r3,72(sp)
1000356c:	000cde00 	call	1000cde0 <__fixdfsi>
10003570:	1009883a 	mov	r4,r2
10003574:	1029883a 	mov	r20,r2
10003578:	000ce600 	call	1000ce60 <__floatsidf>
1000357c:	d9000f17 	ldw	r4,60(sp)
10003580:	d9401017 	ldw	r5,64(sp)
10003584:	100d883a 	mov	r6,r2
10003588:	180f883a 	mov	r7,r3
1000358c:	000c4e40 	call	1000c4e4 <__subdf3>
10003590:	1823883a 	mov	r17,r3
10003594:	d8c00717 	ldw	r3,28(sp)
10003598:	d9401217 	ldw	r5,72(sp)
1000359c:	a2000c04 	addi	r8,r20,48
100035a0:	1021883a 	mov	r16,r2
100035a4:	1a000005 	stb	r8,0(r3)
100035a8:	800d883a 	mov	r6,r16
100035ac:	880f883a 	mov	r7,r17
100035b0:	a809883a 	mov	r4,r21
100035b4:	4029883a 	mov	r20,r8
100035b8:	000bbfc0 	call	1000bbfc <__gedf2>
100035bc:	00841d16 	blt	zero,r2,10004634 <_dtoa_r+0x15f4>
100035c0:	800d883a 	mov	r6,r16
100035c4:	880f883a 	mov	r7,r17
100035c8:	0009883a 	mov	r4,zero
100035cc:	014ffc34 	movhi	r5,16368
100035d0:	000c4e40 	call	1000c4e4 <__subdf3>
100035d4:	d9401217 	ldw	r5,72(sp)
100035d8:	100d883a 	mov	r6,r2
100035dc:	180f883a 	mov	r7,r3
100035e0:	a809883a 	mov	r4,r21
100035e4:	000bbfc0 	call	1000bbfc <__gedf2>
100035e8:	db001617 	ldw	r12,88(sp)
100035ec:	00840e16 	blt	zero,r2,10004628 <_dtoa_r+0x15e8>
100035f0:	00800044 	movi	r2,1
100035f4:	13006b0e 	bge	r2,r12,100037a4 <_dtoa_r+0x764>
100035f8:	d9000717 	ldw	r4,28(sp)
100035fc:	dd800f15 	stw	r22,60(sp)
10003600:	dcc01015 	stw	r19,64(sp)
10003604:	2319883a 	add	r12,r4,r12
10003608:	dcc01217 	ldw	r19,72(sp)
1000360c:	602d883a 	mov	r22,r12
10003610:	dc801215 	stw	r18,72(sp)
10003614:	b825883a 	mov	r18,r23
10003618:	00000906 	br	10003640 <_dtoa_r+0x600>
1000361c:	000c4e40 	call	1000c4e4 <__subdf3>
10003620:	a80d883a 	mov	r6,r21
10003624:	980f883a 	mov	r7,r19
10003628:	1009883a 	mov	r4,r2
1000362c:	180b883a 	mov	r5,r3
10003630:	000bcd80 	call	1000bcd8 <__ledf2>
10003634:	1003e816 	blt	r2,zero,100045d8 <_dtoa_r+0x1598>
10003638:	b825883a 	mov	r18,r23
1000363c:	bd83e926 	beq	r23,r22,100045e4 <_dtoa_r+0x15a4>
10003640:	a809883a 	mov	r4,r21
10003644:	980b883a 	mov	r5,r19
10003648:	000d883a 	mov	r6,zero
1000364c:	01d00934 	movhi	r7,16420
10003650:	000bdcc0 	call	1000bdcc <__muldf3>
10003654:	000d883a 	mov	r6,zero
10003658:	01d00934 	movhi	r7,16420
1000365c:	8009883a 	mov	r4,r16
10003660:	880b883a 	mov	r5,r17
10003664:	102b883a 	mov	r21,r2
10003668:	1827883a 	mov	r19,r3
1000366c:	000bdcc0 	call	1000bdcc <__muldf3>
10003670:	180b883a 	mov	r5,r3
10003674:	1009883a 	mov	r4,r2
10003678:	1821883a 	mov	r16,r3
1000367c:	1023883a 	mov	r17,r2
10003680:	000cde00 	call	1000cde0 <__fixdfsi>
10003684:	1009883a 	mov	r4,r2
10003688:	1029883a 	mov	r20,r2
1000368c:	000ce600 	call	1000ce60 <__floatsidf>
10003690:	8809883a 	mov	r4,r17
10003694:	800b883a 	mov	r5,r16
10003698:	100d883a 	mov	r6,r2
1000369c:	180f883a 	mov	r7,r3
100036a0:	000c4e40 	call	1000c4e4 <__subdf3>
100036a4:	a5000c04 	addi	r20,r20,48
100036a8:	a80d883a 	mov	r6,r21
100036ac:	980f883a 	mov	r7,r19
100036b0:	1009883a 	mov	r4,r2
100036b4:	180b883a 	mov	r5,r3
100036b8:	95000005 	stb	r20,0(r18)
100036bc:	1021883a 	mov	r16,r2
100036c0:	1823883a 	mov	r17,r3
100036c4:	000bcd80 	call	1000bcd8 <__ledf2>
100036c8:	bdc00044 	addi	r23,r23,1
100036cc:	800d883a 	mov	r6,r16
100036d0:	880f883a 	mov	r7,r17
100036d4:	0009883a 	mov	r4,zero
100036d8:	014ffc34 	movhi	r5,16368
100036dc:	103fcf0e 	bge	r2,zero,1000361c <__alt_data_end+0xf800361c>
100036e0:	d8c01317 	ldw	r3,76(sp)
100036e4:	d8c00515 	stw	r3,20(sp)
100036e8:	d9400917 	ldw	r5,36(sp)
100036ec:	e009883a 	mov	r4,fp
100036f0:	000616c0 	call	1000616c <_Bfree>
100036f4:	d9000517 	ldw	r4,20(sp)
100036f8:	d9802317 	ldw	r6,140(sp)
100036fc:	d9c02517 	ldw	r7,148(sp)
10003700:	b8000005 	stb	zero,0(r23)
10003704:	20800044 	addi	r2,r4,1
10003708:	30800015 	stw	r2,0(r6)
1000370c:	3802aa26 	beq	r7,zero,100041b8 <_dtoa_r+0x1178>
10003710:	3dc00015 	stw	r23,0(r7)
10003714:	d8800717 	ldw	r2,28(sp)
10003718:	003e7906 	br	10003100 <__alt_data_end+0xf8003100>
1000371c:	00800434 	movhi	r2,16
10003720:	10bfffc4 	addi	r2,r2,-1
10003724:	88a2703a 	and	r17,r17,r2
10003728:	883e851e 	bne	r17,zero,10003140 <__alt_data_end+0xf8003140>
1000372c:	00840074 	movhi	r2,4097
10003730:	10be1b04 	addi	r2,r2,-1940
10003734:	003e8406 	br	10003148 <__alt_data_end+0xf8003148>
10003738:	10c00204 	addi	r3,r2,8
1000373c:	003e8706 	br	1000315c <__alt_data_end+0xf800315c>
10003740:	01400434 	movhi	r5,16
10003744:	297fffc4 	addi	r5,r5,-1
10003748:	994a703a 	and	r5,r19,r5
1000374c:	9009883a 	mov	r4,r18
10003750:	843f0044 	addi	r16,r16,-1023
10003754:	294ffc34 	orhi	r5,r5,16368
10003758:	dd800217 	ldw	r22,8(sp)
1000375c:	d8001115 	stw	zero,68(sp)
10003760:	003ea506 	br	100031f8 <__alt_data_end+0xf80031f8>
10003764:	00840074 	movhi	r2,4097
10003768:	10be1204 	addi	r2,r2,-1976
1000376c:	003e6406 	br	10003100 <__alt_data_end+0xf8003100>
10003770:	e0001115 	stw	zero,68(fp)
10003774:	000b883a 	mov	r5,zero
10003778:	e009883a 	mov	r4,fp
1000377c:	00060c40 	call	100060c4 <_Balloc>
10003780:	01bfffc4 	movi	r6,-1
10003784:	01c00044 	movi	r7,1
10003788:	d8800715 	stw	r2,28(sp)
1000378c:	d9800c15 	stw	r6,48(sp)
10003790:	e0801015 	stw	r2,64(fp)
10003794:	d8000315 	stw	zero,12(sp)
10003798:	d9c00b15 	stw	r7,44(sp)
1000379c:	d9800615 	stw	r6,24(sp)
100037a0:	d8002215 	stw	zero,136(sp)
100037a4:	d8800117 	ldw	r2,4(sp)
100037a8:	10008916 	blt	r2,zero,100039d0 <_dtoa_r+0x990>
100037ac:	d9000517 	ldw	r4,20(sp)
100037b0:	00c00384 	movi	r3,14
100037b4:	19008616 	blt	r3,r4,100039d0 <_dtoa_r+0x990>
100037b8:	200490fa 	slli	r2,r4,3
100037bc:	00c40074 	movhi	r3,4097
100037c0:	d9802217 	ldw	r6,136(sp)
100037c4:	18fe3a04 	addi	r3,r3,-1816
100037c8:	1885883a 	add	r2,r3,r2
100037cc:	14000017 	ldw	r16,0(r2)
100037d0:	14400117 	ldw	r17,4(r2)
100037d4:	30016316 	blt	r6,zero,10003d64 <_dtoa_r+0xd24>
100037d8:	800d883a 	mov	r6,r16
100037dc:	880f883a 	mov	r7,r17
100037e0:	9009883a 	mov	r4,r18
100037e4:	980b883a 	mov	r5,r19
100037e8:	000b28c0 	call	1000b28c <__divdf3>
100037ec:	180b883a 	mov	r5,r3
100037f0:	1009883a 	mov	r4,r2
100037f4:	000cde00 	call	1000cde0 <__fixdfsi>
100037f8:	1009883a 	mov	r4,r2
100037fc:	102b883a 	mov	r21,r2
10003800:	000ce600 	call	1000ce60 <__floatsidf>
10003804:	800d883a 	mov	r6,r16
10003808:	880f883a 	mov	r7,r17
1000380c:	1009883a 	mov	r4,r2
10003810:	180b883a 	mov	r5,r3
10003814:	000bdcc0 	call	1000bdcc <__muldf3>
10003818:	100d883a 	mov	r6,r2
1000381c:	180f883a 	mov	r7,r3
10003820:	9009883a 	mov	r4,r18
10003824:	980b883a 	mov	r5,r19
10003828:	000c4e40 	call	1000c4e4 <__subdf3>
1000382c:	d9c00717 	ldw	r7,28(sp)
10003830:	1009883a 	mov	r4,r2
10003834:	a8800c04 	addi	r2,r21,48
10003838:	38800005 	stb	r2,0(r7)
1000383c:	3dc00044 	addi	r23,r7,1
10003840:	d9c00617 	ldw	r7,24(sp)
10003844:	01800044 	movi	r6,1
10003848:	180b883a 	mov	r5,r3
1000384c:	2005883a 	mov	r2,r4
10003850:	39803826 	beq	r7,r6,10003934 <_dtoa_r+0x8f4>
10003854:	000d883a 	mov	r6,zero
10003858:	01d00934 	movhi	r7,16420
1000385c:	000bdcc0 	call	1000bdcc <__muldf3>
10003860:	000d883a 	mov	r6,zero
10003864:	000f883a 	mov	r7,zero
10003868:	1009883a 	mov	r4,r2
1000386c:	180b883a 	mov	r5,r3
10003870:	1025883a 	mov	r18,r2
10003874:	1827883a 	mov	r19,r3
10003878:	000bb740 	call	1000bb74 <__eqdf2>
1000387c:	103f9a26 	beq	r2,zero,100036e8 <__alt_data_end+0xf80036e8>
10003880:	d9c00617 	ldw	r7,24(sp)
10003884:	d8c00717 	ldw	r3,28(sp)
10003888:	b829883a 	mov	r20,r23
1000388c:	38bfffc4 	addi	r2,r7,-1
10003890:	18ad883a 	add	r22,r3,r2
10003894:	00000a06 	br	100038c0 <_dtoa_r+0x880>
10003898:	000bdcc0 	call	1000bdcc <__muldf3>
1000389c:	000d883a 	mov	r6,zero
100038a0:	000f883a 	mov	r7,zero
100038a4:	1009883a 	mov	r4,r2
100038a8:	180b883a 	mov	r5,r3
100038ac:	1025883a 	mov	r18,r2
100038b0:	1827883a 	mov	r19,r3
100038b4:	b829883a 	mov	r20,r23
100038b8:	000bb740 	call	1000bb74 <__eqdf2>
100038bc:	103f8a26 	beq	r2,zero,100036e8 <__alt_data_end+0xf80036e8>
100038c0:	800d883a 	mov	r6,r16
100038c4:	880f883a 	mov	r7,r17
100038c8:	9009883a 	mov	r4,r18
100038cc:	980b883a 	mov	r5,r19
100038d0:	000b28c0 	call	1000b28c <__divdf3>
100038d4:	180b883a 	mov	r5,r3
100038d8:	1009883a 	mov	r4,r2
100038dc:	000cde00 	call	1000cde0 <__fixdfsi>
100038e0:	1009883a 	mov	r4,r2
100038e4:	102b883a 	mov	r21,r2
100038e8:	000ce600 	call	1000ce60 <__floatsidf>
100038ec:	800d883a 	mov	r6,r16
100038f0:	880f883a 	mov	r7,r17
100038f4:	1009883a 	mov	r4,r2
100038f8:	180b883a 	mov	r5,r3
100038fc:	000bdcc0 	call	1000bdcc <__muldf3>
10003900:	100d883a 	mov	r6,r2
10003904:	180f883a 	mov	r7,r3
10003908:	9009883a 	mov	r4,r18
1000390c:	980b883a 	mov	r5,r19
10003910:	000c4e40 	call	1000c4e4 <__subdf3>
10003914:	aa000c04 	addi	r8,r21,48
10003918:	a2000005 	stb	r8,0(r20)
1000391c:	000d883a 	mov	r6,zero
10003920:	01d00934 	movhi	r7,16420
10003924:	1009883a 	mov	r4,r2
10003928:	180b883a 	mov	r5,r3
1000392c:	a5c00044 	addi	r23,r20,1
10003930:	b53fd91e 	bne	r22,r20,10003898 <__alt_data_end+0xf8003898>
10003934:	100d883a 	mov	r6,r2
10003938:	180f883a 	mov	r7,r3
1000393c:	1009883a 	mov	r4,r2
10003940:	180b883a 	mov	r5,r3
10003944:	000a9e00 	call	1000a9e0 <__adddf3>
10003948:	100d883a 	mov	r6,r2
1000394c:	180f883a 	mov	r7,r3
10003950:	8009883a 	mov	r4,r16
10003954:	880b883a 	mov	r5,r17
10003958:	1027883a 	mov	r19,r2
1000395c:	1825883a 	mov	r18,r3
10003960:	000bcd80 	call	1000bcd8 <__ledf2>
10003964:	10000816 	blt	r2,zero,10003988 <_dtoa_r+0x948>
10003968:	980d883a 	mov	r6,r19
1000396c:	900f883a 	mov	r7,r18
10003970:	8009883a 	mov	r4,r16
10003974:	880b883a 	mov	r5,r17
10003978:	000bb740 	call	1000bb74 <__eqdf2>
1000397c:	103f5a1e 	bne	r2,zero,100036e8 <__alt_data_end+0xf80036e8>
10003980:	ad40004c 	andi	r21,r21,1
10003984:	a83f5826 	beq	r21,zero,100036e8 <__alt_data_end+0xf80036e8>
10003988:	bd3fffc3 	ldbu	r20,-1(r23)
1000398c:	b8bfffc4 	addi	r2,r23,-1
10003990:	1007883a 	mov	r3,r2
10003994:	01400e44 	movi	r5,57
10003998:	d9800717 	ldw	r6,28(sp)
1000399c:	00000506 	br	100039b4 <_dtoa_r+0x974>
100039a0:	18ffffc4 	addi	r3,r3,-1
100039a4:	11824726 	beq	r2,r6,100042c4 <_dtoa_r+0x1284>
100039a8:	1d000003 	ldbu	r20,0(r3)
100039ac:	102f883a 	mov	r23,r2
100039b0:	10bfffc4 	addi	r2,r2,-1
100039b4:	a1003fcc 	andi	r4,r20,255
100039b8:	2100201c 	xori	r4,r4,128
100039bc:	213fe004 	addi	r4,r4,-128
100039c0:	217ff726 	beq	r4,r5,100039a0 <__alt_data_end+0xf80039a0>
100039c4:	a2000044 	addi	r8,r20,1
100039c8:	12000005 	stb	r8,0(r2)
100039cc:	003f4606 	br	100036e8 <__alt_data_end+0xf80036e8>
100039d0:	d9000b17 	ldw	r4,44(sp)
100039d4:	2000c826 	beq	r4,zero,10003cf8 <_dtoa_r+0xcb8>
100039d8:	d9800317 	ldw	r6,12(sp)
100039dc:	00c00044 	movi	r3,1
100039e0:	1980f90e 	bge	r3,r6,10003dc8 <_dtoa_r+0xd88>
100039e4:	d8800617 	ldw	r2,24(sp)
100039e8:	d8c00a17 	ldw	r3,40(sp)
100039ec:	157fffc4 	addi	r21,r2,-1
100039f0:	1d41f316 	blt	r3,r21,100041c0 <_dtoa_r+0x1180>
100039f4:	1d6bc83a 	sub	r21,r3,r21
100039f8:	d9c00617 	ldw	r7,24(sp)
100039fc:	3802aa16 	blt	r7,zero,100044a8 <_dtoa_r+0x1468>
10003a00:	dd000817 	ldw	r20,32(sp)
10003a04:	d8800617 	ldw	r2,24(sp)
10003a08:	d8c00817 	ldw	r3,32(sp)
10003a0c:	01400044 	movi	r5,1
10003a10:	e009883a 	mov	r4,fp
10003a14:	1887883a 	add	r3,r3,r2
10003a18:	d8c00815 	stw	r3,32(sp)
10003a1c:	b0ad883a 	add	r22,r22,r2
10003a20:	00064d00 	call	100064d0 <__i2b>
10003a24:	1023883a 	mov	r17,r2
10003a28:	a0000826 	beq	r20,zero,10003a4c <_dtoa_r+0xa0c>
10003a2c:	0580070e 	bge	zero,r22,10003a4c <_dtoa_r+0xa0c>
10003a30:	a005883a 	mov	r2,r20
10003a34:	b500b916 	blt	r22,r20,10003d1c <_dtoa_r+0xcdc>
10003a38:	d9000817 	ldw	r4,32(sp)
10003a3c:	a0a9c83a 	sub	r20,r20,r2
10003a40:	b0adc83a 	sub	r22,r22,r2
10003a44:	2089c83a 	sub	r4,r4,r2
10003a48:	d9000815 	stw	r4,32(sp)
10003a4c:	d9800a17 	ldw	r6,40(sp)
10003a50:	0181810e 	bge	zero,r6,10004058 <_dtoa_r+0x1018>
10003a54:	d9c00b17 	ldw	r7,44(sp)
10003a58:	3800b326 	beq	r7,zero,10003d28 <_dtoa_r+0xce8>
10003a5c:	a800b226 	beq	r21,zero,10003d28 <_dtoa_r+0xce8>
10003a60:	880b883a 	mov	r5,r17
10003a64:	a80d883a 	mov	r6,r21
10003a68:	e009883a 	mov	r4,fp
10003a6c:	00067040 	call	10006704 <__pow5mult>
10003a70:	d9800917 	ldw	r6,36(sp)
10003a74:	100b883a 	mov	r5,r2
10003a78:	e009883a 	mov	r4,fp
10003a7c:	1023883a 	mov	r17,r2
10003a80:	000650c0 	call	1000650c <__multiply>
10003a84:	1021883a 	mov	r16,r2
10003a88:	d8800a17 	ldw	r2,40(sp)
10003a8c:	d9400917 	ldw	r5,36(sp)
10003a90:	e009883a 	mov	r4,fp
10003a94:	1545c83a 	sub	r2,r2,r21
10003a98:	d8800a15 	stw	r2,40(sp)
10003a9c:	000616c0 	call	1000616c <_Bfree>
10003aa0:	d8c00a17 	ldw	r3,40(sp)
10003aa4:	18009f1e 	bne	r3,zero,10003d24 <_dtoa_r+0xce4>
10003aa8:	05c00044 	movi	r23,1
10003aac:	e009883a 	mov	r4,fp
10003ab0:	b80b883a 	mov	r5,r23
10003ab4:	00064d00 	call	100064d0 <__i2b>
10003ab8:	d9000d17 	ldw	r4,52(sp)
10003abc:	102b883a 	mov	r21,r2
10003ac0:	2000ce26 	beq	r4,zero,10003dfc <_dtoa_r+0xdbc>
10003ac4:	200d883a 	mov	r6,r4
10003ac8:	100b883a 	mov	r5,r2
10003acc:	e009883a 	mov	r4,fp
10003ad0:	00067040 	call	10006704 <__pow5mult>
10003ad4:	d9800317 	ldw	r6,12(sp)
10003ad8:	102b883a 	mov	r21,r2
10003adc:	b981810e 	bge	r23,r6,100040e4 <_dtoa_r+0x10a4>
10003ae0:	0027883a 	mov	r19,zero
10003ae4:	a8800417 	ldw	r2,16(r21)
10003ae8:	05c00804 	movi	r23,32
10003aec:	10800104 	addi	r2,r2,4
10003af0:	1085883a 	add	r2,r2,r2
10003af4:	1085883a 	add	r2,r2,r2
10003af8:	a885883a 	add	r2,r21,r2
10003afc:	11000017 	ldw	r4,0(r2)
10003b00:	00063b80 	call	100063b8 <__hi0bits>
10003b04:	b885c83a 	sub	r2,r23,r2
10003b08:	1585883a 	add	r2,r2,r22
10003b0c:	108007cc 	andi	r2,r2,31
10003b10:	1000b326 	beq	r2,zero,10003de0 <_dtoa_r+0xda0>
10003b14:	00c00804 	movi	r3,32
10003b18:	1887c83a 	sub	r3,r3,r2
10003b1c:	01000104 	movi	r4,4
10003b20:	20c2cd0e 	bge	r4,r3,10004658 <_dtoa_r+0x1618>
10003b24:	00c00704 	movi	r3,28
10003b28:	1885c83a 	sub	r2,r3,r2
10003b2c:	d8c00817 	ldw	r3,32(sp)
10003b30:	a0a9883a 	add	r20,r20,r2
10003b34:	b0ad883a 	add	r22,r22,r2
10003b38:	1887883a 	add	r3,r3,r2
10003b3c:	d8c00815 	stw	r3,32(sp)
10003b40:	d9800817 	ldw	r6,32(sp)
10003b44:	0180040e 	bge	zero,r6,10003b58 <_dtoa_r+0xb18>
10003b48:	800b883a 	mov	r5,r16
10003b4c:	e009883a 	mov	r4,fp
10003b50:	00068440 	call	10006844 <__lshift>
10003b54:	1021883a 	mov	r16,r2
10003b58:	0580050e 	bge	zero,r22,10003b70 <_dtoa_r+0xb30>
10003b5c:	a80b883a 	mov	r5,r21
10003b60:	b00d883a 	mov	r6,r22
10003b64:	e009883a 	mov	r4,fp
10003b68:	00068440 	call	10006844 <__lshift>
10003b6c:	102b883a 	mov	r21,r2
10003b70:	d9c00e17 	ldw	r7,56(sp)
10003b74:	3801211e 	bne	r7,zero,10003ffc <_dtoa_r+0xfbc>
10003b78:	d9800617 	ldw	r6,24(sp)
10003b7c:	0181380e 	bge	zero,r6,10004060 <_dtoa_r+0x1020>
10003b80:	d8c00b17 	ldw	r3,44(sp)
10003b84:	1800ab1e 	bne	r3,zero,10003e34 <_dtoa_r+0xdf4>
10003b88:	dc800717 	ldw	r18,28(sp)
10003b8c:	dcc00617 	ldw	r19,24(sp)
10003b90:	9029883a 	mov	r20,r18
10003b94:	00000206 	br	10003ba0 <_dtoa_r+0xb60>
10003b98:	00061940 	call	10006194 <__multadd>
10003b9c:	1021883a 	mov	r16,r2
10003ba0:	a80b883a 	mov	r5,r21
10003ba4:	8009883a 	mov	r4,r16
10003ba8:	0002e400 	call	10002e40 <quorem>
10003bac:	10800c04 	addi	r2,r2,48
10003bb0:	90800005 	stb	r2,0(r18)
10003bb4:	94800044 	addi	r18,r18,1
10003bb8:	9507c83a 	sub	r3,r18,r20
10003bbc:	000f883a 	mov	r7,zero
10003bc0:	01800284 	movi	r6,10
10003bc4:	800b883a 	mov	r5,r16
10003bc8:	e009883a 	mov	r4,fp
10003bcc:	1cfff216 	blt	r3,r19,10003b98 <__alt_data_end+0xf8003b98>
10003bd0:	1011883a 	mov	r8,r2
10003bd4:	d8800617 	ldw	r2,24(sp)
10003bd8:	0082370e 	bge	zero,r2,100044b8 <_dtoa_r+0x1478>
10003bdc:	d9000717 	ldw	r4,28(sp)
10003be0:	0025883a 	mov	r18,zero
10003be4:	20af883a 	add	r23,r4,r2
10003be8:	01800044 	movi	r6,1
10003bec:	800b883a 	mov	r5,r16
10003bf0:	e009883a 	mov	r4,fp
10003bf4:	da001715 	stw	r8,92(sp)
10003bf8:	00068440 	call	10006844 <__lshift>
10003bfc:	a80b883a 	mov	r5,r21
10003c00:	1009883a 	mov	r4,r2
10003c04:	d8800915 	stw	r2,36(sp)
10003c08:	000698c0 	call	1000698c <__mcmp>
10003c0c:	da001717 	ldw	r8,92(sp)
10003c10:	0081800e 	bge	zero,r2,10004214 <_dtoa_r+0x11d4>
10003c14:	b93fffc3 	ldbu	r4,-1(r23)
10003c18:	b8bfffc4 	addi	r2,r23,-1
10003c1c:	1007883a 	mov	r3,r2
10003c20:	01800e44 	movi	r6,57
10003c24:	d9c00717 	ldw	r7,28(sp)
10003c28:	00000506 	br	10003c40 <_dtoa_r+0xc00>
10003c2c:	18ffffc4 	addi	r3,r3,-1
10003c30:	11c12326 	beq	r2,r7,100040c0 <_dtoa_r+0x1080>
10003c34:	19000003 	ldbu	r4,0(r3)
10003c38:	102f883a 	mov	r23,r2
10003c3c:	10bfffc4 	addi	r2,r2,-1
10003c40:	21403fcc 	andi	r5,r4,255
10003c44:	2940201c 	xori	r5,r5,128
10003c48:	297fe004 	addi	r5,r5,-128
10003c4c:	29bff726 	beq	r5,r6,10003c2c <__alt_data_end+0xf8003c2c>
10003c50:	21000044 	addi	r4,r4,1
10003c54:	11000005 	stb	r4,0(r2)
10003c58:	a80b883a 	mov	r5,r21
10003c5c:	e009883a 	mov	r4,fp
10003c60:	000616c0 	call	1000616c <_Bfree>
10003c64:	883ea026 	beq	r17,zero,100036e8 <__alt_data_end+0xf80036e8>
10003c68:	90000426 	beq	r18,zero,10003c7c <_dtoa_r+0xc3c>
10003c6c:	94400326 	beq	r18,r17,10003c7c <_dtoa_r+0xc3c>
10003c70:	900b883a 	mov	r5,r18
10003c74:	e009883a 	mov	r4,fp
10003c78:	000616c0 	call	1000616c <_Bfree>
10003c7c:	880b883a 	mov	r5,r17
10003c80:	e009883a 	mov	r4,fp
10003c84:	000616c0 	call	1000616c <_Bfree>
10003c88:	003e9706 	br	100036e8 <__alt_data_end+0xf80036e8>
10003c8c:	01800044 	movi	r6,1
10003c90:	d9800e15 	stw	r6,56(sp)
10003c94:	003d9606 	br	100032f0 <__alt_data_end+0xf80032f0>
10003c98:	d8800817 	ldw	r2,32(sp)
10003c9c:	d8c00517 	ldw	r3,20(sp)
10003ca0:	d8000d15 	stw	zero,52(sp)
10003ca4:	10c5c83a 	sub	r2,r2,r3
10003ca8:	00c9c83a 	sub	r4,zero,r3
10003cac:	d8800815 	stw	r2,32(sp)
10003cb0:	d9000a15 	stw	r4,40(sp)
10003cb4:	003d9706 	br	10003314 <__alt_data_end+0xf8003314>
10003cb8:	05adc83a 	sub	r22,zero,r22
10003cbc:	dd800815 	stw	r22,32(sp)
10003cc0:	002d883a 	mov	r22,zero
10003cc4:	003d8e06 	br	10003300 <__alt_data_end+0xf8003300>
10003cc8:	d9000517 	ldw	r4,20(sp)
10003ccc:	000ce600 	call	1000ce60 <__floatsidf>
10003cd0:	100d883a 	mov	r6,r2
10003cd4:	180f883a 	mov	r7,r3
10003cd8:	a009883a 	mov	r4,r20
10003cdc:	880b883a 	mov	r5,r17
10003ce0:	000bb740 	call	1000bb74 <__eqdf2>
10003ce4:	103d7126 	beq	r2,zero,100032ac <__alt_data_end+0xf80032ac>
10003ce8:	d9c00517 	ldw	r7,20(sp)
10003cec:	39ffffc4 	addi	r7,r7,-1
10003cf0:	d9c00515 	stw	r7,20(sp)
10003cf4:	003d6d06 	br	100032ac <__alt_data_end+0xf80032ac>
10003cf8:	dd400a17 	ldw	r21,40(sp)
10003cfc:	dd000817 	ldw	r20,32(sp)
10003d00:	0023883a 	mov	r17,zero
10003d04:	003f4806 	br	10003a28 <__alt_data_end+0xf8003a28>
10003d08:	10e3c83a 	sub	r17,r2,r3
10003d0c:	9448983a 	sll	r4,r18,r17
10003d10:	003d3206 	br	100031dc <__alt_data_end+0xf80031dc>
10003d14:	d8000e15 	stw	zero,56(sp)
10003d18:	003d7506 	br	100032f0 <__alt_data_end+0xf80032f0>
10003d1c:	b005883a 	mov	r2,r22
10003d20:	003f4506 	br	10003a38 <__alt_data_end+0xf8003a38>
10003d24:	dc000915 	stw	r16,36(sp)
10003d28:	d9800a17 	ldw	r6,40(sp)
10003d2c:	d9400917 	ldw	r5,36(sp)
10003d30:	e009883a 	mov	r4,fp
10003d34:	00067040 	call	10006704 <__pow5mult>
10003d38:	1021883a 	mov	r16,r2
10003d3c:	003f5a06 	br	10003aa8 <__alt_data_end+0xf8003aa8>
10003d40:	01c00044 	movi	r7,1
10003d44:	d9c00b15 	stw	r7,44(sp)
10003d48:	d8802217 	ldw	r2,136(sp)
10003d4c:	0081280e 	bge	zero,r2,100041f0 <_dtoa_r+0x11b0>
10003d50:	100d883a 	mov	r6,r2
10003d54:	1021883a 	mov	r16,r2
10003d58:	d8800c15 	stw	r2,48(sp)
10003d5c:	d8800615 	stw	r2,24(sp)
10003d60:	003d8806 	br	10003384 <__alt_data_end+0xf8003384>
10003d64:	d8800617 	ldw	r2,24(sp)
10003d68:	00be9b16 	blt	zero,r2,100037d8 <__alt_data_end+0xf80037d8>
10003d6c:	10010f1e 	bne	r2,zero,100041ac <_dtoa_r+0x116c>
10003d70:	880b883a 	mov	r5,r17
10003d74:	000d883a 	mov	r6,zero
10003d78:	01d00534 	movhi	r7,16404
10003d7c:	8009883a 	mov	r4,r16
10003d80:	000bdcc0 	call	1000bdcc <__muldf3>
10003d84:	900d883a 	mov	r6,r18
10003d88:	980f883a 	mov	r7,r19
10003d8c:	1009883a 	mov	r4,r2
10003d90:	180b883a 	mov	r5,r3
10003d94:	000bbfc0 	call	1000bbfc <__gedf2>
10003d98:	002b883a 	mov	r21,zero
10003d9c:	0023883a 	mov	r17,zero
10003da0:	1000bf16 	blt	r2,zero,100040a0 <_dtoa_r+0x1060>
10003da4:	d9802217 	ldw	r6,136(sp)
10003da8:	ddc00717 	ldw	r23,28(sp)
10003dac:	018c303a 	nor	r6,zero,r6
10003db0:	d9800515 	stw	r6,20(sp)
10003db4:	a80b883a 	mov	r5,r21
10003db8:	e009883a 	mov	r4,fp
10003dbc:	000616c0 	call	1000616c <_Bfree>
10003dc0:	883e4926 	beq	r17,zero,100036e8 <__alt_data_end+0xf80036e8>
10003dc4:	003fad06 	br	10003c7c <__alt_data_end+0xf8003c7c>
10003dc8:	d9c01117 	ldw	r7,68(sp)
10003dcc:	3801bc26 	beq	r7,zero,100044c0 <_dtoa_r+0x1480>
10003dd0:	10810cc4 	addi	r2,r2,1075
10003dd4:	dd400a17 	ldw	r21,40(sp)
10003dd8:	dd000817 	ldw	r20,32(sp)
10003ddc:	003f0a06 	br	10003a08 <__alt_data_end+0xf8003a08>
10003de0:	00800704 	movi	r2,28
10003de4:	d9000817 	ldw	r4,32(sp)
10003de8:	a0a9883a 	add	r20,r20,r2
10003dec:	b0ad883a 	add	r22,r22,r2
10003df0:	2089883a 	add	r4,r4,r2
10003df4:	d9000815 	stw	r4,32(sp)
10003df8:	003f5106 	br	10003b40 <__alt_data_end+0xf8003b40>
10003dfc:	d8c00317 	ldw	r3,12(sp)
10003e00:	b8c1fc0e 	bge	r23,r3,100045f4 <_dtoa_r+0x15b4>
10003e04:	0027883a 	mov	r19,zero
10003e08:	b805883a 	mov	r2,r23
10003e0c:	003f3e06 	br	10003b08 <__alt_data_end+0xf8003b08>
10003e10:	880b883a 	mov	r5,r17
10003e14:	e009883a 	mov	r4,fp
10003e18:	000f883a 	mov	r7,zero
10003e1c:	01800284 	movi	r6,10
10003e20:	00061940 	call	10006194 <__multadd>
10003e24:	d9000c17 	ldw	r4,48(sp)
10003e28:	1023883a 	mov	r17,r2
10003e2c:	0102040e 	bge	zero,r4,10004640 <_dtoa_r+0x1600>
10003e30:	d9000615 	stw	r4,24(sp)
10003e34:	0500050e 	bge	zero,r20,10003e4c <_dtoa_r+0xe0c>
10003e38:	880b883a 	mov	r5,r17
10003e3c:	a00d883a 	mov	r6,r20
10003e40:	e009883a 	mov	r4,fp
10003e44:	00068440 	call	10006844 <__lshift>
10003e48:	1023883a 	mov	r17,r2
10003e4c:	9801241e 	bne	r19,zero,100042e0 <_dtoa_r+0x12a0>
10003e50:	8829883a 	mov	r20,r17
10003e54:	d9000617 	ldw	r4,24(sp)
10003e58:	dcc00717 	ldw	r19,28(sp)
10003e5c:	9480004c 	andi	r18,r18,1
10003e60:	20bfffc4 	addi	r2,r4,-1
10003e64:	9885883a 	add	r2,r19,r2
10003e68:	d8800415 	stw	r2,16(sp)
10003e6c:	dc800615 	stw	r18,24(sp)
10003e70:	a80b883a 	mov	r5,r21
10003e74:	8009883a 	mov	r4,r16
10003e78:	0002e400 	call	10002e40 <quorem>
10003e7c:	880b883a 	mov	r5,r17
10003e80:	8009883a 	mov	r4,r16
10003e84:	102f883a 	mov	r23,r2
10003e88:	000698c0 	call	1000698c <__mcmp>
10003e8c:	a80b883a 	mov	r5,r21
10003e90:	a00d883a 	mov	r6,r20
10003e94:	e009883a 	mov	r4,fp
10003e98:	102d883a 	mov	r22,r2
10003e9c:	00069ec0 	call	100069ec <__mdiff>
10003ea0:	1007883a 	mov	r3,r2
10003ea4:	10800317 	ldw	r2,12(r2)
10003ea8:	bc800c04 	addi	r18,r23,48
10003eac:	180b883a 	mov	r5,r3
10003eb0:	10004e1e 	bne	r2,zero,10003fec <_dtoa_r+0xfac>
10003eb4:	8009883a 	mov	r4,r16
10003eb8:	d8c01615 	stw	r3,88(sp)
10003ebc:	000698c0 	call	1000698c <__mcmp>
10003ec0:	d8c01617 	ldw	r3,88(sp)
10003ec4:	e009883a 	mov	r4,fp
10003ec8:	d8801615 	stw	r2,88(sp)
10003ecc:	180b883a 	mov	r5,r3
10003ed0:	000616c0 	call	1000616c <_Bfree>
10003ed4:	d8801617 	ldw	r2,88(sp)
10003ed8:	1000041e 	bne	r2,zero,10003eec <_dtoa_r+0xeac>
10003edc:	d9800317 	ldw	r6,12(sp)
10003ee0:	3000021e 	bne	r6,zero,10003eec <_dtoa_r+0xeac>
10003ee4:	d8c00617 	ldw	r3,24(sp)
10003ee8:	18003726 	beq	r3,zero,10003fc8 <_dtoa_r+0xf88>
10003eec:	b0002016 	blt	r22,zero,10003f70 <_dtoa_r+0xf30>
10003ef0:	b000041e 	bne	r22,zero,10003f04 <_dtoa_r+0xec4>
10003ef4:	d9000317 	ldw	r4,12(sp)
10003ef8:	2000021e 	bne	r4,zero,10003f04 <_dtoa_r+0xec4>
10003efc:	d8c00617 	ldw	r3,24(sp)
10003f00:	18001b26 	beq	r3,zero,10003f70 <_dtoa_r+0xf30>
10003f04:	00810716 	blt	zero,r2,10004324 <_dtoa_r+0x12e4>
10003f08:	d8c00417 	ldw	r3,16(sp)
10003f0c:	9d800044 	addi	r22,r19,1
10003f10:	9c800005 	stb	r18,0(r19)
10003f14:	b02f883a 	mov	r23,r22
10003f18:	98c10626 	beq	r19,r3,10004334 <_dtoa_r+0x12f4>
10003f1c:	800b883a 	mov	r5,r16
10003f20:	000f883a 	mov	r7,zero
10003f24:	01800284 	movi	r6,10
10003f28:	e009883a 	mov	r4,fp
10003f2c:	00061940 	call	10006194 <__multadd>
10003f30:	1021883a 	mov	r16,r2
10003f34:	000f883a 	mov	r7,zero
10003f38:	01800284 	movi	r6,10
10003f3c:	880b883a 	mov	r5,r17
10003f40:	e009883a 	mov	r4,fp
10003f44:	8d002526 	beq	r17,r20,10003fdc <_dtoa_r+0xf9c>
10003f48:	00061940 	call	10006194 <__multadd>
10003f4c:	a00b883a 	mov	r5,r20
10003f50:	000f883a 	mov	r7,zero
10003f54:	01800284 	movi	r6,10
10003f58:	e009883a 	mov	r4,fp
10003f5c:	1023883a 	mov	r17,r2
10003f60:	00061940 	call	10006194 <__multadd>
10003f64:	1029883a 	mov	r20,r2
10003f68:	b027883a 	mov	r19,r22
10003f6c:	003fc006 	br	10003e70 <__alt_data_end+0xf8003e70>
10003f70:	9011883a 	mov	r8,r18
10003f74:	00800e0e 	bge	zero,r2,10003fb0 <_dtoa_r+0xf70>
10003f78:	800b883a 	mov	r5,r16
10003f7c:	01800044 	movi	r6,1
10003f80:	e009883a 	mov	r4,fp
10003f84:	da001715 	stw	r8,92(sp)
10003f88:	00068440 	call	10006844 <__lshift>
10003f8c:	a80b883a 	mov	r5,r21
10003f90:	1009883a 	mov	r4,r2
10003f94:	1021883a 	mov	r16,r2
10003f98:	000698c0 	call	1000698c <__mcmp>
10003f9c:	da001717 	ldw	r8,92(sp)
10003fa0:	0081960e 	bge	zero,r2,100045fc <_dtoa_r+0x15bc>
10003fa4:	00800e44 	movi	r2,57
10003fa8:	40817026 	beq	r8,r2,1000456c <_dtoa_r+0x152c>
10003fac:	ba000c44 	addi	r8,r23,49
10003fb0:	8825883a 	mov	r18,r17
10003fb4:	9dc00044 	addi	r23,r19,1
10003fb8:	9a000005 	stb	r8,0(r19)
10003fbc:	a023883a 	mov	r17,r20
10003fc0:	dc000915 	stw	r16,36(sp)
10003fc4:	003f2406 	br	10003c58 <__alt_data_end+0xf8003c58>
10003fc8:	00800e44 	movi	r2,57
10003fcc:	9011883a 	mov	r8,r18
10003fd0:	90816626 	beq	r18,r2,1000456c <_dtoa_r+0x152c>
10003fd4:	05bff516 	blt	zero,r22,10003fac <__alt_data_end+0xf8003fac>
10003fd8:	003ff506 	br	10003fb0 <__alt_data_end+0xf8003fb0>
10003fdc:	00061940 	call	10006194 <__multadd>
10003fe0:	1023883a 	mov	r17,r2
10003fe4:	1029883a 	mov	r20,r2
10003fe8:	003fdf06 	br	10003f68 <__alt_data_end+0xf8003f68>
10003fec:	e009883a 	mov	r4,fp
10003ff0:	000616c0 	call	1000616c <_Bfree>
10003ff4:	00800044 	movi	r2,1
10003ff8:	003fbc06 	br	10003eec <__alt_data_end+0xf8003eec>
10003ffc:	a80b883a 	mov	r5,r21
10004000:	8009883a 	mov	r4,r16
10004004:	000698c0 	call	1000698c <__mcmp>
10004008:	103edb0e 	bge	r2,zero,10003b78 <__alt_data_end+0xf8003b78>
1000400c:	800b883a 	mov	r5,r16
10004010:	000f883a 	mov	r7,zero
10004014:	01800284 	movi	r6,10
10004018:	e009883a 	mov	r4,fp
1000401c:	00061940 	call	10006194 <__multadd>
10004020:	1021883a 	mov	r16,r2
10004024:	d8800517 	ldw	r2,20(sp)
10004028:	d8c00b17 	ldw	r3,44(sp)
1000402c:	10bfffc4 	addi	r2,r2,-1
10004030:	d8800515 	stw	r2,20(sp)
10004034:	183f761e 	bne	r3,zero,10003e10 <__alt_data_end+0xf8003e10>
10004038:	d9000c17 	ldw	r4,48(sp)
1000403c:	0101730e 	bge	zero,r4,1000460c <_dtoa_r+0x15cc>
10004040:	d9000615 	stw	r4,24(sp)
10004044:	003ed006 	br	10003b88 <__alt_data_end+0xf8003b88>
10004048:	00800084 	movi	r2,2
1000404c:	3081861e 	bne	r6,r2,10004668 <_dtoa_r+0x1628>
10004050:	d8000b15 	stw	zero,44(sp)
10004054:	003f3c06 	br	10003d48 <__alt_data_end+0xf8003d48>
10004058:	dc000917 	ldw	r16,36(sp)
1000405c:	003e9206 	br	10003aa8 <__alt_data_end+0xf8003aa8>
10004060:	d9c00317 	ldw	r7,12(sp)
10004064:	00800084 	movi	r2,2
10004068:	11fec50e 	bge	r2,r7,10003b80 <__alt_data_end+0xf8003b80>
1000406c:	d9000617 	ldw	r4,24(sp)
10004070:	20013c1e 	bne	r4,zero,10004564 <_dtoa_r+0x1524>
10004074:	a80b883a 	mov	r5,r21
10004078:	000f883a 	mov	r7,zero
1000407c:	01800144 	movi	r6,5
10004080:	e009883a 	mov	r4,fp
10004084:	00061940 	call	10006194 <__multadd>
10004088:	100b883a 	mov	r5,r2
1000408c:	8009883a 	mov	r4,r16
10004090:	102b883a 	mov	r21,r2
10004094:	000698c0 	call	1000698c <__mcmp>
10004098:	dc000915 	stw	r16,36(sp)
1000409c:	00bf410e 	bge	zero,r2,10003da4 <__alt_data_end+0xf8003da4>
100040a0:	d9c00717 	ldw	r7,28(sp)
100040a4:	00800c44 	movi	r2,49
100040a8:	38800005 	stb	r2,0(r7)
100040ac:	d8800517 	ldw	r2,20(sp)
100040b0:	3dc00044 	addi	r23,r7,1
100040b4:	10800044 	addi	r2,r2,1
100040b8:	d8800515 	stw	r2,20(sp)
100040bc:	003f3d06 	br	10003db4 <__alt_data_end+0xf8003db4>
100040c0:	d9800517 	ldw	r6,20(sp)
100040c4:	d9c00717 	ldw	r7,28(sp)
100040c8:	00800c44 	movi	r2,49
100040cc:	31800044 	addi	r6,r6,1
100040d0:	d9800515 	stw	r6,20(sp)
100040d4:	38800005 	stb	r2,0(r7)
100040d8:	003edf06 	br	10003c58 <__alt_data_end+0xf8003c58>
100040dc:	d8000b15 	stw	zero,44(sp)
100040e0:	003c9f06 	br	10003360 <__alt_data_end+0xf8003360>
100040e4:	903e7e1e 	bne	r18,zero,10003ae0 <__alt_data_end+0xf8003ae0>
100040e8:	00800434 	movhi	r2,16
100040ec:	10bfffc4 	addi	r2,r2,-1
100040f0:	9884703a 	and	r2,r19,r2
100040f4:	1000ea1e 	bne	r2,zero,100044a0 <_dtoa_r+0x1460>
100040f8:	9cdffc2c 	andhi	r19,r19,32752
100040fc:	9800e826 	beq	r19,zero,100044a0 <_dtoa_r+0x1460>
10004100:	d9c00817 	ldw	r7,32(sp)
10004104:	b5800044 	addi	r22,r22,1
10004108:	04c00044 	movi	r19,1
1000410c:	39c00044 	addi	r7,r7,1
10004110:	d9c00815 	stw	r7,32(sp)
10004114:	d8800d17 	ldw	r2,52(sp)
10004118:	103e721e 	bne	r2,zero,10003ae4 <__alt_data_end+0xf8003ae4>
1000411c:	00800044 	movi	r2,1
10004120:	003e7906 	br	10003b08 <__alt_data_end+0xf8003b08>
10004124:	8009883a 	mov	r4,r16
10004128:	000ce600 	call	1000ce60 <__floatsidf>
1000412c:	d9800f17 	ldw	r6,60(sp)
10004130:	d9c01017 	ldw	r7,64(sp)
10004134:	1009883a 	mov	r4,r2
10004138:	180b883a 	mov	r5,r3
1000413c:	000bdcc0 	call	1000bdcc <__muldf3>
10004140:	000d883a 	mov	r6,zero
10004144:	01d00734 	movhi	r7,16412
10004148:	1009883a 	mov	r4,r2
1000414c:	180b883a 	mov	r5,r3
10004150:	000a9e00 	call	1000a9e0 <__adddf3>
10004154:	047f3034 	movhi	r17,64704
10004158:	1021883a 	mov	r16,r2
1000415c:	1c63883a 	add	r17,r3,r17
10004160:	d9000f17 	ldw	r4,60(sp)
10004164:	d9401017 	ldw	r5,64(sp)
10004168:	000d883a 	mov	r6,zero
1000416c:	01d00534 	movhi	r7,16404
10004170:	000c4e40 	call	1000c4e4 <__subdf3>
10004174:	800d883a 	mov	r6,r16
10004178:	880f883a 	mov	r7,r17
1000417c:	1009883a 	mov	r4,r2
10004180:	180b883a 	mov	r5,r3
10004184:	102b883a 	mov	r21,r2
10004188:	1829883a 	mov	r20,r3
1000418c:	000bbfc0 	call	1000bbfc <__gedf2>
10004190:	00806c16 	blt	zero,r2,10004344 <_dtoa_r+0x1304>
10004194:	89e0003c 	xorhi	r7,r17,32768
10004198:	800d883a 	mov	r6,r16
1000419c:	a809883a 	mov	r4,r21
100041a0:	a00b883a 	mov	r5,r20
100041a4:	000bcd80 	call	1000bcd8 <__ledf2>
100041a8:	103d7e0e 	bge	r2,zero,100037a4 <__alt_data_end+0xf80037a4>
100041ac:	002b883a 	mov	r21,zero
100041b0:	0023883a 	mov	r17,zero
100041b4:	003efb06 	br	10003da4 <__alt_data_end+0xf8003da4>
100041b8:	d8800717 	ldw	r2,28(sp)
100041bc:	003bd006 	br	10003100 <__alt_data_end+0xf8003100>
100041c0:	d9000a17 	ldw	r4,40(sp)
100041c4:	d9800d17 	ldw	r6,52(sp)
100041c8:	dd400a15 	stw	r21,40(sp)
100041cc:	a905c83a 	sub	r2,r21,r4
100041d0:	308d883a 	add	r6,r6,r2
100041d4:	d9800d15 	stw	r6,52(sp)
100041d8:	002b883a 	mov	r21,zero
100041dc:	003e0606 	br	100039f8 <__alt_data_end+0xf80039f8>
100041e0:	9023883a 	mov	r17,r18
100041e4:	9829883a 	mov	r20,r19
100041e8:	04000084 	movi	r16,2
100041ec:	003c9206 	br	10003438 <__alt_data_end+0xf8003438>
100041f0:	04000044 	movi	r16,1
100041f4:	dc000c15 	stw	r16,48(sp)
100041f8:	dc000615 	stw	r16,24(sp)
100041fc:	dc002215 	stw	r16,136(sp)
10004200:	e0001115 	stw	zero,68(fp)
10004204:	000b883a 	mov	r5,zero
10004208:	003c6906 	br	100033b0 <__alt_data_end+0xf80033b0>
1000420c:	3021883a 	mov	r16,r6
10004210:	003ffb06 	br	10004200 <__alt_data_end+0xf8004200>
10004214:	1000021e 	bne	r2,zero,10004220 <_dtoa_r+0x11e0>
10004218:	4200004c 	andi	r8,r8,1
1000421c:	403e7d1e 	bne	r8,zero,10003c14 <__alt_data_end+0xf8003c14>
10004220:	01000c04 	movi	r4,48
10004224:	00000106 	br	1000422c <_dtoa_r+0x11ec>
10004228:	102f883a 	mov	r23,r2
1000422c:	b8bfffc4 	addi	r2,r23,-1
10004230:	10c00007 	ldb	r3,0(r2)
10004234:	193ffc26 	beq	r3,r4,10004228 <__alt_data_end+0xf8004228>
10004238:	003e8706 	br	10003c58 <__alt_data_end+0xf8003c58>
1000423c:	d8800517 	ldw	r2,20(sp)
10004240:	00a3c83a 	sub	r17,zero,r2
10004244:	8800a426 	beq	r17,zero,100044d8 <_dtoa_r+0x1498>
10004248:	888003cc 	andi	r2,r17,15
1000424c:	100490fa 	slli	r2,r2,3
10004250:	00c40074 	movhi	r3,4097
10004254:	18fe3a04 	addi	r3,r3,-1816
10004258:	1885883a 	add	r2,r3,r2
1000425c:	11800017 	ldw	r6,0(r2)
10004260:	11c00117 	ldw	r7,4(r2)
10004264:	9009883a 	mov	r4,r18
10004268:	980b883a 	mov	r5,r19
1000426c:	8823d13a 	srai	r17,r17,4
10004270:	000bdcc0 	call	1000bdcc <__muldf3>
10004274:	d8800f15 	stw	r2,60(sp)
10004278:	d8c01015 	stw	r3,64(sp)
1000427c:	8800e826 	beq	r17,zero,10004620 <_dtoa_r+0x15e0>
10004280:	05040074 	movhi	r20,4097
10004284:	a53e3004 	addi	r20,r20,-1856
10004288:	04000084 	movi	r16,2
1000428c:	8980004c 	andi	r6,r17,1
10004290:	1009883a 	mov	r4,r2
10004294:	8823d07a 	srai	r17,r17,1
10004298:	180b883a 	mov	r5,r3
1000429c:	30000426 	beq	r6,zero,100042b0 <_dtoa_r+0x1270>
100042a0:	a1800017 	ldw	r6,0(r20)
100042a4:	a1c00117 	ldw	r7,4(r20)
100042a8:	84000044 	addi	r16,r16,1
100042ac:	000bdcc0 	call	1000bdcc <__muldf3>
100042b0:	a5000204 	addi	r20,r20,8
100042b4:	883ff51e 	bne	r17,zero,1000428c <__alt_data_end+0xf800428c>
100042b8:	d8800f15 	stw	r2,60(sp)
100042bc:	d8c01015 	stw	r3,64(sp)
100042c0:	003c7606 	br	1000349c <__alt_data_end+0xf800349c>
100042c4:	00c00c04 	movi	r3,48
100042c8:	10c00005 	stb	r3,0(r2)
100042cc:	d8c00517 	ldw	r3,20(sp)
100042d0:	bd3fffc3 	ldbu	r20,-1(r23)
100042d4:	18c00044 	addi	r3,r3,1
100042d8:	d8c00515 	stw	r3,20(sp)
100042dc:	003db906 	br	100039c4 <__alt_data_end+0xf80039c4>
100042e0:	89400117 	ldw	r5,4(r17)
100042e4:	e009883a 	mov	r4,fp
100042e8:	00060c40 	call	100060c4 <_Balloc>
100042ec:	89800417 	ldw	r6,16(r17)
100042f0:	89400304 	addi	r5,r17,12
100042f4:	11000304 	addi	r4,r2,12
100042f8:	31800084 	addi	r6,r6,2
100042fc:	318d883a 	add	r6,r6,r6
10004300:	318d883a 	add	r6,r6,r6
10004304:	1027883a 	mov	r19,r2
10004308:	0005e540 	call	10005e54 <memcpy>
1000430c:	01800044 	movi	r6,1
10004310:	980b883a 	mov	r5,r19
10004314:	e009883a 	mov	r4,fp
10004318:	00068440 	call	10006844 <__lshift>
1000431c:	1029883a 	mov	r20,r2
10004320:	003ecc06 	br	10003e54 <__alt_data_end+0xf8003e54>
10004324:	00800e44 	movi	r2,57
10004328:	90809026 	beq	r18,r2,1000456c <_dtoa_r+0x152c>
1000432c:	92000044 	addi	r8,r18,1
10004330:	003f1f06 	br	10003fb0 <__alt_data_end+0xf8003fb0>
10004334:	9011883a 	mov	r8,r18
10004338:	8825883a 	mov	r18,r17
1000433c:	a023883a 	mov	r17,r20
10004340:	003e2906 	br	10003be8 <__alt_data_end+0xf8003be8>
10004344:	002b883a 	mov	r21,zero
10004348:	0023883a 	mov	r17,zero
1000434c:	003f5406 	br	100040a0 <__alt_data_end+0xf80040a0>
10004350:	61bfffc4 	addi	r6,r12,-1
10004354:	300490fa 	slli	r2,r6,3
10004358:	00c40074 	movhi	r3,4097
1000435c:	18fe3a04 	addi	r3,r3,-1816
10004360:	1885883a 	add	r2,r3,r2
10004364:	11000017 	ldw	r4,0(r2)
10004368:	11400117 	ldw	r5,4(r2)
1000436c:	d8800717 	ldw	r2,28(sp)
10004370:	880f883a 	mov	r7,r17
10004374:	d9801215 	stw	r6,72(sp)
10004378:	800d883a 	mov	r6,r16
1000437c:	db001615 	stw	r12,88(sp)
10004380:	15c00044 	addi	r23,r2,1
10004384:	000bdcc0 	call	1000bdcc <__muldf3>
10004388:	d9401017 	ldw	r5,64(sp)
1000438c:	d9000f17 	ldw	r4,60(sp)
10004390:	d8c01515 	stw	r3,84(sp)
10004394:	d8801415 	stw	r2,80(sp)
10004398:	000cde00 	call	1000cde0 <__fixdfsi>
1000439c:	1009883a 	mov	r4,r2
100043a0:	1021883a 	mov	r16,r2
100043a4:	000ce600 	call	1000ce60 <__floatsidf>
100043a8:	d9000f17 	ldw	r4,60(sp)
100043ac:	d9401017 	ldw	r5,64(sp)
100043b0:	100d883a 	mov	r6,r2
100043b4:	180f883a 	mov	r7,r3
100043b8:	000c4e40 	call	1000c4e4 <__subdf3>
100043bc:	1829883a 	mov	r20,r3
100043c0:	d8c00717 	ldw	r3,28(sp)
100043c4:	84000c04 	addi	r16,r16,48
100043c8:	1023883a 	mov	r17,r2
100043cc:	1c000005 	stb	r16,0(r3)
100043d0:	db001617 	ldw	r12,88(sp)
100043d4:	00800044 	movi	r2,1
100043d8:	60802226 	beq	r12,r2,10004464 <_dtoa_r+0x1424>
100043dc:	d9c00717 	ldw	r7,28(sp)
100043e0:	8805883a 	mov	r2,r17
100043e4:	b82b883a 	mov	r21,r23
100043e8:	3b19883a 	add	r12,r7,r12
100043ec:	6023883a 	mov	r17,r12
100043f0:	a007883a 	mov	r3,r20
100043f4:	dc800f15 	stw	r18,60(sp)
100043f8:	000d883a 	mov	r6,zero
100043fc:	01d00934 	movhi	r7,16420
10004400:	1009883a 	mov	r4,r2
10004404:	180b883a 	mov	r5,r3
10004408:	000bdcc0 	call	1000bdcc <__muldf3>
1000440c:	180b883a 	mov	r5,r3
10004410:	1009883a 	mov	r4,r2
10004414:	1829883a 	mov	r20,r3
10004418:	1025883a 	mov	r18,r2
1000441c:	000cde00 	call	1000cde0 <__fixdfsi>
10004420:	1009883a 	mov	r4,r2
10004424:	1021883a 	mov	r16,r2
10004428:	000ce600 	call	1000ce60 <__floatsidf>
1000442c:	100d883a 	mov	r6,r2
10004430:	180f883a 	mov	r7,r3
10004434:	9009883a 	mov	r4,r18
10004438:	a00b883a 	mov	r5,r20
1000443c:	84000c04 	addi	r16,r16,48
10004440:	000c4e40 	call	1000c4e4 <__subdf3>
10004444:	ad400044 	addi	r21,r21,1
10004448:	ac3fffc5 	stb	r16,-1(r21)
1000444c:	ac7fea1e 	bne	r21,r17,100043f8 <__alt_data_end+0xf80043f8>
10004450:	1023883a 	mov	r17,r2
10004454:	d8801217 	ldw	r2,72(sp)
10004458:	dc800f17 	ldw	r18,60(sp)
1000445c:	1829883a 	mov	r20,r3
10004460:	b8af883a 	add	r23,r23,r2
10004464:	d9001417 	ldw	r4,80(sp)
10004468:	d9401517 	ldw	r5,84(sp)
1000446c:	000d883a 	mov	r6,zero
10004470:	01cff834 	movhi	r7,16352
10004474:	000a9e00 	call	1000a9e0 <__adddf3>
10004478:	880d883a 	mov	r6,r17
1000447c:	a00f883a 	mov	r7,r20
10004480:	1009883a 	mov	r4,r2
10004484:	180b883a 	mov	r5,r3
10004488:	000bcd80 	call	1000bcd8 <__ledf2>
1000448c:	10003e0e 	bge	r2,zero,10004588 <_dtoa_r+0x1548>
10004490:	d9001317 	ldw	r4,76(sp)
10004494:	bd3fffc3 	ldbu	r20,-1(r23)
10004498:	d9000515 	stw	r4,20(sp)
1000449c:	003d3b06 	br	1000398c <__alt_data_end+0xf800398c>
100044a0:	0027883a 	mov	r19,zero
100044a4:	003f1b06 	br	10004114 <__alt_data_end+0xf8004114>
100044a8:	d8800817 	ldw	r2,32(sp)
100044ac:	11e9c83a 	sub	r20,r2,r7
100044b0:	0005883a 	mov	r2,zero
100044b4:	003d5406 	br	10003a08 <__alt_data_end+0xf8003a08>
100044b8:	00800044 	movi	r2,1
100044bc:	003dc706 	br	10003bdc <__alt_data_end+0xf8003bdc>
100044c0:	d8c00217 	ldw	r3,8(sp)
100044c4:	00800d84 	movi	r2,54
100044c8:	dd400a17 	ldw	r21,40(sp)
100044cc:	10c5c83a 	sub	r2,r2,r3
100044d0:	dd000817 	ldw	r20,32(sp)
100044d4:	003d4c06 	br	10003a08 <__alt_data_end+0xf8003a08>
100044d8:	dc800f15 	stw	r18,60(sp)
100044dc:	dcc01015 	stw	r19,64(sp)
100044e0:	04000084 	movi	r16,2
100044e4:	003bed06 	br	1000349c <__alt_data_end+0xf800349c>
100044e8:	d9000617 	ldw	r4,24(sp)
100044ec:	203f0d26 	beq	r4,zero,10004124 <__alt_data_end+0xf8004124>
100044f0:	d9800c17 	ldw	r6,48(sp)
100044f4:	01bcab0e 	bge	zero,r6,100037a4 <__alt_data_end+0xf80037a4>
100044f8:	d9401017 	ldw	r5,64(sp)
100044fc:	d9000f17 	ldw	r4,60(sp)
10004500:	000d883a 	mov	r6,zero
10004504:	01d00934 	movhi	r7,16420
10004508:	000bdcc0 	call	1000bdcc <__muldf3>
1000450c:	81000044 	addi	r4,r16,1
10004510:	d8800f15 	stw	r2,60(sp)
10004514:	d8c01015 	stw	r3,64(sp)
10004518:	000ce600 	call	1000ce60 <__floatsidf>
1000451c:	d9800f17 	ldw	r6,60(sp)
10004520:	d9c01017 	ldw	r7,64(sp)
10004524:	1009883a 	mov	r4,r2
10004528:	180b883a 	mov	r5,r3
1000452c:	000bdcc0 	call	1000bdcc <__muldf3>
10004530:	01d00734 	movhi	r7,16412
10004534:	000d883a 	mov	r6,zero
10004538:	1009883a 	mov	r4,r2
1000453c:	180b883a 	mov	r5,r3
10004540:	000a9e00 	call	1000a9e0 <__adddf3>
10004544:	d9c00517 	ldw	r7,20(sp)
10004548:	047f3034 	movhi	r17,64704
1000454c:	1021883a 	mov	r16,r2
10004550:	39ffffc4 	addi	r7,r7,-1
10004554:	d9c01315 	stw	r7,76(sp)
10004558:	1c63883a 	add	r17,r3,r17
1000455c:	db000c17 	ldw	r12,48(sp)
10004560:	003bea06 	br	1000350c <__alt_data_end+0xf800350c>
10004564:	dc000915 	stw	r16,36(sp)
10004568:	003e0e06 	br	10003da4 <__alt_data_end+0xf8003da4>
1000456c:	01000e44 	movi	r4,57
10004570:	8825883a 	mov	r18,r17
10004574:	9dc00044 	addi	r23,r19,1
10004578:	99000005 	stb	r4,0(r19)
1000457c:	a023883a 	mov	r17,r20
10004580:	dc000915 	stw	r16,36(sp)
10004584:	003da406 	br	10003c18 <__alt_data_end+0xf8003c18>
10004588:	d9801417 	ldw	r6,80(sp)
1000458c:	d9c01517 	ldw	r7,84(sp)
10004590:	0009883a 	mov	r4,zero
10004594:	014ff834 	movhi	r5,16352
10004598:	000c4e40 	call	1000c4e4 <__subdf3>
1000459c:	880d883a 	mov	r6,r17
100045a0:	a00f883a 	mov	r7,r20
100045a4:	1009883a 	mov	r4,r2
100045a8:	180b883a 	mov	r5,r3
100045ac:	000bbfc0 	call	1000bbfc <__gedf2>
100045b0:	00bc7c0e 	bge	zero,r2,100037a4 <__alt_data_end+0xf80037a4>
100045b4:	01000c04 	movi	r4,48
100045b8:	00000106 	br	100045c0 <_dtoa_r+0x1580>
100045bc:	102f883a 	mov	r23,r2
100045c0:	b8bfffc4 	addi	r2,r23,-1
100045c4:	10c00007 	ldb	r3,0(r2)
100045c8:	193ffc26 	beq	r3,r4,100045bc <__alt_data_end+0xf80045bc>
100045cc:	d9801317 	ldw	r6,76(sp)
100045d0:	d9800515 	stw	r6,20(sp)
100045d4:	003c4406 	br	100036e8 <__alt_data_end+0xf80036e8>
100045d8:	d9801317 	ldw	r6,76(sp)
100045dc:	d9800515 	stw	r6,20(sp)
100045e0:	003cea06 	br	1000398c <__alt_data_end+0xf800398c>
100045e4:	dd800f17 	ldw	r22,60(sp)
100045e8:	dcc01017 	ldw	r19,64(sp)
100045ec:	dc801217 	ldw	r18,72(sp)
100045f0:	003c6c06 	br	100037a4 <__alt_data_end+0xf80037a4>
100045f4:	903e031e 	bne	r18,zero,10003e04 <__alt_data_end+0xf8003e04>
100045f8:	003ebb06 	br	100040e8 <__alt_data_end+0xf80040e8>
100045fc:	103e6c1e 	bne	r2,zero,10003fb0 <__alt_data_end+0xf8003fb0>
10004600:	4080004c 	andi	r2,r8,1
10004604:	103e6a26 	beq	r2,zero,10003fb0 <__alt_data_end+0xf8003fb0>
10004608:	003e6606 	br	10003fa4 <__alt_data_end+0xf8003fa4>
1000460c:	d8c00317 	ldw	r3,12(sp)
10004610:	00800084 	movi	r2,2
10004614:	10c02916 	blt	r2,r3,100046bc <_dtoa_r+0x167c>
10004618:	d9000c17 	ldw	r4,48(sp)
1000461c:	003e8806 	br	10004040 <__alt_data_end+0xf8004040>
10004620:	04000084 	movi	r16,2
10004624:	003b9d06 	br	1000349c <__alt_data_end+0xf800349c>
10004628:	d9001317 	ldw	r4,76(sp)
1000462c:	d9000515 	stw	r4,20(sp)
10004630:	003cd606 	br	1000398c <__alt_data_end+0xf800398c>
10004634:	d8801317 	ldw	r2,76(sp)
10004638:	d8800515 	stw	r2,20(sp)
1000463c:	003c2a06 	br	100036e8 <__alt_data_end+0xf80036e8>
10004640:	d9800317 	ldw	r6,12(sp)
10004644:	00800084 	movi	r2,2
10004648:	11801516 	blt	r2,r6,100046a0 <_dtoa_r+0x1660>
1000464c:	d9c00c17 	ldw	r7,48(sp)
10004650:	d9c00615 	stw	r7,24(sp)
10004654:	003df706 	br	10003e34 <__alt_data_end+0xf8003e34>
10004658:	193d3926 	beq	r3,r4,10003b40 <__alt_data_end+0xf8003b40>
1000465c:	00c00f04 	movi	r3,60
10004660:	1885c83a 	sub	r2,r3,r2
10004664:	003ddf06 	br	10003de4 <__alt_data_end+0xf8003de4>
10004668:	e009883a 	mov	r4,fp
1000466c:	e0001115 	stw	zero,68(fp)
10004670:	000b883a 	mov	r5,zero
10004674:	00060c40 	call	100060c4 <_Balloc>
10004678:	d8800715 	stw	r2,28(sp)
1000467c:	d8c00717 	ldw	r3,28(sp)
10004680:	00bfffc4 	movi	r2,-1
10004684:	01000044 	movi	r4,1
10004688:	d8800c15 	stw	r2,48(sp)
1000468c:	e0c01015 	stw	r3,64(fp)
10004690:	d9000b15 	stw	r4,44(sp)
10004694:	d8800615 	stw	r2,24(sp)
10004698:	d8002215 	stw	zero,136(sp)
1000469c:	003c4106 	br	100037a4 <__alt_data_end+0xf80037a4>
100046a0:	d8c00c17 	ldw	r3,48(sp)
100046a4:	d8c00615 	stw	r3,24(sp)
100046a8:	003e7006 	br	1000406c <__alt_data_end+0xf800406c>
100046ac:	04400044 	movi	r17,1
100046b0:	003b2006 	br	10003334 <__alt_data_end+0xf8003334>
100046b4:	000b883a 	mov	r5,zero
100046b8:	003b3d06 	br	100033b0 <__alt_data_end+0xf80033b0>
100046bc:	d8800c17 	ldw	r2,48(sp)
100046c0:	d8800615 	stw	r2,24(sp)
100046c4:	003e6906 	br	1000406c <__alt_data_end+0xf800406c>

100046c8 <__sflush_r>:
100046c8:	2880030b 	ldhu	r2,12(r5)
100046cc:	defffb04 	addi	sp,sp,-20
100046d0:	dcc00315 	stw	r19,12(sp)
100046d4:	dc400115 	stw	r17,4(sp)
100046d8:	dfc00415 	stw	ra,16(sp)
100046dc:	dc800215 	stw	r18,8(sp)
100046e0:	dc000015 	stw	r16,0(sp)
100046e4:	10c0020c 	andi	r3,r2,8
100046e8:	2823883a 	mov	r17,r5
100046ec:	2027883a 	mov	r19,r4
100046f0:	1800311e 	bne	r3,zero,100047b8 <__sflush_r+0xf0>
100046f4:	28c00117 	ldw	r3,4(r5)
100046f8:	10820014 	ori	r2,r2,2048
100046fc:	2880030d 	sth	r2,12(r5)
10004700:	00c04b0e 	bge	zero,r3,10004830 <__sflush_r+0x168>
10004704:	8a000a17 	ldw	r8,40(r17)
10004708:	40002326 	beq	r8,zero,10004798 <__sflush_r+0xd0>
1000470c:	9c000017 	ldw	r16,0(r19)
10004710:	10c4000c 	andi	r3,r2,4096
10004714:	98000015 	stw	zero,0(r19)
10004718:	18004826 	beq	r3,zero,1000483c <__sflush_r+0x174>
1000471c:	89801417 	ldw	r6,80(r17)
10004720:	10c0010c 	andi	r3,r2,4
10004724:	18000626 	beq	r3,zero,10004740 <__sflush_r+0x78>
10004728:	88c00117 	ldw	r3,4(r17)
1000472c:	88800c17 	ldw	r2,48(r17)
10004730:	30cdc83a 	sub	r6,r6,r3
10004734:	10000226 	beq	r2,zero,10004740 <__sflush_r+0x78>
10004738:	88800f17 	ldw	r2,60(r17)
1000473c:	308dc83a 	sub	r6,r6,r2
10004740:	89400717 	ldw	r5,28(r17)
10004744:	000f883a 	mov	r7,zero
10004748:	9809883a 	mov	r4,r19
1000474c:	403ee83a 	callr	r8
10004750:	00ffffc4 	movi	r3,-1
10004754:	10c04426 	beq	r2,r3,10004868 <__sflush_r+0x1a0>
10004758:	88c0030b 	ldhu	r3,12(r17)
1000475c:	89000417 	ldw	r4,16(r17)
10004760:	88000115 	stw	zero,4(r17)
10004764:	197dffcc 	andi	r5,r3,63487
10004768:	8940030d 	sth	r5,12(r17)
1000476c:	89000015 	stw	r4,0(r17)
10004770:	18c4000c 	andi	r3,r3,4096
10004774:	18002c1e 	bne	r3,zero,10004828 <__sflush_r+0x160>
10004778:	89400c17 	ldw	r5,48(r17)
1000477c:	9c000015 	stw	r16,0(r19)
10004780:	28000526 	beq	r5,zero,10004798 <__sflush_r+0xd0>
10004784:	88801004 	addi	r2,r17,64
10004788:	28800226 	beq	r5,r2,10004794 <__sflush_r+0xcc>
1000478c:	9809883a 	mov	r4,r19
10004790:	0004e340 	call	10004e34 <_free_r>
10004794:	88000c15 	stw	zero,48(r17)
10004798:	0005883a 	mov	r2,zero
1000479c:	dfc00417 	ldw	ra,16(sp)
100047a0:	dcc00317 	ldw	r19,12(sp)
100047a4:	dc800217 	ldw	r18,8(sp)
100047a8:	dc400117 	ldw	r17,4(sp)
100047ac:	dc000017 	ldw	r16,0(sp)
100047b0:	dec00504 	addi	sp,sp,20
100047b4:	f800283a 	ret
100047b8:	2c800417 	ldw	r18,16(r5)
100047bc:	903ff626 	beq	r18,zero,10004798 <__alt_data_end+0xf8004798>
100047c0:	2c000017 	ldw	r16,0(r5)
100047c4:	108000cc 	andi	r2,r2,3
100047c8:	2c800015 	stw	r18,0(r5)
100047cc:	84a1c83a 	sub	r16,r16,r18
100047d0:	1000131e 	bne	r2,zero,10004820 <__sflush_r+0x158>
100047d4:	28800517 	ldw	r2,20(r5)
100047d8:	88800215 	stw	r2,8(r17)
100047dc:	04000316 	blt	zero,r16,100047ec <__sflush_r+0x124>
100047e0:	003fed06 	br	10004798 <__alt_data_end+0xf8004798>
100047e4:	90a5883a 	add	r18,r18,r2
100047e8:	043feb0e 	bge	zero,r16,10004798 <__alt_data_end+0xf8004798>
100047ec:	88800917 	ldw	r2,36(r17)
100047f0:	89400717 	ldw	r5,28(r17)
100047f4:	800f883a 	mov	r7,r16
100047f8:	900d883a 	mov	r6,r18
100047fc:	9809883a 	mov	r4,r19
10004800:	103ee83a 	callr	r2
10004804:	80a1c83a 	sub	r16,r16,r2
10004808:	00bff616 	blt	zero,r2,100047e4 <__alt_data_end+0xf80047e4>
1000480c:	88c0030b 	ldhu	r3,12(r17)
10004810:	00bfffc4 	movi	r2,-1
10004814:	18c01014 	ori	r3,r3,64
10004818:	88c0030d 	sth	r3,12(r17)
1000481c:	003fdf06 	br	1000479c <__alt_data_end+0xf800479c>
10004820:	0005883a 	mov	r2,zero
10004824:	003fec06 	br	100047d8 <__alt_data_end+0xf80047d8>
10004828:	88801415 	stw	r2,80(r17)
1000482c:	003fd206 	br	10004778 <__alt_data_end+0xf8004778>
10004830:	28c00f17 	ldw	r3,60(r5)
10004834:	00ffb316 	blt	zero,r3,10004704 <__alt_data_end+0xf8004704>
10004838:	003fd706 	br	10004798 <__alt_data_end+0xf8004798>
1000483c:	89400717 	ldw	r5,28(r17)
10004840:	000d883a 	mov	r6,zero
10004844:	01c00044 	movi	r7,1
10004848:	9809883a 	mov	r4,r19
1000484c:	403ee83a 	callr	r8
10004850:	100d883a 	mov	r6,r2
10004854:	00bfffc4 	movi	r2,-1
10004858:	30801426 	beq	r6,r2,100048ac <__sflush_r+0x1e4>
1000485c:	8880030b 	ldhu	r2,12(r17)
10004860:	8a000a17 	ldw	r8,40(r17)
10004864:	003fae06 	br	10004720 <__alt_data_end+0xf8004720>
10004868:	98c00017 	ldw	r3,0(r19)
1000486c:	183fba26 	beq	r3,zero,10004758 <__alt_data_end+0xf8004758>
10004870:	01000744 	movi	r4,29
10004874:	19000626 	beq	r3,r4,10004890 <__sflush_r+0x1c8>
10004878:	01000584 	movi	r4,22
1000487c:	19000426 	beq	r3,r4,10004890 <__sflush_r+0x1c8>
10004880:	88c0030b 	ldhu	r3,12(r17)
10004884:	18c01014 	ori	r3,r3,64
10004888:	88c0030d 	sth	r3,12(r17)
1000488c:	003fc306 	br	1000479c <__alt_data_end+0xf800479c>
10004890:	8880030b 	ldhu	r2,12(r17)
10004894:	88c00417 	ldw	r3,16(r17)
10004898:	88000115 	stw	zero,4(r17)
1000489c:	10bdffcc 	andi	r2,r2,63487
100048a0:	8880030d 	sth	r2,12(r17)
100048a4:	88c00015 	stw	r3,0(r17)
100048a8:	003fb306 	br	10004778 <__alt_data_end+0xf8004778>
100048ac:	98800017 	ldw	r2,0(r19)
100048b0:	103fea26 	beq	r2,zero,1000485c <__alt_data_end+0xf800485c>
100048b4:	00c00744 	movi	r3,29
100048b8:	10c00226 	beq	r2,r3,100048c4 <__sflush_r+0x1fc>
100048bc:	00c00584 	movi	r3,22
100048c0:	10c0031e 	bne	r2,r3,100048d0 <__sflush_r+0x208>
100048c4:	9c000015 	stw	r16,0(r19)
100048c8:	0005883a 	mov	r2,zero
100048cc:	003fb306 	br	1000479c <__alt_data_end+0xf800479c>
100048d0:	88c0030b 	ldhu	r3,12(r17)
100048d4:	3005883a 	mov	r2,r6
100048d8:	18c01014 	ori	r3,r3,64
100048dc:	88c0030d 	sth	r3,12(r17)
100048e0:	003fae06 	br	1000479c <__alt_data_end+0xf800479c>

100048e4 <_fflush_r>:
100048e4:	defffd04 	addi	sp,sp,-12
100048e8:	dc000115 	stw	r16,4(sp)
100048ec:	dfc00215 	stw	ra,8(sp)
100048f0:	2021883a 	mov	r16,r4
100048f4:	20000226 	beq	r4,zero,10004900 <_fflush_r+0x1c>
100048f8:	20800e17 	ldw	r2,56(r4)
100048fc:	10000c26 	beq	r2,zero,10004930 <_fflush_r+0x4c>
10004900:	2880030f 	ldh	r2,12(r5)
10004904:	1000051e 	bne	r2,zero,1000491c <_fflush_r+0x38>
10004908:	0005883a 	mov	r2,zero
1000490c:	dfc00217 	ldw	ra,8(sp)
10004910:	dc000117 	ldw	r16,4(sp)
10004914:	dec00304 	addi	sp,sp,12
10004918:	f800283a 	ret
1000491c:	8009883a 	mov	r4,r16
10004920:	dfc00217 	ldw	ra,8(sp)
10004924:	dc000117 	ldw	r16,4(sp)
10004928:	dec00304 	addi	sp,sp,12
1000492c:	00046c81 	jmpi	100046c8 <__sflush_r>
10004930:	d9400015 	stw	r5,0(sp)
10004934:	0004cc00 	call	10004cc0 <__sinit>
10004938:	d9400017 	ldw	r5,0(sp)
1000493c:	003ff006 	br	10004900 <__alt_data_end+0xf8004900>

10004940 <fflush>:
10004940:	20000526 	beq	r4,zero,10004958 <fflush+0x18>
10004944:	00840074 	movhi	r2,4097
10004948:	10856b04 	addi	r2,r2,5548
1000494c:	200b883a 	mov	r5,r4
10004950:	11000017 	ldw	r4,0(r2)
10004954:	00048e41 	jmpi	100048e4 <_fflush_r>
10004958:	00840074 	movhi	r2,4097
1000495c:	10856a04 	addi	r2,r2,5544
10004960:	11000017 	ldw	r4,0(r2)
10004964:	01440034 	movhi	r5,4096
10004968:	29523904 	addi	r5,r5,18660
1000496c:	00052081 	jmpi	10005208 <_fwalk_reent>

10004970 <__fp_unlock>:
10004970:	0005883a 	mov	r2,zero
10004974:	f800283a 	ret

10004978 <_cleanup_r>:
10004978:	01440074 	movhi	r5,4097
1000497c:	2962fe04 	addi	r5,r5,-29704
10004980:	00052081 	jmpi	10005208 <_fwalk_reent>

10004984 <__sinit.part.1>:
10004984:	defff704 	addi	sp,sp,-36
10004988:	00c40034 	movhi	r3,4096
1000498c:	dfc00815 	stw	ra,32(sp)
10004990:	ddc00715 	stw	r23,28(sp)
10004994:	dd800615 	stw	r22,24(sp)
10004998:	dd400515 	stw	r21,20(sp)
1000499c:	dd000415 	stw	r20,16(sp)
100049a0:	dcc00315 	stw	r19,12(sp)
100049a4:	dc800215 	stw	r18,8(sp)
100049a8:	dc400115 	stw	r17,4(sp)
100049ac:	dc000015 	stw	r16,0(sp)
100049b0:	18d25e04 	addi	r3,r3,18808
100049b4:	24000117 	ldw	r16,4(r4)
100049b8:	20c00f15 	stw	r3,60(r4)
100049bc:	2080bb04 	addi	r2,r4,748
100049c0:	00c000c4 	movi	r3,3
100049c4:	20c0b915 	stw	r3,740(r4)
100049c8:	2080ba15 	stw	r2,744(r4)
100049cc:	2000b815 	stw	zero,736(r4)
100049d0:	05c00204 	movi	r23,8
100049d4:	00800104 	movi	r2,4
100049d8:	2025883a 	mov	r18,r4
100049dc:	b80d883a 	mov	r6,r23
100049e0:	81001704 	addi	r4,r16,92
100049e4:	000b883a 	mov	r5,zero
100049e8:	80000015 	stw	zero,0(r16)
100049ec:	80000115 	stw	zero,4(r16)
100049f0:	80000215 	stw	zero,8(r16)
100049f4:	8080030d 	sth	r2,12(r16)
100049f8:	80001915 	stw	zero,100(r16)
100049fc:	8000038d 	sth	zero,14(r16)
10004a00:	80000415 	stw	zero,16(r16)
10004a04:	80000515 	stw	zero,20(r16)
10004a08:	80000615 	stw	zero,24(r16)
10004a0c:	0005f9c0 	call	10005f9c <memset>
10004a10:	05840034 	movhi	r22,4096
10004a14:	94400217 	ldw	r17,8(r18)
10004a18:	05440034 	movhi	r21,4096
10004a1c:	05040034 	movhi	r20,4096
10004a20:	04c40034 	movhi	r19,4096
10004a24:	b59c6204 	addi	r22,r22,29064
10004a28:	ad5c7904 	addi	r21,r21,29156
10004a2c:	a51c9804 	addi	r20,r20,29280
10004a30:	9cdcaf04 	addi	r19,r19,29372
10004a34:	85800815 	stw	r22,32(r16)
10004a38:	85400915 	stw	r21,36(r16)
10004a3c:	85000a15 	stw	r20,40(r16)
10004a40:	84c00b15 	stw	r19,44(r16)
10004a44:	84000715 	stw	r16,28(r16)
10004a48:	00800284 	movi	r2,10
10004a4c:	8880030d 	sth	r2,12(r17)
10004a50:	00800044 	movi	r2,1
10004a54:	b80d883a 	mov	r6,r23
10004a58:	89001704 	addi	r4,r17,92
10004a5c:	000b883a 	mov	r5,zero
10004a60:	88000015 	stw	zero,0(r17)
10004a64:	88000115 	stw	zero,4(r17)
10004a68:	88000215 	stw	zero,8(r17)
10004a6c:	88001915 	stw	zero,100(r17)
10004a70:	8880038d 	sth	r2,14(r17)
10004a74:	88000415 	stw	zero,16(r17)
10004a78:	88000515 	stw	zero,20(r17)
10004a7c:	88000615 	stw	zero,24(r17)
10004a80:	0005f9c0 	call	10005f9c <memset>
10004a84:	94000317 	ldw	r16,12(r18)
10004a88:	00800484 	movi	r2,18
10004a8c:	8c400715 	stw	r17,28(r17)
10004a90:	8d800815 	stw	r22,32(r17)
10004a94:	8d400915 	stw	r21,36(r17)
10004a98:	8d000a15 	stw	r20,40(r17)
10004a9c:	8cc00b15 	stw	r19,44(r17)
10004aa0:	8080030d 	sth	r2,12(r16)
10004aa4:	00800084 	movi	r2,2
10004aa8:	80000015 	stw	zero,0(r16)
10004aac:	80000115 	stw	zero,4(r16)
10004ab0:	80000215 	stw	zero,8(r16)
10004ab4:	80001915 	stw	zero,100(r16)
10004ab8:	8080038d 	sth	r2,14(r16)
10004abc:	80000415 	stw	zero,16(r16)
10004ac0:	80000515 	stw	zero,20(r16)
10004ac4:	80000615 	stw	zero,24(r16)
10004ac8:	b80d883a 	mov	r6,r23
10004acc:	000b883a 	mov	r5,zero
10004ad0:	81001704 	addi	r4,r16,92
10004ad4:	0005f9c0 	call	10005f9c <memset>
10004ad8:	00800044 	movi	r2,1
10004adc:	84000715 	stw	r16,28(r16)
10004ae0:	85800815 	stw	r22,32(r16)
10004ae4:	85400915 	stw	r21,36(r16)
10004ae8:	85000a15 	stw	r20,40(r16)
10004aec:	84c00b15 	stw	r19,44(r16)
10004af0:	90800e15 	stw	r2,56(r18)
10004af4:	dfc00817 	ldw	ra,32(sp)
10004af8:	ddc00717 	ldw	r23,28(sp)
10004afc:	dd800617 	ldw	r22,24(sp)
10004b00:	dd400517 	ldw	r21,20(sp)
10004b04:	dd000417 	ldw	r20,16(sp)
10004b08:	dcc00317 	ldw	r19,12(sp)
10004b0c:	dc800217 	ldw	r18,8(sp)
10004b10:	dc400117 	ldw	r17,4(sp)
10004b14:	dc000017 	ldw	r16,0(sp)
10004b18:	dec00904 	addi	sp,sp,36
10004b1c:	f800283a 	ret

10004b20 <__fp_lock>:
10004b20:	0005883a 	mov	r2,zero
10004b24:	f800283a 	ret

10004b28 <__sfmoreglue>:
10004b28:	defffc04 	addi	sp,sp,-16
10004b2c:	dc400115 	stw	r17,4(sp)
10004b30:	2c7fffc4 	addi	r17,r5,-1
10004b34:	8c401a24 	muli	r17,r17,104
10004b38:	dc800215 	stw	r18,8(sp)
10004b3c:	2825883a 	mov	r18,r5
10004b40:	89401d04 	addi	r5,r17,116
10004b44:	dc000015 	stw	r16,0(sp)
10004b48:	dfc00315 	stw	ra,12(sp)
10004b4c:	00055640 	call	10005564 <_malloc_r>
10004b50:	1021883a 	mov	r16,r2
10004b54:	10000726 	beq	r2,zero,10004b74 <__sfmoreglue+0x4c>
10004b58:	11000304 	addi	r4,r2,12
10004b5c:	10000015 	stw	zero,0(r2)
10004b60:	14800115 	stw	r18,4(r2)
10004b64:	11000215 	stw	r4,8(r2)
10004b68:	89801a04 	addi	r6,r17,104
10004b6c:	000b883a 	mov	r5,zero
10004b70:	0005f9c0 	call	10005f9c <memset>
10004b74:	8005883a 	mov	r2,r16
10004b78:	dfc00317 	ldw	ra,12(sp)
10004b7c:	dc800217 	ldw	r18,8(sp)
10004b80:	dc400117 	ldw	r17,4(sp)
10004b84:	dc000017 	ldw	r16,0(sp)
10004b88:	dec00404 	addi	sp,sp,16
10004b8c:	f800283a 	ret

10004b90 <__sfp>:
10004b90:	defffb04 	addi	sp,sp,-20
10004b94:	dc000015 	stw	r16,0(sp)
10004b98:	04040074 	movhi	r16,4097
10004b9c:	84056a04 	addi	r16,r16,5544
10004ba0:	dcc00315 	stw	r19,12(sp)
10004ba4:	2027883a 	mov	r19,r4
10004ba8:	81000017 	ldw	r4,0(r16)
10004bac:	dfc00415 	stw	ra,16(sp)
10004bb0:	dc800215 	stw	r18,8(sp)
10004bb4:	20800e17 	ldw	r2,56(r4)
10004bb8:	dc400115 	stw	r17,4(sp)
10004bbc:	1000021e 	bne	r2,zero,10004bc8 <__sfp+0x38>
10004bc0:	00049840 	call	10004984 <__sinit.part.1>
10004bc4:	81000017 	ldw	r4,0(r16)
10004bc8:	2480b804 	addi	r18,r4,736
10004bcc:	047fffc4 	movi	r17,-1
10004bd0:	91000117 	ldw	r4,4(r18)
10004bd4:	94000217 	ldw	r16,8(r18)
10004bd8:	213fffc4 	addi	r4,r4,-1
10004bdc:	20000a16 	blt	r4,zero,10004c08 <__sfp+0x78>
10004be0:	8080030f 	ldh	r2,12(r16)
10004be4:	10000c26 	beq	r2,zero,10004c18 <__sfp+0x88>
10004be8:	80c01d04 	addi	r3,r16,116
10004bec:	00000206 	br	10004bf8 <__sfp+0x68>
10004bf0:	18bfe60f 	ldh	r2,-104(r3)
10004bf4:	10000826 	beq	r2,zero,10004c18 <__sfp+0x88>
10004bf8:	213fffc4 	addi	r4,r4,-1
10004bfc:	1c3ffd04 	addi	r16,r3,-12
10004c00:	18c01a04 	addi	r3,r3,104
10004c04:	247ffa1e 	bne	r4,r17,10004bf0 <__alt_data_end+0xf8004bf0>
10004c08:	90800017 	ldw	r2,0(r18)
10004c0c:	10001d26 	beq	r2,zero,10004c84 <__sfp+0xf4>
10004c10:	1025883a 	mov	r18,r2
10004c14:	003fee06 	br	10004bd0 <__alt_data_end+0xf8004bd0>
10004c18:	00bfffc4 	movi	r2,-1
10004c1c:	8080038d 	sth	r2,14(r16)
10004c20:	00800044 	movi	r2,1
10004c24:	8080030d 	sth	r2,12(r16)
10004c28:	80001915 	stw	zero,100(r16)
10004c2c:	80000015 	stw	zero,0(r16)
10004c30:	80000215 	stw	zero,8(r16)
10004c34:	80000115 	stw	zero,4(r16)
10004c38:	80000415 	stw	zero,16(r16)
10004c3c:	80000515 	stw	zero,20(r16)
10004c40:	80000615 	stw	zero,24(r16)
10004c44:	01800204 	movi	r6,8
10004c48:	000b883a 	mov	r5,zero
10004c4c:	81001704 	addi	r4,r16,92
10004c50:	0005f9c0 	call	10005f9c <memset>
10004c54:	8005883a 	mov	r2,r16
10004c58:	80000c15 	stw	zero,48(r16)
10004c5c:	80000d15 	stw	zero,52(r16)
10004c60:	80001115 	stw	zero,68(r16)
10004c64:	80001215 	stw	zero,72(r16)
10004c68:	dfc00417 	ldw	ra,16(sp)
10004c6c:	dcc00317 	ldw	r19,12(sp)
10004c70:	dc800217 	ldw	r18,8(sp)
10004c74:	dc400117 	ldw	r17,4(sp)
10004c78:	dc000017 	ldw	r16,0(sp)
10004c7c:	dec00504 	addi	sp,sp,20
10004c80:	f800283a 	ret
10004c84:	01400104 	movi	r5,4
10004c88:	9809883a 	mov	r4,r19
10004c8c:	0004b280 	call	10004b28 <__sfmoreglue>
10004c90:	90800015 	stw	r2,0(r18)
10004c94:	103fde1e 	bne	r2,zero,10004c10 <__alt_data_end+0xf8004c10>
10004c98:	00800304 	movi	r2,12
10004c9c:	98800015 	stw	r2,0(r19)
10004ca0:	0005883a 	mov	r2,zero
10004ca4:	003ff006 	br	10004c68 <__alt_data_end+0xf8004c68>

10004ca8 <_cleanup>:
10004ca8:	00840074 	movhi	r2,4097
10004cac:	10856a04 	addi	r2,r2,5544
10004cb0:	11000017 	ldw	r4,0(r2)
10004cb4:	01440074 	movhi	r5,4097
10004cb8:	2962fe04 	addi	r5,r5,-29704
10004cbc:	00052081 	jmpi	10005208 <_fwalk_reent>

10004cc0 <__sinit>:
10004cc0:	20800e17 	ldw	r2,56(r4)
10004cc4:	10000126 	beq	r2,zero,10004ccc <__sinit+0xc>
10004cc8:	f800283a 	ret
10004ccc:	00049841 	jmpi	10004984 <__sinit.part.1>

10004cd0 <__sfp_lock_acquire>:
10004cd0:	f800283a 	ret

10004cd4 <__sfp_lock_release>:
10004cd4:	f800283a 	ret

10004cd8 <__sinit_lock_acquire>:
10004cd8:	f800283a 	ret

10004cdc <__sinit_lock_release>:
10004cdc:	f800283a 	ret

10004ce0 <__fp_lock_all>:
10004ce0:	00840074 	movhi	r2,4097
10004ce4:	10856b04 	addi	r2,r2,5548
10004ce8:	11000017 	ldw	r4,0(r2)
10004cec:	01440034 	movhi	r5,4096
10004cf0:	2952c804 	addi	r5,r5,19232
10004cf4:	00051441 	jmpi	10005144 <_fwalk>

10004cf8 <__fp_unlock_all>:
10004cf8:	00840074 	movhi	r2,4097
10004cfc:	10856b04 	addi	r2,r2,5548
10004d00:	11000017 	ldw	r4,0(r2)
10004d04:	01440034 	movhi	r5,4096
10004d08:	29525c04 	addi	r5,r5,18800
10004d0c:	00051441 	jmpi	10005144 <_fwalk>

10004d10 <_malloc_trim_r>:
10004d10:	defffb04 	addi	sp,sp,-20
10004d14:	dcc00315 	stw	r19,12(sp)
10004d18:	04c40074 	movhi	r19,4097
10004d1c:	dc800215 	stw	r18,8(sp)
10004d20:	dc400115 	stw	r17,4(sp)
10004d24:	dc000015 	stw	r16,0(sp)
10004d28:	dfc00415 	stw	ra,16(sp)
10004d2c:	2821883a 	mov	r16,r5
10004d30:	9cffe604 	addi	r19,r19,-104
10004d34:	2025883a 	mov	r18,r4
10004d38:	000d7440 	call	1000d744 <__malloc_lock>
10004d3c:	98800217 	ldw	r2,8(r19)
10004d40:	14400117 	ldw	r17,4(r2)
10004d44:	00bfff04 	movi	r2,-4
10004d48:	88a2703a 	and	r17,r17,r2
10004d4c:	8c21c83a 	sub	r16,r17,r16
10004d50:	8403fbc4 	addi	r16,r16,4079
10004d54:	8020d33a 	srli	r16,r16,12
10004d58:	0083ffc4 	movi	r2,4095
10004d5c:	843fffc4 	addi	r16,r16,-1
10004d60:	8020933a 	slli	r16,r16,12
10004d64:	1400060e 	bge	r2,r16,10004d80 <_malloc_trim_r+0x70>
10004d68:	000b883a 	mov	r5,zero
10004d6c:	9009883a 	mov	r4,r18
10004d70:	00071340 	call	10007134 <_sbrk_r>
10004d74:	98c00217 	ldw	r3,8(r19)
10004d78:	1c47883a 	add	r3,r3,r17
10004d7c:	10c00a26 	beq	r2,r3,10004da8 <_malloc_trim_r+0x98>
10004d80:	9009883a 	mov	r4,r18
10004d84:	000d7680 	call	1000d768 <__malloc_unlock>
10004d88:	0005883a 	mov	r2,zero
10004d8c:	dfc00417 	ldw	ra,16(sp)
10004d90:	dcc00317 	ldw	r19,12(sp)
10004d94:	dc800217 	ldw	r18,8(sp)
10004d98:	dc400117 	ldw	r17,4(sp)
10004d9c:	dc000017 	ldw	r16,0(sp)
10004da0:	dec00504 	addi	sp,sp,20
10004da4:	f800283a 	ret
10004da8:	040bc83a 	sub	r5,zero,r16
10004dac:	9009883a 	mov	r4,r18
10004db0:	00071340 	call	10007134 <_sbrk_r>
10004db4:	00ffffc4 	movi	r3,-1
10004db8:	10c00d26 	beq	r2,r3,10004df0 <_malloc_trim_r+0xe0>
10004dbc:	00c40074 	movhi	r3,4097
10004dc0:	18cc4304 	addi	r3,r3,12556
10004dc4:	18800017 	ldw	r2,0(r3)
10004dc8:	99000217 	ldw	r4,8(r19)
10004dcc:	8c23c83a 	sub	r17,r17,r16
10004dd0:	8c400054 	ori	r17,r17,1
10004dd4:	1421c83a 	sub	r16,r2,r16
10004dd8:	24400115 	stw	r17,4(r4)
10004ddc:	9009883a 	mov	r4,r18
10004de0:	1c000015 	stw	r16,0(r3)
10004de4:	000d7680 	call	1000d768 <__malloc_unlock>
10004de8:	00800044 	movi	r2,1
10004dec:	003fe706 	br	10004d8c <__alt_data_end+0xf8004d8c>
10004df0:	000b883a 	mov	r5,zero
10004df4:	9009883a 	mov	r4,r18
10004df8:	00071340 	call	10007134 <_sbrk_r>
10004dfc:	99000217 	ldw	r4,8(r19)
10004e00:	014003c4 	movi	r5,15
10004e04:	1107c83a 	sub	r3,r2,r4
10004e08:	28ffdd0e 	bge	r5,r3,10004d80 <__alt_data_end+0xf8004d80>
10004e0c:	01440074 	movhi	r5,4097
10004e10:	29456d04 	addi	r5,r5,5556
10004e14:	29400017 	ldw	r5,0(r5)
10004e18:	18c00054 	ori	r3,r3,1
10004e1c:	20c00115 	stw	r3,4(r4)
10004e20:	00c40074 	movhi	r3,4097
10004e24:	1145c83a 	sub	r2,r2,r5
10004e28:	18cc4304 	addi	r3,r3,12556
10004e2c:	18800015 	stw	r2,0(r3)
10004e30:	003fd306 	br	10004d80 <__alt_data_end+0xf8004d80>

10004e34 <_free_r>:
10004e34:	28004126 	beq	r5,zero,10004f3c <_free_r+0x108>
10004e38:	defffd04 	addi	sp,sp,-12
10004e3c:	dc400115 	stw	r17,4(sp)
10004e40:	dc000015 	stw	r16,0(sp)
10004e44:	2023883a 	mov	r17,r4
10004e48:	2821883a 	mov	r16,r5
10004e4c:	dfc00215 	stw	ra,8(sp)
10004e50:	000d7440 	call	1000d744 <__malloc_lock>
10004e54:	81ffff17 	ldw	r7,-4(r16)
10004e58:	00bfff84 	movi	r2,-2
10004e5c:	01040074 	movhi	r4,4097
10004e60:	81bffe04 	addi	r6,r16,-8
10004e64:	3884703a 	and	r2,r7,r2
10004e68:	213fe604 	addi	r4,r4,-104
10004e6c:	308b883a 	add	r5,r6,r2
10004e70:	2a400117 	ldw	r9,4(r5)
10004e74:	22000217 	ldw	r8,8(r4)
10004e78:	00ffff04 	movi	r3,-4
10004e7c:	48c6703a 	and	r3,r9,r3
10004e80:	2a005726 	beq	r5,r8,10004fe0 <_free_r+0x1ac>
10004e84:	28c00115 	stw	r3,4(r5)
10004e88:	39c0004c 	andi	r7,r7,1
10004e8c:	3800091e 	bne	r7,zero,10004eb4 <_free_r+0x80>
10004e90:	823ffe17 	ldw	r8,-8(r16)
10004e94:	22400204 	addi	r9,r4,8
10004e98:	320dc83a 	sub	r6,r6,r8
10004e9c:	31c00217 	ldw	r7,8(r6)
10004ea0:	1205883a 	add	r2,r2,r8
10004ea4:	3a406526 	beq	r7,r9,1000503c <_free_r+0x208>
10004ea8:	32000317 	ldw	r8,12(r6)
10004eac:	3a000315 	stw	r8,12(r7)
10004eb0:	41c00215 	stw	r7,8(r8)
10004eb4:	28cf883a 	add	r7,r5,r3
10004eb8:	39c00117 	ldw	r7,4(r7)
10004ebc:	39c0004c 	andi	r7,r7,1
10004ec0:	38003a26 	beq	r7,zero,10004fac <_free_r+0x178>
10004ec4:	10c00054 	ori	r3,r2,1
10004ec8:	30c00115 	stw	r3,4(r6)
10004ecc:	3087883a 	add	r3,r6,r2
10004ed0:	18800015 	stw	r2,0(r3)
10004ed4:	00c07fc4 	movi	r3,511
10004ed8:	18801936 	bltu	r3,r2,10004f40 <_free_r+0x10c>
10004edc:	1004d0fa 	srli	r2,r2,3
10004ee0:	01c00044 	movi	r7,1
10004ee4:	21400117 	ldw	r5,4(r4)
10004ee8:	10c00044 	addi	r3,r2,1
10004eec:	18c7883a 	add	r3,r3,r3
10004ef0:	1005d0ba 	srai	r2,r2,2
10004ef4:	18c7883a 	add	r3,r3,r3
10004ef8:	18c7883a 	add	r3,r3,r3
10004efc:	1907883a 	add	r3,r3,r4
10004f00:	3884983a 	sll	r2,r7,r2
10004f04:	19c00017 	ldw	r7,0(r3)
10004f08:	1a3ffe04 	addi	r8,r3,-8
10004f0c:	1144b03a 	or	r2,r2,r5
10004f10:	32000315 	stw	r8,12(r6)
10004f14:	31c00215 	stw	r7,8(r6)
10004f18:	20800115 	stw	r2,4(r4)
10004f1c:	19800015 	stw	r6,0(r3)
10004f20:	39800315 	stw	r6,12(r7)
10004f24:	8809883a 	mov	r4,r17
10004f28:	dfc00217 	ldw	ra,8(sp)
10004f2c:	dc400117 	ldw	r17,4(sp)
10004f30:	dc000017 	ldw	r16,0(sp)
10004f34:	dec00304 	addi	sp,sp,12
10004f38:	000d7681 	jmpi	1000d768 <__malloc_unlock>
10004f3c:	f800283a 	ret
10004f40:	100ad27a 	srli	r5,r2,9
10004f44:	00c00104 	movi	r3,4
10004f48:	19404a36 	bltu	r3,r5,10005074 <_free_r+0x240>
10004f4c:	100ad1ba 	srli	r5,r2,6
10004f50:	28c00e44 	addi	r3,r5,57
10004f54:	18c7883a 	add	r3,r3,r3
10004f58:	29400e04 	addi	r5,r5,56
10004f5c:	18c7883a 	add	r3,r3,r3
10004f60:	18c7883a 	add	r3,r3,r3
10004f64:	1909883a 	add	r4,r3,r4
10004f68:	20c00017 	ldw	r3,0(r4)
10004f6c:	01c40074 	movhi	r7,4097
10004f70:	213ffe04 	addi	r4,r4,-8
10004f74:	39ffe604 	addi	r7,r7,-104
10004f78:	20c04426 	beq	r4,r3,1000508c <_free_r+0x258>
10004f7c:	01ffff04 	movi	r7,-4
10004f80:	19400117 	ldw	r5,4(r3)
10004f84:	29ca703a 	and	r5,r5,r7
10004f88:	1140022e 	bgeu	r2,r5,10004f94 <_free_r+0x160>
10004f8c:	18c00217 	ldw	r3,8(r3)
10004f90:	20fffb1e 	bne	r4,r3,10004f80 <__alt_data_end+0xf8004f80>
10004f94:	19000317 	ldw	r4,12(r3)
10004f98:	31000315 	stw	r4,12(r6)
10004f9c:	30c00215 	stw	r3,8(r6)
10004fa0:	21800215 	stw	r6,8(r4)
10004fa4:	19800315 	stw	r6,12(r3)
10004fa8:	003fde06 	br	10004f24 <__alt_data_end+0xf8004f24>
10004fac:	29c00217 	ldw	r7,8(r5)
10004fb0:	10c5883a 	add	r2,r2,r3
10004fb4:	00c40074 	movhi	r3,4097
10004fb8:	18ffe804 	addi	r3,r3,-96
10004fbc:	38c03b26 	beq	r7,r3,100050ac <_free_r+0x278>
10004fc0:	2a000317 	ldw	r8,12(r5)
10004fc4:	11400054 	ori	r5,r2,1
10004fc8:	3087883a 	add	r3,r6,r2
10004fcc:	3a000315 	stw	r8,12(r7)
10004fd0:	41c00215 	stw	r7,8(r8)
10004fd4:	31400115 	stw	r5,4(r6)
10004fd8:	18800015 	stw	r2,0(r3)
10004fdc:	003fbd06 	br	10004ed4 <__alt_data_end+0xf8004ed4>
10004fe0:	39c0004c 	andi	r7,r7,1
10004fe4:	10c5883a 	add	r2,r2,r3
10004fe8:	3800071e 	bne	r7,zero,10005008 <_free_r+0x1d4>
10004fec:	81fffe17 	ldw	r7,-8(r16)
10004ff0:	31cdc83a 	sub	r6,r6,r7
10004ff4:	30c00317 	ldw	r3,12(r6)
10004ff8:	31400217 	ldw	r5,8(r6)
10004ffc:	11c5883a 	add	r2,r2,r7
10005000:	28c00315 	stw	r3,12(r5)
10005004:	19400215 	stw	r5,8(r3)
10005008:	10c00054 	ori	r3,r2,1
1000500c:	30c00115 	stw	r3,4(r6)
10005010:	00c40074 	movhi	r3,4097
10005014:	18c56e04 	addi	r3,r3,5560
10005018:	18c00017 	ldw	r3,0(r3)
1000501c:	21800215 	stw	r6,8(r4)
10005020:	10ffc036 	bltu	r2,r3,10004f24 <__alt_data_end+0xf8004f24>
10005024:	00840074 	movhi	r2,4097
10005028:	108c3b04 	addi	r2,r2,12524
1000502c:	11400017 	ldw	r5,0(r2)
10005030:	8809883a 	mov	r4,r17
10005034:	0004d100 	call	10004d10 <_malloc_trim_r>
10005038:	003fba06 	br	10004f24 <__alt_data_end+0xf8004f24>
1000503c:	28c9883a 	add	r4,r5,r3
10005040:	21000117 	ldw	r4,4(r4)
10005044:	2100004c 	andi	r4,r4,1
10005048:	2000391e 	bne	r4,zero,10005130 <_free_r+0x2fc>
1000504c:	29c00217 	ldw	r7,8(r5)
10005050:	29000317 	ldw	r4,12(r5)
10005054:	1885883a 	add	r2,r3,r2
10005058:	10c00054 	ori	r3,r2,1
1000505c:	39000315 	stw	r4,12(r7)
10005060:	21c00215 	stw	r7,8(r4)
10005064:	30c00115 	stw	r3,4(r6)
10005068:	308d883a 	add	r6,r6,r2
1000506c:	30800015 	stw	r2,0(r6)
10005070:	003fac06 	br	10004f24 <__alt_data_end+0xf8004f24>
10005074:	00c00504 	movi	r3,20
10005078:	19401536 	bltu	r3,r5,100050d0 <_free_r+0x29c>
1000507c:	28c01704 	addi	r3,r5,92
10005080:	18c7883a 	add	r3,r3,r3
10005084:	294016c4 	addi	r5,r5,91
10005088:	003fb406 	br	10004f5c <__alt_data_end+0xf8004f5c>
1000508c:	280bd0ba 	srai	r5,r5,2
10005090:	00c00044 	movi	r3,1
10005094:	38800117 	ldw	r2,4(r7)
10005098:	194a983a 	sll	r5,r3,r5
1000509c:	2007883a 	mov	r3,r4
100050a0:	2884b03a 	or	r2,r5,r2
100050a4:	38800115 	stw	r2,4(r7)
100050a8:	003fbb06 	br	10004f98 <__alt_data_end+0xf8004f98>
100050ac:	21800515 	stw	r6,20(r4)
100050b0:	21800415 	stw	r6,16(r4)
100050b4:	10c00054 	ori	r3,r2,1
100050b8:	31c00315 	stw	r7,12(r6)
100050bc:	31c00215 	stw	r7,8(r6)
100050c0:	30c00115 	stw	r3,4(r6)
100050c4:	308d883a 	add	r6,r6,r2
100050c8:	30800015 	stw	r2,0(r6)
100050cc:	003f9506 	br	10004f24 <__alt_data_end+0xf8004f24>
100050d0:	00c01504 	movi	r3,84
100050d4:	19400536 	bltu	r3,r5,100050ec <_free_r+0x2b8>
100050d8:	100ad33a 	srli	r5,r2,12
100050dc:	28c01bc4 	addi	r3,r5,111
100050e0:	18c7883a 	add	r3,r3,r3
100050e4:	29401b84 	addi	r5,r5,110
100050e8:	003f9c06 	br	10004f5c <__alt_data_end+0xf8004f5c>
100050ec:	00c05504 	movi	r3,340
100050f0:	19400536 	bltu	r3,r5,10005108 <_free_r+0x2d4>
100050f4:	100ad3fa 	srli	r5,r2,15
100050f8:	28c01e04 	addi	r3,r5,120
100050fc:	18c7883a 	add	r3,r3,r3
10005100:	29401dc4 	addi	r5,r5,119
10005104:	003f9506 	br	10004f5c <__alt_data_end+0xf8004f5c>
10005108:	00c15504 	movi	r3,1364
1000510c:	19400536 	bltu	r3,r5,10005124 <_free_r+0x2f0>
10005110:	100ad4ba 	srli	r5,r2,18
10005114:	28c01f44 	addi	r3,r5,125
10005118:	18c7883a 	add	r3,r3,r3
1000511c:	29401f04 	addi	r5,r5,124
10005120:	003f8e06 	br	10004f5c <__alt_data_end+0xf8004f5c>
10005124:	00c03f84 	movi	r3,254
10005128:	01401f84 	movi	r5,126
1000512c:	003f8b06 	br	10004f5c <__alt_data_end+0xf8004f5c>
10005130:	10c00054 	ori	r3,r2,1
10005134:	30c00115 	stw	r3,4(r6)
10005138:	308d883a 	add	r6,r6,r2
1000513c:	30800015 	stw	r2,0(r6)
10005140:	003f7806 	br	10004f24 <__alt_data_end+0xf8004f24>

10005144 <_fwalk>:
10005144:	defff704 	addi	sp,sp,-36
10005148:	dd000415 	stw	r20,16(sp)
1000514c:	dfc00815 	stw	ra,32(sp)
10005150:	ddc00715 	stw	r23,28(sp)
10005154:	dd800615 	stw	r22,24(sp)
10005158:	dd400515 	stw	r21,20(sp)
1000515c:	dcc00315 	stw	r19,12(sp)
10005160:	dc800215 	stw	r18,8(sp)
10005164:	dc400115 	stw	r17,4(sp)
10005168:	dc000015 	stw	r16,0(sp)
1000516c:	2500b804 	addi	r20,r4,736
10005170:	a0002326 	beq	r20,zero,10005200 <_fwalk+0xbc>
10005174:	282b883a 	mov	r21,r5
10005178:	002f883a 	mov	r23,zero
1000517c:	05800044 	movi	r22,1
10005180:	04ffffc4 	movi	r19,-1
10005184:	a4400117 	ldw	r17,4(r20)
10005188:	a4800217 	ldw	r18,8(r20)
1000518c:	8c7fffc4 	addi	r17,r17,-1
10005190:	88000d16 	blt	r17,zero,100051c8 <_fwalk+0x84>
10005194:	94000304 	addi	r16,r18,12
10005198:	94800384 	addi	r18,r18,14
1000519c:	8080000b 	ldhu	r2,0(r16)
100051a0:	8c7fffc4 	addi	r17,r17,-1
100051a4:	813ffd04 	addi	r4,r16,-12
100051a8:	b080042e 	bgeu	r22,r2,100051bc <_fwalk+0x78>
100051ac:	9080000f 	ldh	r2,0(r18)
100051b0:	14c00226 	beq	r2,r19,100051bc <_fwalk+0x78>
100051b4:	a83ee83a 	callr	r21
100051b8:	b8aeb03a 	or	r23,r23,r2
100051bc:	84001a04 	addi	r16,r16,104
100051c0:	94801a04 	addi	r18,r18,104
100051c4:	8cfff51e 	bne	r17,r19,1000519c <__alt_data_end+0xf800519c>
100051c8:	a5000017 	ldw	r20,0(r20)
100051cc:	a03fed1e 	bne	r20,zero,10005184 <__alt_data_end+0xf8005184>
100051d0:	b805883a 	mov	r2,r23
100051d4:	dfc00817 	ldw	ra,32(sp)
100051d8:	ddc00717 	ldw	r23,28(sp)
100051dc:	dd800617 	ldw	r22,24(sp)
100051e0:	dd400517 	ldw	r21,20(sp)
100051e4:	dd000417 	ldw	r20,16(sp)
100051e8:	dcc00317 	ldw	r19,12(sp)
100051ec:	dc800217 	ldw	r18,8(sp)
100051f0:	dc400117 	ldw	r17,4(sp)
100051f4:	dc000017 	ldw	r16,0(sp)
100051f8:	dec00904 	addi	sp,sp,36
100051fc:	f800283a 	ret
10005200:	002f883a 	mov	r23,zero
10005204:	003ff206 	br	100051d0 <__alt_data_end+0xf80051d0>

10005208 <_fwalk_reent>:
10005208:	defff704 	addi	sp,sp,-36
1000520c:	dd000415 	stw	r20,16(sp)
10005210:	dfc00815 	stw	ra,32(sp)
10005214:	ddc00715 	stw	r23,28(sp)
10005218:	dd800615 	stw	r22,24(sp)
1000521c:	dd400515 	stw	r21,20(sp)
10005220:	dcc00315 	stw	r19,12(sp)
10005224:	dc800215 	stw	r18,8(sp)
10005228:	dc400115 	stw	r17,4(sp)
1000522c:	dc000015 	stw	r16,0(sp)
10005230:	2500b804 	addi	r20,r4,736
10005234:	a0002326 	beq	r20,zero,100052c4 <_fwalk_reent+0xbc>
10005238:	282b883a 	mov	r21,r5
1000523c:	2027883a 	mov	r19,r4
10005240:	002f883a 	mov	r23,zero
10005244:	05800044 	movi	r22,1
10005248:	04bfffc4 	movi	r18,-1
1000524c:	a4400117 	ldw	r17,4(r20)
10005250:	a4000217 	ldw	r16,8(r20)
10005254:	8c7fffc4 	addi	r17,r17,-1
10005258:	88000c16 	blt	r17,zero,1000528c <_fwalk_reent+0x84>
1000525c:	84000304 	addi	r16,r16,12
10005260:	8080000b 	ldhu	r2,0(r16)
10005264:	8c7fffc4 	addi	r17,r17,-1
10005268:	817ffd04 	addi	r5,r16,-12
1000526c:	b080052e 	bgeu	r22,r2,10005284 <_fwalk_reent+0x7c>
10005270:	8080008f 	ldh	r2,2(r16)
10005274:	9809883a 	mov	r4,r19
10005278:	14800226 	beq	r2,r18,10005284 <_fwalk_reent+0x7c>
1000527c:	a83ee83a 	callr	r21
10005280:	b8aeb03a 	or	r23,r23,r2
10005284:	84001a04 	addi	r16,r16,104
10005288:	8cbff51e 	bne	r17,r18,10005260 <__alt_data_end+0xf8005260>
1000528c:	a5000017 	ldw	r20,0(r20)
10005290:	a03fee1e 	bne	r20,zero,1000524c <__alt_data_end+0xf800524c>
10005294:	b805883a 	mov	r2,r23
10005298:	dfc00817 	ldw	ra,32(sp)
1000529c:	ddc00717 	ldw	r23,28(sp)
100052a0:	dd800617 	ldw	r22,24(sp)
100052a4:	dd400517 	ldw	r21,20(sp)
100052a8:	dd000417 	ldw	r20,16(sp)
100052ac:	dcc00317 	ldw	r19,12(sp)
100052b0:	dc800217 	ldw	r18,8(sp)
100052b4:	dc400117 	ldw	r17,4(sp)
100052b8:	dc000017 	ldw	r16,0(sp)
100052bc:	dec00904 	addi	sp,sp,36
100052c0:	f800283a 	ret
100052c4:	002f883a 	mov	r23,zero
100052c8:	003ff206 	br	10005294 <__alt_data_end+0xf8005294>

100052cc <_setlocale_r>:
100052cc:	30001b26 	beq	r6,zero,1000533c <_setlocale_r+0x70>
100052d0:	01440074 	movhi	r5,4097
100052d4:	defffe04 	addi	sp,sp,-8
100052d8:	297e2004 	addi	r5,r5,-1920
100052dc:	3009883a 	mov	r4,r6
100052e0:	dc000015 	stw	r16,0(sp)
100052e4:	dfc00115 	stw	ra,4(sp)
100052e8:	3021883a 	mov	r16,r6
100052ec:	00072c40 	call	100072c4 <strcmp>
100052f0:	1000061e 	bne	r2,zero,1000530c <_setlocale_r+0x40>
100052f4:	00840074 	movhi	r2,4097
100052f8:	10be1f04 	addi	r2,r2,-1924
100052fc:	dfc00117 	ldw	ra,4(sp)
10005300:	dc000017 	ldw	r16,0(sp)
10005304:	dec00204 	addi	sp,sp,8
10005308:	f800283a 	ret
1000530c:	01440074 	movhi	r5,4097
10005310:	297e1f04 	addi	r5,r5,-1924
10005314:	8009883a 	mov	r4,r16
10005318:	00072c40 	call	100072c4 <strcmp>
1000531c:	103ff526 	beq	r2,zero,100052f4 <__alt_data_end+0xf80052f4>
10005320:	01440074 	movhi	r5,4097
10005324:	297e0a04 	addi	r5,r5,-2008
10005328:	8009883a 	mov	r4,r16
1000532c:	00072c40 	call	100072c4 <strcmp>
10005330:	103ff026 	beq	r2,zero,100052f4 <__alt_data_end+0xf80052f4>
10005334:	0005883a 	mov	r2,zero
10005338:	003ff006 	br	100052fc <__alt_data_end+0xf80052fc>
1000533c:	00840074 	movhi	r2,4097
10005340:	10be1f04 	addi	r2,r2,-1924
10005344:	f800283a 	ret

10005348 <__locale_charset>:
10005348:	00840074 	movhi	r2,4097
1000534c:	10bfd004 	addi	r2,r2,-192
10005350:	f800283a 	ret

10005354 <__locale_mb_cur_max>:
10005354:	00840074 	movhi	r2,4097
10005358:	10856c04 	addi	r2,r2,5552
1000535c:	10800017 	ldw	r2,0(r2)
10005360:	f800283a 	ret

10005364 <__locale_msgcharset>:
10005364:	00840074 	movhi	r2,4097
10005368:	10bfc804 	addi	r2,r2,-224
1000536c:	f800283a 	ret

10005370 <__locale_cjk_lang>:
10005370:	0005883a 	mov	r2,zero
10005374:	f800283a 	ret

10005378 <_localeconv_r>:
10005378:	00840074 	movhi	r2,4097
1000537c:	10bfd804 	addi	r2,r2,-160
10005380:	f800283a 	ret

10005384 <setlocale>:
10005384:	00840074 	movhi	r2,4097
10005388:	10856b04 	addi	r2,r2,5548
1000538c:	280d883a 	mov	r6,r5
10005390:	200b883a 	mov	r5,r4
10005394:	11000017 	ldw	r4,0(r2)
10005398:	00052cc1 	jmpi	100052cc <_setlocale_r>

1000539c <localeconv>:
1000539c:	00840074 	movhi	r2,4097
100053a0:	10bfd804 	addi	r2,r2,-160
100053a4:	f800283a 	ret

100053a8 <__smakebuf_r>:
100053a8:	2880030b 	ldhu	r2,12(r5)
100053ac:	10c0008c 	andi	r3,r2,2
100053b0:	1800411e 	bne	r3,zero,100054b8 <__smakebuf_r+0x110>
100053b4:	deffec04 	addi	sp,sp,-80
100053b8:	dc000f15 	stw	r16,60(sp)
100053bc:	2821883a 	mov	r16,r5
100053c0:	2940038f 	ldh	r5,14(r5)
100053c4:	dc401015 	stw	r17,64(sp)
100053c8:	dfc01315 	stw	ra,76(sp)
100053cc:	dcc01215 	stw	r19,72(sp)
100053d0:	dc801115 	stw	r18,68(sp)
100053d4:	2023883a 	mov	r17,r4
100053d8:	28001c16 	blt	r5,zero,1000544c <__smakebuf_r+0xa4>
100053dc:	d80d883a 	mov	r6,sp
100053e0:	0008f040 	call	10008f04 <_fstat_r>
100053e4:	10001816 	blt	r2,zero,10005448 <__smakebuf_r+0xa0>
100053e8:	d8800117 	ldw	r2,4(sp)
100053ec:	00e00014 	movui	r3,32768
100053f0:	10bc000c 	andi	r2,r2,61440
100053f4:	14c80020 	cmpeqi	r19,r2,8192
100053f8:	10c03726 	beq	r2,r3,100054d8 <__smakebuf_r+0x130>
100053fc:	80c0030b 	ldhu	r3,12(r16)
10005400:	18c20014 	ori	r3,r3,2048
10005404:	80c0030d 	sth	r3,12(r16)
10005408:	00c80004 	movi	r3,8192
1000540c:	10c0521e 	bne	r2,r3,10005558 <__smakebuf_r+0x1b0>
10005410:	8140038f 	ldh	r5,14(r16)
10005414:	8809883a 	mov	r4,r17
10005418:	000941c0 	call	1000941c <_isatty_r>
1000541c:	10004c26 	beq	r2,zero,10005550 <__smakebuf_r+0x1a8>
10005420:	8080030b 	ldhu	r2,12(r16)
10005424:	80c010c4 	addi	r3,r16,67
10005428:	80c00015 	stw	r3,0(r16)
1000542c:	10800054 	ori	r2,r2,1
10005430:	8080030d 	sth	r2,12(r16)
10005434:	00800044 	movi	r2,1
10005438:	80c00415 	stw	r3,16(r16)
1000543c:	80800515 	stw	r2,20(r16)
10005440:	04810004 	movi	r18,1024
10005444:	00000706 	br	10005464 <__smakebuf_r+0xbc>
10005448:	8080030b 	ldhu	r2,12(r16)
1000544c:	10c0200c 	andi	r3,r2,128
10005450:	18001f1e 	bne	r3,zero,100054d0 <__smakebuf_r+0x128>
10005454:	04810004 	movi	r18,1024
10005458:	10820014 	ori	r2,r2,2048
1000545c:	8080030d 	sth	r2,12(r16)
10005460:	0027883a 	mov	r19,zero
10005464:	900b883a 	mov	r5,r18
10005468:	8809883a 	mov	r4,r17
1000546c:	00055640 	call	10005564 <_malloc_r>
10005470:	10002c26 	beq	r2,zero,10005524 <__smakebuf_r+0x17c>
10005474:	80c0030b 	ldhu	r3,12(r16)
10005478:	01040034 	movhi	r4,4096
1000547c:	21125e04 	addi	r4,r4,18808
10005480:	89000f15 	stw	r4,60(r17)
10005484:	18c02014 	ori	r3,r3,128
10005488:	80c0030d 	sth	r3,12(r16)
1000548c:	80800015 	stw	r2,0(r16)
10005490:	80800415 	stw	r2,16(r16)
10005494:	84800515 	stw	r18,20(r16)
10005498:	98001a1e 	bne	r19,zero,10005504 <__smakebuf_r+0x15c>
1000549c:	dfc01317 	ldw	ra,76(sp)
100054a0:	dcc01217 	ldw	r19,72(sp)
100054a4:	dc801117 	ldw	r18,68(sp)
100054a8:	dc401017 	ldw	r17,64(sp)
100054ac:	dc000f17 	ldw	r16,60(sp)
100054b0:	dec01404 	addi	sp,sp,80
100054b4:	f800283a 	ret
100054b8:	288010c4 	addi	r2,r5,67
100054bc:	28800015 	stw	r2,0(r5)
100054c0:	28800415 	stw	r2,16(r5)
100054c4:	00800044 	movi	r2,1
100054c8:	28800515 	stw	r2,20(r5)
100054cc:	f800283a 	ret
100054d0:	04801004 	movi	r18,64
100054d4:	003fe006 	br	10005458 <__alt_data_end+0xf8005458>
100054d8:	81000a17 	ldw	r4,40(r16)
100054dc:	00c40034 	movhi	r3,4096
100054e0:	18dc9804 	addi	r3,r3,29280
100054e4:	20ffc51e 	bne	r4,r3,100053fc <__alt_data_end+0xf80053fc>
100054e8:	8080030b 	ldhu	r2,12(r16)
100054ec:	04810004 	movi	r18,1024
100054f0:	84801315 	stw	r18,76(r16)
100054f4:	1484b03a 	or	r2,r2,r18
100054f8:	8080030d 	sth	r2,12(r16)
100054fc:	0027883a 	mov	r19,zero
10005500:	003fd806 	br	10005464 <__alt_data_end+0xf8005464>
10005504:	8140038f 	ldh	r5,14(r16)
10005508:	8809883a 	mov	r4,r17
1000550c:	000941c0 	call	1000941c <_isatty_r>
10005510:	103fe226 	beq	r2,zero,1000549c <__alt_data_end+0xf800549c>
10005514:	8080030b 	ldhu	r2,12(r16)
10005518:	10800054 	ori	r2,r2,1
1000551c:	8080030d 	sth	r2,12(r16)
10005520:	003fde06 	br	1000549c <__alt_data_end+0xf800549c>
10005524:	8080030b 	ldhu	r2,12(r16)
10005528:	10c0800c 	andi	r3,r2,512
1000552c:	183fdb1e 	bne	r3,zero,1000549c <__alt_data_end+0xf800549c>
10005530:	10800094 	ori	r2,r2,2
10005534:	80c010c4 	addi	r3,r16,67
10005538:	8080030d 	sth	r2,12(r16)
1000553c:	00800044 	movi	r2,1
10005540:	80c00015 	stw	r3,0(r16)
10005544:	80c00415 	stw	r3,16(r16)
10005548:	80800515 	stw	r2,20(r16)
1000554c:	003fd306 	br	1000549c <__alt_data_end+0xf800549c>
10005550:	04810004 	movi	r18,1024
10005554:	003fc306 	br	10005464 <__alt_data_end+0xf8005464>
10005558:	0027883a 	mov	r19,zero
1000555c:	04810004 	movi	r18,1024
10005560:	003fc006 	br	10005464 <__alt_data_end+0xf8005464>

10005564 <_malloc_r>:
10005564:	defff504 	addi	sp,sp,-44
10005568:	dc800315 	stw	r18,12(sp)
1000556c:	dfc00a15 	stw	ra,40(sp)
10005570:	df000915 	stw	fp,36(sp)
10005574:	ddc00815 	stw	r23,32(sp)
10005578:	dd800715 	stw	r22,28(sp)
1000557c:	dd400615 	stw	r21,24(sp)
10005580:	dd000515 	stw	r20,20(sp)
10005584:	dcc00415 	stw	r19,16(sp)
10005588:	dc400215 	stw	r17,8(sp)
1000558c:	dc000115 	stw	r16,4(sp)
10005590:	288002c4 	addi	r2,r5,11
10005594:	00c00584 	movi	r3,22
10005598:	2025883a 	mov	r18,r4
1000559c:	18807f2e 	bgeu	r3,r2,1000579c <_malloc_r+0x238>
100055a0:	047ffe04 	movi	r17,-8
100055a4:	1462703a 	and	r17,r2,r17
100055a8:	8800a316 	blt	r17,zero,10005838 <_malloc_r+0x2d4>
100055ac:	8940a236 	bltu	r17,r5,10005838 <_malloc_r+0x2d4>
100055b0:	000d7440 	call	1000d744 <__malloc_lock>
100055b4:	00807dc4 	movi	r2,503
100055b8:	1441e92e 	bgeu	r2,r17,10005d60 <_malloc_r+0x7fc>
100055bc:	8804d27a 	srli	r2,r17,9
100055c0:	1000a126 	beq	r2,zero,10005848 <_malloc_r+0x2e4>
100055c4:	00c00104 	movi	r3,4
100055c8:	18811e36 	bltu	r3,r2,10005a44 <_malloc_r+0x4e0>
100055cc:	8804d1ba 	srli	r2,r17,6
100055d0:	12000e44 	addi	r8,r2,57
100055d4:	11c00e04 	addi	r7,r2,56
100055d8:	4209883a 	add	r4,r8,r8
100055dc:	04c40074 	movhi	r19,4097
100055e0:	2109883a 	add	r4,r4,r4
100055e4:	9cffe604 	addi	r19,r19,-104
100055e8:	2109883a 	add	r4,r4,r4
100055ec:	9909883a 	add	r4,r19,r4
100055f0:	24000117 	ldw	r16,4(r4)
100055f4:	213ffe04 	addi	r4,r4,-8
100055f8:	24009726 	beq	r4,r16,10005858 <_malloc_r+0x2f4>
100055fc:	80800117 	ldw	r2,4(r16)
10005600:	01bfff04 	movi	r6,-4
10005604:	014003c4 	movi	r5,15
10005608:	1184703a 	and	r2,r2,r6
1000560c:	1447c83a 	sub	r3,r2,r17
10005610:	28c00716 	blt	r5,r3,10005630 <_malloc_r+0xcc>
10005614:	1800920e 	bge	r3,zero,10005860 <_malloc_r+0x2fc>
10005618:	84000317 	ldw	r16,12(r16)
1000561c:	24008e26 	beq	r4,r16,10005858 <_malloc_r+0x2f4>
10005620:	80800117 	ldw	r2,4(r16)
10005624:	1184703a 	and	r2,r2,r6
10005628:	1447c83a 	sub	r3,r2,r17
1000562c:	28fff90e 	bge	r5,r3,10005614 <__alt_data_end+0xf8005614>
10005630:	3809883a 	mov	r4,r7
10005634:	01840074 	movhi	r6,4097
10005638:	9c000417 	ldw	r16,16(r19)
1000563c:	31bfe604 	addi	r6,r6,-104
10005640:	32000204 	addi	r8,r6,8
10005644:	82013426 	beq	r16,r8,10005b18 <_malloc_r+0x5b4>
10005648:	80c00117 	ldw	r3,4(r16)
1000564c:	00bfff04 	movi	r2,-4
10005650:	188e703a 	and	r7,r3,r2
10005654:	3c45c83a 	sub	r2,r7,r17
10005658:	00c003c4 	movi	r3,15
1000565c:	18811f16 	blt	r3,r2,10005adc <_malloc_r+0x578>
10005660:	32000515 	stw	r8,20(r6)
10005664:	32000415 	stw	r8,16(r6)
10005668:	10007f0e 	bge	r2,zero,10005868 <_malloc_r+0x304>
1000566c:	00807fc4 	movi	r2,511
10005670:	11c0fd36 	bltu	r2,r7,10005a68 <_malloc_r+0x504>
10005674:	3806d0fa 	srli	r3,r7,3
10005678:	01c00044 	movi	r7,1
1000567c:	30800117 	ldw	r2,4(r6)
10005680:	19400044 	addi	r5,r3,1
10005684:	294b883a 	add	r5,r5,r5
10005688:	1807d0ba 	srai	r3,r3,2
1000568c:	294b883a 	add	r5,r5,r5
10005690:	294b883a 	add	r5,r5,r5
10005694:	298b883a 	add	r5,r5,r6
10005698:	38c6983a 	sll	r3,r7,r3
1000569c:	29c00017 	ldw	r7,0(r5)
100056a0:	2a7ffe04 	addi	r9,r5,-8
100056a4:	1886b03a 	or	r3,r3,r2
100056a8:	82400315 	stw	r9,12(r16)
100056ac:	81c00215 	stw	r7,8(r16)
100056b0:	30c00115 	stw	r3,4(r6)
100056b4:	2c000015 	stw	r16,0(r5)
100056b8:	3c000315 	stw	r16,12(r7)
100056bc:	2005d0ba 	srai	r2,r4,2
100056c0:	01400044 	movi	r5,1
100056c4:	288a983a 	sll	r5,r5,r2
100056c8:	19406f36 	bltu	r3,r5,10005888 <_malloc_r+0x324>
100056cc:	28c4703a 	and	r2,r5,r3
100056d0:	10000a1e 	bne	r2,zero,100056fc <_malloc_r+0x198>
100056d4:	00bfff04 	movi	r2,-4
100056d8:	294b883a 	add	r5,r5,r5
100056dc:	2088703a 	and	r4,r4,r2
100056e0:	28c4703a 	and	r2,r5,r3
100056e4:	21000104 	addi	r4,r4,4
100056e8:	1000041e 	bne	r2,zero,100056fc <_malloc_r+0x198>
100056ec:	294b883a 	add	r5,r5,r5
100056f0:	28c4703a 	and	r2,r5,r3
100056f4:	21000104 	addi	r4,r4,4
100056f8:	103ffc26 	beq	r2,zero,100056ec <__alt_data_end+0xf80056ec>
100056fc:	02bfff04 	movi	r10,-4
10005700:	024003c4 	movi	r9,15
10005704:	21800044 	addi	r6,r4,1
10005708:	318d883a 	add	r6,r6,r6
1000570c:	318d883a 	add	r6,r6,r6
10005710:	318d883a 	add	r6,r6,r6
10005714:	998d883a 	add	r6,r19,r6
10005718:	333ffe04 	addi	r12,r6,-8
1000571c:	2017883a 	mov	r11,r4
10005720:	31800104 	addi	r6,r6,4
10005724:	34000017 	ldw	r16,0(r6)
10005728:	31fffd04 	addi	r7,r6,-12
1000572c:	81c0041e 	bne	r16,r7,10005740 <_malloc_r+0x1dc>
10005730:	0000fb06 	br	10005b20 <_malloc_r+0x5bc>
10005734:	1801030e 	bge	r3,zero,10005b44 <_malloc_r+0x5e0>
10005738:	84000317 	ldw	r16,12(r16)
1000573c:	81c0f826 	beq	r16,r7,10005b20 <_malloc_r+0x5bc>
10005740:	80800117 	ldw	r2,4(r16)
10005744:	1284703a 	and	r2,r2,r10
10005748:	1447c83a 	sub	r3,r2,r17
1000574c:	48fff90e 	bge	r9,r3,10005734 <__alt_data_end+0xf8005734>
10005750:	80800317 	ldw	r2,12(r16)
10005754:	81000217 	ldw	r4,8(r16)
10005758:	89400054 	ori	r5,r17,1
1000575c:	81400115 	stw	r5,4(r16)
10005760:	20800315 	stw	r2,12(r4)
10005764:	11000215 	stw	r4,8(r2)
10005768:	8463883a 	add	r17,r16,r17
1000576c:	9c400515 	stw	r17,20(r19)
10005770:	9c400415 	stw	r17,16(r19)
10005774:	18800054 	ori	r2,r3,1
10005778:	88800115 	stw	r2,4(r17)
1000577c:	8a000315 	stw	r8,12(r17)
10005780:	8a000215 	stw	r8,8(r17)
10005784:	88e3883a 	add	r17,r17,r3
10005788:	88c00015 	stw	r3,0(r17)
1000578c:	9009883a 	mov	r4,r18
10005790:	000d7680 	call	1000d768 <__malloc_unlock>
10005794:	80800204 	addi	r2,r16,8
10005798:	00001b06 	br	10005808 <_malloc_r+0x2a4>
1000579c:	04400404 	movi	r17,16
100057a0:	89402536 	bltu	r17,r5,10005838 <_malloc_r+0x2d4>
100057a4:	000d7440 	call	1000d744 <__malloc_lock>
100057a8:	00800184 	movi	r2,6
100057ac:	01000084 	movi	r4,2
100057b0:	04c40074 	movhi	r19,4097
100057b4:	1085883a 	add	r2,r2,r2
100057b8:	9cffe604 	addi	r19,r19,-104
100057bc:	1085883a 	add	r2,r2,r2
100057c0:	9885883a 	add	r2,r19,r2
100057c4:	14000117 	ldw	r16,4(r2)
100057c8:	10fffe04 	addi	r3,r2,-8
100057cc:	80c0d926 	beq	r16,r3,10005b34 <_malloc_r+0x5d0>
100057d0:	80c00117 	ldw	r3,4(r16)
100057d4:	81000317 	ldw	r4,12(r16)
100057d8:	00bfff04 	movi	r2,-4
100057dc:	1884703a 	and	r2,r3,r2
100057e0:	81400217 	ldw	r5,8(r16)
100057e4:	8085883a 	add	r2,r16,r2
100057e8:	10c00117 	ldw	r3,4(r2)
100057ec:	29000315 	stw	r4,12(r5)
100057f0:	21400215 	stw	r5,8(r4)
100057f4:	18c00054 	ori	r3,r3,1
100057f8:	10c00115 	stw	r3,4(r2)
100057fc:	9009883a 	mov	r4,r18
10005800:	000d7680 	call	1000d768 <__malloc_unlock>
10005804:	80800204 	addi	r2,r16,8
10005808:	dfc00a17 	ldw	ra,40(sp)
1000580c:	df000917 	ldw	fp,36(sp)
10005810:	ddc00817 	ldw	r23,32(sp)
10005814:	dd800717 	ldw	r22,28(sp)
10005818:	dd400617 	ldw	r21,24(sp)
1000581c:	dd000517 	ldw	r20,20(sp)
10005820:	dcc00417 	ldw	r19,16(sp)
10005824:	dc800317 	ldw	r18,12(sp)
10005828:	dc400217 	ldw	r17,8(sp)
1000582c:	dc000117 	ldw	r16,4(sp)
10005830:	dec00b04 	addi	sp,sp,44
10005834:	f800283a 	ret
10005838:	00800304 	movi	r2,12
1000583c:	90800015 	stw	r2,0(r18)
10005840:	0005883a 	mov	r2,zero
10005844:	003ff006 	br	10005808 <__alt_data_end+0xf8005808>
10005848:	01002004 	movi	r4,128
1000584c:	02001004 	movi	r8,64
10005850:	01c00fc4 	movi	r7,63
10005854:	003f6106 	br	100055dc <__alt_data_end+0xf80055dc>
10005858:	4009883a 	mov	r4,r8
1000585c:	003f7506 	br	10005634 <__alt_data_end+0xf8005634>
10005860:	81000317 	ldw	r4,12(r16)
10005864:	003fde06 	br	100057e0 <__alt_data_end+0xf80057e0>
10005868:	81c5883a 	add	r2,r16,r7
1000586c:	11400117 	ldw	r5,4(r2)
10005870:	9009883a 	mov	r4,r18
10005874:	29400054 	ori	r5,r5,1
10005878:	11400115 	stw	r5,4(r2)
1000587c:	000d7680 	call	1000d768 <__malloc_unlock>
10005880:	80800204 	addi	r2,r16,8
10005884:	003fe006 	br	10005808 <__alt_data_end+0xf8005808>
10005888:	9c000217 	ldw	r16,8(r19)
1000588c:	00bfff04 	movi	r2,-4
10005890:	85800117 	ldw	r22,4(r16)
10005894:	b0ac703a 	and	r22,r22,r2
10005898:	b4400336 	bltu	r22,r17,100058a8 <_malloc_r+0x344>
1000589c:	b445c83a 	sub	r2,r22,r17
100058a0:	00c003c4 	movi	r3,15
100058a4:	18805d16 	blt	r3,r2,10005a1c <_malloc_r+0x4b8>
100058a8:	05c40074 	movhi	r23,4097
100058ac:	00840074 	movhi	r2,4097
100058b0:	108c3b04 	addi	r2,r2,12524
100058b4:	bdc56d04 	addi	r23,r23,5556
100058b8:	15400017 	ldw	r21,0(r2)
100058bc:	b8c00017 	ldw	r3,0(r23)
100058c0:	00bfffc4 	movi	r2,-1
100058c4:	858d883a 	add	r6,r16,r22
100058c8:	8d6b883a 	add	r21,r17,r21
100058cc:	1880ea26 	beq	r3,r2,10005c78 <_malloc_r+0x714>
100058d0:	ad4403c4 	addi	r21,r21,4111
100058d4:	00bc0004 	movi	r2,-4096
100058d8:	a8aa703a 	and	r21,r21,r2
100058dc:	a80b883a 	mov	r5,r21
100058e0:	9009883a 	mov	r4,r18
100058e4:	d9800015 	stw	r6,0(sp)
100058e8:	00071340 	call	10007134 <_sbrk_r>
100058ec:	1029883a 	mov	r20,r2
100058f0:	00bfffc4 	movi	r2,-1
100058f4:	d9800017 	ldw	r6,0(sp)
100058f8:	a080e826 	beq	r20,r2,10005c9c <_malloc_r+0x738>
100058fc:	a180a636 	bltu	r20,r6,10005b98 <_malloc_r+0x634>
10005900:	07040074 	movhi	fp,4097
10005904:	e70c4304 	addi	fp,fp,12556
10005908:	e0800017 	ldw	r2,0(fp)
1000590c:	a887883a 	add	r3,r21,r2
10005910:	e0c00015 	stw	r3,0(fp)
10005914:	3500e626 	beq	r6,r20,10005cb0 <_malloc_r+0x74c>
10005918:	b9000017 	ldw	r4,0(r23)
1000591c:	00bfffc4 	movi	r2,-1
10005920:	2080ee26 	beq	r4,r2,10005cdc <_malloc_r+0x778>
10005924:	a185c83a 	sub	r2,r20,r6
10005928:	10c5883a 	add	r2,r2,r3
1000592c:	e0800015 	stw	r2,0(fp)
10005930:	a0c001cc 	andi	r3,r20,7
10005934:	1800bc26 	beq	r3,zero,10005c28 <_malloc_r+0x6c4>
10005938:	a0e9c83a 	sub	r20,r20,r3
1000593c:	00840204 	movi	r2,4104
10005940:	a5000204 	addi	r20,r20,8
10005944:	10c7c83a 	sub	r3,r2,r3
10005948:	a545883a 	add	r2,r20,r21
1000594c:	1083ffcc 	andi	r2,r2,4095
10005950:	18abc83a 	sub	r21,r3,r2
10005954:	a80b883a 	mov	r5,r21
10005958:	9009883a 	mov	r4,r18
1000595c:	00071340 	call	10007134 <_sbrk_r>
10005960:	00ffffc4 	movi	r3,-1
10005964:	10c0e126 	beq	r2,r3,10005cec <_malloc_r+0x788>
10005968:	1505c83a 	sub	r2,r2,r20
1000596c:	1545883a 	add	r2,r2,r21
10005970:	10800054 	ori	r2,r2,1
10005974:	e0c00017 	ldw	r3,0(fp)
10005978:	9d000215 	stw	r20,8(r19)
1000597c:	a0800115 	stw	r2,4(r20)
10005980:	a8c7883a 	add	r3,r21,r3
10005984:	e0c00015 	stw	r3,0(fp)
10005988:	84c00e26 	beq	r16,r19,100059c4 <_malloc_r+0x460>
1000598c:	018003c4 	movi	r6,15
10005990:	3580a72e 	bgeu	r6,r22,10005c30 <_malloc_r+0x6cc>
10005994:	81400117 	ldw	r5,4(r16)
10005998:	013ffe04 	movi	r4,-8
1000599c:	b0bffd04 	addi	r2,r22,-12
100059a0:	1104703a 	and	r2,r2,r4
100059a4:	2900004c 	andi	r4,r5,1
100059a8:	2088b03a 	or	r4,r4,r2
100059ac:	81000115 	stw	r4,4(r16)
100059b0:	01400144 	movi	r5,5
100059b4:	8089883a 	add	r4,r16,r2
100059b8:	21400115 	stw	r5,4(r4)
100059bc:	21400215 	stw	r5,8(r4)
100059c0:	3080cd36 	bltu	r6,r2,10005cf8 <_malloc_r+0x794>
100059c4:	00840074 	movhi	r2,4097
100059c8:	108c3a04 	addi	r2,r2,12520
100059cc:	11000017 	ldw	r4,0(r2)
100059d0:	20c0012e 	bgeu	r4,r3,100059d8 <_malloc_r+0x474>
100059d4:	10c00015 	stw	r3,0(r2)
100059d8:	00840074 	movhi	r2,4097
100059dc:	108c3904 	addi	r2,r2,12516
100059e0:	11000017 	ldw	r4,0(r2)
100059e4:	9c000217 	ldw	r16,8(r19)
100059e8:	20c0012e 	bgeu	r4,r3,100059f0 <_malloc_r+0x48c>
100059ec:	10c00015 	stw	r3,0(r2)
100059f0:	80c00117 	ldw	r3,4(r16)
100059f4:	00bfff04 	movi	r2,-4
100059f8:	1886703a 	and	r3,r3,r2
100059fc:	1c45c83a 	sub	r2,r3,r17
10005a00:	1c400236 	bltu	r3,r17,10005a0c <_malloc_r+0x4a8>
10005a04:	00c003c4 	movi	r3,15
10005a08:	18800416 	blt	r3,r2,10005a1c <_malloc_r+0x4b8>
10005a0c:	9009883a 	mov	r4,r18
10005a10:	000d7680 	call	1000d768 <__malloc_unlock>
10005a14:	0005883a 	mov	r2,zero
10005a18:	003f7b06 	br	10005808 <__alt_data_end+0xf8005808>
10005a1c:	88c00054 	ori	r3,r17,1
10005a20:	80c00115 	stw	r3,4(r16)
10005a24:	8463883a 	add	r17,r16,r17
10005a28:	10800054 	ori	r2,r2,1
10005a2c:	9c400215 	stw	r17,8(r19)
10005a30:	88800115 	stw	r2,4(r17)
10005a34:	9009883a 	mov	r4,r18
10005a38:	000d7680 	call	1000d768 <__malloc_unlock>
10005a3c:	80800204 	addi	r2,r16,8
10005a40:	003f7106 	br	10005808 <__alt_data_end+0xf8005808>
10005a44:	00c00504 	movi	r3,20
10005a48:	18804a2e 	bgeu	r3,r2,10005b74 <_malloc_r+0x610>
10005a4c:	00c01504 	movi	r3,84
10005a50:	18806e36 	bltu	r3,r2,10005c0c <_malloc_r+0x6a8>
10005a54:	8804d33a 	srli	r2,r17,12
10005a58:	12001bc4 	addi	r8,r2,111
10005a5c:	11c01b84 	addi	r7,r2,110
10005a60:	4209883a 	add	r4,r8,r8
10005a64:	003edd06 	br	100055dc <__alt_data_end+0xf80055dc>
10005a68:	3804d27a 	srli	r2,r7,9
10005a6c:	00c00104 	movi	r3,4
10005a70:	1880442e 	bgeu	r3,r2,10005b84 <_malloc_r+0x620>
10005a74:	00c00504 	movi	r3,20
10005a78:	18808136 	bltu	r3,r2,10005c80 <_malloc_r+0x71c>
10005a7c:	11401704 	addi	r5,r2,92
10005a80:	10c016c4 	addi	r3,r2,91
10005a84:	294b883a 	add	r5,r5,r5
10005a88:	294b883a 	add	r5,r5,r5
10005a8c:	294b883a 	add	r5,r5,r5
10005a90:	994b883a 	add	r5,r19,r5
10005a94:	28800017 	ldw	r2,0(r5)
10005a98:	01840074 	movhi	r6,4097
10005a9c:	297ffe04 	addi	r5,r5,-8
10005aa0:	31bfe604 	addi	r6,r6,-104
10005aa4:	28806526 	beq	r5,r2,10005c3c <_malloc_r+0x6d8>
10005aa8:	01bfff04 	movi	r6,-4
10005aac:	10c00117 	ldw	r3,4(r2)
10005ab0:	1986703a 	and	r3,r3,r6
10005ab4:	38c0022e 	bgeu	r7,r3,10005ac0 <_malloc_r+0x55c>
10005ab8:	10800217 	ldw	r2,8(r2)
10005abc:	28bffb1e 	bne	r5,r2,10005aac <__alt_data_end+0xf8005aac>
10005ac0:	11400317 	ldw	r5,12(r2)
10005ac4:	98c00117 	ldw	r3,4(r19)
10005ac8:	81400315 	stw	r5,12(r16)
10005acc:	80800215 	stw	r2,8(r16)
10005ad0:	2c000215 	stw	r16,8(r5)
10005ad4:	14000315 	stw	r16,12(r2)
10005ad8:	003ef806 	br	100056bc <__alt_data_end+0xf80056bc>
10005adc:	88c00054 	ori	r3,r17,1
10005ae0:	80c00115 	stw	r3,4(r16)
10005ae4:	8463883a 	add	r17,r16,r17
10005ae8:	34400515 	stw	r17,20(r6)
10005aec:	34400415 	stw	r17,16(r6)
10005af0:	10c00054 	ori	r3,r2,1
10005af4:	8a000315 	stw	r8,12(r17)
10005af8:	8a000215 	stw	r8,8(r17)
10005afc:	88c00115 	stw	r3,4(r17)
10005b00:	88a3883a 	add	r17,r17,r2
10005b04:	88800015 	stw	r2,0(r17)
10005b08:	9009883a 	mov	r4,r18
10005b0c:	000d7680 	call	1000d768 <__malloc_unlock>
10005b10:	80800204 	addi	r2,r16,8
10005b14:	003f3c06 	br	10005808 <__alt_data_end+0xf8005808>
10005b18:	30c00117 	ldw	r3,4(r6)
10005b1c:	003ee706 	br	100056bc <__alt_data_end+0xf80056bc>
10005b20:	5ac00044 	addi	r11,r11,1
10005b24:	588000cc 	andi	r2,r11,3
10005b28:	31800204 	addi	r6,r6,8
10005b2c:	103efd1e 	bne	r2,zero,10005724 <__alt_data_end+0xf8005724>
10005b30:	00002406 	br	10005bc4 <_malloc_r+0x660>
10005b34:	14000317 	ldw	r16,12(r2)
10005b38:	143f251e 	bne	r2,r16,100057d0 <__alt_data_end+0xf80057d0>
10005b3c:	21000084 	addi	r4,r4,2
10005b40:	003ebc06 	br	10005634 <__alt_data_end+0xf8005634>
10005b44:	8085883a 	add	r2,r16,r2
10005b48:	10c00117 	ldw	r3,4(r2)
10005b4c:	81000317 	ldw	r4,12(r16)
10005b50:	81400217 	ldw	r5,8(r16)
10005b54:	18c00054 	ori	r3,r3,1
10005b58:	10c00115 	stw	r3,4(r2)
10005b5c:	29000315 	stw	r4,12(r5)
10005b60:	21400215 	stw	r5,8(r4)
10005b64:	9009883a 	mov	r4,r18
10005b68:	000d7680 	call	1000d768 <__malloc_unlock>
10005b6c:	80800204 	addi	r2,r16,8
10005b70:	003f2506 	br	10005808 <__alt_data_end+0xf8005808>
10005b74:	12001704 	addi	r8,r2,92
10005b78:	11c016c4 	addi	r7,r2,91
10005b7c:	4209883a 	add	r4,r8,r8
10005b80:	003e9606 	br	100055dc <__alt_data_end+0xf80055dc>
10005b84:	3804d1ba 	srli	r2,r7,6
10005b88:	11400e44 	addi	r5,r2,57
10005b8c:	10c00e04 	addi	r3,r2,56
10005b90:	294b883a 	add	r5,r5,r5
10005b94:	003fbc06 	br	10005a88 <__alt_data_end+0xf8005a88>
10005b98:	84ff5926 	beq	r16,r19,10005900 <__alt_data_end+0xf8005900>
10005b9c:	00840074 	movhi	r2,4097
10005ba0:	10bfe604 	addi	r2,r2,-104
10005ba4:	14000217 	ldw	r16,8(r2)
10005ba8:	00bfff04 	movi	r2,-4
10005bac:	80c00117 	ldw	r3,4(r16)
10005bb0:	1886703a 	and	r3,r3,r2
10005bb4:	003f9106 	br	100059fc <__alt_data_end+0xf80059fc>
10005bb8:	60800217 	ldw	r2,8(r12)
10005bbc:	213fffc4 	addi	r4,r4,-1
10005bc0:	1300651e 	bne	r2,r12,10005d58 <_malloc_r+0x7f4>
10005bc4:	208000cc 	andi	r2,r4,3
10005bc8:	633ffe04 	addi	r12,r12,-8
10005bcc:	103ffa1e 	bne	r2,zero,10005bb8 <__alt_data_end+0xf8005bb8>
10005bd0:	98800117 	ldw	r2,4(r19)
10005bd4:	0146303a 	nor	r3,zero,r5
10005bd8:	1884703a 	and	r2,r3,r2
10005bdc:	98800115 	stw	r2,4(r19)
10005be0:	294b883a 	add	r5,r5,r5
10005be4:	117f2836 	bltu	r2,r5,10005888 <__alt_data_end+0xf8005888>
10005be8:	283f2726 	beq	r5,zero,10005888 <__alt_data_end+0xf8005888>
10005bec:	2886703a 	and	r3,r5,r2
10005bf0:	5809883a 	mov	r4,r11
10005bf4:	183ec31e 	bne	r3,zero,10005704 <__alt_data_end+0xf8005704>
10005bf8:	294b883a 	add	r5,r5,r5
10005bfc:	2886703a 	and	r3,r5,r2
10005c00:	21000104 	addi	r4,r4,4
10005c04:	183ffc26 	beq	r3,zero,10005bf8 <__alt_data_end+0xf8005bf8>
10005c08:	003ebe06 	br	10005704 <__alt_data_end+0xf8005704>
10005c0c:	00c05504 	movi	r3,340
10005c10:	18801236 	bltu	r3,r2,10005c5c <_malloc_r+0x6f8>
10005c14:	8804d3fa 	srli	r2,r17,15
10005c18:	12001e04 	addi	r8,r2,120
10005c1c:	11c01dc4 	addi	r7,r2,119
10005c20:	4209883a 	add	r4,r8,r8
10005c24:	003e6d06 	br	100055dc <__alt_data_end+0xf80055dc>
10005c28:	00c40004 	movi	r3,4096
10005c2c:	003f4606 	br	10005948 <__alt_data_end+0xf8005948>
10005c30:	00800044 	movi	r2,1
10005c34:	a0800115 	stw	r2,4(r20)
10005c38:	003f7406 	br	10005a0c <__alt_data_end+0xf8005a0c>
10005c3c:	1805d0ba 	srai	r2,r3,2
10005c40:	01c00044 	movi	r7,1
10005c44:	30c00117 	ldw	r3,4(r6)
10005c48:	388e983a 	sll	r7,r7,r2
10005c4c:	2805883a 	mov	r2,r5
10005c50:	38c6b03a 	or	r3,r7,r3
10005c54:	30c00115 	stw	r3,4(r6)
10005c58:	003f9b06 	br	10005ac8 <__alt_data_end+0xf8005ac8>
10005c5c:	00c15504 	movi	r3,1364
10005c60:	18801a36 	bltu	r3,r2,10005ccc <_malloc_r+0x768>
10005c64:	8804d4ba 	srli	r2,r17,18
10005c68:	12001f44 	addi	r8,r2,125
10005c6c:	11c01f04 	addi	r7,r2,124
10005c70:	4209883a 	add	r4,r8,r8
10005c74:	003e5906 	br	100055dc <__alt_data_end+0xf80055dc>
10005c78:	ad400404 	addi	r21,r21,16
10005c7c:	003f1706 	br	100058dc <__alt_data_end+0xf80058dc>
10005c80:	00c01504 	movi	r3,84
10005c84:	18802336 	bltu	r3,r2,10005d14 <_malloc_r+0x7b0>
10005c88:	3804d33a 	srli	r2,r7,12
10005c8c:	11401bc4 	addi	r5,r2,111
10005c90:	10c01b84 	addi	r3,r2,110
10005c94:	294b883a 	add	r5,r5,r5
10005c98:	003f7b06 	br	10005a88 <__alt_data_end+0xf8005a88>
10005c9c:	9c000217 	ldw	r16,8(r19)
10005ca0:	00bfff04 	movi	r2,-4
10005ca4:	80c00117 	ldw	r3,4(r16)
10005ca8:	1886703a 	and	r3,r3,r2
10005cac:	003f5306 	br	100059fc <__alt_data_end+0xf80059fc>
10005cb0:	3083ffcc 	andi	r2,r6,4095
10005cb4:	103f181e 	bne	r2,zero,10005918 <__alt_data_end+0xf8005918>
10005cb8:	99000217 	ldw	r4,8(r19)
10005cbc:	b545883a 	add	r2,r22,r21
10005cc0:	10800054 	ori	r2,r2,1
10005cc4:	20800115 	stw	r2,4(r4)
10005cc8:	003f3e06 	br	100059c4 <__alt_data_end+0xf80059c4>
10005ccc:	01003f84 	movi	r4,254
10005cd0:	02001fc4 	movi	r8,127
10005cd4:	01c01f84 	movi	r7,126
10005cd8:	003e4006 	br	100055dc <__alt_data_end+0xf80055dc>
10005cdc:	00840074 	movhi	r2,4097
10005ce0:	10856d04 	addi	r2,r2,5556
10005ce4:	15000015 	stw	r20,0(r2)
10005ce8:	003f1106 	br	10005930 <__alt_data_end+0xf8005930>
10005cec:	00800044 	movi	r2,1
10005cf0:	002b883a 	mov	r21,zero
10005cf4:	003f1f06 	br	10005974 <__alt_data_end+0xf8005974>
10005cf8:	81400204 	addi	r5,r16,8
10005cfc:	9009883a 	mov	r4,r18
10005d00:	0004e340 	call	10004e34 <_free_r>
10005d04:	00840074 	movhi	r2,4097
10005d08:	108c4304 	addi	r2,r2,12556
10005d0c:	10c00017 	ldw	r3,0(r2)
10005d10:	003f2c06 	br	100059c4 <__alt_data_end+0xf80059c4>
10005d14:	00c05504 	movi	r3,340
10005d18:	18800536 	bltu	r3,r2,10005d30 <_malloc_r+0x7cc>
10005d1c:	3804d3fa 	srli	r2,r7,15
10005d20:	11401e04 	addi	r5,r2,120
10005d24:	10c01dc4 	addi	r3,r2,119
10005d28:	294b883a 	add	r5,r5,r5
10005d2c:	003f5606 	br	10005a88 <__alt_data_end+0xf8005a88>
10005d30:	00c15504 	movi	r3,1364
10005d34:	18800536 	bltu	r3,r2,10005d4c <_malloc_r+0x7e8>
10005d38:	3804d4ba 	srli	r2,r7,18
10005d3c:	11401f44 	addi	r5,r2,125
10005d40:	10c01f04 	addi	r3,r2,124
10005d44:	294b883a 	add	r5,r5,r5
10005d48:	003f4f06 	br	10005a88 <__alt_data_end+0xf8005a88>
10005d4c:	01403f84 	movi	r5,254
10005d50:	00c01f84 	movi	r3,126
10005d54:	003f4c06 	br	10005a88 <__alt_data_end+0xf8005a88>
10005d58:	98800117 	ldw	r2,4(r19)
10005d5c:	003fa006 	br	10005be0 <__alt_data_end+0xf8005be0>
10005d60:	8808d0fa 	srli	r4,r17,3
10005d64:	20800044 	addi	r2,r4,1
10005d68:	1085883a 	add	r2,r2,r2
10005d6c:	003e9006 	br	100057b0 <__alt_data_end+0xf80057b0>

10005d70 <memchr>:
10005d70:	208000cc 	andi	r2,r4,3
10005d74:	280f883a 	mov	r7,r5
10005d78:	10003426 	beq	r2,zero,10005e4c <memchr+0xdc>
10005d7c:	30bfffc4 	addi	r2,r6,-1
10005d80:	30001a26 	beq	r6,zero,10005dec <memchr+0x7c>
10005d84:	20c00003 	ldbu	r3,0(r4)
10005d88:	29803fcc 	andi	r6,r5,255
10005d8c:	30c0051e 	bne	r6,r3,10005da4 <memchr+0x34>
10005d90:	00001806 	br	10005df4 <memchr+0x84>
10005d94:	10001526 	beq	r2,zero,10005dec <memchr+0x7c>
10005d98:	20c00003 	ldbu	r3,0(r4)
10005d9c:	10bfffc4 	addi	r2,r2,-1
10005da0:	30c01426 	beq	r6,r3,10005df4 <memchr+0x84>
10005da4:	21000044 	addi	r4,r4,1
10005da8:	20c000cc 	andi	r3,r4,3
10005dac:	183ff91e 	bne	r3,zero,10005d94 <__alt_data_end+0xf8005d94>
10005db0:	020000c4 	movi	r8,3
10005db4:	40801136 	bltu	r8,r2,10005dfc <memchr+0x8c>
10005db8:	10000c26 	beq	r2,zero,10005dec <memchr+0x7c>
10005dbc:	20c00003 	ldbu	r3,0(r4)
10005dc0:	29403fcc 	andi	r5,r5,255
10005dc4:	28c00b26 	beq	r5,r3,10005df4 <memchr+0x84>
10005dc8:	20c00044 	addi	r3,r4,1
10005dcc:	39803fcc 	andi	r6,r7,255
10005dd0:	2089883a 	add	r4,r4,r2
10005dd4:	00000306 	br	10005de4 <memchr+0x74>
10005dd8:	18c00044 	addi	r3,r3,1
10005ddc:	197fffc3 	ldbu	r5,-1(r3)
10005de0:	31400526 	beq	r6,r5,10005df8 <memchr+0x88>
10005de4:	1805883a 	mov	r2,r3
10005de8:	20fffb1e 	bne	r4,r3,10005dd8 <__alt_data_end+0xf8005dd8>
10005dec:	0005883a 	mov	r2,zero
10005df0:	f800283a 	ret
10005df4:	2005883a 	mov	r2,r4
10005df8:	f800283a 	ret
10005dfc:	28c03fcc 	andi	r3,r5,255
10005e00:	1812923a 	slli	r9,r3,8
10005e04:	02ffbff4 	movhi	r11,65279
10005e08:	02a02074 	movhi	r10,32897
10005e0c:	48d2b03a 	or	r9,r9,r3
10005e10:	4806943a 	slli	r3,r9,16
10005e14:	5affbfc4 	addi	r11,r11,-257
10005e18:	52a02004 	addi	r10,r10,-32640
10005e1c:	48d2b03a 	or	r9,r9,r3
10005e20:	20c00017 	ldw	r3,0(r4)
10005e24:	48c6f03a 	xor	r3,r9,r3
10005e28:	1acd883a 	add	r6,r3,r11
10005e2c:	00c6303a 	nor	r3,zero,r3
10005e30:	30c6703a 	and	r3,r6,r3
10005e34:	1a86703a 	and	r3,r3,r10
10005e38:	183fe01e 	bne	r3,zero,10005dbc <__alt_data_end+0xf8005dbc>
10005e3c:	10bfff04 	addi	r2,r2,-4
10005e40:	21000104 	addi	r4,r4,4
10005e44:	40bff636 	bltu	r8,r2,10005e20 <__alt_data_end+0xf8005e20>
10005e48:	003fdb06 	br	10005db8 <__alt_data_end+0xf8005db8>
10005e4c:	3005883a 	mov	r2,r6
10005e50:	003fd706 	br	10005db0 <__alt_data_end+0xf8005db0>

10005e54 <memcpy>:
10005e54:	defffd04 	addi	sp,sp,-12
10005e58:	dfc00215 	stw	ra,8(sp)
10005e5c:	dc400115 	stw	r17,4(sp)
10005e60:	dc000015 	stw	r16,0(sp)
10005e64:	00c003c4 	movi	r3,15
10005e68:	2005883a 	mov	r2,r4
10005e6c:	1980452e 	bgeu	r3,r6,10005f84 <memcpy+0x130>
10005e70:	2906b03a 	or	r3,r5,r4
10005e74:	18c000cc 	andi	r3,r3,3
10005e78:	1800441e 	bne	r3,zero,10005f8c <memcpy+0x138>
10005e7c:	347ffc04 	addi	r17,r6,-16
10005e80:	8822d13a 	srli	r17,r17,4
10005e84:	28c00104 	addi	r3,r5,4
10005e88:	23400104 	addi	r13,r4,4
10005e8c:	8820913a 	slli	r16,r17,4
10005e90:	2b000204 	addi	r12,r5,8
10005e94:	22c00204 	addi	r11,r4,8
10005e98:	84000504 	addi	r16,r16,20
10005e9c:	2a800304 	addi	r10,r5,12
10005ea0:	22400304 	addi	r9,r4,12
10005ea4:	2c21883a 	add	r16,r5,r16
10005ea8:	2811883a 	mov	r8,r5
10005eac:	200f883a 	mov	r7,r4
10005eb0:	41000017 	ldw	r4,0(r8)
10005eb4:	1fc00017 	ldw	ra,0(r3)
10005eb8:	63c00017 	ldw	r15,0(r12)
10005ebc:	39000015 	stw	r4,0(r7)
10005ec0:	53800017 	ldw	r14,0(r10)
10005ec4:	6fc00015 	stw	ra,0(r13)
10005ec8:	5bc00015 	stw	r15,0(r11)
10005ecc:	4b800015 	stw	r14,0(r9)
10005ed0:	18c00404 	addi	r3,r3,16
10005ed4:	39c00404 	addi	r7,r7,16
10005ed8:	42000404 	addi	r8,r8,16
10005edc:	6b400404 	addi	r13,r13,16
10005ee0:	63000404 	addi	r12,r12,16
10005ee4:	5ac00404 	addi	r11,r11,16
10005ee8:	52800404 	addi	r10,r10,16
10005eec:	4a400404 	addi	r9,r9,16
10005ef0:	1c3fef1e 	bne	r3,r16,10005eb0 <__alt_data_end+0xf8005eb0>
10005ef4:	89c00044 	addi	r7,r17,1
10005ef8:	380e913a 	slli	r7,r7,4
10005efc:	310003cc 	andi	r4,r6,15
10005f00:	02c000c4 	movi	r11,3
10005f04:	11c7883a 	add	r3,r2,r7
10005f08:	29cb883a 	add	r5,r5,r7
10005f0c:	5900212e 	bgeu	r11,r4,10005f94 <memcpy+0x140>
10005f10:	1813883a 	mov	r9,r3
10005f14:	2811883a 	mov	r8,r5
10005f18:	200f883a 	mov	r7,r4
10005f1c:	42800017 	ldw	r10,0(r8)
10005f20:	4a400104 	addi	r9,r9,4
10005f24:	39ffff04 	addi	r7,r7,-4
10005f28:	4abfff15 	stw	r10,-4(r9)
10005f2c:	42000104 	addi	r8,r8,4
10005f30:	59fffa36 	bltu	r11,r7,10005f1c <__alt_data_end+0xf8005f1c>
10005f34:	213fff04 	addi	r4,r4,-4
10005f38:	2008d0ba 	srli	r4,r4,2
10005f3c:	318000cc 	andi	r6,r6,3
10005f40:	21000044 	addi	r4,r4,1
10005f44:	2109883a 	add	r4,r4,r4
10005f48:	2109883a 	add	r4,r4,r4
10005f4c:	1907883a 	add	r3,r3,r4
10005f50:	290b883a 	add	r5,r5,r4
10005f54:	30000626 	beq	r6,zero,10005f70 <memcpy+0x11c>
10005f58:	198d883a 	add	r6,r3,r6
10005f5c:	29c00003 	ldbu	r7,0(r5)
10005f60:	18c00044 	addi	r3,r3,1
10005f64:	29400044 	addi	r5,r5,1
10005f68:	19ffffc5 	stb	r7,-1(r3)
10005f6c:	19bffb1e 	bne	r3,r6,10005f5c <__alt_data_end+0xf8005f5c>
10005f70:	dfc00217 	ldw	ra,8(sp)
10005f74:	dc400117 	ldw	r17,4(sp)
10005f78:	dc000017 	ldw	r16,0(sp)
10005f7c:	dec00304 	addi	sp,sp,12
10005f80:	f800283a 	ret
10005f84:	2007883a 	mov	r3,r4
10005f88:	003ff206 	br	10005f54 <__alt_data_end+0xf8005f54>
10005f8c:	2007883a 	mov	r3,r4
10005f90:	003ff106 	br	10005f58 <__alt_data_end+0xf8005f58>
10005f94:	200d883a 	mov	r6,r4
10005f98:	003fee06 	br	10005f54 <__alt_data_end+0xf8005f54>

10005f9c <memset>:
10005f9c:	20c000cc 	andi	r3,r4,3
10005fa0:	2005883a 	mov	r2,r4
10005fa4:	18004426 	beq	r3,zero,100060b8 <memset+0x11c>
10005fa8:	31ffffc4 	addi	r7,r6,-1
10005fac:	30004026 	beq	r6,zero,100060b0 <memset+0x114>
10005fb0:	2813883a 	mov	r9,r5
10005fb4:	200d883a 	mov	r6,r4
10005fb8:	2007883a 	mov	r3,r4
10005fbc:	00000406 	br	10005fd0 <memset+0x34>
10005fc0:	3a3fffc4 	addi	r8,r7,-1
10005fc4:	31800044 	addi	r6,r6,1
10005fc8:	38003926 	beq	r7,zero,100060b0 <memset+0x114>
10005fcc:	400f883a 	mov	r7,r8
10005fd0:	18c00044 	addi	r3,r3,1
10005fd4:	32400005 	stb	r9,0(r6)
10005fd8:	1a0000cc 	andi	r8,r3,3
10005fdc:	403ff81e 	bne	r8,zero,10005fc0 <__alt_data_end+0xf8005fc0>
10005fe0:	010000c4 	movi	r4,3
10005fe4:	21c02d2e 	bgeu	r4,r7,1000609c <memset+0x100>
10005fe8:	29003fcc 	andi	r4,r5,255
10005fec:	200c923a 	slli	r6,r4,8
10005ff0:	3108b03a 	or	r4,r6,r4
10005ff4:	200c943a 	slli	r6,r4,16
10005ff8:	218cb03a 	or	r6,r4,r6
10005ffc:	010003c4 	movi	r4,15
10006000:	21c0182e 	bgeu	r4,r7,10006064 <memset+0xc8>
10006004:	3b3ffc04 	addi	r12,r7,-16
10006008:	6018d13a 	srli	r12,r12,4
1000600c:	1a000104 	addi	r8,r3,4
10006010:	1ac00204 	addi	r11,r3,8
10006014:	6008913a 	slli	r4,r12,4
10006018:	1a800304 	addi	r10,r3,12
1000601c:	1813883a 	mov	r9,r3
10006020:	21000504 	addi	r4,r4,20
10006024:	1909883a 	add	r4,r3,r4
10006028:	49800015 	stw	r6,0(r9)
1000602c:	41800015 	stw	r6,0(r8)
10006030:	59800015 	stw	r6,0(r11)
10006034:	51800015 	stw	r6,0(r10)
10006038:	42000404 	addi	r8,r8,16
1000603c:	4a400404 	addi	r9,r9,16
10006040:	5ac00404 	addi	r11,r11,16
10006044:	52800404 	addi	r10,r10,16
10006048:	413ff71e 	bne	r8,r4,10006028 <__alt_data_end+0xf8006028>
1000604c:	63000044 	addi	r12,r12,1
10006050:	6018913a 	slli	r12,r12,4
10006054:	39c003cc 	andi	r7,r7,15
10006058:	010000c4 	movi	r4,3
1000605c:	1b07883a 	add	r3,r3,r12
10006060:	21c00e2e 	bgeu	r4,r7,1000609c <memset+0x100>
10006064:	1813883a 	mov	r9,r3
10006068:	3811883a 	mov	r8,r7
1000606c:	010000c4 	movi	r4,3
10006070:	49800015 	stw	r6,0(r9)
10006074:	423fff04 	addi	r8,r8,-4
10006078:	4a400104 	addi	r9,r9,4
1000607c:	223ffc36 	bltu	r4,r8,10006070 <__alt_data_end+0xf8006070>
10006080:	393fff04 	addi	r4,r7,-4
10006084:	2008d0ba 	srli	r4,r4,2
10006088:	39c000cc 	andi	r7,r7,3
1000608c:	21000044 	addi	r4,r4,1
10006090:	2109883a 	add	r4,r4,r4
10006094:	2109883a 	add	r4,r4,r4
10006098:	1907883a 	add	r3,r3,r4
1000609c:	38000526 	beq	r7,zero,100060b4 <memset+0x118>
100060a0:	19cf883a 	add	r7,r3,r7
100060a4:	19400005 	stb	r5,0(r3)
100060a8:	18c00044 	addi	r3,r3,1
100060ac:	38fffd1e 	bne	r7,r3,100060a4 <__alt_data_end+0xf80060a4>
100060b0:	f800283a 	ret
100060b4:	f800283a 	ret
100060b8:	2007883a 	mov	r3,r4
100060bc:	300f883a 	mov	r7,r6
100060c0:	003fc706 	br	10005fe0 <__alt_data_end+0xf8005fe0>

100060c4 <_Balloc>:
100060c4:	20801317 	ldw	r2,76(r4)
100060c8:	defffc04 	addi	sp,sp,-16
100060cc:	dc400115 	stw	r17,4(sp)
100060d0:	dc000015 	stw	r16,0(sp)
100060d4:	dfc00315 	stw	ra,12(sp)
100060d8:	dc800215 	stw	r18,8(sp)
100060dc:	2023883a 	mov	r17,r4
100060e0:	2821883a 	mov	r16,r5
100060e4:	10000f26 	beq	r2,zero,10006124 <_Balloc+0x60>
100060e8:	8407883a 	add	r3,r16,r16
100060ec:	18c7883a 	add	r3,r3,r3
100060f0:	10c7883a 	add	r3,r2,r3
100060f4:	18800017 	ldw	r2,0(r3)
100060f8:	10001126 	beq	r2,zero,10006140 <_Balloc+0x7c>
100060fc:	11000017 	ldw	r4,0(r2)
10006100:	19000015 	stw	r4,0(r3)
10006104:	10000415 	stw	zero,16(r2)
10006108:	10000315 	stw	zero,12(r2)
1000610c:	dfc00317 	ldw	ra,12(sp)
10006110:	dc800217 	ldw	r18,8(sp)
10006114:	dc400117 	ldw	r17,4(sp)
10006118:	dc000017 	ldw	r16,0(sp)
1000611c:	dec00404 	addi	sp,sp,16
10006120:	f800283a 	ret
10006124:	01800844 	movi	r6,33
10006128:	01400104 	movi	r5,4
1000612c:	0008b340 	call	10008b34 <_calloc_r>
10006130:	88801315 	stw	r2,76(r17)
10006134:	103fec1e 	bne	r2,zero,100060e8 <__alt_data_end+0xf80060e8>
10006138:	0005883a 	mov	r2,zero
1000613c:	003ff306 	br	1000610c <__alt_data_end+0xf800610c>
10006140:	01400044 	movi	r5,1
10006144:	2c24983a 	sll	r18,r5,r16
10006148:	8809883a 	mov	r4,r17
1000614c:	91800144 	addi	r6,r18,5
10006150:	318d883a 	add	r6,r6,r6
10006154:	318d883a 	add	r6,r6,r6
10006158:	0008b340 	call	10008b34 <_calloc_r>
1000615c:	103ff626 	beq	r2,zero,10006138 <__alt_data_end+0xf8006138>
10006160:	14000115 	stw	r16,4(r2)
10006164:	14800215 	stw	r18,8(r2)
10006168:	003fe606 	br	10006104 <__alt_data_end+0xf8006104>

1000616c <_Bfree>:
1000616c:	28000826 	beq	r5,zero,10006190 <_Bfree+0x24>
10006170:	28c00117 	ldw	r3,4(r5)
10006174:	20801317 	ldw	r2,76(r4)
10006178:	18c7883a 	add	r3,r3,r3
1000617c:	18c7883a 	add	r3,r3,r3
10006180:	10c5883a 	add	r2,r2,r3
10006184:	10c00017 	ldw	r3,0(r2)
10006188:	28c00015 	stw	r3,0(r5)
1000618c:	11400015 	stw	r5,0(r2)
10006190:	f800283a 	ret

10006194 <__multadd>:
10006194:	defffa04 	addi	sp,sp,-24
10006198:	dc800315 	stw	r18,12(sp)
1000619c:	dc400215 	stw	r17,8(sp)
100061a0:	dc000115 	stw	r16,4(sp)
100061a4:	2823883a 	mov	r17,r5
100061a8:	2c000417 	ldw	r16,16(r5)
100061ac:	dfc00515 	stw	ra,20(sp)
100061b0:	dcc00415 	stw	r19,16(sp)
100061b4:	2025883a 	mov	r18,r4
100061b8:	29400504 	addi	r5,r5,20
100061bc:	0011883a 	mov	r8,zero
100061c0:	28c00017 	ldw	r3,0(r5)
100061c4:	29400104 	addi	r5,r5,4
100061c8:	42000044 	addi	r8,r8,1
100061cc:	18bfffcc 	andi	r2,r3,65535
100061d0:	1185383a 	mul	r2,r2,r6
100061d4:	1806d43a 	srli	r3,r3,16
100061d8:	11cf883a 	add	r7,r2,r7
100061dc:	3808d43a 	srli	r4,r7,16
100061e0:	1987383a 	mul	r3,r3,r6
100061e4:	38bfffcc 	andi	r2,r7,65535
100061e8:	1907883a 	add	r3,r3,r4
100061ec:	1808943a 	slli	r4,r3,16
100061f0:	180ed43a 	srli	r7,r3,16
100061f4:	2085883a 	add	r2,r4,r2
100061f8:	28bfff15 	stw	r2,-4(r5)
100061fc:	443ff016 	blt	r8,r16,100061c0 <__alt_data_end+0xf80061c0>
10006200:	38000926 	beq	r7,zero,10006228 <__multadd+0x94>
10006204:	88800217 	ldw	r2,8(r17)
10006208:	80800f0e 	bge	r16,r2,10006248 <__multadd+0xb4>
1000620c:	80800144 	addi	r2,r16,5
10006210:	1085883a 	add	r2,r2,r2
10006214:	1085883a 	add	r2,r2,r2
10006218:	8885883a 	add	r2,r17,r2
1000621c:	11c00015 	stw	r7,0(r2)
10006220:	84000044 	addi	r16,r16,1
10006224:	8c000415 	stw	r16,16(r17)
10006228:	8805883a 	mov	r2,r17
1000622c:	dfc00517 	ldw	ra,20(sp)
10006230:	dcc00417 	ldw	r19,16(sp)
10006234:	dc800317 	ldw	r18,12(sp)
10006238:	dc400217 	ldw	r17,8(sp)
1000623c:	dc000117 	ldw	r16,4(sp)
10006240:	dec00604 	addi	sp,sp,24
10006244:	f800283a 	ret
10006248:	89400117 	ldw	r5,4(r17)
1000624c:	9009883a 	mov	r4,r18
10006250:	d9c00015 	stw	r7,0(sp)
10006254:	29400044 	addi	r5,r5,1
10006258:	00060c40 	call	100060c4 <_Balloc>
1000625c:	89800417 	ldw	r6,16(r17)
10006260:	89400304 	addi	r5,r17,12
10006264:	11000304 	addi	r4,r2,12
10006268:	31800084 	addi	r6,r6,2
1000626c:	318d883a 	add	r6,r6,r6
10006270:	318d883a 	add	r6,r6,r6
10006274:	1027883a 	mov	r19,r2
10006278:	0005e540 	call	10005e54 <memcpy>
1000627c:	d9c00017 	ldw	r7,0(sp)
10006280:	88000a26 	beq	r17,zero,100062ac <__multadd+0x118>
10006284:	88c00117 	ldw	r3,4(r17)
10006288:	90801317 	ldw	r2,76(r18)
1000628c:	18c7883a 	add	r3,r3,r3
10006290:	18c7883a 	add	r3,r3,r3
10006294:	10c5883a 	add	r2,r2,r3
10006298:	10c00017 	ldw	r3,0(r2)
1000629c:	88c00015 	stw	r3,0(r17)
100062a0:	14400015 	stw	r17,0(r2)
100062a4:	9823883a 	mov	r17,r19
100062a8:	003fd806 	br	1000620c <__alt_data_end+0xf800620c>
100062ac:	9823883a 	mov	r17,r19
100062b0:	003fd606 	br	1000620c <__alt_data_end+0xf800620c>

100062b4 <__s2b>:
100062b4:	defff904 	addi	sp,sp,-28
100062b8:	dc400115 	stw	r17,4(sp)
100062bc:	dc000015 	stw	r16,0(sp)
100062c0:	2023883a 	mov	r17,r4
100062c4:	2821883a 	mov	r16,r5
100062c8:	39000204 	addi	r4,r7,8
100062cc:	01400244 	movi	r5,9
100062d0:	dcc00315 	stw	r19,12(sp)
100062d4:	dc800215 	stw	r18,8(sp)
100062d8:	dfc00615 	stw	ra,24(sp)
100062dc:	dd400515 	stw	r21,20(sp)
100062e0:	dd000415 	stw	r20,16(sp)
100062e4:	3825883a 	mov	r18,r7
100062e8:	3027883a 	mov	r19,r6
100062ec:	00007fc0 	call	100007fc <__divsi3>
100062f0:	00c00044 	movi	r3,1
100062f4:	000b883a 	mov	r5,zero
100062f8:	1880030e 	bge	r3,r2,10006308 <__s2b+0x54>
100062fc:	18c7883a 	add	r3,r3,r3
10006300:	29400044 	addi	r5,r5,1
10006304:	18bffd16 	blt	r3,r2,100062fc <__alt_data_end+0xf80062fc>
10006308:	8809883a 	mov	r4,r17
1000630c:	00060c40 	call	100060c4 <_Balloc>
10006310:	d8c00717 	ldw	r3,28(sp)
10006314:	10c00515 	stw	r3,20(r2)
10006318:	00c00044 	movi	r3,1
1000631c:	10c00415 	stw	r3,16(r2)
10006320:	00c00244 	movi	r3,9
10006324:	1cc0210e 	bge	r3,r19,100063ac <__s2b+0xf8>
10006328:	80eb883a 	add	r21,r16,r3
1000632c:	a829883a 	mov	r20,r21
10006330:	84e1883a 	add	r16,r16,r19
10006334:	a1c00007 	ldb	r7,0(r20)
10006338:	01800284 	movi	r6,10
1000633c:	a5000044 	addi	r20,r20,1
10006340:	100b883a 	mov	r5,r2
10006344:	39fff404 	addi	r7,r7,-48
10006348:	8809883a 	mov	r4,r17
1000634c:	00061940 	call	10006194 <__multadd>
10006350:	a43ff81e 	bne	r20,r16,10006334 <__alt_data_end+0xf8006334>
10006354:	ace1883a 	add	r16,r21,r19
10006358:	843ffe04 	addi	r16,r16,-8
1000635c:	9c800a0e 	bge	r19,r18,10006388 <__s2b+0xd4>
10006360:	94e5c83a 	sub	r18,r18,r19
10006364:	84a5883a 	add	r18,r16,r18
10006368:	81c00007 	ldb	r7,0(r16)
1000636c:	01800284 	movi	r6,10
10006370:	84000044 	addi	r16,r16,1
10006374:	100b883a 	mov	r5,r2
10006378:	39fff404 	addi	r7,r7,-48
1000637c:	8809883a 	mov	r4,r17
10006380:	00061940 	call	10006194 <__multadd>
10006384:	84bff81e 	bne	r16,r18,10006368 <__alt_data_end+0xf8006368>
10006388:	dfc00617 	ldw	ra,24(sp)
1000638c:	dd400517 	ldw	r21,20(sp)
10006390:	dd000417 	ldw	r20,16(sp)
10006394:	dcc00317 	ldw	r19,12(sp)
10006398:	dc800217 	ldw	r18,8(sp)
1000639c:	dc400117 	ldw	r17,4(sp)
100063a0:	dc000017 	ldw	r16,0(sp)
100063a4:	dec00704 	addi	sp,sp,28
100063a8:	f800283a 	ret
100063ac:	84000284 	addi	r16,r16,10
100063b0:	1827883a 	mov	r19,r3
100063b4:	003fe906 	br	1000635c <__alt_data_end+0xf800635c>

100063b8 <__hi0bits>:
100063b8:	20bfffec 	andhi	r2,r4,65535
100063bc:	1000141e 	bne	r2,zero,10006410 <__hi0bits+0x58>
100063c0:	2008943a 	slli	r4,r4,16
100063c4:	00800404 	movi	r2,16
100063c8:	20ffc02c 	andhi	r3,r4,65280
100063cc:	1800021e 	bne	r3,zero,100063d8 <__hi0bits+0x20>
100063d0:	2008923a 	slli	r4,r4,8
100063d4:	10800204 	addi	r2,r2,8
100063d8:	20fc002c 	andhi	r3,r4,61440
100063dc:	1800021e 	bne	r3,zero,100063e8 <__hi0bits+0x30>
100063e0:	2008913a 	slli	r4,r4,4
100063e4:	10800104 	addi	r2,r2,4
100063e8:	20f0002c 	andhi	r3,r4,49152
100063ec:	1800031e 	bne	r3,zero,100063fc <__hi0bits+0x44>
100063f0:	2109883a 	add	r4,r4,r4
100063f4:	10800084 	addi	r2,r2,2
100063f8:	2109883a 	add	r4,r4,r4
100063fc:	20000316 	blt	r4,zero,1000640c <__hi0bits+0x54>
10006400:	2110002c 	andhi	r4,r4,16384
10006404:	2000041e 	bne	r4,zero,10006418 <__hi0bits+0x60>
10006408:	00800804 	movi	r2,32
1000640c:	f800283a 	ret
10006410:	0005883a 	mov	r2,zero
10006414:	003fec06 	br	100063c8 <__alt_data_end+0xf80063c8>
10006418:	10800044 	addi	r2,r2,1
1000641c:	f800283a 	ret

10006420 <__lo0bits>:
10006420:	20c00017 	ldw	r3,0(r4)
10006424:	188001cc 	andi	r2,r3,7
10006428:	10000826 	beq	r2,zero,1000644c <__lo0bits+0x2c>
1000642c:	1880004c 	andi	r2,r3,1
10006430:	1000211e 	bne	r2,zero,100064b8 <__lo0bits+0x98>
10006434:	1880008c 	andi	r2,r3,2
10006438:	1000211e 	bne	r2,zero,100064c0 <__lo0bits+0xa0>
1000643c:	1806d0ba 	srli	r3,r3,2
10006440:	00800084 	movi	r2,2
10006444:	20c00015 	stw	r3,0(r4)
10006448:	f800283a 	ret
1000644c:	18bfffcc 	andi	r2,r3,65535
10006450:	10001326 	beq	r2,zero,100064a0 <__lo0bits+0x80>
10006454:	0005883a 	mov	r2,zero
10006458:	19403fcc 	andi	r5,r3,255
1000645c:	2800021e 	bne	r5,zero,10006468 <__lo0bits+0x48>
10006460:	1806d23a 	srli	r3,r3,8
10006464:	10800204 	addi	r2,r2,8
10006468:	194003cc 	andi	r5,r3,15
1000646c:	2800021e 	bne	r5,zero,10006478 <__lo0bits+0x58>
10006470:	1806d13a 	srli	r3,r3,4
10006474:	10800104 	addi	r2,r2,4
10006478:	194000cc 	andi	r5,r3,3
1000647c:	2800021e 	bne	r5,zero,10006488 <__lo0bits+0x68>
10006480:	1806d0ba 	srli	r3,r3,2
10006484:	10800084 	addi	r2,r2,2
10006488:	1940004c 	andi	r5,r3,1
1000648c:	2800081e 	bne	r5,zero,100064b0 <__lo0bits+0x90>
10006490:	1806d07a 	srli	r3,r3,1
10006494:	1800051e 	bne	r3,zero,100064ac <__lo0bits+0x8c>
10006498:	00800804 	movi	r2,32
1000649c:	f800283a 	ret
100064a0:	1806d43a 	srli	r3,r3,16
100064a4:	00800404 	movi	r2,16
100064a8:	003feb06 	br	10006458 <__alt_data_end+0xf8006458>
100064ac:	10800044 	addi	r2,r2,1
100064b0:	20c00015 	stw	r3,0(r4)
100064b4:	f800283a 	ret
100064b8:	0005883a 	mov	r2,zero
100064bc:	f800283a 	ret
100064c0:	1806d07a 	srli	r3,r3,1
100064c4:	00800044 	movi	r2,1
100064c8:	20c00015 	stw	r3,0(r4)
100064cc:	f800283a 	ret

100064d0 <__i2b>:
100064d0:	defffd04 	addi	sp,sp,-12
100064d4:	dc000015 	stw	r16,0(sp)
100064d8:	04000044 	movi	r16,1
100064dc:	dc400115 	stw	r17,4(sp)
100064e0:	2823883a 	mov	r17,r5
100064e4:	800b883a 	mov	r5,r16
100064e8:	dfc00215 	stw	ra,8(sp)
100064ec:	00060c40 	call	100060c4 <_Balloc>
100064f0:	14400515 	stw	r17,20(r2)
100064f4:	14000415 	stw	r16,16(r2)
100064f8:	dfc00217 	ldw	ra,8(sp)
100064fc:	dc400117 	ldw	r17,4(sp)
10006500:	dc000017 	ldw	r16,0(sp)
10006504:	dec00304 	addi	sp,sp,12
10006508:	f800283a 	ret

1000650c <__multiply>:
1000650c:	defffa04 	addi	sp,sp,-24
10006510:	dcc00315 	stw	r19,12(sp)
10006514:	dc800215 	stw	r18,8(sp)
10006518:	34c00417 	ldw	r19,16(r6)
1000651c:	2c800417 	ldw	r18,16(r5)
10006520:	dd000415 	stw	r20,16(sp)
10006524:	dc400115 	stw	r17,4(sp)
10006528:	dfc00515 	stw	ra,20(sp)
1000652c:	dc000015 	stw	r16,0(sp)
10006530:	2829883a 	mov	r20,r5
10006534:	3023883a 	mov	r17,r6
10006538:	94c0050e 	bge	r18,r19,10006550 <__multiply+0x44>
1000653c:	9007883a 	mov	r3,r18
10006540:	3029883a 	mov	r20,r6
10006544:	9825883a 	mov	r18,r19
10006548:	2823883a 	mov	r17,r5
1000654c:	1827883a 	mov	r19,r3
10006550:	a0800217 	ldw	r2,8(r20)
10006554:	94e1883a 	add	r16,r18,r19
10006558:	a1400117 	ldw	r5,4(r20)
1000655c:	1400010e 	bge	r2,r16,10006564 <__multiply+0x58>
10006560:	29400044 	addi	r5,r5,1
10006564:	00060c40 	call	100060c4 <_Balloc>
10006568:	8415883a 	add	r10,r16,r16
1000656c:	12c00504 	addi	r11,r2,20
10006570:	5295883a 	add	r10,r10,r10
10006574:	5a95883a 	add	r10,r11,r10
10006578:	5807883a 	mov	r3,r11
1000657c:	5a80032e 	bgeu	r11,r10,1000658c <__multiply+0x80>
10006580:	18000015 	stw	zero,0(r3)
10006584:	18c00104 	addi	r3,r3,4
10006588:	1abffd36 	bltu	r3,r10,10006580 <__alt_data_end+0xf8006580>
1000658c:	9ce7883a 	add	r19,r19,r19
10006590:	94a5883a 	add	r18,r18,r18
10006594:	89800504 	addi	r6,r17,20
10006598:	9ce7883a 	add	r19,r19,r19
1000659c:	a3400504 	addi	r13,r20,20
100065a0:	94a5883a 	add	r18,r18,r18
100065a4:	34d9883a 	add	r12,r6,r19
100065a8:	6c93883a 	add	r9,r13,r18
100065ac:	3300422e 	bgeu	r6,r12,100066b8 <__multiply+0x1ac>
100065b0:	37c00017 	ldw	ra,0(r6)
100065b4:	fbffffcc 	andi	r15,ra,65535
100065b8:	78001b26 	beq	r15,zero,10006628 <__multiply+0x11c>
100065bc:	5811883a 	mov	r8,r11
100065c0:	681d883a 	mov	r14,r13
100065c4:	000f883a 	mov	r7,zero
100065c8:	71000017 	ldw	r4,0(r14)
100065cc:	40c00017 	ldw	r3,0(r8)
100065d0:	73800104 	addi	r14,r14,4
100065d4:	217fffcc 	andi	r5,r4,65535
100065d8:	2bcb383a 	mul	r5,r5,r15
100065dc:	2008d43a 	srli	r4,r4,16
100065e0:	1c7fffcc 	andi	r17,r3,65535
100065e4:	2c4b883a 	add	r5,r5,r17
100065e8:	29cb883a 	add	r5,r5,r7
100065ec:	23c9383a 	mul	r4,r4,r15
100065f0:	1806d43a 	srli	r3,r3,16
100065f4:	280ed43a 	srli	r7,r5,16
100065f8:	297fffcc 	andi	r5,r5,65535
100065fc:	20c7883a 	add	r3,r4,r3
10006600:	19c7883a 	add	r3,r3,r7
10006604:	1808943a 	slli	r4,r3,16
10006608:	4023883a 	mov	r17,r8
1000660c:	180ed43a 	srli	r7,r3,16
10006610:	214ab03a 	or	r5,r4,r5
10006614:	41400015 	stw	r5,0(r8)
10006618:	42000104 	addi	r8,r8,4
1000661c:	727fea36 	bltu	r14,r9,100065c8 <__alt_data_end+0xf80065c8>
10006620:	89c00115 	stw	r7,4(r17)
10006624:	37c00017 	ldw	ra,0(r6)
10006628:	f83ed43a 	srli	ra,ra,16
1000662c:	f8001f26 	beq	ra,zero,100066ac <__multiply+0x1a0>
10006630:	58c00017 	ldw	r3,0(r11)
10006634:	681d883a 	mov	r14,r13
10006638:	581f883a 	mov	r15,r11
1000663c:	1811883a 	mov	r8,r3
10006640:	5825883a 	mov	r18,r11
10006644:	000f883a 	mov	r7,zero
10006648:	00000106 	br	10006650 <__multiply+0x144>
1000664c:	8825883a 	mov	r18,r17
10006650:	7140000b 	ldhu	r5,0(r14)
10006654:	4010d43a 	srli	r8,r8,16
10006658:	193fffcc 	andi	r4,r3,65535
1000665c:	2fcb383a 	mul	r5,r5,ra
10006660:	7bc00104 	addi	r15,r15,4
10006664:	73800104 	addi	r14,r14,4
10006668:	2a0b883a 	add	r5,r5,r8
1000666c:	29cb883a 	add	r5,r5,r7
10006670:	2806943a 	slli	r3,r5,16
10006674:	94400104 	addi	r17,r18,4
10006678:	280ad43a 	srli	r5,r5,16
1000667c:	1908b03a 	or	r4,r3,r4
10006680:	793fff15 	stw	r4,-4(r15)
10006684:	70ffff17 	ldw	r3,-4(r14)
10006688:	8a000017 	ldw	r8,0(r17)
1000668c:	1806d43a 	srli	r3,r3,16
10006690:	413fffcc 	andi	r4,r8,65535
10006694:	1fc7383a 	mul	r3,r3,ra
10006698:	1907883a 	add	r3,r3,r4
1000669c:	1947883a 	add	r3,r3,r5
100066a0:	180ed43a 	srli	r7,r3,16
100066a4:	727fe936 	bltu	r14,r9,1000664c <__alt_data_end+0xf800664c>
100066a8:	90c00115 	stw	r3,4(r18)
100066ac:	31800104 	addi	r6,r6,4
100066b0:	5ac00104 	addi	r11,r11,4
100066b4:	333fbe36 	bltu	r6,r12,100065b0 <__alt_data_end+0xf80065b0>
100066b8:	0400090e 	bge	zero,r16,100066e0 <__multiply+0x1d4>
100066bc:	50ffff17 	ldw	r3,-4(r10)
100066c0:	52bfff04 	addi	r10,r10,-4
100066c4:	18000326 	beq	r3,zero,100066d4 <__multiply+0x1c8>
100066c8:	00000506 	br	100066e0 <__multiply+0x1d4>
100066cc:	50c00017 	ldw	r3,0(r10)
100066d0:	1800031e 	bne	r3,zero,100066e0 <__multiply+0x1d4>
100066d4:	843fffc4 	addi	r16,r16,-1
100066d8:	52bfff04 	addi	r10,r10,-4
100066dc:	803ffb1e 	bne	r16,zero,100066cc <__alt_data_end+0xf80066cc>
100066e0:	14000415 	stw	r16,16(r2)
100066e4:	dfc00517 	ldw	ra,20(sp)
100066e8:	dd000417 	ldw	r20,16(sp)
100066ec:	dcc00317 	ldw	r19,12(sp)
100066f0:	dc800217 	ldw	r18,8(sp)
100066f4:	dc400117 	ldw	r17,4(sp)
100066f8:	dc000017 	ldw	r16,0(sp)
100066fc:	dec00604 	addi	sp,sp,24
10006700:	f800283a 	ret

10006704 <__pow5mult>:
10006704:	defffa04 	addi	sp,sp,-24
10006708:	dcc00315 	stw	r19,12(sp)
1000670c:	dc000015 	stw	r16,0(sp)
10006710:	dfc00515 	stw	ra,20(sp)
10006714:	dd000415 	stw	r20,16(sp)
10006718:	dc800215 	stw	r18,8(sp)
1000671c:	dc400115 	stw	r17,4(sp)
10006720:	308000cc 	andi	r2,r6,3
10006724:	3021883a 	mov	r16,r6
10006728:	2027883a 	mov	r19,r4
1000672c:	10002f1e 	bne	r2,zero,100067ec <__pow5mult+0xe8>
10006730:	2825883a 	mov	r18,r5
10006734:	8021d0ba 	srai	r16,r16,2
10006738:	80001a26 	beq	r16,zero,100067a4 <__pow5mult+0xa0>
1000673c:	9c401217 	ldw	r17,72(r19)
10006740:	8800061e 	bne	r17,zero,1000675c <__pow5mult+0x58>
10006744:	00003406 	br	10006818 <__pow5mult+0x114>
10006748:	8021d07a 	srai	r16,r16,1
1000674c:	80001526 	beq	r16,zero,100067a4 <__pow5mult+0xa0>
10006750:	88800017 	ldw	r2,0(r17)
10006754:	10001c26 	beq	r2,zero,100067c8 <__pow5mult+0xc4>
10006758:	1023883a 	mov	r17,r2
1000675c:	8080004c 	andi	r2,r16,1
10006760:	103ff926 	beq	r2,zero,10006748 <__alt_data_end+0xf8006748>
10006764:	880d883a 	mov	r6,r17
10006768:	900b883a 	mov	r5,r18
1000676c:	9809883a 	mov	r4,r19
10006770:	000650c0 	call	1000650c <__multiply>
10006774:	90001b26 	beq	r18,zero,100067e4 <__pow5mult+0xe0>
10006778:	91000117 	ldw	r4,4(r18)
1000677c:	98c01317 	ldw	r3,76(r19)
10006780:	8021d07a 	srai	r16,r16,1
10006784:	2109883a 	add	r4,r4,r4
10006788:	2109883a 	add	r4,r4,r4
1000678c:	1907883a 	add	r3,r3,r4
10006790:	19000017 	ldw	r4,0(r3)
10006794:	91000015 	stw	r4,0(r18)
10006798:	1c800015 	stw	r18,0(r3)
1000679c:	1025883a 	mov	r18,r2
100067a0:	803feb1e 	bne	r16,zero,10006750 <__alt_data_end+0xf8006750>
100067a4:	9005883a 	mov	r2,r18
100067a8:	dfc00517 	ldw	ra,20(sp)
100067ac:	dd000417 	ldw	r20,16(sp)
100067b0:	dcc00317 	ldw	r19,12(sp)
100067b4:	dc800217 	ldw	r18,8(sp)
100067b8:	dc400117 	ldw	r17,4(sp)
100067bc:	dc000017 	ldw	r16,0(sp)
100067c0:	dec00604 	addi	sp,sp,24
100067c4:	f800283a 	ret
100067c8:	880d883a 	mov	r6,r17
100067cc:	880b883a 	mov	r5,r17
100067d0:	9809883a 	mov	r4,r19
100067d4:	000650c0 	call	1000650c <__multiply>
100067d8:	88800015 	stw	r2,0(r17)
100067dc:	10000015 	stw	zero,0(r2)
100067e0:	003fdd06 	br	10006758 <__alt_data_end+0xf8006758>
100067e4:	1025883a 	mov	r18,r2
100067e8:	003fd706 	br	10006748 <__alt_data_end+0xf8006748>
100067ec:	10bfffc4 	addi	r2,r2,-1
100067f0:	1085883a 	add	r2,r2,r2
100067f4:	00c40074 	movhi	r3,4097
100067f8:	18fe2304 	addi	r3,r3,-1908
100067fc:	1085883a 	add	r2,r2,r2
10006800:	1885883a 	add	r2,r3,r2
10006804:	11800017 	ldw	r6,0(r2)
10006808:	000f883a 	mov	r7,zero
1000680c:	00061940 	call	10006194 <__multadd>
10006810:	1025883a 	mov	r18,r2
10006814:	003fc706 	br	10006734 <__alt_data_end+0xf8006734>
10006818:	05000044 	movi	r20,1
1000681c:	a00b883a 	mov	r5,r20
10006820:	9809883a 	mov	r4,r19
10006824:	00060c40 	call	100060c4 <_Balloc>
10006828:	1023883a 	mov	r17,r2
1000682c:	00809c44 	movi	r2,625
10006830:	88800515 	stw	r2,20(r17)
10006834:	8d000415 	stw	r20,16(r17)
10006838:	9c401215 	stw	r17,72(r19)
1000683c:	88000015 	stw	zero,0(r17)
10006840:	003fc606 	br	1000675c <__alt_data_end+0xf800675c>

10006844 <__lshift>:
10006844:	defff904 	addi	sp,sp,-28
10006848:	dd400515 	stw	r21,20(sp)
1000684c:	dcc00315 	stw	r19,12(sp)
10006850:	302bd17a 	srai	r21,r6,5
10006854:	2cc00417 	ldw	r19,16(r5)
10006858:	28800217 	ldw	r2,8(r5)
1000685c:	dd000415 	stw	r20,16(sp)
10006860:	ace7883a 	add	r19,r21,r19
10006864:	dc800215 	stw	r18,8(sp)
10006868:	dc400115 	stw	r17,4(sp)
1000686c:	dc000015 	stw	r16,0(sp)
10006870:	dfc00615 	stw	ra,24(sp)
10006874:	9c000044 	addi	r16,r19,1
10006878:	2823883a 	mov	r17,r5
1000687c:	3029883a 	mov	r20,r6
10006880:	2025883a 	mov	r18,r4
10006884:	29400117 	ldw	r5,4(r5)
10006888:	1400030e 	bge	r2,r16,10006898 <__lshift+0x54>
1000688c:	1085883a 	add	r2,r2,r2
10006890:	29400044 	addi	r5,r5,1
10006894:	143ffd16 	blt	r2,r16,1000688c <__alt_data_end+0xf800688c>
10006898:	9009883a 	mov	r4,r18
1000689c:	00060c40 	call	100060c4 <_Balloc>
100068a0:	10c00504 	addi	r3,r2,20
100068a4:	0540070e 	bge	zero,r21,100068c4 <__lshift+0x80>
100068a8:	ad6b883a 	add	r21,r21,r21
100068ac:	ad6b883a 	add	r21,r21,r21
100068b0:	1809883a 	mov	r4,r3
100068b4:	1d47883a 	add	r3,r3,r21
100068b8:	20000015 	stw	zero,0(r4)
100068bc:	21000104 	addi	r4,r4,4
100068c0:	193ffd1e 	bne	r3,r4,100068b8 <__alt_data_end+0xf80068b8>
100068c4:	8a000417 	ldw	r8,16(r17)
100068c8:	89000504 	addi	r4,r17,20
100068cc:	a18007cc 	andi	r6,r20,31
100068d0:	4211883a 	add	r8,r8,r8
100068d4:	4211883a 	add	r8,r8,r8
100068d8:	2211883a 	add	r8,r4,r8
100068dc:	30002326 	beq	r6,zero,1000696c <__lshift+0x128>
100068e0:	02400804 	movi	r9,32
100068e4:	4993c83a 	sub	r9,r9,r6
100068e8:	000b883a 	mov	r5,zero
100068ec:	21c00017 	ldw	r7,0(r4)
100068f0:	1815883a 	mov	r10,r3
100068f4:	18c00104 	addi	r3,r3,4
100068f8:	398e983a 	sll	r7,r7,r6
100068fc:	21000104 	addi	r4,r4,4
10006900:	394ab03a 	or	r5,r7,r5
10006904:	197fff15 	stw	r5,-4(r3)
10006908:	217fff17 	ldw	r5,-4(r4)
1000690c:	2a4ad83a 	srl	r5,r5,r9
10006910:	223ff636 	bltu	r4,r8,100068ec <__alt_data_end+0xf80068ec>
10006914:	51400115 	stw	r5,4(r10)
10006918:	28001a1e 	bne	r5,zero,10006984 <__lshift+0x140>
1000691c:	843fffc4 	addi	r16,r16,-1
10006920:	14000415 	stw	r16,16(r2)
10006924:	88000826 	beq	r17,zero,10006948 <__lshift+0x104>
10006928:	89000117 	ldw	r4,4(r17)
1000692c:	90c01317 	ldw	r3,76(r18)
10006930:	2109883a 	add	r4,r4,r4
10006934:	2109883a 	add	r4,r4,r4
10006938:	1907883a 	add	r3,r3,r4
1000693c:	19000017 	ldw	r4,0(r3)
10006940:	89000015 	stw	r4,0(r17)
10006944:	1c400015 	stw	r17,0(r3)
10006948:	dfc00617 	ldw	ra,24(sp)
1000694c:	dd400517 	ldw	r21,20(sp)
10006950:	dd000417 	ldw	r20,16(sp)
10006954:	dcc00317 	ldw	r19,12(sp)
10006958:	dc800217 	ldw	r18,8(sp)
1000695c:	dc400117 	ldw	r17,4(sp)
10006960:	dc000017 	ldw	r16,0(sp)
10006964:	dec00704 	addi	sp,sp,28
10006968:	f800283a 	ret
1000696c:	21400017 	ldw	r5,0(r4)
10006970:	18c00104 	addi	r3,r3,4
10006974:	21000104 	addi	r4,r4,4
10006978:	197fff15 	stw	r5,-4(r3)
1000697c:	223ffb36 	bltu	r4,r8,1000696c <__alt_data_end+0xf800696c>
10006980:	003fe606 	br	1000691c <__alt_data_end+0xf800691c>
10006984:	9c000084 	addi	r16,r19,2
10006988:	003fe406 	br	1000691c <__alt_data_end+0xf800691c>

1000698c <__mcmp>:
1000698c:	20800417 	ldw	r2,16(r4)
10006990:	28c00417 	ldw	r3,16(r5)
10006994:	10c5c83a 	sub	r2,r2,r3
10006998:	1000111e 	bne	r2,zero,100069e0 <__mcmp+0x54>
1000699c:	18c7883a 	add	r3,r3,r3
100069a0:	18c7883a 	add	r3,r3,r3
100069a4:	21000504 	addi	r4,r4,20
100069a8:	29400504 	addi	r5,r5,20
100069ac:	20c5883a 	add	r2,r4,r3
100069b0:	28cb883a 	add	r5,r5,r3
100069b4:	00000106 	br	100069bc <__mcmp+0x30>
100069b8:	20800a2e 	bgeu	r4,r2,100069e4 <__mcmp+0x58>
100069bc:	10bfff04 	addi	r2,r2,-4
100069c0:	297fff04 	addi	r5,r5,-4
100069c4:	11800017 	ldw	r6,0(r2)
100069c8:	28c00017 	ldw	r3,0(r5)
100069cc:	30fffa26 	beq	r6,r3,100069b8 <__alt_data_end+0xf80069b8>
100069d0:	30c00236 	bltu	r6,r3,100069dc <__mcmp+0x50>
100069d4:	00800044 	movi	r2,1
100069d8:	f800283a 	ret
100069dc:	00bfffc4 	movi	r2,-1
100069e0:	f800283a 	ret
100069e4:	0005883a 	mov	r2,zero
100069e8:	f800283a 	ret

100069ec <__mdiff>:
100069ec:	28c00417 	ldw	r3,16(r5)
100069f0:	30800417 	ldw	r2,16(r6)
100069f4:	defffa04 	addi	sp,sp,-24
100069f8:	dcc00315 	stw	r19,12(sp)
100069fc:	dc800215 	stw	r18,8(sp)
10006a00:	dfc00515 	stw	ra,20(sp)
10006a04:	dd000415 	stw	r20,16(sp)
10006a08:	dc400115 	stw	r17,4(sp)
10006a0c:	dc000015 	stw	r16,0(sp)
10006a10:	1887c83a 	sub	r3,r3,r2
10006a14:	2825883a 	mov	r18,r5
10006a18:	3027883a 	mov	r19,r6
10006a1c:	1800141e 	bne	r3,zero,10006a70 <__mdiff+0x84>
10006a20:	1085883a 	add	r2,r2,r2
10006a24:	1085883a 	add	r2,r2,r2
10006a28:	2a000504 	addi	r8,r5,20
10006a2c:	34000504 	addi	r16,r6,20
10006a30:	4087883a 	add	r3,r8,r2
10006a34:	8085883a 	add	r2,r16,r2
10006a38:	00000106 	br	10006a40 <__mdiff+0x54>
10006a3c:	40c0592e 	bgeu	r8,r3,10006ba4 <__mdiff+0x1b8>
10006a40:	18ffff04 	addi	r3,r3,-4
10006a44:	10bfff04 	addi	r2,r2,-4
10006a48:	19c00017 	ldw	r7,0(r3)
10006a4c:	11400017 	ldw	r5,0(r2)
10006a50:	397ffa26 	beq	r7,r5,10006a3c <__alt_data_end+0xf8006a3c>
10006a54:	3940592e 	bgeu	r7,r5,10006bbc <__mdiff+0x1d0>
10006a58:	9005883a 	mov	r2,r18
10006a5c:	4023883a 	mov	r17,r8
10006a60:	9825883a 	mov	r18,r19
10006a64:	05000044 	movi	r20,1
10006a68:	1027883a 	mov	r19,r2
10006a6c:	00000406 	br	10006a80 <__mdiff+0x94>
10006a70:	18005616 	blt	r3,zero,10006bcc <__mdiff+0x1e0>
10006a74:	34400504 	addi	r17,r6,20
10006a78:	2c000504 	addi	r16,r5,20
10006a7c:	0029883a 	mov	r20,zero
10006a80:	91400117 	ldw	r5,4(r18)
10006a84:	00060c40 	call	100060c4 <_Balloc>
10006a88:	92400417 	ldw	r9,16(r18)
10006a8c:	9b000417 	ldw	r12,16(r19)
10006a90:	12c00504 	addi	r11,r2,20
10006a94:	4a51883a 	add	r8,r9,r9
10006a98:	6319883a 	add	r12,r12,r12
10006a9c:	4211883a 	add	r8,r8,r8
10006aa0:	6319883a 	add	r12,r12,r12
10006aa4:	15000315 	stw	r20,12(r2)
10006aa8:	8211883a 	add	r8,r16,r8
10006aac:	8b19883a 	add	r12,r17,r12
10006ab0:	0007883a 	mov	r3,zero
10006ab4:	81400017 	ldw	r5,0(r16)
10006ab8:	89c00017 	ldw	r7,0(r17)
10006abc:	59800104 	addi	r6,r11,4
10006ac0:	293fffcc 	andi	r4,r5,65535
10006ac4:	20c7883a 	add	r3,r4,r3
10006ac8:	393fffcc 	andi	r4,r7,65535
10006acc:	1909c83a 	sub	r4,r3,r4
10006ad0:	280ad43a 	srli	r5,r5,16
10006ad4:	380ed43a 	srli	r7,r7,16
10006ad8:	2007d43a 	srai	r3,r4,16
10006adc:	213fffcc 	andi	r4,r4,65535
10006ae0:	29cbc83a 	sub	r5,r5,r7
10006ae4:	28c7883a 	add	r3,r5,r3
10006ae8:	180a943a 	slli	r5,r3,16
10006aec:	8c400104 	addi	r17,r17,4
10006af0:	84000104 	addi	r16,r16,4
10006af4:	2908b03a 	or	r4,r5,r4
10006af8:	59000015 	stw	r4,0(r11)
10006afc:	1807d43a 	srai	r3,r3,16
10006b00:	3015883a 	mov	r10,r6
10006b04:	3017883a 	mov	r11,r6
10006b08:	8b3fea36 	bltu	r17,r12,10006ab4 <__alt_data_end+0xf8006ab4>
10006b0c:	8200162e 	bgeu	r16,r8,10006b68 <__mdiff+0x17c>
10006b10:	8017883a 	mov	r11,r16
10006b14:	59400017 	ldw	r5,0(r11)
10006b18:	31800104 	addi	r6,r6,4
10006b1c:	5ac00104 	addi	r11,r11,4
10006b20:	293fffcc 	andi	r4,r5,65535
10006b24:	20c7883a 	add	r3,r4,r3
10006b28:	280ed43a 	srli	r7,r5,16
10006b2c:	180bd43a 	srai	r5,r3,16
10006b30:	193fffcc 	andi	r4,r3,65535
10006b34:	3947883a 	add	r3,r7,r5
10006b38:	180a943a 	slli	r5,r3,16
10006b3c:	1807d43a 	srai	r3,r3,16
10006b40:	2908b03a 	or	r4,r5,r4
10006b44:	313fff15 	stw	r4,-4(r6)
10006b48:	5a3ff236 	bltu	r11,r8,10006b14 <__alt_data_end+0xf8006b14>
10006b4c:	0406303a 	nor	r3,zero,r16
10006b50:	1a07883a 	add	r3,r3,r8
10006b54:	1806d0ba 	srli	r3,r3,2
10006b58:	18c00044 	addi	r3,r3,1
10006b5c:	18c7883a 	add	r3,r3,r3
10006b60:	18c7883a 	add	r3,r3,r3
10006b64:	50d5883a 	add	r10,r10,r3
10006b68:	50ffff04 	addi	r3,r10,-4
10006b6c:	2000041e 	bne	r4,zero,10006b80 <__mdiff+0x194>
10006b70:	18ffff04 	addi	r3,r3,-4
10006b74:	19000017 	ldw	r4,0(r3)
10006b78:	4a7fffc4 	addi	r9,r9,-1
10006b7c:	203ffc26 	beq	r4,zero,10006b70 <__alt_data_end+0xf8006b70>
10006b80:	12400415 	stw	r9,16(r2)
10006b84:	dfc00517 	ldw	ra,20(sp)
10006b88:	dd000417 	ldw	r20,16(sp)
10006b8c:	dcc00317 	ldw	r19,12(sp)
10006b90:	dc800217 	ldw	r18,8(sp)
10006b94:	dc400117 	ldw	r17,4(sp)
10006b98:	dc000017 	ldw	r16,0(sp)
10006b9c:	dec00604 	addi	sp,sp,24
10006ba0:	f800283a 	ret
10006ba4:	000b883a 	mov	r5,zero
10006ba8:	00060c40 	call	100060c4 <_Balloc>
10006bac:	00c00044 	movi	r3,1
10006bb0:	10c00415 	stw	r3,16(r2)
10006bb4:	10000515 	stw	zero,20(r2)
10006bb8:	003ff206 	br	10006b84 <__alt_data_end+0xf8006b84>
10006bbc:	8023883a 	mov	r17,r16
10006bc0:	0029883a 	mov	r20,zero
10006bc4:	4021883a 	mov	r16,r8
10006bc8:	003fad06 	br	10006a80 <__alt_data_end+0xf8006a80>
10006bcc:	9005883a 	mov	r2,r18
10006bd0:	94400504 	addi	r17,r18,20
10006bd4:	9c000504 	addi	r16,r19,20
10006bd8:	9825883a 	mov	r18,r19
10006bdc:	05000044 	movi	r20,1
10006be0:	1027883a 	mov	r19,r2
10006be4:	003fa606 	br	10006a80 <__alt_data_end+0xf8006a80>

10006be8 <__ulp>:
10006be8:	295ffc2c 	andhi	r5,r5,32752
10006bec:	00bf3034 	movhi	r2,64704
10006bf0:	2887883a 	add	r3,r5,r2
10006bf4:	00c0020e 	bge	zero,r3,10006c00 <__ulp+0x18>
10006bf8:	0005883a 	mov	r2,zero
10006bfc:	f800283a 	ret
10006c00:	00c7c83a 	sub	r3,zero,r3
10006c04:	1807d53a 	srai	r3,r3,20
10006c08:	008004c4 	movi	r2,19
10006c0c:	10c00b0e 	bge	r2,r3,10006c3c <__ulp+0x54>
10006c10:	18bffb04 	addi	r2,r3,-20
10006c14:	01000784 	movi	r4,30
10006c18:	0007883a 	mov	r3,zero
10006c1c:	20800516 	blt	r4,r2,10006c34 <__ulp+0x4c>
10006c20:	010007c4 	movi	r4,31
10006c24:	2089c83a 	sub	r4,r4,r2
10006c28:	00800044 	movi	r2,1
10006c2c:	1104983a 	sll	r2,r2,r4
10006c30:	f800283a 	ret
10006c34:	00800044 	movi	r2,1
10006c38:	f800283a 	ret
10006c3c:	01400234 	movhi	r5,8
10006c40:	28c7d83a 	sra	r3,r5,r3
10006c44:	0005883a 	mov	r2,zero
10006c48:	f800283a 	ret

10006c4c <__b2d>:
10006c4c:	defffa04 	addi	sp,sp,-24
10006c50:	dc000015 	stw	r16,0(sp)
10006c54:	24000417 	ldw	r16,16(r4)
10006c58:	dc400115 	stw	r17,4(sp)
10006c5c:	24400504 	addi	r17,r4,20
10006c60:	8421883a 	add	r16,r16,r16
10006c64:	8421883a 	add	r16,r16,r16
10006c68:	8c21883a 	add	r16,r17,r16
10006c6c:	dc800215 	stw	r18,8(sp)
10006c70:	84bfff17 	ldw	r18,-4(r16)
10006c74:	dd000415 	stw	r20,16(sp)
10006c78:	dcc00315 	stw	r19,12(sp)
10006c7c:	9009883a 	mov	r4,r18
10006c80:	2829883a 	mov	r20,r5
10006c84:	dfc00515 	stw	ra,20(sp)
10006c88:	00063b80 	call	100063b8 <__hi0bits>
10006c8c:	00c00804 	movi	r3,32
10006c90:	1889c83a 	sub	r4,r3,r2
10006c94:	a1000015 	stw	r4,0(r20)
10006c98:	01000284 	movi	r4,10
10006c9c:	84ffff04 	addi	r19,r16,-4
10006ca0:	20801216 	blt	r4,r2,10006cec <__b2d+0xa0>
10006ca4:	018002c4 	movi	r6,11
10006ca8:	308dc83a 	sub	r6,r6,r2
10006cac:	9186d83a 	srl	r3,r18,r6
10006cb0:	18cffc34 	orhi	r3,r3,16368
10006cb4:	8cc0212e 	bgeu	r17,r19,10006d3c <__b2d+0xf0>
10006cb8:	813ffe17 	ldw	r4,-8(r16)
10006cbc:	218cd83a 	srl	r6,r4,r6
10006cc0:	10800544 	addi	r2,r2,21
10006cc4:	9084983a 	sll	r2,r18,r2
10006cc8:	1184b03a 	or	r2,r2,r6
10006ccc:	dfc00517 	ldw	ra,20(sp)
10006cd0:	dd000417 	ldw	r20,16(sp)
10006cd4:	dcc00317 	ldw	r19,12(sp)
10006cd8:	dc800217 	ldw	r18,8(sp)
10006cdc:	dc400117 	ldw	r17,4(sp)
10006ce0:	dc000017 	ldw	r16,0(sp)
10006ce4:	dec00604 	addi	sp,sp,24
10006ce8:	f800283a 	ret
10006cec:	8cc00f2e 	bgeu	r17,r19,10006d2c <__b2d+0xe0>
10006cf0:	117ffd44 	addi	r5,r2,-11
10006cf4:	80bffe17 	ldw	r2,-8(r16)
10006cf8:	28000e26 	beq	r5,zero,10006d34 <__b2d+0xe8>
10006cfc:	1949c83a 	sub	r4,r3,r5
10006d00:	9164983a 	sll	r18,r18,r5
10006d04:	1106d83a 	srl	r3,r2,r4
10006d08:	81bffe04 	addi	r6,r16,-8
10006d0c:	948ffc34 	orhi	r18,r18,16368
10006d10:	90c6b03a 	or	r3,r18,r3
10006d14:	89800e2e 	bgeu	r17,r6,10006d50 <__b2d+0x104>
10006d18:	81bffd17 	ldw	r6,-12(r16)
10006d1c:	1144983a 	sll	r2,r2,r5
10006d20:	310ad83a 	srl	r5,r6,r4
10006d24:	2884b03a 	or	r2,r5,r2
10006d28:	003fe806 	br	10006ccc <__alt_data_end+0xf8006ccc>
10006d2c:	10bffd44 	addi	r2,r2,-11
10006d30:	1000041e 	bne	r2,zero,10006d44 <__b2d+0xf8>
10006d34:	90cffc34 	orhi	r3,r18,16368
10006d38:	003fe406 	br	10006ccc <__alt_data_end+0xf8006ccc>
10006d3c:	000d883a 	mov	r6,zero
10006d40:	003fdf06 	br	10006cc0 <__alt_data_end+0xf8006cc0>
10006d44:	90a4983a 	sll	r18,r18,r2
10006d48:	0005883a 	mov	r2,zero
10006d4c:	003ff906 	br	10006d34 <__alt_data_end+0xf8006d34>
10006d50:	1144983a 	sll	r2,r2,r5
10006d54:	003fdd06 	br	10006ccc <__alt_data_end+0xf8006ccc>

10006d58 <__d2b>:
10006d58:	defff804 	addi	sp,sp,-32
10006d5c:	dc000215 	stw	r16,8(sp)
10006d60:	3021883a 	mov	r16,r6
10006d64:	dc400315 	stw	r17,12(sp)
10006d68:	8022907a 	slli	r17,r16,1
10006d6c:	dd000615 	stw	r20,24(sp)
10006d70:	2829883a 	mov	r20,r5
10006d74:	01400044 	movi	r5,1
10006d78:	dcc00515 	stw	r19,20(sp)
10006d7c:	dc800415 	stw	r18,16(sp)
10006d80:	dfc00715 	stw	ra,28(sp)
10006d84:	3825883a 	mov	r18,r7
10006d88:	8822d57a 	srli	r17,r17,21
10006d8c:	00060c40 	call	100060c4 <_Balloc>
10006d90:	1027883a 	mov	r19,r2
10006d94:	00800434 	movhi	r2,16
10006d98:	10bfffc4 	addi	r2,r2,-1
10006d9c:	808c703a 	and	r6,r16,r2
10006da0:	88000126 	beq	r17,zero,10006da8 <__d2b+0x50>
10006da4:	31800434 	orhi	r6,r6,16
10006da8:	d9800015 	stw	r6,0(sp)
10006dac:	a0002426 	beq	r20,zero,10006e40 <__d2b+0xe8>
10006db0:	d9000104 	addi	r4,sp,4
10006db4:	dd000115 	stw	r20,4(sp)
10006db8:	00064200 	call	10006420 <__lo0bits>
10006dbc:	d8c00017 	ldw	r3,0(sp)
10006dc0:	10002f1e 	bne	r2,zero,10006e80 <__d2b+0x128>
10006dc4:	d9000117 	ldw	r4,4(sp)
10006dc8:	99000515 	stw	r4,20(r19)
10006dcc:	1821003a 	cmpeq	r16,r3,zero
10006dd0:	01000084 	movi	r4,2
10006dd4:	2421c83a 	sub	r16,r4,r16
10006dd8:	98c00615 	stw	r3,24(r19)
10006ddc:	9c000415 	stw	r16,16(r19)
10006de0:	88001f1e 	bne	r17,zero,10006e60 <__d2b+0x108>
10006de4:	10bef384 	addi	r2,r2,-1074
10006de8:	90800015 	stw	r2,0(r18)
10006dec:	00900034 	movhi	r2,16384
10006df0:	10bfffc4 	addi	r2,r2,-1
10006df4:	8085883a 	add	r2,r16,r2
10006df8:	1085883a 	add	r2,r2,r2
10006dfc:	1085883a 	add	r2,r2,r2
10006e00:	9885883a 	add	r2,r19,r2
10006e04:	11000517 	ldw	r4,20(r2)
10006e08:	8020917a 	slli	r16,r16,5
10006e0c:	00063b80 	call	100063b8 <__hi0bits>
10006e10:	d8c00817 	ldw	r3,32(sp)
10006e14:	8085c83a 	sub	r2,r16,r2
10006e18:	18800015 	stw	r2,0(r3)
10006e1c:	9805883a 	mov	r2,r19
10006e20:	dfc00717 	ldw	ra,28(sp)
10006e24:	dd000617 	ldw	r20,24(sp)
10006e28:	dcc00517 	ldw	r19,20(sp)
10006e2c:	dc800417 	ldw	r18,16(sp)
10006e30:	dc400317 	ldw	r17,12(sp)
10006e34:	dc000217 	ldw	r16,8(sp)
10006e38:	dec00804 	addi	sp,sp,32
10006e3c:	f800283a 	ret
10006e40:	d809883a 	mov	r4,sp
10006e44:	00064200 	call	10006420 <__lo0bits>
10006e48:	d8c00017 	ldw	r3,0(sp)
10006e4c:	04000044 	movi	r16,1
10006e50:	9c000415 	stw	r16,16(r19)
10006e54:	98c00515 	stw	r3,20(r19)
10006e58:	10800804 	addi	r2,r2,32
10006e5c:	883fe126 	beq	r17,zero,10006de4 <__alt_data_end+0xf8006de4>
10006e60:	00c00d44 	movi	r3,53
10006e64:	8c7ef344 	addi	r17,r17,-1075
10006e68:	88a3883a 	add	r17,r17,r2
10006e6c:	1885c83a 	sub	r2,r3,r2
10006e70:	d8c00817 	ldw	r3,32(sp)
10006e74:	94400015 	stw	r17,0(r18)
10006e78:	18800015 	stw	r2,0(r3)
10006e7c:	003fe706 	br	10006e1c <__alt_data_end+0xf8006e1c>
10006e80:	01000804 	movi	r4,32
10006e84:	2089c83a 	sub	r4,r4,r2
10006e88:	1908983a 	sll	r4,r3,r4
10006e8c:	d9400117 	ldw	r5,4(sp)
10006e90:	1886d83a 	srl	r3,r3,r2
10006e94:	2148b03a 	or	r4,r4,r5
10006e98:	99000515 	stw	r4,20(r19)
10006e9c:	d8c00015 	stw	r3,0(sp)
10006ea0:	003fca06 	br	10006dcc <__alt_data_end+0xf8006dcc>

10006ea4 <__ratio>:
10006ea4:	defff904 	addi	sp,sp,-28
10006ea8:	dc400315 	stw	r17,12(sp)
10006eac:	2823883a 	mov	r17,r5
10006eb0:	d9400104 	addi	r5,sp,4
10006eb4:	dfc00615 	stw	ra,24(sp)
10006eb8:	dcc00515 	stw	r19,20(sp)
10006ebc:	dc800415 	stw	r18,16(sp)
10006ec0:	2027883a 	mov	r19,r4
10006ec4:	dc000215 	stw	r16,8(sp)
10006ec8:	0006c4c0 	call	10006c4c <__b2d>
10006ecc:	d80b883a 	mov	r5,sp
10006ed0:	8809883a 	mov	r4,r17
10006ed4:	1025883a 	mov	r18,r2
10006ed8:	1821883a 	mov	r16,r3
10006edc:	0006c4c0 	call	10006c4c <__b2d>
10006ee0:	8a000417 	ldw	r8,16(r17)
10006ee4:	99000417 	ldw	r4,16(r19)
10006ee8:	d9400117 	ldw	r5,4(sp)
10006eec:	2209c83a 	sub	r4,r4,r8
10006ef0:	2010917a 	slli	r8,r4,5
10006ef4:	d9000017 	ldw	r4,0(sp)
10006ef8:	2909c83a 	sub	r4,r5,r4
10006efc:	4109883a 	add	r4,r8,r4
10006f00:	01000e0e 	bge	zero,r4,10006f3c <__ratio+0x98>
10006f04:	2008953a 	slli	r4,r4,20
10006f08:	2421883a 	add	r16,r4,r16
10006f0c:	100d883a 	mov	r6,r2
10006f10:	180f883a 	mov	r7,r3
10006f14:	9009883a 	mov	r4,r18
10006f18:	800b883a 	mov	r5,r16
10006f1c:	000b28c0 	call	1000b28c <__divdf3>
10006f20:	dfc00617 	ldw	ra,24(sp)
10006f24:	dcc00517 	ldw	r19,20(sp)
10006f28:	dc800417 	ldw	r18,16(sp)
10006f2c:	dc400317 	ldw	r17,12(sp)
10006f30:	dc000217 	ldw	r16,8(sp)
10006f34:	dec00704 	addi	sp,sp,28
10006f38:	f800283a 	ret
10006f3c:	2008953a 	slli	r4,r4,20
10006f40:	1907c83a 	sub	r3,r3,r4
10006f44:	003ff106 	br	10006f0c <__alt_data_end+0xf8006f0c>

10006f48 <_mprec_log10>:
10006f48:	defffe04 	addi	sp,sp,-8
10006f4c:	dc000015 	stw	r16,0(sp)
10006f50:	dfc00115 	stw	ra,4(sp)
10006f54:	008005c4 	movi	r2,23
10006f58:	2021883a 	mov	r16,r4
10006f5c:	11000d0e 	bge	r2,r4,10006f94 <_mprec_log10+0x4c>
10006f60:	0005883a 	mov	r2,zero
10006f64:	00cffc34 	movhi	r3,16368
10006f68:	843fffc4 	addi	r16,r16,-1
10006f6c:	000d883a 	mov	r6,zero
10006f70:	01d00934 	movhi	r7,16420
10006f74:	1009883a 	mov	r4,r2
10006f78:	180b883a 	mov	r5,r3
10006f7c:	000bdcc0 	call	1000bdcc <__muldf3>
10006f80:	803ff91e 	bne	r16,zero,10006f68 <__alt_data_end+0xf8006f68>
10006f84:	dfc00117 	ldw	ra,4(sp)
10006f88:	dc000017 	ldw	r16,0(sp)
10006f8c:	dec00204 	addi	sp,sp,8
10006f90:	f800283a 	ret
10006f94:	202090fa 	slli	r16,r4,3
10006f98:	00840074 	movhi	r2,4097
10006f9c:	10be3a04 	addi	r2,r2,-1816
10006fa0:	1421883a 	add	r16,r2,r16
10006fa4:	80800017 	ldw	r2,0(r16)
10006fa8:	80c00117 	ldw	r3,4(r16)
10006fac:	dfc00117 	ldw	ra,4(sp)
10006fb0:	dc000017 	ldw	r16,0(sp)
10006fb4:	dec00204 	addi	sp,sp,8
10006fb8:	f800283a 	ret

10006fbc <__copybits>:
10006fbc:	297fffc4 	addi	r5,r5,-1
10006fc0:	280fd17a 	srai	r7,r5,5
10006fc4:	30c00417 	ldw	r3,16(r6)
10006fc8:	30800504 	addi	r2,r6,20
10006fcc:	39c00044 	addi	r7,r7,1
10006fd0:	18c7883a 	add	r3,r3,r3
10006fd4:	39cf883a 	add	r7,r7,r7
10006fd8:	18c7883a 	add	r3,r3,r3
10006fdc:	39cf883a 	add	r7,r7,r7
10006fe0:	10c7883a 	add	r3,r2,r3
10006fe4:	21cf883a 	add	r7,r4,r7
10006fe8:	10c00d2e 	bgeu	r2,r3,10007020 <__copybits+0x64>
10006fec:	200b883a 	mov	r5,r4
10006ff0:	12000017 	ldw	r8,0(r2)
10006ff4:	29400104 	addi	r5,r5,4
10006ff8:	10800104 	addi	r2,r2,4
10006ffc:	2a3fff15 	stw	r8,-4(r5)
10007000:	10fffb36 	bltu	r2,r3,10006ff0 <__alt_data_end+0xf8006ff0>
10007004:	1985c83a 	sub	r2,r3,r6
10007008:	10bffac4 	addi	r2,r2,-21
1000700c:	1004d0ba 	srli	r2,r2,2
10007010:	10800044 	addi	r2,r2,1
10007014:	1085883a 	add	r2,r2,r2
10007018:	1085883a 	add	r2,r2,r2
1000701c:	2089883a 	add	r4,r4,r2
10007020:	21c0032e 	bgeu	r4,r7,10007030 <__copybits+0x74>
10007024:	20000015 	stw	zero,0(r4)
10007028:	21000104 	addi	r4,r4,4
1000702c:	21fffd36 	bltu	r4,r7,10007024 <__alt_data_end+0xf8007024>
10007030:	f800283a 	ret

10007034 <__any_on>:
10007034:	20c00417 	ldw	r3,16(r4)
10007038:	2805d17a 	srai	r2,r5,5
1000703c:	21000504 	addi	r4,r4,20
10007040:	18800d0e 	bge	r3,r2,10007078 <__any_on+0x44>
10007044:	18c7883a 	add	r3,r3,r3
10007048:	18c7883a 	add	r3,r3,r3
1000704c:	20c7883a 	add	r3,r4,r3
10007050:	20c0192e 	bgeu	r4,r3,100070b8 <__any_on+0x84>
10007054:	18bfff17 	ldw	r2,-4(r3)
10007058:	18ffff04 	addi	r3,r3,-4
1000705c:	1000041e 	bne	r2,zero,10007070 <__any_on+0x3c>
10007060:	20c0142e 	bgeu	r4,r3,100070b4 <__any_on+0x80>
10007064:	18ffff04 	addi	r3,r3,-4
10007068:	19400017 	ldw	r5,0(r3)
1000706c:	283ffc26 	beq	r5,zero,10007060 <__alt_data_end+0xf8007060>
10007070:	00800044 	movi	r2,1
10007074:	f800283a 	ret
10007078:	10c00a0e 	bge	r2,r3,100070a4 <__any_on+0x70>
1000707c:	1085883a 	add	r2,r2,r2
10007080:	1085883a 	add	r2,r2,r2
10007084:	294007cc 	andi	r5,r5,31
10007088:	2087883a 	add	r3,r4,r2
1000708c:	283ff026 	beq	r5,zero,10007050 <__alt_data_end+0xf8007050>
10007090:	19800017 	ldw	r6,0(r3)
10007094:	3144d83a 	srl	r2,r6,r5
10007098:	114a983a 	sll	r5,r2,r5
1000709c:	317ff41e 	bne	r6,r5,10007070 <__alt_data_end+0xf8007070>
100070a0:	003feb06 	br	10007050 <__alt_data_end+0xf8007050>
100070a4:	1085883a 	add	r2,r2,r2
100070a8:	1085883a 	add	r2,r2,r2
100070ac:	2087883a 	add	r3,r4,r2
100070b0:	003fe706 	br	10007050 <__alt_data_end+0xf8007050>
100070b4:	f800283a 	ret
100070b8:	0005883a 	mov	r2,zero
100070bc:	f800283a 	ret

100070c0 <__fpclassifyd>:
100070c0:	00a00034 	movhi	r2,32768
100070c4:	10bfffc4 	addi	r2,r2,-1
100070c8:	2884703a 	and	r2,r5,r2
100070cc:	10000726 	beq	r2,zero,100070ec <__fpclassifyd+0x2c>
100070d0:	00fffc34 	movhi	r3,65520
100070d4:	019ff834 	movhi	r6,32736
100070d8:	28c7883a 	add	r3,r5,r3
100070dc:	31bfffc4 	addi	r6,r6,-1
100070e0:	30c00536 	bltu	r6,r3,100070f8 <__fpclassifyd+0x38>
100070e4:	00800104 	movi	r2,4
100070e8:	f800283a 	ret
100070ec:	2000021e 	bne	r4,zero,100070f8 <__fpclassifyd+0x38>
100070f0:	00800084 	movi	r2,2
100070f4:	f800283a 	ret
100070f8:	00dffc34 	movhi	r3,32752
100070fc:	019ff834 	movhi	r6,32736
10007100:	28cb883a 	add	r5,r5,r3
10007104:	31bfffc4 	addi	r6,r6,-1
10007108:	317ff62e 	bgeu	r6,r5,100070e4 <__alt_data_end+0xf80070e4>
1000710c:	01400434 	movhi	r5,16
10007110:	297fffc4 	addi	r5,r5,-1
10007114:	28800236 	bltu	r5,r2,10007120 <__fpclassifyd+0x60>
10007118:	008000c4 	movi	r2,3
1000711c:	f800283a 	ret
10007120:	10c00226 	beq	r2,r3,1000712c <__fpclassifyd+0x6c>
10007124:	0005883a 	mov	r2,zero
10007128:	f800283a 	ret
1000712c:	2005003a 	cmpeq	r2,r4,zero
10007130:	f800283a 	ret

10007134 <_sbrk_r>:
10007134:	defffd04 	addi	sp,sp,-12
10007138:	dc000015 	stw	r16,0(sp)
1000713c:	04040074 	movhi	r16,4097
10007140:	dc400115 	stw	r17,4(sp)
10007144:	840c3c04 	addi	r16,r16,12528
10007148:	2023883a 	mov	r17,r4
1000714c:	2809883a 	mov	r4,r5
10007150:	dfc00215 	stw	ra,8(sp)
10007154:	80000015 	stw	zero,0(r16)
10007158:	000d9280 	call	1000d928 <sbrk>
1000715c:	00ffffc4 	movi	r3,-1
10007160:	10c00526 	beq	r2,r3,10007178 <_sbrk_r+0x44>
10007164:	dfc00217 	ldw	ra,8(sp)
10007168:	dc400117 	ldw	r17,4(sp)
1000716c:	dc000017 	ldw	r16,0(sp)
10007170:	dec00304 	addi	sp,sp,12
10007174:	f800283a 	ret
10007178:	80c00017 	ldw	r3,0(r16)
1000717c:	183ff926 	beq	r3,zero,10007164 <__alt_data_end+0xf8007164>
10007180:	88c00015 	stw	r3,0(r17)
10007184:	003ff706 	br	10007164 <__alt_data_end+0xf8007164>

10007188 <__sread>:
10007188:	defffe04 	addi	sp,sp,-8
1000718c:	dc000015 	stw	r16,0(sp)
10007190:	2821883a 	mov	r16,r5
10007194:	2940038f 	ldh	r5,14(r5)
10007198:	dfc00115 	stw	ra,4(sp)
1000719c:	000962c0 	call	1000962c <_read_r>
100071a0:	10000716 	blt	r2,zero,100071c0 <__sread+0x38>
100071a4:	80c01417 	ldw	r3,80(r16)
100071a8:	1887883a 	add	r3,r3,r2
100071ac:	80c01415 	stw	r3,80(r16)
100071b0:	dfc00117 	ldw	ra,4(sp)
100071b4:	dc000017 	ldw	r16,0(sp)
100071b8:	dec00204 	addi	sp,sp,8
100071bc:	f800283a 	ret
100071c0:	80c0030b 	ldhu	r3,12(r16)
100071c4:	18fbffcc 	andi	r3,r3,61439
100071c8:	80c0030d 	sth	r3,12(r16)
100071cc:	dfc00117 	ldw	ra,4(sp)
100071d0:	dc000017 	ldw	r16,0(sp)
100071d4:	dec00204 	addi	sp,sp,8
100071d8:	f800283a 	ret

100071dc <__seofread>:
100071dc:	0005883a 	mov	r2,zero
100071e0:	f800283a 	ret

100071e4 <__swrite>:
100071e4:	2880030b 	ldhu	r2,12(r5)
100071e8:	defffb04 	addi	sp,sp,-20
100071ec:	dcc00315 	stw	r19,12(sp)
100071f0:	dc800215 	stw	r18,8(sp)
100071f4:	dc400115 	stw	r17,4(sp)
100071f8:	dc000015 	stw	r16,0(sp)
100071fc:	dfc00415 	stw	ra,16(sp)
10007200:	10c0400c 	andi	r3,r2,256
10007204:	2821883a 	mov	r16,r5
10007208:	2023883a 	mov	r17,r4
1000720c:	3025883a 	mov	r18,r6
10007210:	3827883a 	mov	r19,r7
10007214:	18000526 	beq	r3,zero,1000722c <__swrite+0x48>
10007218:	2940038f 	ldh	r5,14(r5)
1000721c:	01c00084 	movi	r7,2
10007220:	000d883a 	mov	r6,zero
10007224:	00094700 	call	10009470 <_lseek_r>
10007228:	8080030b 	ldhu	r2,12(r16)
1000722c:	8140038f 	ldh	r5,14(r16)
10007230:	10bbffcc 	andi	r2,r2,61439
10007234:	980f883a 	mov	r7,r19
10007238:	900d883a 	mov	r6,r18
1000723c:	8809883a 	mov	r4,r17
10007240:	8080030d 	sth	r2,12(r16)
10007244:	dfc00417 	ldw	ra,16(sp)
10007248:	dcc00317 	ldw	r19,12(sp)
1000724c:	dc800217 	ldw	r18,8(sp)
10007250:	dc400117 	ldw	r17,4(sp)
10007254:	dc000017 	ldw	r16,0(sp)
10007258:	dec00504 	addi	sp,sp,20
1000725c:	0008a801 	jmpi	10008a80 <_write_r>

10007260 <__sseek>:
10007260:	defffe04 	addi	sp,sp,-8
10007264:	dc000015 	stw	r16,0(sp)
10007268:	2821883a 	mov	r16,r5
1000726c:	2940038f 	ldh	r5,14(r5)
10007270:	dfc00115 	stw	ra,4(sp)
10007274:	00094700 	call	10009470 <_lseek_r>
10007278:	00ffffc4 	movi	r3,-1
1000727c:	10c00826 	beq	r2,r3,100072a0 <__sseek+0x40>
10007280:	80c0030b 	ldhu	r3,12(r16)
10007284:	80801415 	stw	r2,80(r16)
10007288:	18c40014 	ori	r3,r3,4096
1000728c:	80c0030d 	sth	r3,12(r16)
10007290:	dfc00117 	ldw	ra,4(sp)
10007294:	dc000017 	ldw	r16,0(sp)
10007298:	dec00204 	addi	sp,sp,8
1000729c:	f800283a 	ret
100072a0:	80c0030b 	ldhu	r3,12(r16)
100072a4:	18fbffcc 	andi	r3,r3,61439
100072a8:	80c0030d 	sth	r3,12(r16)
100072ac:	dfc00117 	ldw	ra,4(sp)
100072b0:	dc000017 	ldw	r16,0(sp)
100072b4:	dec00204 	addi	sp,sp,8
100072b8:	f800283a 	ret

100072bc <__sclose>:
100072bc:	2940038f 	ldh	r5,14(r5)
100072c0:	0008ae01 	jmpi	10008ae0 <_close_r>

100072c4 <strcmp>:
100072c4:	2144b03a 	or	r2,r4,r5
100072c8:	108000cc 	andi	r2,r2,3
100072cc:	1000171e 	bne	r2,zero,1000732c <strcmp+0x68>
100072d0:	20800017 	ldw	r2,0(r4)
100072d4:	28c00017 	ldw	r3,0(r5)
100072d8:	10c0141e 	bne	r2,r3,1000732c <strcmp+0x68>
100072dc:	027fbff4 	movhi	r9,65279
100072e0:	4a7fbfc4 	addi	r9,r9,-257
100072e4:	0086303a 	nor	r3,zero,r2
100072e8:	02202074 	movhi	r8,32897
100072ec:	1245883a 	add	r2,r2,r9
100072f0:	42202004 	addi	r8,r8,-32640
100072f4:	10c4703a 	and	r2,r2,r3
100072f8:	1204703a 	and	r2,r2,r8
100072fc:	10000226 	beq	r2,zero,10007308 <strcmp+0x44>
10007300:	00002306 	br	10007390 <strcmp+0xcc>
10007304:	1000221e 	bne	r2,zero,10007390 <strcmp+0xcc>
10007308:	21000104 	addi	r4,r4,4
1000730c:	20c00017 	ldw	r3,0(r4)
10007310:	29400104 	addi	r5,r5,4
10007314:	29800017 	ldw	r6,0(r5)
10007318:	1a4f883a 	add	r7,r3,r9
1000731c:	00c4303a 	nor	r2,zero,r3
10007320:	3884703a 	and	r2,r7,r2
10007324:	1204703a 	and	r2,r2,r8
10007328:	19bff626 	beq	r3,r6,10007304 <__alt_data_end+0xf8007304>
1000732c:	20800003 	ldbu	r2,0(r4)
10007330:	10c03fcc 	andi	r3,r2,255
10007334:	18c0201c 	xori	r3,r3,128
10007338:	18ffe004 	addi	r3,r3,-128
1000733c:	18000c26 	beq	r3,zero,10007370 <strcmp+0xac>
10007340:	29800007 	ldb	r6,0(r5)
10007344:	19800326 	beq	r3,r6,10007354 <strcmp+0x90>
10007348:	00001306 	br	10007398 <strcmp+0xd4>
1000734c:	29800007 	ldb	r6,0(r5)
10007350:	11800b1e 	bne	r2,r6,10007380 <strcmp+0xbc>
10007354:	21000044 	addi	r4,r4,1
10007358:	20c00003 	ldbu	r3,0(r4)
1000735c:	29400044 	addi	r5,r5,1
10007360:	18803fcc 	andi	r2,r3,255
10007364:	1080201c 	xori	r2,r2,128
10007368:	10bfe004 	addi	r2,r2,-128
1000736c:	103ff71e 	bne	r2,zero,1000734c <__alt_data_end+0xf800734c>
10007370:	0007883a 	mov	r3,zero
10007374:	28800003 	ldbu	r2,0(r5)
10007378:	1885c83a 	sub	r2,r3,r2
1000737c:	f800283a 	ret
10007380:	28800003 	ldbu	r2,0(r5)
10007384:	18c03fcc 	andi	r3,r3,255
10007388:	1885c83a 	sub	r2,r3,r2
1000738c:	f800283a 	ret
10007390:	0005883a 	mov	r2,zero
10007394:	f800283a 	ret
10007398:	10c03fcc 	andi	r3,r2,255
1000739c:	003ff506 	br	10007374 <__alt_data_end+0xf8007374>

100073a0 <strlen>:
100073a0:	208000cc 	andi	r2,r4,3
100073a4:	10002026 	beq	r2,zero,10007428 <strlen+0x88>
100073a8:	20800007 	ldb	r2,0(r4)
100073ac:	10002026 	beq	r2,zero,10007430 <strlen+0x90>
100073b0:	2005883a 	mov	r2,r4
100073b4:	00000206 	br	100073c0 <strlen+0x20>
100073b8:	10c00007 	ldb	r3,0(r2)
100073bc:	18001826 	beq	r3,zero,10007420 <strlen+0x80>
100073c0:	10800044 	addi	r2,r2,1
100073c4:	10c000cc 	andi	r3,r2,3
100073c8:	183ffb1e 	bne	r3,zero,100073b8 <__alt_data_end+0xf80073b8>
100073cc:	10c00017 	ldw	r3,0(r2)
100073d0:	01ffbff4 	movhi	r7,65279
100073d4:	39ffbfc4 	addi	r7,r7,-257
100073d8:	00ca303a 	nor	r5,zero,r3
100073dc:	01a02074 	movhi	r6,32897
100073e0:	19c7883a 	add	r3,r3,r7
100073e4:	31a02004 	addi	r6,r6,-32640
100073e8:	1946703a 	and	r3,r3,r5
100073ec:	1986703a 	and	r3,r3,r6
100073f0:	1800091e 	bne	r3,zero,10007418 <strlen+0x78>
100073f4:	10800104 	addi	r2,r2,4
100073f8:	10c00017 	ldw	r3,0(r2)
100073fc:	19cb883a 	add	r5,r3,r7
10007400:	00c6303a 	nor	r3,zero,r3
10007404:	28c6703a 	and	r3,r5,r3
10007408:	1986703a 	and	r3,r3,r6
1000740c:	183ff926 	beq	r3,zero,100073f4 <__alt_data_end+0xf80073f4>
10007410:	00000106 	br	10007418 <strlen+0x78>
10007414:	10800044 	addi	r2,r2,1
10007418:	10c00007 	ldb	r3,0(r2)
1000741c:	183ffd1e 	bne	r3,zero,10007414 <__alt_data_end+0xf8007414>
10007420:	1105c83a 	sub	r2,r2,r4
10007424:	f800283a 	ret
10007428:	2005883a 	mov	r2,r4
1000742c:	003fe706 	br	100073cc <__alt_data_end+0xf80073cc>
10007430:	0005883a 	mov	r2,zero
10007434:	f800283a 	ret

10007438 <__sprint_r.part.0>:
10007438:	28801917 	ldw	r2,100(r5)
1000743c:	defff604 	addi	sp,sp,-40
10007440:	dd400515 	stw	r21,20(sp)
10007444:	dfc00915 	stw	ra,36(sp)
10007448:	df000815 	stw	fp,32(sp)
1000744c:	ddc00715 	stw	r23,28(sp)
10007450:	dd800615 	stw	r22,24(sp)
10007454:	dd000415 	stw	r20,16(sp)
10007458:	dcc00315 	stw	r19,12(sp)
1000745c:	dc800215 	stw	r18,8(sp)
10007460:	dc400115 	stw	r17,4(sp)
10007464:	dc000015 	stw	r16,0(sp)
10007468:	1088000c 	andi	r2,r2,8192
1000746c:	302b883a 	mov	r21,r6
10007470:	10002e26 	beq	r2,zero,1000752c <__sprint_r.part.0+0xf4>
10007474:	30800217 	ldw	r2,8(r6)
10007478:	35800017 	ldw	r22,0(r6)
1000747c:	10002926 	beq	r2,zero,10007524 <__sprint_r.part.0+0xec>
10007480:	2827883a 	mov	r19,r5
10007484:	2029883a 	mov	r20,r4
10007488:	b5c00104 	addi	r23,r22,4
1000748c:	04bfffc4 	movi	r18,-1
10007490:	bc400017 	ldw	r17,0(r23)
10007494:	b4000017 	ldw	r16,0(r22)
10007498:	0039883a 	mov	fp,zero
1000749c:	8822d0ba 	srli	r17,r17,2
100074a0:	8800031e 	bne	r17,zero,100074b0 <__sprint_r.part.0+0x78>
100074a4:	00001806 	br	10007508 <__sprint_r.part.0+0xd0>
100074a8:	84000104 	addi	r16,r16,4
100074ac:	8f001526 	beq	r17,fp,10007504 <__sprint_r.part.0+0xcc>
100074b0:	81400017 	ldw	r5,0(r16)
100074b4:	980d883a 	mov	r6,r19
100074b8:	a009883a 	mov	r4,r20
100074bc:	0008e600 	call	10008e60 <_fputwc_r>
100074c0:	e7000044 	addi	fp,fp,1
100074c4:	14bff81e 	bne	r2,r18,100074a8 <__alt_data_end+0xf80074a8>
100074c8:	9005883a 	mov	r2,r18
100074cc:	a8000215 	stw	zero,8(r21)
100074d0:	a8000115 	stw	zero,4(r21)
100074d4:	dfc00917 	ldw	ra,36(sp)
100074d8:	df000817 	ldw	fp,32(sp)
100074dc:	ddc00717 	ldw	r23,28(sp)
100074e0:	dd800617 	ldw	r22,24(sp)
100074e4:	dd400517 	ldw	r21,20(sp)
100074e8:	dd000417 	ldw	r20,16(sp)
100074ec:	dcc00317 	ldw	r19,12(sp)
100074f0:	dc800217 	ldw	r18,8(sp)
100074f4:	dc400117 	ldw	r17,4(sp)
100074f8:	dc000017 	ldw	r16,0(sp)
100074fc:	dec00a04 	addi	sp,sp,40
10007500:	f800283a 	ret
10007504:	a8800217 	ldw	r2,8(r21)
10007508:	8c63883a 	add	r17,r17,r17
1000750c:	8c63883a 	add	r17,r17,r17
10007510:	1445c83a 	sub	r2,r2,r17
10007514:	a8800215 	stw	r2,8(r21)
10007518:	b5800204 	addi	r22,r22,8
1000751c:	bdc00204 	addi	r23,r23,8
10007520:	103fdb1e 	bne	r2,zero,10007490 <__alt_data_end+0xf8007490>
10007524:	0005883a 	mov	r2,zero
10007528:	003fe806 	br	100074cc <__alt_data_end+0xf80074cc>
1000752c:	0008f600 	call	10008f60 <__sfvwrite_r>
10007530:	003fe606 	br	100074cc <__alt_data_end+0xf80074cc>

10007534 <__sprint_r>:
10007534:	30c00217 	ldw	r3,8(r6)
10007538:	18000126 	beq	r3,zero,10007540 <__sprint_r+0xc>
1000753c:	00074381 	jmpi	10007438 <__sprint_r.part.0>
10007540:	30000115 	stw	zero,4(r6)
10007544:	0005883a 	mov	r2,zero
10007548:	f800283a 	ret

1000754c <___vfiprintf_internal_r>:
1000754c:	deffc904 	addi	sp,sp,-220
10007550:	df003515 	stw	fp,212(sp)
10007554:	dd003115 	stw	r20,196(sp)
10007558:	dfc03615 	stw	ra,216(sp)
1000755c:	ddc03415 	stw	r23,208(sp)
10007560:	dd803315 	stw	r22,204(sp)
10007564:	dd403215 	stw	r21,200(sp)
10007568:	dcc03015 	stw	r19,192(sp)
1000756c:	dc802f15 	stw	r18,188(sp)
10007570:	dc402e15 	stw	r17,184(sp)
10007574:	dc002d15 	stw	r16,180(sp)
10007578:	d9002015 	stw	r4,128(sp)
1000757c:	d9c02215 	stw	r7,136(sp)
10007580:	2829883a 	mov	r20,r5
10007584:	3039883a 	mov	fp,r6
10007588:	20000226 	beq	r4,zero,10007594 <___vfiprintf_internal_r+0x48>
1000758c:	20800e17 	ldw	r2,56(r4)
10007590:	1000cf26 	beq	r2,zero,100078d0 <___vfiprintf_internal_r+0x384>
10007594:	a080030b 	ldhu	r2,12(r20)
10007598:	10c8000c 	andi	r3,r2,8192
1000759c:	1800061e 	bne	r3,zero,100075b8 <___vfiprintf_internal_r+0x6c>
100075a0:	a1001917 	ldw	r4,100(r20)
100075a4:	00f7ffc4 	movi	r3,-8193
100075a8:	10880014 	ori	r2,r2,8192
100075ac:	20c6703a 	and	r3,r4,r3
100075b0:	a080030d 	sth	r2,12(r20)
100075b4:	a0c01915 	stw	r3,100(r20)
100075b8:	10c0020c 	andi	r3,r2,8
100075bc:	1800a926 	beq	r3,zero,10007864 <___vfiprintf_internal_r+0x318>
100075c0:	a0c00417 	ldw	r3,16(r20)
100075c4:	1800a726 	beq	r3,zero,10007864 <___vfiprintf_internal_r+0x318>
100075c8:	1080068c 	andi	r2,r2,26
100075cc:	00c00284 	movi	r3,10
100075d0:	10c0ac26 	beq	r2,r3,10007884 <___vfiprintf_internal_r+0x338>
100075d4:	da801a04 	addi	r10,sp,104
100075d8:	da801e15 	stw	r10,120(sp)
100075dc:	d8801e17 	ldw	r2,120(sp)
100075e0:	da8019c4 	addi	r10,sp,103
100075e4:	05840074 	movhi	r22,4097
100075e8:	05c40074 	movhi	r23,4097
100075ec:	da801f15 	stw	r10,124(sp)
100075f0:	1295c83a 	sub	r10,r2,r10
100075f4:	b5be7004 	addi	r22,r22,-1600
100075f8:	bdfe6c04 	addi	r23,r23,-1616
100075fc:	dec01a15 	stw	sp,104(sp)
10007600:	d8001c15 	stw	zero,112(sp)
10007604:	d8001b15 	stw	zero,108(sp)
10007608:	d8002615 	stw	zero,152(sp)
1000760c:	d8002315 	stw	zero,140(sp)
10007610:	da802715 	stw	r10,156(sp)
10007614:	d811883a 	mov	r8,sp
10007618:	dd002115 	stw	r20,132(sp)
1000761c:	e021883a 	mov	r16,fp
10007620:	80800007 	ldb	r2,0(r16)
10007624:	1003ea26 	beq	r2,zero,100085d0 <___vfiprintf_internal_r+0x1084>
10007628:	00c00944 	movi	r3,37
1000762c:	8025883a 	mov	r18,r16
10007630:	10c0021e 	bne	r2,r3,1000763c <___vfiprintf_internal_r+0xf0>
10007634:	00001606 	br	10007690 <___vfiprintf_internal_r+0x144>
10007638:	10c00326 	beq	r2,r3,10007648 <___vfiprintf_internal_r+0xfc>
1000763c:	94800044 	addi	r18,r18,1
10007640:	90800007 	ldb	r2,0(r18)
10007644:	103ffc1e 	bne	r2,zero,10007638 <__alt_data_end+0xf8007638>
10007648:	9423c83a 	sub	r17,r18,r16
1000764c:	88001026 	beq	r17,zero,10007690 <___vfiprintf_internal_r+0x144>
10007650:	d8c01c17 	ldw	r3,112(sp)
10007654:	d8801b17 	ldw	r2,108(sp)
10007658:	44000015 	stw	r16,0(r8)
1000765c:	88c7883a 	add	r3,r17,r3
10007660:	10800044 	addi	r2,r2,1
10007664:	44400115 	stw	r17,4(r8)
10007668:	d8c01c15 	stw	r3,112(sp)
1000766c:	d8801b15 	stw	r2,108(sp)
10007670:	010001c4 	movi	r4,7
10007674:	2080760e 	bge	r4,r2,10007850 <___vfiprintf_internal_r+0x304>
10007678:	1803821e 	bne	r3,zero,10008484 <___vfiprintf_internal_r+0xf38>
1000767c:	da802317 	ldw	r10,140(sp)
10007680:	d8001b15 	stw	zero,108(sp)
10007684:	d811883a 	mov	r8,sp
10007688:	5455883a 	add	r10,r10,r17
1000768c:	da802315 	stw	r10,140(sp)
10007690:	90800007 	ldb	r2,0(r18)
10007694:	10044626 	beq	r2,zero,100087b0 <___vfiprintf_internal_r+0x1264>
10007698:	90c00047 	ldb	r3,1(r18)
1000769c:	94000044 	addi	r16,r18,1
100076a0:	d8001d85 	stb	zero,118(sp)
100076a4:	0009883a 	mov	r4,zero
100076a8:	000f883a 	mov	r7,zero
100076ac:	027fffc4 	movi	r9,-1
100076b0:	0023883a 	mov	r17,zero
100076b4:	0029883a 	mov	r20,zero
100076b8:	01401604 	movi	r5,88
100076bc:	01800244 	movi	r6,9
100076c0:	03400a84 	movi	r13,42
100076c4:	03001b04 	movi	r12,108
100076c8:	84000044 	addi	r16,r16,1
100076cc:	18bff804 	addi	r2,r3,-32
100076d0:	28827336 	bltu	r5,r2,100080a0 <___vfiprintf_internal_r+0xb54>
100076d4:	100490ba 	slli	r2,r2,2
100076d8:	02840034 	movhi	r10,4096
100076dc:	529dbb04 	addi	r10,r10,30444
100076e0:	1285883a 	add	r2,r2,r10
100076e4:	10800017 	ldw	r2,0(r2)
100076e8:	1000683a 	jmp	r2
100076ec:	10007dd4 	ori	zero,r2,503
100076f0:	100080a0 	cmpeqi	zero,r2,514
100076f4:	100080a0 	cmpeqi	zero,r2,514
100076f8:	10007df4 	orhi	zero,r2,503
100076fc:	100080a0 	cmpeqi	zero,r2,514
10007700:	100080a0 	cmpeqi	zero,r2,514
10007704:	100080a0 	cmpeqi	zero,r2,514
10007708:	100080a0 	cmpeqi	zero,r2,514
1000770c:	100080a0 	cmpeqi	zero,r2,514
10007710:	100080a0 	cmpeqi	zero,r2,514
10007714:	10007fdc 	xori	zero,r2,511
10007718:	10007ff8 	rdprs	zero,r2,511
1000771c:	100080a0 	cmpeqi	zero,r2,514
10007720:	100078e0 	cmpeqi	zero,r2,483
10007724:	10008008 	cmpgei	zero,r2,512
10007728:	100080a0 	cmpeqi	zero,r2,514
1000772c:	10007e00 	call	110007e0 <_gp+0xfe7238>
10007730:	10007e0c 	andi	zero,r2,504
10007734:	10007e0c 	andi	zero,r2,504
10007738:	10007e0c 	andi	zero,r2,504
1000773c:	10007e0c 	andi	zero,r2,504
10007740:	10007e0c 	andi	zero,r2,504
10007744:	10007e0c 	andi	zero,r2,504
10007748:	10007e0c 	andi	zero,r2,504
1000774c:	10007e0c 	andi	zero,r2,504
10007750:	10007e0c 	andi	zero,r2,504
10007754:	100080a0 	cmpeqi	zero,r2,514
10007758:	100080a0 	cmpeqi	zero,r2,514
1000775c:	100080a0 	cmpeqi	zero,r2,514
10007760:	100080a0 	cmpeqi	zero,r2,514
10007764:	100080a0 	cmpeqi	zero,r2,514
10007768:	100080a0 	cmpeqi	zero,r2,514
1000776c:	100080a0 	cmpeqi	zero,r2,514
10007770:	100080a0 	cmpeqi	zero,r2,514
10007774:	100080a0 	cmpeqi	zero,r2,514
10007778:	100080a0 	cmpeqi	zero,r2,514
1000777c:	10007e38 	rdprs	zero,r2,504
10007780:	100080a0 	cmpeqi	zero,r2,514
10007784:	100080a0 	cmpeqi	zero,r2,514
10007788:	100080a0 	cmpeqi	zero,r2,514
1000778c:	100080a0 	cmpeqi	zero,r2,514
10007790:	100080a0 	cmpeqi	zero,r2,514
10007794:	100080a0 	cmpeqi	zero,r2,514
10007798:	100080a0 	cmpeqi	zero,r2,514
1000779c:	100080a0 	cmpeqi	zero,r2,514
100077a0:	100080a0 	cmpeqi	zero,r2,514
100077a4:	100080a0 	cmpeqi	zero,r2,514
100077a8:	10007e70 	cmpltui	zero,r2,505
100077ac:	100080a0 	cmpeqi	zero,r2,514
100077b0:	100080a0 	cmpeqi	zero,r2,514
100077b4:	100080a0 	cmpeqi	zero,r2,514
100077b8:	100080a0 	cmpeqi	zero,r2,514
100077bc:	100080a0 	cmpeqi	zero,r2,514
100077c0:	10007ec8 	cmpgei	zero,r2,507
100077c4:	100080a0 	cmpeqi	zero,r2,514
100077c8:	100080a0 	cmpeqi	zero,r2,514
100077cc:	10007f38 	rdprs	zero,r2,508
100077d0:	100080a0 	cmpeqi	zero,r2,514
100077d4:	100080a0 	cmpeqi	zero,r2,514
100077d8:	100080a0 	cmpeqi	zero,r2,514
100077dc:	100080a0 	cmpeqi	zero,r2,514
100077e0:	100080a0 	cmpeqi	zero,r2,514
100077e4:	100080a0 	cmpeqi	zero,r2,514
100077e8:	100080a0 	cmpeqi	zero,r2,514
100077ec:	100080a0 	cmpeqi	zero,r2,514
100077f0:	100080a0 	cmpeqi	zero,r2,514
100077f4:	100080a0 	cmpeqi	zero,r2,514
100077f8:	10007ce4 	muli	zero,r2,499
100077fc:	10007d10 	cmplti	zero,r2,500
10007800:	100080a0 	cmpeqi	zero,r2,514
10007804:	100080a0 	cmpeqi	zero,r2,514
10007808:	100080a0 	cmpeqi	zero,r2,514
1000780c:	10008048 	cmpgei	zero,r2,513
10007810:	10007d10 	cmplti	zero,r2,500
10007814:	100080a0 	cmpeqi	zero,r2,514
10007818:	100080a0 	cmpeqi	zero,r2,514
1000781c:	10007ba4 	muli	zero,r2,494
10007820:	100080a0 	cmpeqi	zero,r2,514
10007824:	10007bb4 	orhi	zero,r2,494
10007828:	10007bf0 	cmpltui	zero,r2,495
1000782c:	100078ec 	andhi	zero,r2,483
10007830:	10007b98 	cmpnei	zero,r2,494
10007834:	100080a0 	cmpeqi	zero,r2,514
10007838:	10007f74 	orhi	zero,r2,509
1000783c:	100080a0 	cmpeqi	zero,r2,514
10007840:	10007fcc 	andi	zero,r2,511
10007844:	100080a0 	cmpeqi	zero,r2,514
10007848:	100080a0 	cmpeqi	zero,r2,514
1000784c:	10007c90 	cmplti	zero,r2,498
10007850:	42000204 	addi	r8,r8,8
10007854:	da802317 	ldw	r10,140(sp)
10007858:	5455883a 	add	r10,r10,r17
1000785c:	da802315 	stw	r10,140(sp)
10007860:	003f8b06 	br	10007690 <__alt_data_end+0xf8007690>
10007864:	d9002017 	ldw	r4,128(sp)
10007868:	a00b883a 	mov	r5,r20
1000786c:	0002cec0 	call	10002cec <__swsetup_r>
10007870:	1003b11e 	bne	r2,zero,10008738 <___vfiprintf_internal_r+0x11ec>
10007874:	a080030b 	ldhu	r2,12(r20)
10007878:	00c00284 	movi	r3,10
1000787c:	1080068c 	andi	r2,r2,26
10007880:	10ff541e 	bne	r2,r3,100075d4 <__alt_data_end+0xf80075d4>
10007884:	a080038f 	ldh	r2,14(r20)
10007888:	103f5216 	blt	r2,zero,100075d4 <__alt_data_end+0xf80075d4>
1000788c:	d9c02217 	ldw	r7,136(sp)
10007890:	d9002017 	ldw	r4,128(sp)
10007894:	e00d883a 	mov	r6,fp
10007898:	a00b883a 	mov	r5,r20
1000789c:	00089c40 	call	100089c4 <__sbprintf>
100078a0:	dfc03617 	ldw	ra,216(sp)
100078a4:	df003517 	ldw	fp,212(sp)
100078a8:	ddc03417 	ldw	r23,208(sp)
100078ac:	dd803317 	ldw	r22,204(sp)
100078b0:	dd403217 	ldw	r21,200(sp)
100078b4:	dd003117 	ldw	r20,196(sp)
100078b8:	dcc03017 	ldw	r19,192(sp)
100078bc:	dc802f17 	ldw	r18,188(sp)
100078c0:	dc402e17 	ldw	r17,184(sp)
100078c4:	dc002d17 	ldw	r16,180(sp)
100078c8:	dec03704 	addi	sp,sp,220
100078cc:	f800283a 	ret
100078d0:	0004cc00 	call	10004cc0 <__sinit>
100078d4:	003f2f06 	br	10007594 <__alt_data_end+0xf8007594>
100078d8:	0463c83a 	sub	r17,zero,r17
100078dc:	d8802215 	stw	r2,136(sp)
100078e0:	a5000114 	ori	r20,r20,4
100078e4:	80c00007 	ldb	r3,0(r16)
100078e8:	003f7706 	br	100076c8 <__alt_data_end+0xf80076c8>
100078ec:	00800c04 	movi	r2,48
100078f0:	da802217 	ldw	r10,136(sp)
100078f4:	d8801d05 	stb	r2,116(sp)
100078f8:	00801e04 	movi	r2,120
100078fc:	d8801d45 	stb	r2,117(sp)
10007900:	d8001d85 	stb	zero,118(sp)
10007904:	50c00104 	addi	r3,r10,4
10007908:	54800017 	ldw	r18,0(r10)
1000790c:	0027883a 	mov	r19,zero
10007910:	a0800094 	ori	r2,r20,2
10007914:	48030b16 	blt	r9,zero,10008544 <___vfiprintf_internal_r+0xff8>
10007918:	00bfdfc4 	movi	r2,-129
1000791c:	a096703a 	and	r11,r20,r2
10007920:	d8c02215 	stw	r3,136(sp)
10007924:	5d000094 	ori	r20,r11,2
10007928:	90032b1e 	bne	r18,zero,100085d8 <___vfiprintf_internal_r+0x108c>
1000792c:	00840074 	movhi	r2,4097
10007930:	10be0b04 	addi	r2,r2,-2004
10007934:	d8802615 	stw	r2,152(sp)
10007938:	0039883a 	mov	fp,zero
1000793c:	48017b1e 	bne	r9,zero,10007f2c <___vfiprintf_internal_r+0x9e0>
10007940:	0013883a 	mov	r9,zero
10007944:	0027883a 	mov	r19,zero
10007948:	dd401a04 	addi	r21,sp,104
1000794c:	4825883a 	mov	r18,r9
10007950:	4cc0010e 	bge	r9,r19,10007958 <___vfiprintf_internal_r+0x40c>
10007954:	9825883a 	mov	r18,r19
10007958:	e7003fcc 	andi	fp,fp,255
1000795c:	e700201c 	xori	fp,fp,128
10007960:	e73fe004 	addi	fp,fp,-128
10007964:	e0000126 	beq	fp,zero,1000796c <___vfiprintf_internal_r+0x420>
10007968:	94800044 	addi	r18,r18,1
1000796c:	a380008c 	andi	r14,r20,2
10007970:	70000126 	beq	r14,zero,10007978 <___vfiprintf_internal_r+0x42c>
10007974:	94800084 	addi	r18,r18,2
10007978:	a700210c 	andi	fp,r20,132
1000797c:	e001df1e 	bne	fp,zero,100080fc <___vfiprintf_internal_r+0xbb0>
10007980:	8c87c83a 	sub	r3,r17,r18
10007984:	00c1dd0e 	bge	zero,r3,100080fc <___vfiprintf_internal_r+0xbb0>
10007988:	01c00404 	movi	r7,16
1000798c:	d8801c17 	ldw	r2,112(sp)
10007990:	38c3ad0e 	bge	r7,r3,10008848 <___vfiprintf_internal_r+0x12fc>
10007994:	02840074 	movhi	r10,4097
10007998:	52be7004 	addi	r10,r10,-1600
1000799c:	dc002915 	stw	r16,164(sp)
100079a0:	d9801b17 	ldw	r6,108(sp)
100079a4:	da802415 	stw	r10,144(sp)
100079a8:	03c001c4 	movi	r15,7
100079ac:	da402515 	stw	r9,148(sp)
100079b0:	db802815 	stw	r14,160(sp)
100079b4:	1821883a 	mov	r16,r3
100079b8:	00000506 	br	100079d0 <___vfiprintf_internal_r+0x484>
100079bc:	31400084 	addi	r5,r6,2
100079c0:	42000204 	addi	r8,r8,8
100079c4:	200d883a 	mov	r6,r4
100079c8:	843ffc04 	addi	r16,r16,-16
100079cc:	3c000d0e 	bge	r7,r16,10007a04 <___vfiprintf_internal_r+0x4b8>
100079d0:	10800404 	addi	r2,r2,16
100079d4:	31000044 	addi	r4,r6,1
100079d8:	45800015 	stw	r22,0(r8)
100079dc:	41c00115 	stw	r7,4(r8)
100079e0:	d8801c15 	stw	r2,112(sp)
100079e4:	d9001b15 	stw	r4,108(sp)
100079e8:	793ff40e 	bge	r15,r4,100079bc <__alt_data_end+0xf80079bc>
100079ec:	1001b51e 	bne	r2,zero,100080c4 <___vfiprintf_internal_r+0xb78>
100079f0:	843ffc04 	addi	r16,r16,-16
100079f4:	000d883a 	mov	r6,zero
100079f8:	01400044 	movi	r5,1
100079fc:	d811883a 	mov	r8,sp
10007a00:	3c3ff316 	blt	r7,r16,100079d0 <__alt_data_end+0xf80079d0>
10007a04:	8007883a 	mov	r3,r16
10007a08:	da402517 	ldw	r9,148(sp)
10007a0c:	db802817 	ldw	r14,160(sp)
10007a10:	dc002917 	ldw	r16,164(sp)
10007a14:	da802417 	ldw	r10,144(sp)
10007a18:	1885883a 	add	r2,r3,r2
10007a1c:	40c00115 	stw	r3,4(r8)
10007a20:	42800015 	stw	r10,0(r8)
10007a24:	d8801c15 	stw	r2,112(sp)
10007a28:	d9401b15 	stw	r5,108(sp)
10007a2c:	00c001c4 	movi	r3,7
10007a30:	19426016 	blt	r3,r5,100083b4 <___vfiprintf_internal_r+0xe68>
10007a34:	d8c01d87 	ldb	r3,118(sp)
10007a38:	42000204 	addi	r8,r8,8
10007a3c:	29000044 	addi	r4,r5,1
10007a40:	1801b31e 	bne	r3,zero,10008110 <___vfiprintf_internal_r+0xbc4>
10007a44:	7001c026 	beq	r14,zero,10008148 <___vfiprintf_internal_r+0xbfc>
10007a48:	d8c01d04 	addi	r3,sp,116
10007a4c:	10800084 	addi	r2,r2,2
10007a50:	40c00015 	stw	r3,0(r8)
10007a54:	00c00084 	movi	r3,2
10007a58:	40c00115 	stw	r3,4(r8)
10007a5c:	d8801c15 	stw	r2,112(sp)
10007a60:	d9001b15 	stw	r4,108(sp)
10007a64:	00c001c4 	movi	r3,7
10007a68:	1902650e 	bge	r3,r4,10008400 <___vfiprintf_internal_r+0xeb4>
10007a6c:	10029a1e 	bne	r2,zero,100084d8 <___vfiprintf_internal_r+0xf8c>
10007a70:	00c02004 	movi	r3,128
10007a74:	01000044 	movi	r4,1
10007a78:	000b883a 	mov	r5,zero
10007a7c:	d811883a 	mov	r8,sp
10007a80:	e0c1b31e 	bne	fp,r3,10008150 <___vfiprintf_internal_r+0xc04>
10007a84:	8cb9c83a 	sub	fp,r17,r18
10007a88:	0701b10e 	bge	zero,fp,10008150 <___vfiprintf_internal_r+0xc04>
10007a8c:	01c00404 	movi	r7,16
10007a90:	3f03890e 	bge	r7,fp,100088b8 <___vfiprintf_internal_r+0x136c>
10007a94:	00c40074 	movhi	r3,4097
10007a98:	18fe6c04 	addi	r3,r3,-1616
10007a9c:	d8c02415 	stw	r3,144(sp)
10007aa0:	8007883a 	mov	r3,r16
10007aa4:	034001c4 	movi	r13,7
10007aa8:	e021883a 	mov	r16,fp
10007aac:	da402515 	stw	r9,148(sp)
10007ab0:	1839883a 	mov	fp,r3
10007ab4:	00000506 	br	10007acc <___vfiprintf_internal_r+0x580>
10007ab8:	29800084 	addi	r6,r5,2
10007abc:	42000204 	addi	r8,r8,8
10007ac0:	180b883a 	mov	r5,r3
10007ac4:	843ffc04 	addi	r16,r16,-16
10007ac8:	3c000d0e 	bge	r7,r16,10007b00 <___vfiprintf_internal_r+0x5b4>
10007acc:	10800404 	addi	r2,r2,16
10007ad0:	28c00044 	addi	r3,r5,1
10007ad4:	45c00015 	stw	r23,0(r8)
10007ad8:	41c00115 	stw	r7,4(r8)
10007adc:	d8801c15 	stw	r2,112(sp)
10007ae0:	d8c01b15 	stw	r3,108(sp)
10007ae4:	68fff40e 	bge	r13,r3,10007ab8 <__alt_data_end+0xf8007ab8>
10007ae8:	1002241e 	bne	r2,zero,1000837c <___vfiprintf_internal_r+0xe30>
10007aec:	843ffc04 	addi	r16,r16,-16
10007af0:	01800044 	movi	r6,1
10007af4:	000b883a 	mov	r5,zero
10007af8:	d811883a 	mov	r8,sp
10007afc:	3c3ff316 	blt	r7,r16,10007acc <__alt_data_end+0xf8007acc>
10007b00:	da402517 	ldw	r9,148(sp)
10007b04:	e007883a 	mov	r3,fp
10007b08:	8039883a 	mov	fp,r16
10007b0c:	1821883a 	mov	r16,r3
10007b10:	d8c02417 	ldw	r3,144(sp)
10007b14:	1705883a 	add	r2,r2,fp
10007b18:	47000115 	stw	fp,4(r8)
10007b1c:	40c00015 	stw	r3,0(r8)
10007b20:	d8801c15 	stw	r2,112(sp)
10007b24:	d9801b15 	stw	r6,108(sp)
10007b28:	00c001c4 	movi	r3,7
10007b2c:	19827616 	blt	r3,r6,10008508 <___vfiprintf_internal_r+0xfbc>
10007b30:	4cf9c83a 	sub	fp,r9,r19
10007b34:	42000204 	addi	r8,r8,8
10007b38:	31000044 	addi	r4,r6,1
10007b3c:	300b883a 	mov	r5,r6
10007b40:	07018516 	blt	zero,fp,10008158 <___vfiprintf_internal_r+0xc0c>
10007b44:	9885883a 	add	r2,r19,r2
10007b48:	45400015 	stw	r21,0(r8)
10007b4c:	44c00115 	stw	r19,4(r8)
10007b50:	d8801c15 	stw	r2,112(sp)
10007b54:	d9001b15 	stw	r4,108(sp)
10007b58:	00c001c4 	movi	r3,7
10007b5c:	1901dd0e 	bge	r3,r4,100082d4 <___vfiprintf_internal_r+0xd88>
10007b60:	1002401e 	bne	r2,zero,10008464 <___vfiprintf_internal_r+0xf18>
10007b64:	d8001b15 	stw	zero,108(sp)
10007b68:	a2c0010c 	andi	r11,r20,4
10007b6c:	58000226 	beq	r11,zero,10007b78 <___vfiprintf_internal_r+0x62c>
10007b70:	8ca7c83a 	sub	r19,r17,r18
10007b74:	04c2f216 	blt	zero,r19,10008740 <___vfiprintf_internal_r+0x11f4>
10007b78:	8c80010e 	bge	r17,r18,10007b80 <___vfiprintf_internal_r+0x634>
10007b7c:	9023883a 	mov	r17,r18
10007b80:	da802317 	ldw	r10,140(sp)
10007b84:	5455883a 	add	r10,r10,r17
10007b88:	da802315 	stw	r10,140(sp)
10007b8c:	d8001b15 	stw	zero,108(sp)
10007b90:	d811883a 	mov	r8,sp
10007b94:	003ea206 	br	10007620 <__alt_data_end+0xf8007620>
10007b98:	a5000814 	ori	r20,r20,32
10007b9c:	80c00007 	ldb	r3,0(r16)
10007ba0:	003ec906 	br	100076c8 <__alt_data_end+0xf80076c8>
10007ba4:	80c00007 	ldb	r3,0(r16)
10007ba8:	1b030926 	beq	r3,r12,100087d0 <___vfiprintf_internal_r+0x1284>
10007bac:	a5000414 	ori	r20,r20,16
10007bb0:	003ec506 	br	100076c8 <__alt_data_end+0xf80076c8>
10007bb4:	21003fcc 	andi	r4,r4,255
10007bb8:	20035e1e 	bne	r4,zero,10008934 <___vfiprintf_internal_r+0x13e8>
10007bbc:	a080080c 	andi	r2,r20,32
10007bc0:	1002a526 	beq	r2,zero,10008658 <___vfiprintf_internal_r+0x110c>
10007bc4:	da802217 	ldw	r10,136(sp)
10007bc8:	50800017 	ldw	r2,0(r10)
10007bcc:	da802317 	ldw	r10,140(sp)
10007bd0:	5007d7fa 	srai	r3,r10,31
10007bd4:	da802217 	ldw	r10,136(sp)
10007bd8:	10c00115 	stw	r3,4(r2)
10007bdc:	52800104 	addi	r10,r10,4
10007be0:	da802215 	stw	r10,136(sp)
10007be4:	da802317 	ldw	r10,140(sp)
10007be8:	12800015 	stw	r10,0(r2)
10007bec:	003e8c06 	br	10007620 <__alt_data_end+0xf8007620>
10007bf0:	21003fcc 	andi	r4,r4,255
10007bf4:	2003511e 	bne	r4,zero,1000893c <___vfiprintf_internal_r+0x13f0>
10007bf8:	a080080c 	andi	r2,r20,32
10007bfc:	1000a126 	beq	r2,zero,10007e84 <___vfiprintf_internal_r+0x938>
10007c00:	da802217 	ldw	r10,136(sp)
10007c04:	d8001d85 	stb	zero,118(sp)
10007c08:	50800204 	addi	r2,r10,8
10007c0c:	54800017 	ldw	r18,0(r10)
10007c10:	54c00117 	ldw	r19,4(r10)
10007c14:	4802b416 	blt	r9,zero,100086e8 <___vfiprintf_internal_r+0x119c>
10007c18:	013fdfc4 	movi	r4,-129
10007c1c:	94c6b03a 	or	r3,r18,r19
10007c20:	d8802215 	stw	r2,136(sp)
10007c24:	a128703a 	and	r20,r20,r4
10007c28:	1800a226 	beq	r3,zero,10007eb4 <___vfiprintf_internal_r+0x968>
10007c2c:	0039883a 	mov	fp,zero
10007c30:	dd401a04 	addi	r21,sp,104
10007c34:	9006d0fa 	srli	r3,r18,3
10007c38:	9808977a 	slli	r4,r19,29
10007c3c:	9826d0fa 	srli	r19,r19,3
10007c40:	948001cc 	andi	r18,r18,7
10007c44:	90800c04 	addi	r2,r18,48
10007c48:	ad7fffc4 	addi	r21,r21,-1
10007c4c:	20e4b03a 	or	r18,r4,r3
10007c50:	a8800005 	stb	r2,0(r21)
10007c54:	94c6b03a 	or	r3,r18,r19
10007c58:	183ff61e 	bne	r3,zero,10007c34 <__alt_data_end+0xf8007c34>
10007c5c:	a0c0004c 	andi	r3,r20,1
10007c60:	18005926 	beq	r3,zero,10007dc8 <___vfiprintf_internal_r+0x87c>
10007c64:	10803fcc 	andi	r2,r2,255
10007c68:	1080201c 	xori	r2,r2,128
10007c6c:	10bfe004 	addi	r2,r2,-128
10007c70:	00c00c04 	movi	r3,48
10007c74:	10c05426 	beq	r2,r3,10007dc8 <___vfiprintf_internal_r+0x87c>
10007c78:	da801e17 	ldw	r10,120(sp)
10007c7c:	a8bfffc4 	addi	r2,r21,-1
10007c80:	a8ffffc5 	stb	r3,-1(r21)
10007c84:	50a7c83a 	sub	r19,r10,r2
10007c88:	102b883a 	mov	r21,r2
10007c8c:	003f2f06 	br	1000794c <__alt_data_end+0xf800794c>
10007c90:	21003fcc 	andi	r4,r4,255
10007c94:	2003421e 	bne	r4,zero,100089a0 <___vfiprintf_internal_r+0x1454>
10007c98:	00840074 	movhi	r2,4097
10007c9c:	10be0b04 	addi	r2,r2,-2004
10007ca0:	d8802615 	stw	r2,152(sp)
10007ca4:	a080080c 	andi	r2,r20,32
10007ca8:	1000aa26 	beq	r2,zero,10007f54 <___vfiprintf_internal_r+0xa08>
10007cac:	da802217 	ldw	r10,136(sp)
10007cb0:	54800017 	ldw	r18,0(r10)
10007cb4:	54c00117 	ldw	r19,4(r10)
10007cb8:	52800204 	addi	r10,r10,8
10007cbc:	da802215 	stw	r10,136(sp)
10007cc0:	a080004c 	andi	r2,r20,1
10007cc4:	1001d226 	beq	r2,zero,10008410 <___vfiprintf_internal_r+0xec4>
10007cc8:	94c4b03a 	or	r2,r18,r19
10007ccc:	1002351e 	bne	r2,zero,100085a4 <___vfiprintf_internal_r+0x1058>
10007cd0:	d8001d85 	stb	zero,118(sp)
10007cd4:	48022216 	blt	r9,zero,10008560 <___vfiprintf_internal_r+0x1014>
10007cd8:	00bfdfc4 	movi	r2,-129
10007cdc:	a0a8703a 	and	r20,r20,r2
10007ce0:	003f1506 	br	10007938 <__alt_data_end+0xf8007938>
10007ce4:	da802217 	ldw	r10,136(sp)
10007ce8:	04800044 	movi	r18,1
10007cec:	d8001d85 	stb	zero,118(sp)
10007cf0:	50800017 	ldw	r2,0(r10)
10007cf4:	52800104 	addi	r10,r10,4
10007cf8:	da802215 	stw	r10,136(sp)
10007cfc:	d8801005 	stb	r2,64(sp)
10007d00:	9027883a 	mov	r19,r18
10007d04:	dd401004 	addi	r21,sp,64
10007d08:	0013883a 	mov	r9,zero
10007d0c:	003f1706 	br	1000796c <__alt_data_end+0xf800796c>
10007d10:	21003fcc 	andi	r4,r4,255
10007d14:	2003201e 	bne	r4,zero,10008998 <___vfiprintf_internal_r+0x144c>
10007d18:	a080080c 	andi	r2,r20,32
10007d1c:	10004b26 	beq	r2,zero,10007e4c <___vfiprintf_internal_r+0x900>
10007d20:	da802217 	ldw	r10,136(sp)
10007d24:	50800117 	ldw	r2,4(r10)
10007d28:	54800017 	ldw	r18,0(r10)
10007d2c:	52800204 	addi	r10,r10,8
10007d30:	da802215 	stw	r10,136(sp)
10007d34:	1027883a 	mov	r19,r2
10007d38:	10022c16 	blt	r2,zero,100085ec <___vfiprintf_internal_r+0x10a0>
10007d3c:	df001d83 	ldbu	fp,118(sp)
10007d40:	48007216 	blt	r9,zero,10007f0c <___vfiprintf_internal_r+0x9c0>
10007d44:	00ffdfc4 	movi	r3,-129
10007d48:	94c4b03a 	or	r2,r18,r19
10007d4c:	a0e8703a 	and	r20,r20,r3
10007d50:	1000cc26 	beq	r2,zero,10008084 <___vfiprintf_internal_r+0xb38>
10007d54:	98021026 	beq	r19,zero,10008598 <___vfiprintf_internal_r+0x104c>
10007d58:	dc402415 	stw	r17,144(sp)
10007d5c:	dc002515 	stw	r16,148(sp)
10007d60:	9823883a 	mov	r17,r19
10007d64:	9021883a 	mov	r16,r18
10007d68:	dd401a04 	addi	r21,sp,104
10007d6c:	4825883a 	mov	r18,r9
10007d70:	4027883a 	mov	r19,r8
10007d74:	8009883a 	mov	r4,r16
10007d78:	880b883a 	mov	r5,r17
10007d7c:	01800284 	movi	r6,10
10007d80:	000f883a 	mov	r7,zero
10007d84:	000a4a80 	call	1000a4a8 <__umoddi3>
10007d88:	10800c04 	addi	r2,r2,48
10007d8c:	ad7fffc4 	addi	r21,r21,-1
10007d90:	8009883a 	mov	r4,r16
10007d94:	880b883a 	mov	r5,r17
10007d98:	a8800005 	stb	r2,0(r21)
10007d9c:	01800284 	movi	r6,10
10007da0:	000f883a 	mov	r7,zero
10007da4:	0009f300 	call	10009f30 <__udivdi3>
10007da8:	1021883a 	mov	r16,r2
10007dac:	10c4b03a 	or	r2,r2,r3
10007db0:	1823883a 	mov	r17,r3
10007db4:	103fef1e 	bne	r2,zero,10007d74 <__alt_data_end+0xf8007d74>
10007db8:	dc402417 	ldw	r17,144(sp)
10007dbc:	dc002517 	ldw	r16,148(sp)
10007dc0:	9013883a 	mov	r9,r18
10007dc4:	9811883a 	mov	r8,r19
10007dc8:	da801e17 	ldw	r10,120(sp)
10007dcc:	5567c83a 	sub	r19,r10,r21
10007dd0:	003ede06 	br	1000794c <__alt_data_end+0xf800794c>
10007dd4:	38803fcc 	andi	r2,r7,255
10007dd8:	1080201c 	xori	r2,r2,128
10007ddc:	10bfe004 	addi	r2,r2,-128
10007de0:	1002371e 	bne	r2,zero,100086c0 <___vfiprintf_internal_r+0x1174>
10007de4:	01000044 	movi	r4,1
10007de8:	01c00804 	movi	r7,32
10007dec:	80c00007 	ldb	r3,0(r16)
10007df0:	003e3506 	br	100076c8 <__alt_data_end+0xf80076c8>
10007df4:	a5000054 	ori	r20,r20,1
10007df8:	80c00007 	ldb	r3,0(r16)
10007dfc:	003e3206 	br	100076c8 <__alt_data_end+0xf80076c8>
10007e00:	a5002014 	ori	r20,r20,128
10007e04:	80c00007 	ldb	r3,0(r16)
10007e08:	003e2f06 	br	100076c8 <__alt_data_end+0xf80076c8>
10007e0c:	8015883a 	mov	r10,r16
10007e10:	0023883a 	mov	r17,zero
10007e14:	18bff404 	addi	r2,r3,-48
10007e18:	50c00007 	ldb	r3,0(r10)
10007e1c:	8c4002a4 	muli	r17,r17,10
10007e20:	84000044 	addi	r16,r16,1
10007e24:	8015883a 	mov	r10,r16
10007e28:	1463883a 	add	r17,r2,r17
10007e2c:	18bff404 	addi	r2,r3,-48
10007e30:	30bff92e 	bgeu	r6,r2,10007e18 <__alt_data_end+0xf8007e18>
10007e34:	003e2506 	br	100076cc <__alt_data_end+0xf80076cc>
10007e38:	21003fcc 	andi	r4,r4,255
10007e3c:	2002d41e 	bne	r4,zero,10008990 <___vfiprintf_internal_r+0x1444>
10007e40:	a5000414 	ori	r20,r20,16
10007e44:	a080080c 	andi	r2,r20,32
10007e48:	103fb51e 	bne	r2,zero,10007d20 <__alt_data_end+0xf8007d20>
10007e4c:	a080040c 	andi	r2,r20,16
10007e50:	1001f826 	beq	r2,zero,10008634 <___vfiprintf_internal_r+0x10e8>
10007e54:	da802217 	ldw	r10,136(sp)
10007e58:	54800017 	ldw	r18,0(r10)
10007e5c:	52800104 	addi	r10,r10,4
10007e60:	da802215 	stw	r10,136(sp)
10007e64:	9027d7fa 	srai	r19,r18,31
10007e68:	9805883a 	mov	r2,r19
10007e6c:	003fb206 	br	10007d38 <__alt_data_end+0xf8007d38>
10007e70:	21003fcc 	andi	r4,r4,255
10007e74:	2002c41e 	bne	r4,zero,10008988 <___vfiprintf_internal_r+0x143c>
10007e78:	a5000414 	ori	r20,r20,16
10007e7c:	a080080c 	andi	r2,r20,32
10007e80:	103f5f1e 	bne	r2,zero,10007c00 <__alt_data_end+0xf8007c00>
10007e84:	a080040c 	andi	r2,r20,16
10007e88:	10020f26 	beq	r2,zero,100086c8 <___vfiprintf_internal_r+0x117c>
10007e8c:	da802217 	ldw	r10,136(sp)
10007e90:	d8001d85 	stb	zero,118(sp)
10007e94:	0027883a 	mov	r19,zero
10007e98:	50800104 	addi	r2,r10,4
10007e9c:	54800017 	ldw	r18,0(r10)
10007ea0:	48021116 	blt	r9,zero,100086e8 <___vfiprintf_internal_r+0x119c>
10007ea4:	00ffdfc4 	movi	r3,-129
10007ea8:	d8802215 	stw	r2,136(sp)
10007eac:	a0e8703a 	and	r20,r20,r3
10007eb0:	903f5e1e 	bne	r18,zero,10007c2c <__alt_data_end+0xf8007c2c>
10007eb4:	0039883a 	mov	fp,zero
10007eb8:	4802a626 	beq	r9,zero,10008954 <___vfiprintf_internal_r+0x1408>
10007ebc:	0025883a 	mov	r18,zero
10007ec0:	0027883a 	mov	r19,zero
10007ec4:	003f5a06 	br	10007c30 <__alt_data_end+0xf8007c30>
10007ec8:	21003fcc 	andi	r4,r4,255
10007ecc:	20029f1e 	bne	r4,zero,1000894c <___vfiprintf_internal_r+0x1400>
10007ed0:	a5000414 	ori	r20,r20,16
10007ed4:	a080080c 	andi	r2,r20,32
10007ed8:	10005e1e 	bne	r2,zero,10008054 <___vfiprintf_internal_r+0xb08>
10007edc:	a080040c 	andi	r2,r20,16
10007ee0:	1001a21e 	bne	r2,zero,1000856c <___vfiprintf_internal_r+0x1020>
10007ee4:	a080100c 	andi	r2,r20,64
10007ee8:	d8001d85 	stb	zero,118(sp)
10007eec:	da802217 	ldw	r10,136(sp)
10007ef0:	1002231e 	bne	r2,zero,10008780 <___vfiprintf_internal_r+0x1234>
10007ef4:	50800104 	addi	r2,r10,4
10007ef8:	54800017 	ldw	r18,0(r10)
10007efc:	0027883a 	mov	r19,zero
10007f00:	4801a00e 	bge	r9,zero,10008584 <___vfiprintf_internal_r+0x1038>
10007f04:	d8802215 	stw	r2,136(sp)
10007f08:	0039883a 	mov	fp,zero
10007f0c:	94c4b03a 	or	r2,r18,r19
10007f10:	103f901e 	bne	r2,zero,10007d54 <__alt_data_end+0xf8007d54>
10007f14:	00800044 	movi	r2,1
10007f18:	10803fcc 	andi	r2,r2,255
10007f1c:	00c00044 	movi	r3,1
10007f20:	10c05926 	beq	r2,r3,10008088 <___vfiprintf_internal_r+0xb3c>
10007f24:	00c00084 	movi	r3,2
10007f28:	10ffe41e 	bne	r2,r3,10007ebc <__alt_data_end+0xf8007ebc>
10007f2c:	0025883a 	mov	r18,zero
10007f30:	0027883a 	mov	r19,zero
10007f34:	00013d06 	br	1000842c <___vfiprintf_internal_r+0xee0>
10007f38:	21003fcc 	andi	r4,r4,255
10007f3c:	2002811e 	bne	r4,zero,10008944 <___vfiprintf_internal_r+0x13f8>
10007f40:	00840074 	movhi	r2,4097
10007f44:	10be0604 	addi	r2,r2,-2024
10007f48:	d8802615 	stw	r2,152(sp)
10007f4c:	a080080c 	andi	r2,r20,32
10007f50:	103f561e 	bne	r2,zero,10007cac <__alt_data_end+0xf8007cac>
10007f54:	a080040c 	andi	r2,r20,16
10007f58:	1001d126 	beq	r2,zero,100086a0 <___vfiprintf_internal_r+0x1154>
10007f5c:	da802217 	ldw	r10,136(sp)
10007f60:	0027883a 	mov	r19,zero
10007f64:	54800017 	ldw	r18,0(r10)
10007f68:	52800104 	addi	r10,r10,4
10007f6c:	da802215 	stw	r10,136(sp)
10007f70:	003f5306 	br	10007cc0 <__alt_data_end+0xf8007cc0>
10007f74:	da802217 	ldw	r10,136(sp)
10007f78:	d8001d85 	stb	zero,118(sp)
10007f7c:	55400017 	ldw	r21,0(r10)
10007f80:	50c00104 	addi	r3,r10,4
10007f84:	a8024226 	beq	r21,zero,10008890 <___vfiprintf_internal_r+0x1344>
10007f88:	48021816 	blt	r9,zero,100087ec <___vfiprintf_internal_r+0x12a0>
10007f8c:	480d883a 	mov	r6,r9
10007f90:	000b883a 	mov	r5,zero
10007f94:	a809883a 	mov	r4,r21
10007f98:	d8c02a15 	stw	r3,168(sp)
10007f9c:	da002b15 	stw	r8,172(sp)
10007fa0:	da402c15 	stw	r9,176(sp)
10007fa4:	0005d700 	call	10005d70 <memchr>
10007fa8:	d8c02a17 	ldw	r3,168(sp)
10007fac:	da002b17 	ldw	r8,172(sp)
10007fb0:	da402c17 	ldw	r9,176(sp)
10007fb4:	10024826 	beq	r2,zero,100088d8 <___vfiprintf_internal_r+0x138c>
10007fb8:	1567c83a 	sub	r19,r2,r21
10007fbc:	df001d83 	ldbu	fp,118(sp)
10007fc0:	d8c02215 	stw	r3,136(sp)
10007fc4:	0013883a 	mov	r9,zero
10007fc8:	003e6006 	br	1000794c <__alt_data_end+0xf800794c>
10007fcc:	21003fcc 	andi	r4,r4,255
10007fd0:	203fc026 	beq	r4,zero,10007ed4 <__alt_data_end+0xf8007ed4>
10007fd4:	d9c01d85 	stb	r7,118(sp)
10007fd8:	003fbe06 	br	10007ed4 <__alt_data_end+0xf8007ed4>
10007fdc:	da802217 	ldw	r10,136(sp)
10007fe0:	54400017 	ldw	r17,0(r10)
10007fe4:	50800104 	addi	r2,r10,4
10007fe8:	883e3b16 	blt	r17,zero,100078d8 <__alt_data_end+0xf80078d8>
10007fec:	d8802215 	stw	r2,136(sp)
10007ff0:	80c00007 	ldb	r3,0(r16)
10007ff4:	003db406 	br	100076c8 <__alt_data_end+0xf80076c8>
10007ff8:	01000044 	movi	r4,1
10007ffc:	01c00ac4 	movi	r7,43
10008000:	80c00007 	ldb	r3,0(r16)
10008004:	003db006 	br	100076c8 <__alt_data_end+0xf80076c8>
10008008:	80c00007 	ldb	r3,0(r16)
1000800c:	82800044 	addi	r10,r16,1
10008010:	1b423c26 	beq	r3,r13,10008904 <___vfiprintf_internal_r+0x13b8>
10008014:	18bff404 	addi	r2,r3,-48
10008018:	0013883a 	mov	r9,zero
1000801c:	30822b36 	bltu	r6,r2,100088cc <___vfiprintf_internal_r+0x1380>
10008020:	50c00007 	ldb	r3,0(r10)
10008024:	4a4002a4 	muli	r9,r9,10
10008028:	54000044 	addi	r16,r10,1
1000802c:	8015883a 	mov	r10,r16
10008030:	4893883a 	add	r9,r9,r2
10008034:	18bff404 	addi	r2,r3,-48
10008038:	30bff92e 	bgeu	r6,r2,10008020 <__alt_data_end+0xf8008020>
1000803c:	483da30e 	bge	r9,zero,100076cc <__alt_data_end+0xf80076cc>
10008040:	027fffc4 	movi	r9,-1
10008044:	003da106 	br	100076cc <__alt_data_end+0xf80076cc>
10008048:	a5001014 	ori	r20,r20,64
1000804c:	80c00007 	ldb	r3,0(r16)
10008050:	003d9d06 	br	100076c8 <__alt_data_end+0xf80076c8>
10008054:	da802217 	ldw	r10,136(sp)
10008058:	d8001d85 	stb	zero,118(sp)
1000805c:	50c00204 	addi	r3,r10,8
10008060:	54800017 	ldw	r18,0(r10)
10008064:	54c00117 	ldw	r19,4(r10)
10008068:	4801ca16 	blt	r9,zero,10008794 <___vfiprintf_internal_r+0x1248>
1000806c:	013fdfc4 	movi	r4,-129
10008070:	94c4b03a 	or	r2,r18,r19
10008074:	d8c02215 	stw	r3,136(sp)
10008078:	a128703a 	and	r20,r20,r4
1000807c:	0039883a 	mov	fp,zero
10008080:	103f341e 	bne	r2,zero,10007d54 <__alt_data_end+0xf8007d54>
10008084:	483e2e26 	beq	r9,zero,10007940 <__alt_data_end+0xf8007940>
10008088:	0025883a 	mov	r18,zero
1000808c:	94800c04 	addi	r18,r18,48
10008090:	dc8019c5 	stb	r18,103(sp)
10008094:	dcc02717 	ldw	r19,156(sp)
10008098:	dd4019c4 	addi	r21,sp,103
1000809c:	003e2b06 	br	1000794c <__alt_data_end+0xf800794c>
100080a0:	21003fcc 	andi	r4,r4,255
100080a4:	2002361e 	bne	r4,zero,10008980 <___vfiprintf_internal_r+0x1434>
100080a8:	1801c126 	beq	r3,zero,100087b0 <___vfiprintf_internal_r+0x1264>
100080ac:	04800044 	movi	r18,1
100080b0:	d8c01005 	stb	r3,64(sp)
100080b4:	d8001d85 	stb	zero,118(sp)
100080b8:	9027883a 	mov	r19,r18
100080bc:	dd401004 	addi	r21,sp,64
100080c0:	003f1106 	br	10007d08 <__alt_data_end+0xf8007d08>
100080c4:	d9402117 	ldw	r5,132(sp)
100080c8:	d9002017 	ldw	r4,128(sp)
100080cc:	d9801a04 	addi	r6,sp,104
100080d0:	d9c02b15 	stw	r7,172(sp)
100080d4:	dbc02a15 	stw	r15,168(sp)
100080d8:	00074380 	call	10007438 <__sprint_r.part.0>
100080dc:	d9c02b17 	ldw	r7,172(sp)
100080e0:	dbc02a17 	ldw	r15,168(sp)
100080e4:	10006d1e 	bne	r2,zero,1000829c <___vfiprintf_internal_r+0xd50>
100080e8:	d9801b17 	ldw	r6,108(sp)
100080ec:	d8801c17 	ldw	r2,112(sp)
100080f0:	d811883a 	mov	r8,sp
100080f4:	31400044 	addi	r5,r6,1
100080f8:	003e3306 	br	100079c8 <__alt_data_end+0xf80079c8>
100080fc:	d9401b17 	ldw	r5,108(sp)
10008100:	d8801c17 	ldw	r2,112(sp)
10008104:	29000044 	addi	r4,r5,1
10008108:	d8c01d87 	ldb	r3,118(sp)
1000810c:	183e4d26 	beq	r3,zero,10007a44 <__alt_data_end+0xf8007a44>
10008110:	00c00044 	movi	r3,1
10008114:	d9401d84 	addi	r5,sp,118
10008118:	10c5883a 	add	r2,r2,r3
1000811c:	41400015 	stw	r5,0(r8)
10008120:	40c00115 	stw	r3,4(r8)
10008124:	d8801c15 	stw	r2,112(sp)
10008128:	d9001b15 	stw	r4,108(sp)
1000812c:	014001c4 	movi	r5,7
10008130:	2900a90e 	bge	r5,r4,100083d8 <___vfiprintf_internal_r+0xe8c>
10008134:	1000da1e 	bne	r2,zero,100084a0 <___vfiprintf_internal_r+0xf54>
10008138:	7000ab1e 	bne	r14,zero,100083e8 <___vfiprintf_internal_r+0xe9c>
1000813c:	000b883a 	mov	r5,zero
10008140:	1809883a 	mov	r4,r3
10008144:	d811883a 	mov	r8,sp
10008148:	00c02004 	movi	r3,128
1000814c:	e0fe4d26 	beq	fp,r3,10007a84 <__alt_data_end+0xf8007a84>
10008150:	4cf9c83a 	sub	fp,r9,r19
10008154:	073e7b0e 	bge	zero,fp,10007b44 <__alt_data_end+0xf8007b44>
10008158:	01c00404 	movi	r7,16
1000815c:	3f01900e 	bge	r7,fp,100087a0 <___vfiprintf_internal_r+0x1254>
10008160:	00c40074 	movhi	r3,4097
10008164:	18fe6c04 	addi	r3,r3,-1616
10008168:	d8c02415 	stw	r3,144(sp)
1000816c:	034001c4 	movi	r13,7
10008170:	00000506 	br	10008188 <___vfiprintf_internal_r+0xc3c>
10008174:	29000084 	addi	r4,r5,2
10008178:	42000204 	addi	r8,r8,8
1000817c:	180b883a 	mov	r5,r3
10008180:	e73ffc04 	addi	fp,fp,-16
10008184:	3f000d0e 	bge	r7,fp,100081bc <___vfiprintf_internal_r+0xc70>
10008188:	10800404 	addi	r2,r2,16
1000818c:	28c00044 	addi	r3,r5,1
10008190:	45c00015 	stw	r23,0(r8)
10008194:	41c00115 	stw	r7,4(r8)
10008198:	d8801c15 	stw	r2,112(sp)
1000819c:	d8c01b15 	stw	r3,108(sp)
100081a0:	68fff40e 	bge	r13,r3,10008174 <__alt_data_end+0xf8008174>
100081a4:	1000101e 	bne	r2,zero,100081e8 <___vfiprintf_internal_r+0xc9c>
100081a8:	e73ffc04 	addi	fp,fp,-16
100081ac:	01000044 	movi	r4,1
100081b0:	000b883a 	mov	r5,zero
100081b4:	d811883a 	mov	r8,sp
100081b8:	3f3ff316 	blt	r7,fp,10008188 <__alt_data_end+0xf8008188>
100081bc:	da802417 	ldw	r10,144(sp)
100081c0:	1705883a 	add	r2,r2,fp
100081c4:	47000115 	stw	fp,4(r8)
100081c8:	42800015 	stw	r10,0(r8)
100081cc:	d8801c15 	stw	r2,112(sp)
100081d0:	d9001b15 	stw	r4,108(sp)
100081d4:	00c001c4 	movi	r3,7
100081d8:	19003616 	blt	r3,r4,100082b4 <___vfiprintf_internal_r+0xd68>
100081dc:	42000204 	addi	r8,r8,8
100081e0:	21000044 	addi	r4,r4,1
100081e4:	003e5706 	br	10007b44 <__alt_data_end+0xf8007b44>
100081e8:	d9402117 	ldw	r5,132(sp)
100081ec:	d9002017 	ldw	r4,128(sp)
100081f0:	d9801a04 	addi	r6,sp,104
100081f4:	d9c02b15 	stw	r7,172(sp)
100081f8:	db402a15 	stw	r13,168(sp)
100081fc:	00074380 	call	10007438 <__sprint_r.part.0>
10008200:	d9c02b17 	ldw	r7,172(sp)
10008204:	db402a17 	ldw	r13,168(sp)
10008208:	1000241e 	bne	r2,zero,1000829c <___vfiprintf_internal_r+0xd50>
1000820c:	d9401b17 	ldw	r5,108(sp)
10008210:	d8801c17 	ldw	r2,112(sp)
10008214:	d811883a 	mov	r8,sp
10008218:	29000044 	addi	r4,r5,1
1000821c:	003fd806 	br	10008180 <__alt_data_end+0xf8008180>
10008220:	d9401b17 	ldw	r5,108(sp)
10008224:	00c40074 	movhi	r3,4097
10008228:	18fe7004 	addi	r3,r3,-1600
1000822c:	d8c02415 	stw	r3,144(sp)
10008230:	29400044 	addi	r5,r5,1
10008234:	d8c02417 	ldw	r3,144(sp)
10008238:	14c5883a 	add	r2,r2,r19
1000823c:	44c00115 	stw	r19,4(r8)
10008240:	40c00015 	stw	r3,0(r8)
10008244:	d8801c15 	stw	r2,112(sp)
10008248:	d9401b15 	stw	r5,108(sp)
1000824c:	00c001c4 	movi	r3,7
10008250:	1940070e 	bge	r3,r5,10008270 <___vfiprintf_internal_r+0xd24>
10008254:	103e4826 	beq	r2,zero,10007b78 <__alt_data_end+0xf8007b78>
10008258:	d9402117 	ldw	r5,132(sp)
1000825c:	d9002017 	ldw	r4,128(sp)
10008260:	d9801a04 	addi	r6,sp,104
10008264:	00074380 	call	10007438 <__sprint_r.part.0>
10008268:	10000c1e 	bne	r2,zero,1000829c <___vfiprintf_internal_r+0xd50>
1000826c:	d8801c17 	ldw	r2,112(sp)
10008270:	8c80010e 	bge	r17,r18,10008278 <___vfiprintf_internal_r+0xd2c>
10008274:	9023883a 	mov	r17,r18
10008278:	da802317 	ldw	r10,140(sp)
1000827c:	5455883a 	add	r10,r10,r17
10008280:	da802315 	stw	r10,140(sp)
10008284:	103e4126 	beq	r2,zero,10007b8c <__alt_data_end+0xf8007b8c>
10008288:	d9402117 	ldw	r5,132(sp)
1000828c:	d9002017 	ldw	r4,128(sp)
10008290:	d9801a04 	addi	r6,sp,104
10008294:	00074380 	call	10007438 <__sprint_r.part.0>
10008298:	103e3c26 	beq	r2,zero,10007b8c <__alt_data_end+0xf8007b8c>
1000829c:	dd002117 	ldw	r20,132(sp)
100082a0:	a080030b 	ldhu	r2,12(r20)
100082a4:	1080100c 	andi	r2,r2,64
100082a8:	1001231e 	bne	r2,zero,10008738 <___vfiprintf_internal_r+0x11ec>
100082ac:	d8802317 	ldw	r2,140(sp)
100082b0:	003d7b06 	br	100078a0 <__alt_data_end+0xf80078a0>
100082b4:	1000991e 	bne	r2,zero,1000851c <___vfiprintf_internal_r+0xfd0>
100082b8:	00c00044 	movi	r3,1
100082bc:	9805883a 	mov	r2,r19
100082c0:	dd400015 	stw	r21,0(sp)
100082c4:	dcc00115 	stw	r19,4(sp)
100082c8:	dcc01c15 	stw	r19,112(sp)
100082cc:	d8c01b15 	stw	r3,108(sp)
100082d0:	d811883a 	mov	r8,sp
100082d4:	42000204 	addi	r8,r8,8
100082d8:	a2c0010c 	andi	r11,r20,4
100082dc:	583fe426 	beq	r11,zero,10008270 <__alt_data_end+0xf8008270>
100082e0:	8ca7c83a 	sub	r19,r17,r18
100082e4:	04ffe20e 	bge	zero,r19,10008270 <__alt_data_end+0xf8008270>
100082e8:	01c00404 	movi	r7,16
100082ec:	3cffcc0e 	bge	r7,r19,10008220 <__alt_data_end+0xf8008220>
100082f0:	02840074 	movhi	r10,4097
100082f4:	52be7004 	addi	r10,r10,-1600
100082f8:	d9001b17 	ldw	r4,108(sp)
100082fc:	da802415 	stw	r10,144(sp)
10008300:	382b883a 	mov	r21,r7
10008304:	050001c4 	movi	r20,7
10008308:	df002017 	ldw	fp,128(sp)
1000830c:	00000506 	br	10008324 <___vfiprintf_internal_r+0xdd8>
10008310:	21400084 	addi	r5,r4,2
10008314:	42000204 	addi	r8,r8,8
10008318:	1809883a 	mov	r4,r3
1000831c:	9cfffc04 	addi	r19,r19,-16
10008320:	acffc40e 	bge	r21,r19,10008234 <__alt_data_end+0xf8008234>
10008324:	10800404 	addi	r2,r2,16
10008328:	20c00044 	addi	r3,r4,1
1000832c:	45800015 	stw	r22,0(r8)
10008330:	45400115 	stw	r21,4(r8)
10008334:	d8801c15 	stw	r2,112(sp)
10008338:	d8c01b15 	stw	r3,108(sp)
1000833c:	a0fff40e 	bge	r20,r3,10008310 <__alt_data_end+0xf8008310>
10008340:	1000041e 	bne	r2,zero,10008354 <___vfiprintf_internal_r+0xe08>
10008344:	01400044 	movi	r5,1
10008348:	0009883a 	mov	r4,zero
1000834c:	d811883a 	mov	r8,sp
10008350:	003ff206 	br	1000831c <__alt_data_end+0xf800831c>
10008354:	d9402117 	ldw	r5,132(sp)
10008358:	d9801a04 	addi	r6,sp,104
1000835c:	e009883a 	mov	r4,fp
10008360:	00074380 	call	10007438 <__sprint_r.part.0>
10008364:	103fcd1e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
10008368:	d9001b17 	ldw	r4,108(sp)
1000836c:	d8801c17 	ldw	r2,112(sp)
10008370:	d811883a 	mov	r8,sp
10008374:	21400044 	addi	r5,r4,1
10008378:	003fe806 	br	1000831c <__alt_data_end+0xf800831c>
1000837c:	d9402117 	ldw	r5,132(sp)
10008380:	d9002017 	ldw	r4,128(sp)
10008384:	d9801a04 	addi	r6,sp,104
10008388:	d9c02b15 	stw	r7,172(sp)
1000838c:	db402a15 	stw	r13,168(sp)
10008390:	00074380 	call	10007438 <__sprint_r.part.0>
10008394:	d9c02b17 	ldw	r7,172(sp)
10008398:	db402a17 	ldw	r13,168(sp)
1000839c:	103fbf1e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
100083a0:	d9401b17 	ldw	r5,108(sp)
100083a4:	d8801c17 	ldw	r2,112(sp)
100083a8:	d811883a 	mov	r8,sp
100083ac:	29800044 	addi	r6,r5,1
100083b0:	003dc406 	br	10007ac4 <__alt_data_end+0xf8007ac4>
100083b4:	1000d21e 	bne	r2,zero,10008700 <___vfiprintf_internal_r+0x11b4>
100083b8:	d8c01d87 	ldb	r3,118(sp)
100083bc:	18009526 	beq	r3,zero,10008614 <___vfiprintf_internal_r+0x10c8>
100083c0:	00800044 	movi	r2,1
100083c4:	d8c01d84 	addi	r3,sp,118
100083c8:	1009883a 	mov	r4,r2
100083cc:	d8c00015 	stw	r3,0(sp)
100083d0:	d8800115 	stw	r2,4(sp)
100083d4:	d811883a 	mov	r8,sp
100083d8:	200b883a 	mov	r5,r4
100083dc:	42000204 	addi	r8,r8,8
100083e0:	21000044 	addi	r4,r4,1
100083e4:	003d9706 	br	10007a44 <__alt_data_end+0xf8007a44>
100083e8:	d9001d04 	addi	r4,sp,116
100083ec:	00800084 	movi	r2,2
100083f0:	d9000015 	stw	r4,0(sp)
100083f4:	d8800115 	stw	r2,4(sp)
100083f8:	1809883a 	mov	r4,r3
100083fc:	d811883a 	mov	r8,sp
10008400:	200b883a 	mov	r5,r4
10008404:	42000204 	addi	r8,r8,8
10008408:	21000044 	addi	r4,r4,1
1000840c:	003f4e06 	br	10008148 <__alt_data_end+0xf8008148>
10008410:	d8001d85 	stb	zero,118(sp)
10008414:	48005016 	blt	r9,zero,10008558 <___vfiprintf_internal_r+0x100c>
10008418:	00ffdfc4 	movi	r3,-129
1000841c:	94c4b03a 	or	r2,r18,r19
10008420:	a0e8703a 	and	r20,r20,r3
10008424:	103d4426 	beq	r2,zero,10007938 <__alt_data_end+0xf8007938>
10008428:	0039883a 	mov	fp,zero
1000842c:	d9002617 	ldw	r4,152(sp)
10008430:	dd401a04 	addi	r21,sp,104
10008434:	908003cc 	andi	r2,r18,15
10008438:	9806973a 	slli	r3,r19,28
1000843c:	2085883a 	add	r2,r4,r2
10008440:	9024d13a 	srli	r18,r18,4
10008444:	10800003 	ldbu	r2,0(r2)
10008448:	9826d13a 	srli	r19,r19,4
1000844c:	ad7fffc4 	addi	r21,r21,-1
10008450:	1ca4b03a 	or	r18,r3,r18
10008454:	a8800005 	stb	r2,0(r21)
10008458:	94c4b03a 	or	r2,r18,r19
1000845c:	103ff51e 	bne	r2,zero,10008434 <__alt_data_end+0xf8008434>
10008460:	003e5906 	br	10007dc8 <__alt_data_end+0xf8007dc8>
10008464:	d9402117 	ldw	r5,132(sp)
10008468:	d9002017 	ldw	r4,128(sp)
1000846c:	d9801a04 	addi	r6,sp,104
10008470:	00074380 	call	10007438 <__sprint_r.part.0>
10008474:	103f891e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
10008478:	d8801c17 	ldw	r2,112(sp)
1000847c:	d811883a 	mov	r8,sp
10008480:	003f9506 	br	100082d8 <__alt_data_end+0xf80082d8>
10008484:	d9402117 	ldw	r5,132(sp)
10008488:	d9002017 	ldw	r4,128(sp)
1000848c:	d9801a04 	addi	r6,sp,104
10008490:	00074380 	call	10007438 <__sprint_r.part.0>
10008494:	103f811e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
10008498:	d811883a 	mov	r8,sp
1000849c:	003ced06 	br	10007854 <__alt_data_end+0xf8007854>
100084a0:	d9402117 	ldw	r5,132(sp)
100084a4:	d9002017 	ldw	r4,128(sp)
100084a8:	d9801a04 	addi	r6,sp,104
100084ac:	da402c15 	stw	r9,176(sp)
100084b0:	db802a15 	stw	r14,168(sp)
100084b4:	00074380 	call	10007438 <__sprint_r.part.0>
100084b8:	da402c17 	ldw	r9,176(sp)
100084bc:	db802a17 	ldw	r14,168(sp)
100084c0:	103f761e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
100084c4:	d9401b17 	ldw	r5,108(sp)
100084c8:	d8801c17 	ldw	r2,112(sp)
100084cc:	d811883a 	mov	r8,sp
100084d0:	29000044 	addi	r4,r5,1
100084d4:	003d5b06 	br	10007a44 <__alt_data_end+0xf8007a44>
100084d8:	d9402117 	ldw	r5,132(sp)
100084dc:	d9002017 	ldw	r4,128(sp)
100084e0:	d9801a04 	addi	r6,sp,104
100084e4:	da402c15 	stw	r9,176(sp)
100084e8:	00074380 	call	10007438 <__sprint_r.part.0>
100084ec:	da402c17 	ldw	r9,176(sp)
100084f0:	103f6a1e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
100084f4:	d9401b17 	ldw	r5,108(sp)
100084f8:	d8801c17 	ldw	r2,112(sp)
100084fc:	d811883a 	mov	r8,sp
10008500:	29000044 	addi	r4,r5,1
10008504:	003f1006 	br	10008148 <__alt_data_end+0xf8008148>
10008508:	1000c31e 	bne	r2,zero,10008818 <___vfiprintf_internal_r+0x12cc>
1000850c:	01000044 	movi	r4,1
10008510:	000b883a 	mov	r5,zero
10008514:	d811883a 	mov	r8,sp
10008518:	003f0d06 	br	10008150 <__alt_data_end+0xf8008150>
1000851c:	d9402117 	ldw	r5,132(sp)
10008520:	d9002017 	ldw	r4,128(sp)
10008524:	d9801a04 	addi	r6,sp,104
10008528:	00074380 	call	10007438 <__sprint_r.part.0>
1000852c:	103f5b1e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
10008530:	d9001b17 	ldw	r4,108(sp)
10008534:	d8801c17 	ldw	r2,112(sp)
10008538:	d811883a 	mov	r8,sp
1000853c:	21000044 	addi	r4,r4,1
10008540:	003d8006 	br	10007b44 <__alt_data_end+0xf8007b44>
10008544:	01040074 	movhi	r4,4097
10008548:	213e0b04 	addi	r4,r4,-2004
1000854c:	d9002615 	stw	r4,152(sp)
10008550:	d8c02215 	stw	r3,136(sp)
10008554:	1029883a 	mov	r20,r2
10008558:	94c4b03a 	or	r2,r18,r19
1000855c:	103fb21e 	bne	r2,zero,10008428 <__alt_data_end+0xf8008428>
10008560:	0039883a 	mov	fp,zero
10008564:	00800084 	movi	r2,2
10008568:	003e6b06 	br	10007f18 <__alt_data_end+0xf8007f18>
1000856c:	da802217 	ldw	r10,136(sp)
10008570:	d8001d85 	stb	zero,118(sp)
10008574:	0027883a 	mov	r19,zero
10008578:	50800104 	addi	r2,r10,4
1000857c:	54800017 	ldw	r18,0(r10)
10008580:	483e6016 	blt	r9,zero,10007f04 <__alt_data_end+0xf8007f04>
10008584:	00ffdfc4 	movi	r3,-129
10008588:	d8802215 	stw	r2,136(sp)
1000858c:	a0e8703a 	and	r20,r20,r3
10008590:	0039883a 	mov	fp,zero
10008594:	903ebb26 	beq	r18,zero,10008084 <__alt_data_end+0xf8008084>
10008598:	00800244 	movi	r2,9
1000859c:	14bdee36 	bltu	r2,r18,10007d58 <__alt_data_end+0xf8007d58>
100085a0:	003eba06 	br	1000808c <__alt_data_end+0xf800808c>
100085a4:	00800c04 	movi	r2,48
100085a8:	d8c01d45 	stb	r3,117(sp)
100085ac:	d8801d05 	stb	r2,116(sp)
100085b0:	d8001d85 	stb	zero,118(sp)
100085b4:	a0c00094 	ori	r3,r20,2
100085b8:	4800a916 	blt	r9,zero,10008860 <___vfiprintf_internal_r+0x1314>
100085bc:	00bfdfc4 	movi	r2,-129
100085c0:	a096703a 	and	r11,r20,r2
100085c4:	5d000094 	ori	r20,r11,2
100085c8:	0039883a 	mov	fp,zero
100085cc:	003f9706 	br	1000842c <__alt_data_end+0xf800842c>
100085d0:	8025883a 	mov	r18,r16
100085d4:	003c2e06 	br	10007690 <__alt_data_end+0xf8007690>
100085d8:	00840074 	movhi	r2,4097
100085dc:	10be0b04 	addi	r2,r2,-2004
100085e0:	0039883a 	mov	fp,zero
100085e4:	d8802615 	stw	r2,152(sp)
100085e8:	003f9006 	br	1000842c <__alt_data_end+0xf800842c>
100085ec:	04a5c83a 	sub	r18,zero,r18
100085f0:	07000b44 	movi	fp,45
100085f4:	9004c03a 	cmpne	r2,r18,zero
100085f8:	04e7c83a 	sub	r19,zero,r19
100085fc:	df001d85 	stb	fp,118(sp)
10008600:	98a7c83a 	sub	r19,r19,r2
10008604:	48009f16 	blt	r9,zero,10008884 <___vfiprintf_internal_r+0x1338>
10008608:	00bfdfc4 	movi	r2,-129
1000860c:	a0a8703a 	and	r20,r20,r2
10008610:	003dd006 	br	10007d54 <__alt_data_end+0xf8007d54>
10008614:	70004c26 	beq	r14,zero,10008748 <___vfiprintf_internal_r+0x11fc>
10008618:	00800084 	movi	r2,2
1000861c:	d8c01d04 	addi	r3,sp,116
10008620:	d8c00015 	stw	r3,0(sp)
10008624:	d8800115 	stw	r2,4(sp)
10008628:	01000044 	movi	r4,1
1000862c:	d811883a 	mov	r8,sp
10008630:	003f7306 	br	10008400 <__alt_data_end+0xf8008400>
10008634:	a080100c 	andi	r2,r20,64
10008638:	da802217 	ldw	r10,136(sp)
1000863c:	103e0626 	beq	r2,zero,10007e58 <__alt_data_end+0xf8007e58>
10008640:	5480000f 	ldh	r18,0(r10)
10008644:	52800104 	addi	r10,r10,4
10008648:	da802215 	stw	r10,136(sp)
1000864c:	9027d7fa 	srai	r19,r18,31
10008650:	9805883a 	mov	r2,r19
10008654:	003db806 	br	10007d38 <__alt_data_end+0xf8007d38>
10008658:	a080040c 	andi	r2,r20,16
1000865c:	1000091e 	bne	r2,zero,10008684 <___vfiprintf_internal_r+0x1138>
10008660:	a2c0100c 	andi	r11,r20,64
10008664:	58000726 	beq	r11,zero,10008684 <___vfiprintf_internal_r+0x1138>
10008668:	da802217 	ldw	r10,136(sp)
1000866c:	50800017 	ldw	r2,0(r10)
10008670:	52800104 	addi	r10,r10,4
10008674:	da802215 	stw	r10,136(sp)
10008678:	da802317 	ldw	r10,140(sp)
1000867c:	1280000d 	sth	r10,0(r2)
10008680:	003be706 	br	10007620 <__alt_data_end+0xf8007620>
10008684:	da802217 	ldw	r10,136(sp)
10008688:	50800017 	ldw	r2,0(r10)
1000868c:	52800104 	addi	r10,r10,4
10008690:	da802215 	stw	r10,136(sp)
10008694:	da802317 	ldw	r10,140(sp)
10008698:	12800015 	stw	r10,0(r2)
1000869c:	003be006 	br	10007620 <__alt_data_end+0xf8007620>
100086a0:	a080100c 	andi	r2,r20,64
100086a4:	da802217 	ldw	r10,136(sp)
100086a8:	10003026 	beq	r2,zero,1000876c <___vfiprintf_internal_r+0x1220>
100086ac:	5480000b 	ldhu	r18,0(r10)
100086b0:	52800104 	addi	r10,r10,4
100086b4:	0027883a 	mov	r19,zero
100086b8:	da802215 	stw	r10,136(sp)
100086bc:	003d8006 	br	10007cc0 <__alt_data_end+0xf8007cc0>
100086c0:	80c00007 	ldb	r3,0(r16)
100086c4:	003c0006 	br	100076c8 <__alt_data_end+0xf80076c8>
100086c8:	a080100c 	andi	r2,r20,64
100086cc:	d8001d85 	stb	zero,118(sp)
100086d0:	da802217 	ldw	r10,136(sp)
100086d4:	1000201e 	bne	r2,zero,10008758 <___vfiprintf_internal_r+0x120c>
100086d8:	50800104 	addi	r2,r10,4
100086dc:	54800017 	ldw	r18,0(r10)
100086e0:	0027883a 	mov	r19,zero
100086e4:	483def0e 	bge	r9,zero,10007ea4 <__alt_data_end+0xf8007ea4>
100086e8:	94c6b03a 	or	r3,r18,r19
100086ec:	d8802215 	stw	r2,136(sp)
100086f0:	183d4e1e 	bne	r3,zero,10007c2c <__alt_data_end+0xf8007c2c>
100086f4:	0039883a 	mov	fp,zero
100086f8:	0005883a 	mov	r2,zero
100086fc:	003e0606 	br	10007f18 <__alt_data_end+0xf8007f18>
10008700:	d9402117 	ldw	r5,132(sp)
10008704:	d9002017 	ldw	r4,128(sp)
10008708:	d9801a04 	addi	r6,sp,104
1000870c:	da402c15 	stw	r9,176(sp)
10008710:	db802a15 	stw	r14,168(sp)
10008714:	00074380 	call	10007438 <__sprint_r.part.0>
10008718:	da402c17 	ldw	r9,176(sp)
1000871c:	db802a17 	ldw	r14,168(sp)
10008720:	103ede1e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
10008724:	d9401b17 	ldw	r5,108(sp)
10008728:	d8801c17 	ldw	r2,112(sp)
1000872c:	d811883a 	mov	r8,sp
10008730:	29000044 	addi	r4,r5,1
10008734:	003e7406 	br	10008108 <__alt_data_end+0xf8008108>
10008738:	00bfffc4 	movi	r2,-1
1000873c:	003c5806 	br	100078a0 <__alt_data_end+0xf80078a0>
10008740:	d811883a 	mov	r8,sp
10008744:	003ee806 	br	100082e8 <__alt_data_end+0xf80082e8>
10008748:	000b883a 	mov	r5,zero
1000874c:	01000044 	movi	r4,1
10008750:	d811883a 	mov	r8,sp
10008754:	003e7c06 	br	10008148 <__alt_data_end+0xf8008148>
10008758:	50800104 	addi	r2,r10,4
1000875c:	5480000b 	ldhu	r18,0(r10)
10008760:	0027883a 	mov	r19,zero
10008764:	483dcf0e 	bge	r9,zero,10007ea4 <__alt_data_end+0xf8007ea4>
10008768:	003fdf06 	br	100086e8 <__alt_data_end+0xf80086e8>
1000876c:	54800017 	ldw	r18,0(r10)
10008770:	52800104 	addi	r10,r10,4
10008774:	0027883a 	mov	r19,zero
10008778:	da802215 	stw	r10,136(sp)
1000877c:	003d5006 	br	10007cc0 <__alt_data_end+0xf8007cc0>
10008780:	50800104 	addi	r2,r10,4
10008784:	5480000b 	ldhu	r18,0(r10)
10008788:	0027883a 	mov	r19,zero
1000878c:	483f7d0e 	bge	r9,zero,10008584 <__alt_data_end+0xf8008584>
10008790:	003ddc06 	br	10007f04 <__alt_data_end+0xf8007f04>
10008794:	d8c02215 	stw	r3,136(sp)
10008798:	0039883a 	mov	fp,zero
1000879c:	003ddb06 	br	10007f0c <__alt_data_end+0xf8007f0c>
100087a0:	02840074 	movhi	r10,4097
100087a4:	52be6c04 	addi	r10,r10,-1616
100087a8:	da802415 	stw	r10,144(sp)
100087ac:	003e8306 	br	100081bc <__alt_data_end+0xf80081bc>
100087b0:	d8801c17 	ldw	r2,112(sp)
100087b4:	dd002117 	ldw	r20,132(sp)
100087b8:	103eb926 	beq	r2,zero,100082a0 <__alt_data_end+0xf80082a0>
100087bc:	d9002017 	ldw	r4,128(sp)
100087c0:	d9801a04 	addi	r6,sp,104
100087c4:	a00b883a 	mov	r5,r20
100087c8:	00074380 	call	10007438 <__sprint_r.part.0>
100087cc:	003eb406 	br	100082a0 <__alt_data_end+0xf80082a0>
100087d0:	80c00043 	ldbu	r3,1(r16)
100087d4:	a5000814 	ori	r20,r20,32
100087d8:	84000044 	addi	r16,r16,1
100087dc:	18c03fcc 	andi	r3,r3,255
100087e0:	18c0201c 	xori	r3,r3,128
100087e4:	18ffe004 	addi	r3,r3,-128
100087e8:	003bb706 	br	100076c8 <__alt_data_end+0xf80076c8>
100087ec:	a809883a 	mov	r4,r21
100087f0:	d8c02a15 	stw	r3,168(sp)
100087f4:	da002b15 	stw	r8,172(sp)
100087f8:	00073a00 	call	100073a0 <strlen>
100087fc:	d8c02a17 	ldw	r3,168(sp)
10008800:	1027883a 	mov	r19,r2
10008804:	df001d83 	ldbu	fp,118(sp)
10008808:	d8c02215 	stw	r3,136(sp)
1000880c:	0013883a 	mov	r9,zero
10008810:	da002b17 	ldw	r8,172(sp)
10008814:	003c4d06 	br	1000794c <__alt_data_end+0xf800794c>
10008818:	d9402117 	ldw	r5,132(sp)
1000881c:	d9002017 	ldw	r4,128(sp)
10008820:	d9801a04 	addi	r6,sp,104
10008824:	da402c15 	stw	r9,176(sp)
10008828:	00074380 	call	10007438 <__sprint_r.part.0>
1000882c:	da402c17 	ldw	r9,176(sp)
10008830:	103e9a1e 	bne	r2,zero,1000829c <__alt_data_end+0xf800829c>
10008834:	d9401b17 	ldw	r5,108(sp)
10008838:	d8801c17 	ldw	r2,112(sp)
1000883c:	d811883a 	mov	r8,sp
10008840:	29000044 	addi	r4,r5,1
10008844:	003e4206 	br	10008150 <__alt_data_end+0xf8008150>
10008848:	d9401b17 	ldw	r5,108(sp)
1000884c:	01040074 	movhi	r4,4097
10008850:	213e7004 	addi	r4,r4,-1600
10008854:	d9002415 	stw	r4,144(sp)
10008858:	29400044 	addi	r5,r5,1
1000885c:	003c6d06 	br	10007a14 <__alt_data_end+0xf8007a14>
10008860:	0039883a 	mov	fp,zero
10008864:	00800084 	movi	r2,2
10008868:	10803fcc 	andi	r2,r2,255
1000886c:	01000044 	movi	r4,1
10008870:	11001e26 	beq	r2,r4,100088ec <___vfiprintf_internal_r+0x13a0>
10008874:	01000084 	movi	r4,2
10008878:	11001e1e 	bne	r2,r4,100088f4 <___vfiprintf_internal_r+0x13a8>
1000887c:	1829883a 	mov	r20,r3
10008880:	003eea06 	br	1000842c <__alt_data_end+0xf800842c>
10008884:	a007883a 	mov	r3,r20
10008888:	00800044 	movi	r2,1
1000888c:	003ff606 	br	10008868 <__alt_data_end+0xf8008868>
10008890:	00800184 	movi	r2,6
10008894:	1240012e 	bgeu	r2,r9,1000889c <___vfiprintf_internal_r+0x1350>
10008898:	1013883a 	mov	r9,r2
1000889c:	4827883a 	mov	r19,r9
100088a0:	4825883a 	mov	r18,r9
100088a4:	48001516 	blt	r9,zero,100088fc <___vfiprintf_internal_r+0x13b0>
100088a8:	05440074 	movhi	r21,4097
100088ac:	d8c02215 	stw	r3,136(sp)
100088b0:	ad7e1004 	addi	r21,r21,-1984
100088b4:	003d1406 	br	10007d08 <__alt_data_end+0xf8007d08>
100088b8:	02840074 	movhi	r10,4097
100088bc:	52be6c04 	addi	r10,r10,-1616
100088c0:	da802415 	stw	r10,144(sp)
100088c4:	200d883a 	mov	r6,r4
100088c8:	003c9106 	br	10007b10 <__alt_data_end+0xf8007b10>
100088cc:	5021883a 	mov	r16,r10
100088d0:	0013883a 	mov	r9,zero
100088d4:	003b7d06 	br	100076cc <__alt_data_end+0xf80076cc>
100088d8:	4827883a 	mov	r19,r9
100088dc:	df001d83 	ldbu	fp,118(sp)
100088e0:	d8c02215 	stw	r3,136(sp)
100088e4:	0013883a 	mov	r9,zero
100088e8:	003c1806 	br	1000794c <__alt_data_end+0xf800794c>
100088ec:	1829883a 	mov	r20,r3
100088f0:	003d1806 	br	10007d54 <__alt_data_end+0xf8007d54>
100088f4:	1829883a 	mov	r20,r3
100088f8:	003ccd06 	br	10007c30 <__alt_data_end+0xf8007c30>
100088fc:	0025883a 	mov	r18,zero
10008900:	003fe906 	br	100088a8 <__alt_data_end+0xf80088a8>
10008904:	d8802217 	ldw	r2,136(sp)
10008908:	80c00043 	ldbu	r3,1(r16)
1000890c:	5021883a 	mov	r16,r10
10008910:	12400017 	ldw	r9,0(r2)
10008914:	10800104 	addi	r2,r2,4
10008918:	d8802215 	stw	r2,136(sp)
1000891c:	483faf0e 	bge	r9,zero,100087dc <__alt_data_end+0xf80087dc>
10008920:	18c03fcc 	andi	r3,r3,255
10008924:	18c0201c 	xori	r3,r3,128
10008928:	027fffc4 	movi	r9,-1
1000892c:	18ffe004 	addi	r3,r3,-128
10008930:	003b6506 	br	100076c8 <__alt_data_end+0xf80076c8>
10008934:	d9c01d85 	stb	r7,118(sp)
10008938:	003ca006 	br	10007bbc <__alt_data_end+0xf8007bbc>
1000893c:	d9c01d85 	stb	r7,118(sp)
10008940:	003cad06 	br	10007bf8 <__alt_data_end+0xf8007bf8>
10008944:	d9c01d85 	stb	r7,118(sp)
10008948:	003d7d06 	br	10007f40 <__alt_data_end+0xf8007f40>
1000894c:	d9c01d85 	stb	r7,118(sp)
10008950:	003d5f06 	br	10007ed0 <__alt_data_end+0xf8007ed0>
10008954:	a080004c 	andi	r2,r20,1
10008958:	0039883a 	mov	fp,zero
1000895c:	10000526 	beq	r2,zero,10008974 <___vfiprintf_internal_r+0x1428>
10008960:	00800c04 	movi	r2,48
10008964:	d88019c5 	stb	r2,103(sp)
10008968:	dcc02717 	ldw	r19,156(sp)
1000896c:	dd4019c4 	addi	r21,sp,103
10008970:	003bf606 	br	1000794c <__alt_data_end+0xf800794c>
10008974:	0027883a 	mov	r19,zero
10008978:	dd401a04 	addi	r21,sp,104
1000897c:	003bf306 	br	1000794c <__alt_data_end+0xf800794c>
10008980:	d9c01d85 	stb	r7,118(sp)
10008984:	003dc806 	br	100080a8 <__alt_data_end+0xf80080a8>
10008988:	d9c01d85 	stb	r7,118(sp)
1000898c:	003d3a06 	br	10007e78 <__alt_data_end+0xf8007e78>
10008990:	d9c01d85 	stb	r7,118(sp)
10008994:	003d2a06 	br	10007e40 <__alt_data_end+0xf8007e40>
10008998:	d9c01d85 	stb	r7,118(sp)
1000899c:	003cde06 	br	10007d18 <__alt_data_end+0xf8007d18>
100089a0:	d9c01d85 	stb	r7,118(sp)
100089a4:	003cbc06 	br	10007c98 <__alt_data_end+0xf8007c98>

100089a8 <__vfiprintf_internal>:
100089a8:	00840074 	movhi	r2,4097
100089ac:	10856b04 	addi	r2,r2,5548
100089b0:	300f883a 	mov	r7,r6
100089b4:	280d883a 	mov	r6,r5
100089b8:	200b883a 	mov	r5,r4
100089bc:	11000017 	ldw	r4,0(r2)
100089c0:	000754c1 	jmpi	1000754c <___vfiprintf_internal_r>

100089c4 <__sbprintf>:
100089c4:	2880030b 	ldhu	r2,12(r5)
100089c8:	2ac01917 	ldw	r11,100(r5)
100089cc:	2a80038b 	ldhu	r10,14(r5)
100089d0:	2a400717 	ldw	r9,28(r5)
100089d4:	2a000917 	ldw	r8,36(r5)
100089d8:	defee204 	addi	sp,sp,-1144
100089dc:	00c10004 	movi	r3,1024
100089e0:	dc011a15 	stw	r16,1128(sp)
100089e4:	10bfff4c 	andi	r2,r2,65533
100089e8:	2821883a 	mov	r16,r5
100089ec:	d8cb883a 	add	r5,sp,r3
100089f0:	dc811c15 	stw	r18,1136(sp)
100089f4:	dc411b15 	stw	r17,1132(sp)
100089f8:	dfc11d15 	stw	ra,1140(sp)
100089fc:	2025883a 	mov	r18,r4
10008a00:	d881030d 	sth	r2,1036(sp)
10008a04:	dac11915 	stw	r11,1124(sp)
10008a08:	da81038d 	sth	r10,1038(sp)
10008a0c:	da410715 	stw	r9,1052(sp)
10008a10:	da010915 	stw	r8,1060(sp)
10008a14:	dec10015 	stw	sp,1024(sp)
10008a18:	dec10415 	stw	sp,1040(sp)
10008a1c:	d8c10215 	stw	r3,1032(sp)
10008a20:	d8c10515 	stw	r3,1044(sp)
10008a24:	d8010615 	stw	zero,1048(sp)
10008a28:	000754c0 	call	1000754c <___vfiprintf_internal_r>
10008a2c:	1023883a 	mov	r17,r2
10008a30:	10000416 	blt	r2,zero,10008a44 <__sbprintf+0x80>
10008a34:	d9410004 	addi	r5,sp,1024
10008a38:	9009883a 	mov	r4,r18
10008a3c:	00048e40 	call	100048e4 <_fflush_r>
10008a40:	10000d1e 	bne	r2,zero,10008a78 <__sbprintf+0xb4>
10008a44:	d881030b 	ldhu	r2,1036(sp)
10008a48:	1080100c 	andi	r2,r2,64
10008a4c:	10000326 	beq	r2,zero,10008a5c <__sbprintf+0x98>
10008a50:	8080030b 	ldhu	r2,12(r16)
10008a54:	10801014 	ori	r2,r2,64
10008a58:	8080030d 	sth	r2,12(r16)
10008a5c:	8805883a 	mov	r2,r17
10008a60:	dfc11d17 	ldw	ra,1140(sp)
10008a64:	dc811c17 	ldw	r18,1136(sp)
10008a68:	dc411b17 	ldw	r17,1132(sp)
10008a6c:	dc011a17 	ldw	r16,1128(sp)
10008a70:	dec11e04 	addi	sp,sp,1144
10008a74:	f800283a 	ret
10008a78:	047fffc4 	movi	r17,-1
10008a7c:	003ff106 	br	10008a44 <__alt_data_end+0xf8008a44>

10008a80 <_write_r>:
10008a80:	defffd04 	addi	sp,sp,-12
10008a84:	2805883a 	mov	r2,r5
10008a88:	dc000015 	stw	r16,0(sp)
10008a8c:	04040074 	movhi	r16,4097
10008a90:	dc400115 	stw	r17,4(sp)
10008a94:	300b883a 	mov	r5,r6
10008a98:	840c3c04 	addi	r16,r16,12528
10008a9c:	2023883a 	mov	r17,r4
10008aa0:	380d883a 	mov	r6,r7
10008aa4:	1009883a 	mov	r4,r2
10008aa8:	dfc00215 	stw	ra,8(sp)
10008aac:	80000015 	stw	zero,0(r16)
10008ab0:	000da140 	call	1000da14 <write>
10008ab4:	00ffffc4 	movi	r3,-1
10008ab8:	10c00526 	beq	r2,r3,10008ad0 <_write_r+0x50>
10008abc:	dfc00217 	ldw	ra,8(sp)
10008ac0:	dc400117 	ldw	r17,4(sp)
10008ac4:	dc000017 	ldw	r16,0(sp)
10008ac8:	dec00304 	addi	sp,sp,12
10008acc:	f800283a 	ret
10008ad0:	80c00017 	ldw	r3,0(r16)
10008ad4:	183ff926 	beq	r3,zero,10008abc <__alt_data_end+0xf8008abc>
10008ad8:	88c00015 	stw	r3,0(r17)
10008adc:	003ff706 	br	10008abc <__alt_data_end+0xf8008abc>

10008ae0 <_close_r>:
10008ae0:	defffd04 	addi	sp,sp,-12
10008ae4:	dc000015 	stw	r16,0(sp)
10008ae8:	04040074 	movhi	r16,4097
10008aec:	dc400115 	stw	r17,4(sp)
10008af0:	840c3c04 	addi	r16,r16,12528
10008af4:	2023883a 	mov	r17,r4
10008af8:	2809883a 	mov	r4,r5
10008afc:	dfc00215 	stw	ra,8(sp)
10008b00:	80000015 	stw	zero,0(r16)
10008b04:	000d0840 	call	1000d084 <close>
10008b08:	00ffffc4 	movi	r3,-1
10008b0c:	10c00526 	beq	r2,r3,10008b24 <_close_r+0x44>
10008b10:	dfc00217 	ldw	ra,8(sp)
10008b14:	dc400117 	ldw	r17,4(sp)
10008b18:	dc000017 	ldw	r16,0(sp)
10008b1c:	dec00304 	addi	sp,sp,12
10008b20:	f800283a 	ret
10008b24:	80c00017 	ldw	r3,0(r16)
10008b28:	183ff926 	beq	r3,zero,10008b10 <__alt_data_end+0xf8008b10>
10008b2c:	88c00015 	stw	r3,0(r17)
10008b30:	003ff706 	br	10008b10 <__alt_data_end+0xf8008b10>

10008b34 <_calloc_r>:
10008b34:	298b383a 	mul	r5,r5,r6
10008b38:	defffe04 	addi	sp,sp,-8
10008b3c:	dfc00115 	stw	ra,4(sp)
10008b40:	dc000015 	stw	r16,0(sp)
10008b44:	00055640 	call	10005564 <_malloc_r>
10008b48:	10002926 	beq	r2,zero,10008bf0 <_calloc_r+0xbc>
10008b4c:	11bfff17 	ldw	r6,-4(r2)
10008b50:	1021883a 	mov	r16,r2
10008b54:	00bfff04 	movi	r2,-4
10008b58:	308c703a 	and	r6,r6,r2
10008b5c:	00c00904 	movi	r3,36
10008b60:	308d883a 	add	r6,r6,r2
10008b64:	19801636 	bltu	r3,r6,10008bc0 <_calloc_r+0x8c>
10008b68:	008004c4 	movi	r2,19
10008b6c:	11800b2e 	bgeu	r2,r6,10008b9c <_calloc_r+0x68>
10008b70:	80000015 	stw	zero,0(r16)
10008b74:	80000115 	stw	zero,4(r16)
10008b78:	008006c4 	movi	r2,27
10008b7c:	11801a2e 	bgeu	r2,r6,10008be8 <_calloc_r+0xb4>
10008b80:	80000215 	stw	zero,8(r16)
10008b84:	80000315 	stw	zero,12(r16)
10008b88:	30c0151e 	bne	r6,r3,10008be0 <_calloc_r+0xac>
10008b8c:	80000415 	stw	zero,16(r16)
10008b90:	80800604 	addi	r2,r16,24
10008b94:	80000515 	stw	zero,20(r16)
10008b98:	00000106 	br	10008ba0 <_calloc_r+0x6c>
10008b9c:	8005883a 	mov	r2,r16
10008ba0:	10000015 	stw	zero,0(r2)
10008ba4:	10000115 	stw	zero,4(r2)
10008ba8:	10000215 	stw	zero,8(r2)
10008bac:	8005883a 	mov	r2,r16
10008bb0:	dfc00117 	ldw	ra,4(sp)
10008bb4:	dc000017 	ldw	r16,0(sp)
10008bb8:	dec00204 	addi	sp,sp,8
10008bbc:	f800283a 	ret
10008bc0:	000b883a 	mov	r5,zero
10008bc4:	8009883a 	mov	r4,r16
10008bc8:	0005f9c0 	call	10005f9c <memset>
10008bcc:	8005883a 	mov	r2,r16
10008bd0:	dfc00117 	ldw	ra,4(sp)
10008bd4:	dc000017 	ldw	r16,0(sp)
10008bd8:	dec00204 	addi	sp,sp,8
10008bdc:	f800283a 	ret
10008be0:	80800404 	addi	r2,r16,16
10008be4:	003fee06 	br	10008ba0 <__alt_data_end+0xf8008ba0>
10008be8:	80800204 	addi	r2,r16,8
10008bec:	003fec06 	br	10008ba0 <__alt_data_end+0xf8008ba0>
10008bf0:	0005883a 	mov	r2,zero
10008bf4:	003fee06 	br	10008bb0 <__alt_data_end+0xf8008bb0>

10008bf8 <_fclose_r>:
10008bf8:	28003926 	beq	r5,zero,10008ce0 <_fclose_r+0xe8>
10008bfc:	defffc04 	addi	sp,sp,-16
10008c00:	dc400115 	stw	r17,4(sp)
10008c04:	dc000015 	stw	r16,0(sp)
10008c08:	dfc00315 	stw	ra,12(sp)
10008c0c:	dc800215 	stw	r18,8(sp)
10008c10:	2023883a 	mov	r17,r4
10008c14:	2821883a 	mov	r16,r5
10008c18:	20000226 	beq	r4,zero,10008c24 <_fclose_r+0x2c>
10008c1c:	20800e17 	ldw	r2,56(r4)
10008c20:	10002726 	beq	r2,zero,10008cc0 <_fclose_r+0xc8>
10008c24:	8080030f 	ldh	r2,12(r16)
10008c28:	1000071e 	bne	r2,zero,10008c48 <_fclose_r+0x50>
10008c2c:	0005883a 	mov	r2,zero
10008c30:	dfc00317 	ldw	ra,12(sp)
10008c34:	dc800217 	ldw	r18,8(sp)
10008c38:	dc400117 	ldw	r17,4(sp)
10008c3c:	dc000017 	ldw	r16,0(sp)
10008c40:	dec00404 	addi	sp,sp,16
10008c44:	f800283a 	ret
10008c48:	800b883a 	mov	r5,r16
10008c4c:	8809883a 	mov	r4,r17
10008c50:	00046c80 	call	100046c8 <__sflush_r>
10008c54:	1025883a 	mov	r18,r2
10008c58:	80800b17 	ldw	r2,44(r16)
10008c5c:	10000426 	beq	r2,zero,10008c70 <_fclose_r+0x78>
10008c60:	81400717 	ldw	r5,28(r16)
10008c64:	8809883a 	mov	r4,r17
10008c68:	103ee83a 	callr	r2
10008c6c:	10001616 	blt	r2,zero,10008cc8 <_fclose_r+0xd0>
10008c70:	8080030b 	ldhu	r2,12(r16)
10008c74:	1080200c 	andi	r2,r2,128
10008c78:	1000151e 	bne	r2,zero,10008cd0 <_fclose_r+0xd8>
10008c7c:	81400c17 	ldw	r5,48(r16)
10008c80:	28000526 	beq	r5,zero,10008c98 <_fclose_r+0xa0>
10008c84:	80801004 	addi	r2,r16,64
10008c88:	28800226 	beq	r5,r2,10008c94 <_fclose_r+0x9c>
10008c8c:	8809883a 	mov	r4,r17
10008c90:	0004e340 	call	10004e34 <_free_r>
10008c94:	80000c15 	stw	zero,48(r16)
10008c98:	81401117 	ldw	r5,68(r16)
10008c9c:	28000326 	beq	r5,zero,10008cac <_fclose_r+0xb4>
10008ca0:	8809883a 	mov	r4,r17
10008ca4:	0004e340 	call	10004e34 <_free_r>
10008ca8:	80001115 	stw	zero,68(r16)
10008cac:	0004cd00 	call	10004cd0 <__sfp_lock_acquire>
10008cb0:	8000030d 	sth	zero,12(r16)
10008cb4:	0004cd40 	call	10004cd4 <__sfp_lock_release>
10008cb8:	9005883a 	mov	r2,r18
10008cbc:	003fdc06 	br	10008c30 <__alt_data_end+0xf8008c30>
10008cc0:	0004cc00 	call	10004cc0 <__sinit>
10008cc4:	003fd706 	br	10008c24 <__alt_data_end+0xf8008c24>
10008cc8:	04bfffc4 	movi	r18,-1
10008ccc:	003fe806 	br	10008c70 <__alt_data_end+0xf8008c70>
10008cd0:	81400417 	ldw	r5,16(r16)
10008cd4:	8809883a 	mov	r4,r17
10008cd8:	0004e340 	call	10004e34 <_free_r>
10008cdc:	003fe706 	br	10008c7c <__alt_data_end+0xf8008c7c>
10008ce0:	0005883a 	mov	r2,zero
10008ce4:	f800283a 	ret

10008ce8 <fclose>:
10008ce8:	00840074 	movhi	r2,4097
10008cec:	10856b04 	addi	r2,r2,5548
10008cf0:	200b883a 	mov	r5,r4
10008cf4:	11000017 	ldw	r4,0(r2)
10008cf8:	0008bf81 	jmpi	10008bf8 <_fclose_r>

10008cfc <__fputwc>:
10008cfc:	defff804 	addi	sp,sp,-32
10008d00:	dcc00415 	stw	r19,16(sp)
10008d04:	dc800315 	stw	r18,12(sp)
10008d08:	dc000115 	stw	r16,4(sp)
10008d0c:	dfc00715 	stw	ra,28(sp)
10008d10:	dd400615 	stw	r21,24(sp)
10008d14:	dd000515 	stw	r20,20(sp)
10008d18:	dc400215 	stw	r17,8(sp)
10008d1c:	2027883a 	mov	r19,r4
10008d20:	2825883a 	mov	r18,r5
10008d24:	3021883a 	mov	r16,r6
10008d28:	00053540 	call	10005354 <__locale_mb_cur_max>
10008d2c:	00c00044 	movi	r3,1
10008d30:	10c03e26 	beq	r2,r3,10008e2c <__fputwc+0x130>
10008d34:	81c01704 	addi	r7,r16,92
10008d38:	900d883a 	mov	r6,r18
10008d3c:	d80b883a 	mov	r5,sp
10008d40:	9809883a 	mov	r4,r19
10008d44:	0009d480 	call	10009d48 <_wcrtomb_r>
10008d48:	1029883a 	mov	r20,r2
10008d4c:	00bfffc4 	movi	r2,-1
10008d50:	a0802026 	beq	r20,r2,10008dd4 <__fputwc+0xd8>
10008d54:	d9400003 	ldbu	r5,0(sp)
10008d58:	a0001c26 	beq	r20,zero,10008dcc <__fputwc+0xd0>
10008d5c:	0023883a 	mov	r17,zero
10008d60:	05400284 	movi	r21,10
10008d64:	00000906 	br	10008d8c <__fputwc+0x90>
10008d68:	80800017 	ldw	r2,0(r16)
10008d6c:	11400005 	stb	r5,0(r2)
10008d70:	80c00017 	ldw	r3,0(r16)
10008d74:	18c00044 	addi	r3,r3,1
10008d78:	80c00015 	stw	r3,0(r16)
10008d7c:	8c400044 	addi	r17,r17,1
10008d80:	dc45883a 	add	r2,sp,r17
10008d84:	8d00112e 	bgeu	r17,r20,10008dcc <__fputwc+0xd0>
10008d88:	11400003 	ldbu	r5,0(r2)
10008d8c:	80c00217 	ldw	r3,8(r16)
10008d90:	18ffffc4 	addi	r3,r3,-1
10008d94:	80c00215 	stw	r3,8(r16)
10008d98:	183ff30e 	bge	r3,zero,10008d68 <__alt_data_end+0xf8008d68>
10008d9c:	80800617 	ldw	r2,24(r16)
10008da0:	18801916 	blt	r3,r2,10008e08 <__fputwc+0x10c>
10008da4:	80800017 	ldw	r2,0(r16)
10008da8:	11400005 	stb	r5,0(r2)
10008dac:	80800017 	ldw	r2,0(r16)
10008db0:	10c00003 	ldbu	r3,0(r2)
10008db4:	10800044 	addi	r2,r2,1
10008db8:	1d402326 	beq	r3,r21,10008e48 <__fputwc+0x14c>
10008dbc:	80800015 	stw	r2,0(r16)
10008dc0:	8c400044 	addi	r17,r17,1
10008dc4:	dc45883a 	add	r2,sp,r17
10008dc8:	8d3fef36 	bltu	r17,r20,10008d88 <__alt_data_end+0xf8008d88>
10008dcc:	9005883a 	mov	r2,r18
10008dd0:	00000406 	br	10008de4 <__fputwc+0xe8>
10008dd4:	80c0030b 	ldhu	r3,12(r16)
10008dd8:	a005883a 	mov	r2,r20
10008ddc:	18c01014 	ori	r3,r3,64
10008de0:	80c0030d 	sth	r3,12(r16)
10008de4:	dfc00717 	ldw	ra,28(sp)
10008de8:	dd400617 	ldw	r21,24(sp)
10008dec:	dd000517 	ldw	r20,20(sp)
10008df0:	dcc00417 	ldw	r19,16(sp)
10008df4:	dc800317 	ldw	r18,12(sp)
10008df8:	dc400217 	ldw	r17,8(sp)
10008dfc:	dc000117 	ldw	r16,4(sp)
10008e00:	dec00804 	addi	sp,sp,32
10008e04:	f800283a 	ret
10008e08:	800d883a 	mov	r6,r16
10008e0c:	29403fcc 	andi	r5,r5,255
10008e10:	9809883a 	mov	r4,r19
10008e14:	0009bf00 	call	10009bf0 <__swbuf_r>
10008e18:	10bfffe0 	cmpeqi	r2,r2,-1
10008e1c:	10803fcc 	andi	r2,r2,255
10008e20:	103fd626 	beq	r2,zero,10008d7c <__alt_data_end+0xf8008d7c>
10008e24:	00bfffc4 	movi	r2,-1
10008e28:	003fee06 	br	10008de4 <__alt_data_end+0xf8008de4>
10008e2c:	90ffffc4 	addi	r3,r18,-1
10008e30:	01003f84 	movi	r4,254
10008e34:	20ffbf36 	bltu	r4,r3,10008d34 <__alt_data_end+0xf8008d34>
10008e38:	900b883a 	mov	r5,r18
10008e3c:	dc800005 	stb	r18,0(sp)
10008e40:	1029883a 	mov	r20,r2
10008e44:	003fc506 	br	10008d5c <__alt_data_end+0xf8008d5c>
10008e48:	800d883a 	mov	r6,r16
10008e4c:	a80b883a 	mov	r5,r21
10008e50:	9809883a 	mov	r4,r19
10008e54:	0009bf00 	call	10009bf0 <__swbuf_r>
10008e58:	10bfffe0 	cmpeqi	r2,r2,-1
10008e5c:	003fef06 	br	10008e1c <__alt_data_end+0xf8008e1c>

10008e60 <_fputwc_r>:
10008e60:	3080030b 	ldhu	r2,12(r6)
10008e64:	10c8000c 	andi	r3,r2,8192
10008e68:	1800051e 	bne	r3,zero,10008e80 <_fputwc_r+0x20>
10008e6c:	30c01917 	ldw	r3,100(r6)
10008e70:	10880014 	ori	r2,r2,8192
10008e74:	3080030d 	sth	r2,12(r6)
10008e78:	18880014 	ori	r2,r3,8192
10008e7c:	30801915 	stw	r2,100(r6)
10008e80:	0008cfc1 	jmpi	10008cfc <__fputwc>

10008e84 <fputwc>:
10008e84:	00840074 	movhi	r2,4097
10008e88:	defffc04 	addi	sp,sp,-16
10008e8c:	10856b04 	addi	r2,r2,5548
10008e90:	dc000115 	stw	r16,4(sp)
10008e94:	14000017 	ldw	r16,0(r2)
10008e98:	dc400215 	stw	r17,8(sp)
10008e9c:	dfc00315 	stw	ra,12(sp)
10008ea0:	2023883a 	mov	r17,r4
10008ea4:	80000226 	beq	r16,zero,10008eb0 <fputwc+0x2c>
10008ea8:	80800e17 	ldw	r2,56(r16)
10008eac:	10001026 	beq	r2,zero,10008ef0 <fputwc+0x6c>
10008eb0:	2880030b 	ldhu	r2,12(r5)
10008eb4:	10c8000c 	andi	r3,r2,8192
10008eb8:	1800051e 	bne	r3,zero,10008ed0 <fputwc+0x4c>
10008ebc:	28c01917 	ldw	r3,100(r5)
10008ec0:	10880014 	ori	r2,r2,8192
10008ec4:	2880030d 	sth	r2,12(r5)
10008ec8:	18880014 	ori	r2,r3,8192
10008ecc:	28801915 	stw	r2,100(r5)
10008ed0:	280d883a 	mov	r6,r5
10008ed4:	8009883a 	mov	r4,r16
10008ed8:	880b883a 	mov	r5,r17
10008edc:	dfc00317 	ldw	ra,12(sp)
10008ee0:	dc400217 	ldw	r17,8(sp)
10008ee4:	dc000117 	ldw	r16,4(sp)
10008ee8:	dec00404 	addi	sp,sp,16
10008eec:	0008cfc1 	jmpi	10008cfc <__fputwc>
10008ef0:	8009883a 	mov	r4,r16
10008ef4:	d9400015 	stw	r5,0(sp)
10008ef8:	0004cc00 	call	10004cc0 <__sinit>
10008efc:	d9400017 	ldw	r5,0(sp)
10008f00:	003feb06 	br	10008eb0 <__alt_data_end+0xf8008eb0>

10008f04 <_fstat_r>:
10008f04:	defffd04 	addi	sp,sp,-12
10008f08:	2805883a 	mov	r2,r5
10008f0c:	dc000015 	stw	r16,0(sp)
10008f10:	04040074 	movhi	r16,4097
10008f14:	dc400115 	stw	r17,4(sp)
10008f18:	840c3c04 	addi	r16,r16,12528
10008f1c:	2023883a 	mov	r17,r4
10008f20:	300b883a 	mov	r5,r6
10008f24:	1009883a 	mov	r4,r2
10008f28:	dfc00215 	stw	ra,8(sp)
10008f2c:	80000015 	stw	zero,0(r16)
10008f30:	000d1bc0 	call	1000d1bc <fstat>
10008f34:	00ffffc4 	movi	r3,-1
10008f38:	10c00526 	beq	r2,r3,10008f50 <_fstat_r+0x4c>
10008f3c:	dfc00217 	ldw	ra,8(sp)
10008f40:	dc400117 	ldw	r17,4(sp)
10008f44:	dc000017 	ldw	r16,0(sp)
10008f48:	dec00304 	addi	sp,sp,12
10008f4c:	f800283a 	ret
10008f50:	80c00017 	ldw	r3,0(r16)
10008f54:	183ff926 	beq	r3,zero,10008f3c <__alt_data_end+0xf8008f3c>
10008f58:	88c00015 	stw	r3,0(r17)
10008f5c:	003ff706 	br	10008f3c <__alt_data_end+0xf8008f3c>

10008f60 <__sfvwrite_r>:
10008f60:	30800217 	ldw	r2,8(r6)
10008f64:	10006726 	beq	r2,zero,10009104 <__sfvwrite_r+0x1a4>
10008f68:	28c0030b 	ldhu	r3,12(r5)
10008f6c:	defff404 	addi	sp,sp,-48
10008f70:	dd400715 	stw	r21,28(sp)
10008f74:	dd000615 	stw	r20,24(sp)
10008f78:	dc000215 	stw	r16,8(sp)
10008f7c:	dfc00b15 	stw	ra,44(sp)
10008f80:	df000a15 	stw	fp,40(sp)
10008f84:	ddc00915 	stw	r23,36(sp)
10008f88:	dd800815 	stw	r22,32(sp)
10008f8c:	dcc00515 	stw	r19,20(sp)
10008f90:	dc800415 	stw	r18,16(sp)
10008f94:	dc400315 	stw	r17,12(sp)
10008f98:	1880020c 	andi	r2,r3,8
10008f9c:	2821883a 	mov	r16,r5
10008fa0:	202b883a 	mov	r21,r4
10008fa4:	3029883a 	mov	r20,r6
10008fa8:	10002726 	beq	r2,zero,10009048 <__sfvwrite_r+0xe8>
10008fac:	28800417 	ldw	r2,16(r5)
10008fb0:	10002526 	beq	r2,zero,10009048 <__sfvwrite_r+0xe8>
10008fb4:	1880008c 	andi	r2,r3,2
10008fb8:	a4400017 	ldw	r17,0(r20)
10008fbc:	10002a26 	beq	r2,zero,10009068 <__sfvwrite_r+0x108>
10008fc0:	05a00034 	movhi	r22,32768
10008fc4:	0027883a 	mov	r19,zero
10008fc8:	0025883a 	mov	r18,zero
10008fcc:	b5bf0004 	addi	r22,r22,-1024
10008fd0:	980d883a 	mov	r6,r19
10008fd4:	a809883a 	mov	r4,r21
10008fd8:	90004626 	beq	r18,zero,100090f4 <__sfvwrite_r+0x194>
10008fdc:	900f883a 	mov	r7,r18
10008fe0:	b480022e 	bgeu	r22,r18,10008fec <__sfvwrite_r+0x8c>
10008fe4:	01e00034 	movhi	r7,32768
10008fe8:	39ff0004 	addi	r7,r7,-1024
10008fec:	80800917 	ldw	r2,36(r16)
10008ff0:	81400717 	ldw	r5,28(r16)
10008ff4:	103ee83a 	callr	r2
10008ff8:	0080570e 	bge	zero,r2,10009158 <__sfvwrite_r+0x1f8>
10008ffc:	a0c00217 	ldw	r3,8(r20)
10009000:	98a7883a 	add	r19,r19,r2
10009004:	90a5c83a 	sub	r18,r18,r2
10009008:	1885c83a 	sub	r2,r3,r2
1000900c:	a0800215 	stw	r2,8(r20)
10009010:	103fef1e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
10009014:	0005883a 	mov	r2,zero
10009018:	dfc00b17 	ldw	ra,44(sp)
1000901c:	df000a17 	ldw	fp,40(sp)
10009020:	ddc00917 	ldw	r23,36(sp)
10009024:	dd800817 	ldw	r22,32(sp)
10009028:	dd400717 	ldw	r21,28(sp)
1000902c:	dd000617 	ldw	r20,24(sp)
10009030:	dcc00517 	ldw	r19,20(sp)
10009034:	dc800417 	ldw	r18,16(sp)
10009038:	dc400317 	ldw	r17,12(sp)
1000903c:	dc000217 	ldw	r16,8(sp)
10009040:	dec00c04 	addi	sp,sp,48
10009044:	f800283a 	ret
10009048:	800b883a 	mov	r5,r16
1000904c:	a809883a 	mov	r4,r21
10009050:	0002cec0 	call	10002cec <__swsetup_r>
10009054:	1000eb1e 	bne	r2,zero,10009404 <__sfvwrite_r+0x4a4>
10009058:	80c0030b 	ldhu	r3,12(r16)
1000905c:	a4400017 	ldw	r17,0(r20)
10009060:	1880008c 	andi	r2,r3,2
10009064:	103fd61e 	bne	r2,zero,10008fc0 <__alt_data_end+0xf8008fc0>
10009068:	1880004c 	andi	r2,r3,1
1000906c:	10003f1e 	bne	r2,zero,1000916c <__sfvwrite_r+0x20c>
10009070:	0039883a 	mov	fp,zero
10009074:	0025883a 	mov	r18,zero
10009078:	90001a26 	beq	r18,zero,100090e4 <__sfvwrite_r+0x184>
1000907c:	1880800c 	andi	r2,r3,512
10009080:	84c00217 	ldw	r19,8(r16)
10009084:	10002126 	beq	r2,zero,1000910c <__sfvwrite_r+0x1ac>
10009088:	982f883a 	mov	r23,r19
1000908c:	94c09336 	bltu	r18,r19,100092dc <__sfvwrite_r+0x37c>
10009090:	1881200c 	andi	r2,r3,1152
10009094:	10009e1e 	bne	r2,zero,10009310 <__sfvwrite_r+0x3b0>
10009098:	81000017 	ldw	r4,0(r16)
1000909c:	b80d883a 	mov	r6,r23
100090a0:	e00b883a 	mov	r5,fp
100090a4:	00094d00 	call	100094d0 <memmove>
100090a8:	80c00217 	ldw	r3,8(r16)
100090ac:	81000017 	ldw	r4,0(r16)
100090b0:	9005883a 	mov	r2,r18
100090b4:	1ce7c83a 	sub	r19,r3,r19
100090b8:	25cf883a 	add	r7,r4,r23
100090bc:	84c00215 	stw	r19,8(r16)
100090c0:	81c00015 	stw	r7,0(r16)
100090c4:	a0c00217 	ldw	r3,8(r20)
100090c8:	e0b9883a 	add	fp,fp,r2
100090cc:	90a5c83a 	sub	r18,r18,r2
100090d0:	18a7c83a 	sub	r19,r3,r2
100090d4:	a4c00215 	stw	r19,8(r20)
100090d8:	983fce26 	beq	r19,zero,10009014 <__alt_data_end+0xf8009014>
100090dc:	80c0030b 	ldhu	r3,12(r16)
100090e0:	903fe61e 	bne	r18,zero,1000907c <__alt_data_end+0xf800907c>
100090e4:	8f000017 	ldw	fp,0(r17)
100090e8:	8c800117 	ldw	r18,4(r17)
100090ec:	8c400204 	addi	r17,r17,8
100090f0:	003fe106 	br	10009078 <__alt_data_end+0xf8009078>
100090f4:	8cc00017 	ldw	r19,0(r17)
100090f8:	8c800117 	ldw	r18,4(r17)
100090fc:	8c400204 	addi	r17,r17,8
10009100:	003fb306 	br	10008fd0 <__alt_data_end+0xf8008fd0>
10009104:	0005883a 	mov	r2,zero
10009108:	f800283a 	ret
1000910c:	81000017 	ldw	r4,0(r16)
10009110:	80800417 	ldw	r2,16(r16)
10009114:	11005736 	bltu	r2,r4,10009274 <__sfvwrite_r+0x314>
10009118:	85c00517 	ldw	r23,20(r16)
1000911c:	95c05536 	bltu	r18,r23,10009274 <__sfvwrite_r+0x314>
10009120:	00a00034 	movhi	r2,32768
10009124:	10bfffc4 	addi	r2,r2,-1
10009128:	9009883a 	mov	r4,r18
1000912c:	1480012e 	bgeu	r2,r18,10009134 <__sfvwrite_r+0x1d4>
10009130:	1009883a 	mov	r4,r2
10009134:	b80b883a 	mov	r5,r23
10009138:	00007fc0 	call	100007fc <__divsi3>
1000913c:	15cf383a 	mul	r7,r2,r23
10009140:	81400717 	ldw	r5,28(r16)
10009144:	80800917 	ldw	r2,36(r16)
10009148:	e00d883a 	mov	r6,fp
1000914c:	a809883a 	mov	r4,r21
10009150:	103ee83a 	callr	r2
10009154:	00bfdb16 	blt	zero,r2,100090c4 <__alt_data_end+0xf80090c4>
10009158:	8080030b 	ldhu	r2,12(r16)
1000915c:	10801014 	ori	r2,r2,64
10009160:	8080030d 	sth	r2,12(r16)
10009164:	00bfffc4 	movi	r2,-1
10009168:	003fab06 	br	10009018 <__alt_data_end+0xf8009018>
1000916c:	0027883a 	mov	r19,zero
10009170:	0011883a 	mov	r8,zero
10009174:	0039883a 	mov	fp,zero
10009178:	0025883a 	mov	r18,zero
1000917c:	90001f26 	beq	r18,zero,100091fc <__sfvwrite_r+0x29c>
10009180:	40005a26 	beq	r8,zero,100092ec <__sfvwrite_r+0x38c>
10009184:	982d883a 	mov	r22,r19
10009188:	94c0012e 	bgeu	r18,r19,10009190 <__sfvwrite_r+0x230>
1000918c:	902d883a 	mov	r22,r18
10009190:	81000017 	ldw	r4,0(r16)
10009194:	80800417 	ldw	r2,16(r16)
10009198:	b02f883a 	mov	r23,r22
1000919c:	81c00517 	ldw	r7,20(r16)
100091a0:	1100032e 	bgeu	r2,r4,100091b0 <__sfvwrite_r+0x250>
100091a4:	80c00217 	ldw	r3,8(r16)
100091a8:	38c7883a 	add	r3,r7,r3
100091ac:	1d801816 	blt	r3,r22,10009210 <__sfvwrite_r+0x2b0>
100091b0:	b1c03e16 	blt	r22,r7,100092ac <__sfvwrite_r+0x34c>
100091b4:	80800917 	ldw	r2,36(r16)
100091b8:	81400717 	ldw	r5,28(r16)
100091bc:	e00d883a 	mov	r6,fp
100091c0:	da000115 	stw	r8,4(sp)
100091c4:	a809883a 	mov	r4,r21
100091c8:	103ee83a 	callr	r2
100091cc:	102f883a 	mov	r23,r2
100091d0:	da000117 	ldw	r8,4(sp)
100091d4:	00bfe00e 	bge	zero,r2,10009158 <__alt_data_end+0xf8009158>
100091d8:	9de7c83a 	sub	r19,r19,r23
100091dc:	98001f26 	beq	r19,zero,1000925c <__sfvwrite_r+0x2fc>
100091e0:	a0800217 	ldw	r2,8(r20)
100091e4:	e5f9883a 	add	fp,fp,r23
100091e8:	95e5c83a 	sub	r18,r18,r23
100091ec:	15efc83a 	sub	r23,r2,r23
100091f0:	a5c00215 	stw	r23,8(r20)
100091f4:	b83f8726 	beq	r23,zero,10009014 <__alt_data_end+0xf8009014>
100091f8:	903fe11e 	bne	r18,zero,10009180 <__alt_data_end+0xf8009180>
100091fc:	8f000017 	ldw	fp,0(r17)
10009200:	8c800117 	ldw	r18,4(r17)
10009204:	0011883a 	mov	r8,zero
10009208:	8c400204 	addi	r17,r17,8
1000920c:	003fdb06 	br	1000917c <__alt_data_end+0xf800917c>
10009210:	180d883a 	mov	r6,r3
10009214:	e00b883a 	mov	r5,fp
10009218:	da000115 	stw	r8,4(sp)
1000921c:	d8c00015 	stw	r3,0(sp)
10009220:	00094d00 	call	100094d0 <memmove>
10009224:	d8c00017 	ldw	r3,0(sp)
10009228:	80800017 	ldw	r2,0(r16)
1000922c:	800b883a 	mov	r5,r16
10009230:	a809883a 	mov	r4,r21
10009234:	10c5883a 	add	r2,r2,r3
10009238:	80800015 	stw	r2,0(r16)
1000923c:	d8c00015 	stw	r3,0(sp)
10009240:	00048e40 	call	100048e4 <_fflush_r>
10009244:	d8c00017 	ldw	r3,0(sp)
10009248:	da000117 	ldw	r8,4(sp)
1000924c:	103fc21e 	bne	r2,zero,10009158 <__alt_data_end+0xf8009158>
10009250:	182f883a 	mov	r23,r3
10009254:	9de7c83a 	sub	r19,r19,r23
10009258:	983fe11e 	bne	r19,zero,100091e0 <__alt_data_end+0xf80091e0>
1000925c:	800b883a 	mov	r5,r16
10009260:	a809883a 	mov	r4,r21
10009264:	00048e40 	call	100048e4 <_fflush_r>
10009268:	103fbb1e 	bne	r2,zero,10009158 <__alt_data_end+0xf8009158>
1000926c:	0011883a 	mov	r8,zero
10009270:	003fdb06 	br	100091e0 <__alt_data_end+0xf80091e0>
10009274:	94c0012e 	bgeu	r18,r19,1000927c <__sfvwrite_r+0x31c>
10009278:	9027883a 	mov	r19,r18
1000927c:	980d883a 	mov	r6,r19
10009280:	e00b883a 	mov	r5,fp
10009284:	00094d00 	call	100094d0 <memmove>
10009288:	80800217 	ldw	r2,8(r16)
1000928c:	80c00017 	ldw	r3,0(r16)
10009290:	14c5c83a 	sub	r2,r2,r19
10009294:	1cc7883a 	add	r3,r3,r19
10009298:	80800215 	stw	r2,8(r16)
1000929c:	80c00015 	stw	r3,0(r16)
100092a0:	10004326 	beq	r2,zero,100093b0 <__sfvwrite_r+0x450>
100092a4:	9805883a 	mov	r2,r19
100092a8:	003f8606 	br	100090c4 <__alt_data_end+0xf80090c4>
100092ac:	b00d883a 	mov	r6,r22
100092b0:	e00b883a 	mov	r5,fp
100092b4:	da000115 	stw	r8,4(sp)
100092b8:	00094d00 	call	100094d0 <memmove>
100092bc:	80800217 	ldw	r2,8(r16)
100092c0:	80c00017 	ldw	r3,0(r16)
100092c4:	da000117 	ldw	r8,4(sp)
100092c8:	1585c83a 	sub	r2,r2,r22
100092cc:	1dad883a 	add	r22,r3,r22
100092d0:	80800215 	stw	r2,8(r16)
100092d4:	85800015 	stw	r22,0(r16)
100092d8:	003fbf06 	br	100091d8 <__alt_data_end+0xf80091d8>
100092dc:	81000017 	ldw	r4,0(r16)
100092e0:	9027883a 	mov	r19,r18
100092e4:	902f883a 	mov	r23,r18
100092e8:	003f6c06 	br	1000909c <__alt_data_end+0xf800909c>
100092ec:	900d883a 	mov	r6,r18
100092f0:	01400284 	movi	r5,10
100092f4:	e009883a 	mov	r4,fp
100092f8:	0005d700 	call	10005d70 <memchr>
100092fc:	10003e26 	beq	r2,zero,100093f8 <__sfvwrite_r+0x498>
10009300:	10800044 	addi	r2,r2,1
10009304:	1727c83a 	sub	r19,r2,fp
10009308:	02000044 	movi	r8,1
1000930c:	003f9d06 	br	10009184 <__alt_data_end+0xf8009184>
10009310:	80800517 	ldw	r2,20(r16)
10009314:	81400417 	ldw	r5,16(r16)
10009318:	81c00017 	ldw	r7,0(r16)
1000931c:	10a7883a 	add	r19,r2,r2
10009320:	9885883a 	add	r2,r19,r2
10009324:	1026d7fa 	srli	r19,r2,31
10009328:	396dc83a 	sub	r22,r7,r5
1000932c:	b1000044 	addi	r4,r22,1
10009330:	9885883a 	add	r2,r19,r2
10009334:	1027d07a 	srai	r19,r2,1
10009338:	2485883a 	add	r2,r4,r18
1000933c:	980d883a 	mov	r6,r19
10009340:	9880022e 	bgeu	r19,r2,1000934c <__sfvwrite_r+0x3ec>
10009344:	1027883a 	mov	r19,r2
10009348:	100d883a 	mov	r6,r2
1000934c:	18c1000c 	andi	r3,r3,1024
10009350:	18001c26 	beq	r3,zero,100093c4 <__sfvwrite_r+0x464>
10009354:	300b883a 	mov	r5,r6
10009358:	a809883a 	mov	r4,r21
1000935c:	00055640 	call	10005564 <_malloc_r>
10009360:	102f883a 	mov	r23,r2
10009364:	10002926 	beq	r2,zero,1000940c <__sfvwrite_r+0x4ac>
10009368:	81400417 	ldw	r5,16(r16)
1000936c:	b00d883a 	mov	r6,r22
10009370:	1009883a 	mov	r4,r2
10009374:	0005e540 	call	10005e54 <memcpy>
10009378:	8080030b 	ldhu	r2,12(r16)
1000937c:	00fedfc4 	movi	r3,-1153
10009380:	10c4703a 	and	r2,r2,r3
10009384:	10802014 	ori	r2,r2,128
10009388:	8080030d 	sth	r2,12(r16)
1000938c:	bd89883a 	add	r4,r23,r22
10009390:	9d8fc83a 	sub	r7,r19,r22
10009394:	85c00415 	stw	r23,16(r16)
10009398:	84c00515 	stw	r19,20(r16)
1000939c:	81000015 	stw	r4,0(r16)
100093a0:	9027883a 	mov	r19,r18
100093a4:	81c00215 	stw	r7,8(r16)
100093a8:	902f883a 	mov	r23,r18
100093ac:	003f3b06 	br	1000909c <__alt_data_end+0xf800909c>
100093b0:	800b883a 	mov	r5,r16
100093b4:	a809883a 	mov	r4,r21
100093b8:	00048e40 	call	100048e4 <_fflush_r>
100093bc:	103fb926 	beq	r2,zero,100092a4 <__alt_data_end+0xf80092a4>
100093c0:	003f6506 	br	10009158 <__alt_data_end+0xf8009158>
100093c4:	a809883a 	mov	r4,r21
100093c8:	000968c0 	call	1000968c <_realloc_r>
100093cc:	102f883a 	mov	r23,r2
100093d0:	103fee1e 	bne	r2,zero,1000938c <__alt_data_end+0xf800938c>
100093d4:	81400417 	ldw	r5,16(r16)
100093d8:	a809883a 	mov	r4,r21
100093dc:	0004e340 	call	10004e34 <_free_r>
100093e0:	8080030b 	ldhu	r2,12(r16)
100093e4:	00ffdfc4 	movi	r3,-129
100093e8:	1884703a 	and	r2,r3,r2
100093ec:	00c00304 	movi	r3,12
100093f0:	a8c00015 	stw	r3,0(r21)
100093f4:	003f5906 	br	1000915c <__alt_data_end+0xf800915c>
100093f8:	94c00044 	addi	r19,r18,1
100093fc:	02000044 	movi	r8,1
10009400:	003f6006 	br	10009184 <__alt_data_end+0xf8009184>
10009404:	00bfffc4 	movi	r2,-1
10009408:	003f0306 	br	10009018 <__alt_data_end+0xf8009018>
1000940c:	00800304 	movi	r2,12
10009410:	a8800015 	stw	r2,0(r21)
10009414:	8080030b 	ldhu	r2,12(r16)
10009418:	003f5006 	br	1000915c <__alt_data_end+0xf800915c>

1000941c <_isatty_r>:
1000941c:	defffd04 	addi	sp,sp,-12
10009420:	dc000015 	stw	r16,0(sp)
10009424:	04040074 	movhi	r16,4097
10009428:	dc400115 	stw	r17,4(sp)
1000942c:	840c3c04 	addi	r16,r16,12528
10009430:	2023883a 	mov	r17,r4
10009434:	2809883a 	mov	r4,r5
10009438:	dfc00215 	stw	ra,8(sp)
1000943c:	80000015 	stw	zero,0(r16)
10009440:	000d4280 	call	1000d428 <isatty>
10009444:	00ffffc4 	movi	r3,-1
10009448:	10c00526 	beq	r2,r3,10009460 <_isatty_r+0x44>
1000944c:	dfc00217 	ldw	ra,8(sp)
10009450:	dc400117 	ldw	r17,4(sp)
10009454:	dc000017 	ldw	r16,0(sp)
10009458:	dec00304 	addi	sp,sp,12
1000945c:	f800283a 	ret
10009460:	80c00017 	ldw	r3,0(r16)
10009464:	183ff926 	beq	r3,zero,1000944c <__alt_data_end+0xf800944c>
10009468:	88c00015 	stw	r3,0(r17)
1000946c:	003ff706 	br	1000944c <__alt_data_end+0xf800944c>

10009470 <_lseek_r>:
10009470:	defffd04 	addi	sp,sp,-12
10009474:	2805883a 	mov	r2,r5
10009478:	dc000015 	stw	r16,0(sp)
1000947c:	04040074 	movhi	r16,4097
10009480:	dc400115 	stw	r17,4(sp)
10009484:	300b883a 	mov	r5,r6
10009488:	840c3c04 	addi	r16,r16,12528
1000948c:	2023883a 	mov	r17,r4
10009490:	380d883a 	mov	r6,r7
10009494:	1009883a 	mov	r4,r2
10009498:	dfc00215 	stw	ra,8(sp)
1000949c:	80000015 	stw	zero,0(r16)
100094a0:	000d5f40 	call	1000d5f4 <lseek>
100094a4:	00ffffc4 	movi	r3,-1
100094a8:	10c00526 	beq	r2,r3,100094c0 <_lseek_r+0x50>
100094ac:	dfc00217 	ldw	ra,8(sp)
100094b0:	dc400117 	ldw	r17,4(sp)
100094b4:	dc000017 	ldw	r16,0(sp)
100094b8:	dec00304 	addi	sp,sp,12
100094bc:	f800283a 	ret
100094c0:	80c00017 	ldw	r3,0(r16)
100094c4:	183ff926 	beq	r3,zero,100094ac <__alt_data_end+0xf80094ac>
100094c8:	88c00015 	stw	r3,0(r17)
100094cc:	003ff706 	br	100094ac <__alt_data_end+0xf80094ac>

100094d0 <memmove>:
100094d0:	2005883a 	mov	r2,r4
100094d4:	29000b2e 	bgeu	r5,r4,10009504 <memmove+0x34>
100094d8:	298f883a 	add	r7,r5,r6
100094dc:	21c0092e 	bgeu	r4,r7,10009504 <memmove+0x34>
100094e0:	2187883a 	add	r3,r4,r6
100094e4:	198bc83a 	sub	r5,r3,r6
100094e8:	30004826 	beq	r6,zero,1000960c <memmove+0x13c>
100094ec:	39ffffc4 	addi	r7,r7,-1
100094f0:	39000003 	ldbu	r4,0(r7)
100094f4:	18ffffc4 	addi	r3,r3,-1
100094f8:	19000005 	stb	r4,0(r3)
100094fc:	28fffb1e 	bne	r5,r3,100094ec <__alt_data_end+0xf80094ec>
10009500:	f800283a 	ret
10009504:	00c003c4 	movi	r3,15
10009508:	1980412e 	bgeu	r3,r6,10009610 <memmove+0x140>
1000950c:	2886b03a 	or	r3,r5,r2
10009510:	18c000cc 	andi	r3,r3,3
10009514:	1800401e 	bne	r3,zero,10009618 <memmove+0x148>
10009518:	33fffc04 	addi	r15,r6,-16
1000951c:	781ed13a 	srli	r15,r15,4
10009520:	28c00104 	addi	r3,r5,4
10009524:	13400104 	addi	r13,r2,4
10009528:	781c913a 	slli	r14,r15,4
1000952c:	2b000204 	addi	r12,r5,8
10009530:	12c00204 	addi	r11,r2,8
10009534:	73800504 	addi	r14,r14,20
10009538:	2a800304 	addi	r10,r5,12
1000953c:	12400304 	addi	r9,r2,12
10009540:	2b9d883a 	add	r14,r5,r14
10009544:	2811883a 	mov	r8,r5
10009548:	100f883a 	mov	r7,r2
1000954c:	41000017 	ldw	r4,0(r8)
10009550:	39c00404 	addi	r7,r7,16
10009554:	18c00404 	addi	r3,r3,16
10009558:	393ffc15 	stw	r4,-16(r7)
1000955c:	193ffc17 	ldw	r4,-16(r3)
10009560:	6b400404 	addi	r13,r13,16
10009564:	5ac00404 	addi	r11,r11,16
10009568:	693ffc15 	stw	r4,-16(r13)
1000956c:	61000017 	ldw	r4,0(r12)
10009570:	4a400404 	addi	r9,r9,16
10009574:	42000404 	addi	r8,r8,16
10009578:	593ffc15 	stw	r4,-16(r11)
1000957c:	51000017 	ldw	r4,0(r10)
10009580:	63000404 	addi	r12,r12,16
10009584:	52800404 	addi	r10,r10,16
10009588:	493ffc15 	stw	r4,-16(r9)
1000958c:	1bbfef1e 	bne	r3,r14,1000954c <__alt_data_end+0xf800954c>
10009590:	79000044 	addi	r4,r15,1
10009594:	2008913a 	slli	r4,r4,4
10009598:	328003cc 	andi	r10,r6,15
1000959c:	02c000c4 	movi	r11,3
100095a0:	1107883a 	add	r3,r2,r4
100095a4:	290b883a 	add	r5,r5,r4
100095a8:	5a801e2e 	bgeu	r11,r10,10009624 <memmove+0x154>
100095ac:	1813883a 	mov	r9,r3
100095b0:	2811883a 	mov	r8,r5
100095b4:	500f883a 	mov	r7,r10
100095b8:	41000017 	ldw	r4,0(r8)
100095bc:	4a400104 	addi	r9,r9,4
100095c0:	39ffff04 	addi	r7,r7,-4
100095c4:	493fff15 	stw	r4,-4(r9)
100095c8:	42000104 	addi	r8,r8,4
100095cc:	59fffa36 	bltu	r11,r7,100095b8 <__alt_data_end+0xf80095b8>
100095d0:	513fff04 	addi	r4,r10,-4
100095d4:	2008d0ba 	srli	r4,r4,2
100095d8:	318000cc 	andi	r6,r6,3
100095dc:	21000044 	addi	r4,r4,1
100095e0:	2109883a 	add	r4,r4,r4
100095e4:	2109883a 	add	r4,r4,r4
100095e8:	1907883a 	add	r3,r3,r4
100095ec:	290b883a 	add	r5,r5,r4
100095f0:	30000b26 	beq	r6,zero,10009620 <memmove+0x150>
100095f4:	198d883a 	add	r6,r3,r6
100095f8:	29c00003 	ldbu	r7,0(r5)
100095fc:	18c00044 	addi	r3,r3,1
10009600:	29400044 	addi	r5,r5,1
10009604:	19ffffc5 	stb	r7,-1(r3)
10009608:	19bffb1e 	bne	r3,r6,100095f8 <__alt_data_end+0xf80095f8>
1000960c:	f800283a 	ret
10009610:	1007883a 	mov	r3,r2
10009614:	003ff606 	br	100095f0 <__alt_data_end+0xf80095f0>
10009618:	1007883a 	mov	r3,r2
1000961c:	003ff506 	br	100095f4 <__alt_data_end+0xf80095f4>
10009620:	f800283a 	ret
10009624:	500d883a 	mov	r6,r10
10009628:	003ff106 	br	100095f0 <__alt_data_end+0xf80095f0>

1000962c <_read_r>:
1000962c:	defffd04 	addi	sp,sp,-12
10009630:	2805883a 	mov	r2,r5
10009634:	dc000015 	stw	r16,0(sp)
10009638:	04040074 	movhi	r16,4097
1000963c:	dc400115 	stw	r17,4(sp)
10009640:	300b883a 	mov	r5,r6
10009644:	840c3c04 	addi	r16,r16,12528
10009648:	2023883a 	mov	r17,r4
1000964c:	380d883a 	mov	r6,r7
10009650:	1009883a 	mov	r4,r2
10009654:	dfc00215 	stw	ra,8(sp)
10009658:	80000015 	stw	zero,0(r16)
1000965c:	000d7c80 	call	1000d7c8 <read>
10009660:	00ffffc4 	movi	r3,-1
10009664:	10c00526 	beq	r2,r3,1000967c <_read_r+0x50>
10009668:	dfc00217 	ldw	ra,8(sp)
1000966c:	dc400117 	ldw	r17,4(sp)
10009670:	dc000017 	ldw	r16,0(sp)
10009674:	dec00304 	addi	sp,sp,12
10009678:	f800283a 	ret
1000967c:	80c00017 	ldw	r3,0(r16)
10009680:	183ff926 	beq	r3,zero,10009668 <__alt_data_end+0xf8009668>
10009684:	88c00015 	stw	r3,0(r17)
10009688:	003ff706 	br	10009668 <__alt_data_end+0xf8009668>

1000968c <_realloc_r>:
1000968c:	defff604 	addi	sp,sp,-40
10009690:	dc800215 	stw	r18,8(sp)
10009694:	dfc00915 	stw	ra,36(sp)
10009698:	df000815 	stw	fp,32(sp)
1000969c:	ddc00715 	stw	r23,28(sp)
100096a0:	dd800615 	stw	r22,24(sp)
100096a4:	dd400515 	stw	r21,20(sp)
100096a8:	dd000415 	stw	r20,16(sp)
100096ac:	dcc00315 	stw	r19,12(sp)
100096b0:	dc400115 	stw	r17,4(sp)
100096b4:	dc000015 	stw	r16,0(sp)
100096b8:	3025883a 	mov	r18,r6
100096bc:	2800b726 	beq	r5,zero,1000999c <_realloc_r+0x310>
100096c0:	282b883a 	mov	r21,r5
100096c4:	2029883a 	mov	r20,r4
100096c8:	000d7440 	call	1000d744 <__malloc_lock>
100096cc:	a8bfff17 	ldw	r2,-4(r21)
100096d0:	043fff04 	movi	r16,-4
100096d4:	90c002c4 	addi	r3,r18,11
100096d8:	01000584 	movi	r4,22
100096dc:	acfffe04 	addi	r19,r21,-8
100096e0:	1420703a 	and	r16,r2,r16
100096e4:	20c0332e 	bgeu	r4,r3,100097b4 <_realloc_r+0x128>
100096e8:	047ffe04 	movi	r17,-8
100096ec:	1c62703a 	and	r17,r3,r17
100096f0:	8807883a 	mov	r3,r17
100096f4:	88005816 	blt	r17,zero,10009858 <_realloc_r+0x1cc>
100096f8:	8c805736 	bltu	r17,r18,10009858 <_realloc_r+0x1cc>
100096fc:	80c0300e 	bge	r16,r3,100097c0 <_realloc_r+0x134>
10009700:	07040074 	movhi	fp,4097
10009704:	e73fe604 	addi	fp,fp,-104
10009708:	e1c00217 	ldw	r7,8(fp)
1000970c:	9c09883a 	add	r4,r19,r16
10009710:	22000117 	ldw	r8,4(r4)
10009714:	21c06326 	beq	r4,r7,100098a4 <_realloc_r+0x218>
10009718:	017fff84 	movi	r5,-2
1000971c:	414a703a 	and	r5,r8,r5
10009720:	214b883a 	add	r5,r4,r5
10009724:	29800117 	ldw	r6,4(r5)
10009728:	3180004c 	andi	r6,r6,1
1000972c:	30003f26 	beq	r6,zero,1000982c <_realloc_r+0x1a0>
10009730:	1080004c 	andi	r2,r2,1
10009734:	10008326 	beq	r2,zero,10009944 <_realloc_r+0x2b8>
10009738:	900b883a 	mov	r5,r18
1000973c:	a009883a 	mov	r4,r20
10009740:	00055640 	call	10005564 <_malloc_r>
10009744:	1025883a 	mov	r18,r2
10009748:	10011e26 	beq	r2,zero,10009bc4 <_realloc_r+0x538>
1000974c:	a93fff17 	ldw	r4,-4(r21)
10009750:	10fffe04 	addi	r3,r2,-8
10009754:	00bfff84 	movi	r2,-2
10009758:	2084703a 	and	r2,r4,r2
1000975c:	9885883a 	add	r2,r19,r2
10009760:	1880ee26 	beq	r3,r2,10009b1c <_realloc_r+0x490>
10009764:	81bfff04 	addi	r6,r16,-4
10009768:	00800904 	movi	r2,36
1000976c:	1180b836 	bltu	r2,r6,10009a50 <_realloc_r+0x3c4>
10009770:	00c004c4 	movi	r3,19
10009774:	19809636 	bltu	r3,r6,100099d0 <_realloc_r+0x344>
10009778:	9005883a 	mov	r2,r18
1000977c:	a807883a 	mov	r3,r21
10009780:	19000017 	ldw	r4,0(r3)
10009784:	11000015 	stw	r4,0(r2)
10009788:	19000117 	ldw	r4,4(r3)
1000978c:	11000115 	stw	r4,4(r2)
10009790:	18c00217 	ldw	r3,8(r3)
10009794:	10c00215 	stw	r3,8(r2)
10009798:	a80b883a 	mov	r5,r21
1000979c:	a009883a 	mov	r4,r20
100097a0:	0004e340 	call	10004e34 <_free_r>
100097a4:	a009883a 	mov	r4,r20
100097a8:	000d7680 	call	1000d768 <__malloc_unlock>
100097ac:	9005883a 	mov	r2,r18
100097b0:	00001206 	br	100097fc <_realloc_r+0x170>
100097b4:	00c00404 	movi	r3,16
100097b8:	1823883a 	mov	r17,r3
100097bc:	003fce06 	br	100096f8 <__alt_data_end+0xf80096f8>
100097c0:	a825883a 	mov	r18,r21
100097c4:	8445c83a 	sub	r2,r16,r17
100097c8:	00c003c4 	movi	r3,15
100097cc:	18802636 	bltu	r3,r2,10009868 <_realloc_r+0x1dc>
100097d0:	99800117 	ldw	r6,4(r19)
100097d4:	9c07883a 	add	r3,r19,r16
100097d8:	3180004c 	andi	r6,r6,1
100097dc:	3420b03a 	or	r16,r6,r16
100097e0:	9c000115 	stw	r16,4(r19)
100097e4:	18800117 	ldw	r2,4(r3)
100097e8:	10800054 	ori	r2,r2,1
100097ec:	18800115 	stw	r2,4(r3)
100097f0:	a009883a 	mov	r4,r20
100097f4:	000d7680 	call	1000d768 <__malloc_unlock>
100097f8:	9005883a 	mov	r2,r18
100097fc:	dfc00917 	ldw	ra,36(sp)
10009800:	df000817 	ldw	fp,32(sp)
10009804:	ddc00717 	ldw	r23,28(sp)
10009808:	dd800617 	ldw	r22,24(sp)
1000980c:	dd400517 	ldw	r21,20(sp)
10009810:	dd000417 	ldw	r20,16(sp)
10009814:	dcc00317 	ldw	r19,12(sp)
10009818:	dc800217 	ldw	r18,8(sp)
1000981c:	dc400117 	ldw	r17,4(sp)
10009820:	dc000017 	ldw	r16,0(sp)
10009824:	dec00a04 	addi	sp,sp,40
10009828:	f800283a 	ret
1000982c:	017fff04 	movi	r5,-4
10009830:	414a703a 	and	r5,r8,r5
10009834:	814d883a 	add	r6,r16,r5
10009838:	30c01f16 	blt	r6,r3,100098b8 <_realloc_r+0x22c>
1000983c:	20800317 	ldw	r2,12(r4)
10009840:	20c00217 	ldw	r3,8(r4)
10009844:	a825883a 	mov	r18,r21
10009848:	3021883a 	mov	r16,r6
1000984c:	18800315 	stw	r2,12(r3)
10009850:	10c00215 	stw	r3,8(r2)
10009854:	003fdb06 	br	100097c4 <__alt_data_end+0xf80097c4>
10009858:	00800304 	movi	r2,12
1000985c:	a0800015 	stw	r2,0(r20)
10009860:	0005883a 	mov	r2,zero
10009864:	003fe506 	br	100097fc <__alt_data_end+0xf80097fc>
10009868:	98c00117 	ldw	r3,4(r19)
1000986c:	9c4b883a 	add	r5,r19,r17
10009870:	11000054 	ori	r4,r2,1
10009874:	18c0004c 	andi	r3,r3,1
10009878:	1c62b03a 	or	r17,r3,r17
1000987c:	9c400115 	stw	r17,4(r19)
10009880:	29000115 	stw	r4,4(r5)
10009884:	2885883a 	add	r2,r5,r2
10009888:	10c00117 	ldw	r3,4(r2)
1000988c:	29400204 	addi	r5,r5,8
10009890:	a009883a 	mov	r4,r20
10009894:	18c00054 	ori	r3,r3,1
10009898:	10c00115 	stw	r3,4(r2)
1000989c:	0004e340 	call	10004e34 <_free_r>
100098a0:	003fd306 	br	100097f0 <__alt_data_end+0xf80097f0>
100098a4:	017fff04 	movi	r5,-4
100098a8:	414a703a 	and	r5,r8,r5
100098ac:	89800404 	addi	r6,r17,16
100098b0:	8151883a 	add	r8,r16,r5
100098b4:	4180590e 	bge	r8,r6,10009a1c <_realloc_r+0x390>
100098b8:	1080004c 	andi	r2,r2,1
100098bc:	103f9e1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
100098c0:	adbffe17 	ldw	r22,-8(r21)
100098c4:	00bfff04 	movi	r2,-4
100098c8:	9dadc83a 	sub	r22,r19,r22
100098cc:	b1800117 	ldw	r6,4(r22)
100098d0:	3084703a 	and	r2,r6,r2
100098d4:	20002026 	beq	r4,zero,10009958 <_realloc_r+0x2cc>
100098d8:	80af883a 	add	r23,r16,r2
100098dc:	b96f883a 	add	r23,r23,r5
100098e0:	21c05f26 	beq	r4,r7,10009a60 <_realloc_r+0x3d4>
100098e4:	b8c01c16 	blt	r23,r3,10009958 <_realloc_r+0x2cc>
100098e8:	20800317 	ldw	r2,12(r4)
100098ec:	20c00217 	ldw	r3,8(r4)
100098f0:	81bfff04 	addi	r6,r16,-4
100098f4:	01000904 	movi	r4,36
100098f8:	18800315 	stw	r2,12(r3)
100098fc:	10c00215 	stw	r3,8(r2)
10009900:	b0c00217 	ldw	r3,8(r22)
10009904:	b0800317 	ldw	r2,12(r22)
10009908:	b4800204 	addi	r18,r22,8
1000990c:	18800315 	stw	r2,12(r3)
10009910:	10c00215 	stw	r3,8(r2)
10009914:	21801b36 	bltu	r4,r6,10009984 <_realloc_r+0x2f8>
10009918:	008004c4 	movi	r2,19
1000991c:	1180352e 	bgeu	r2,r6,100099f4 <_realloc_r+0x368>
10009920:	a8800017 	ldw	r2,0(r21)
10009924:	b0800215 	stw	r2,8(r22)
10009928:	a8800117 	ldw	r2,4(r21)
1000992c:	b0800315 	stw	r2,12(r22)
10009930:	008006c4 	movi	r2,27
10009934:	11807f36 	bltu	r2,r6,10009b34 <_realloc_r+0x4a8>
10009938:	b0800404 	addi	r2,r22,16
1000993c:	ad400204 	addi	r21,r21,8
10009940:	00002d06 	br	100099f8 <_realloc_r+0x36c>
10009944:	adbffe17 	ldw	r22,-8(r21)
10009948:	00bfff04 	movi	r2,-4
1000994c:	9dadc83a 	sub	r22,r19,r22
10009950:	b1000117 	ldw	r4,4(r22)
10009954:	2084703a 	and	r2,r4,r2
10009958:	b03f7726 	beq	r22,zero,10009738 <__alt_data_end+0xf8009738>
1000995c:	80af883a 	add	r23,r16,r2
10009960:	b8ff7516 	blt	r23,r3,10009738 <__alt_data_end+0xf8009738>
10009964:	b0800317 	ldw	r2,12(r22)
10009968:	b0c00217 	ldw	r3,8(r22)
1000996c:	81bfff04 	addi	r6,r16,-4
10009970:	01000904 	movi	r4,36
10009974:	18800315 	stw	r2,12(r3)
10009978:	10c00215 	stw	r3,8(r2)
1000997c:	b4800204 	addi	r18,r22,8
10009980:	21bfe52e 	bgeu	r4,r6,10009918 <__alt_data_end+0xf8009918>
10009984:	a80b883a 	mov	r5,r21
10009988:	9009883a 	mov	r4,r18
1000998c:	00094d00 	call	100094d0 <memmove>
10009990:	b821883a 	mov	r16,r23
10009994:	b027883a 	mov	r19,r22
10009998:	003f8a06 	br	100097c4 <__alt_data_end+0xf80097c4>
1000999c:	300b883a 	mov	r5,r6
100099a0:	dfc00917 	ldw	ra,36(sp)
100099a4:	df000817 	ldw	fp,32(sp)
100099a8:	ddc00717 	ldw	r23,28(sp)
100099ac:	dd800617 	ldw	r22,24(sp)
100099b0:	dd400517 	ldw	r21,20(sp)
100099b4:	dd000417 	ldw	r20,16(sp)
100099b8:	dcc00317 	ldw	r19,12(sp)
100099bc:	dc800217 	ldw	r18,8(sp)
100099c0:	dc400117 	ldw	r17,4(sp)
100099c4:	dc000017 	ldw	r16,0(sp)
100099c8:	dec00a04 	addi	sp,sp,40
100099cc:	00055641 	jmpi	10005564 <_malloc_r>
100099d0:	a8c00017 	ldw	r3,0(r21)
100099d4:	90c00015 	stw	r3,0(r18)
100099d8:	a8c00117 	ldw	r3,4(r21)
100099dc:	90c00115 	stw	r3,4(r18)
100099e0:	00c006c4 	movi	r3,27
100099e4:	19804536 	bltu	r3,r6,10009afc <_realloc_r+0x470>
100099e8:	90800204 	addi	r2,r18,8
100099ec:	a8c00204 	addi	r3,r21,8
100099f0:	003f6306 	br	10009780 <__alt_data_end+0xf8009780>
100099f4:	9005883a 	mov	r2,r18
100099f8:	a8c00017 	ldw	r3,0(r21)
100099fc:	b821883a 	mov	r16,r23
10009a00:	b027883a 	mov	r19,r22
10009a04:	10c00015 	stw	r3,0(r2)
10009a08:	a8c00117 	ldw	r3,4(r21)
10009a0c:	10c00115 	stw	r3,4(r2)
10009a10:	a8c00217 	ldw	r3,8(r21)
10009a14:	10c00215 	stw	r3,8(r2)
10009a18:	003f6a06 	br	100097c4 <__alt_data_end+0xf80097c4>
10009a1c:	9c67883a 	add	r19,r19,r17
10009a20:	4445c83a 	sub	r2,r8,r17
10009a24:	e4c00215 	stw	r19,8(fp)
10009a28:	10800054 	ori	r2,r2,1
10009a2c:	98800115 	stw	r2,4(r19)
10009a30:	a8bfff17 	ldw	r2,-4(r21)
10009a34:	a009883a 	mov	r4,r20
10009a38:	1080004c 	andi	r2,r2,1
10009a3c:	1462b03a 	or	r17,r2,r17
10009a40:	ac7fff15 	stw	r17,-4(r21)
10009a44:	000d7680 	call	1000d768 <__malloc_unlock>
10009a48:	a805883a 	mov	r2,r21
10009a4c:	003f6b06 	br	100097fc <__alt_data_end+0xf80097fc>
10009a50:	a80b883a 	mov	r5,r21
10009a54:	9009883a 	mov	r4,r18
10009a58:	00094d00 	call	100094d0 <memmove>
10009a5c:	003f4e06 	br	10009798 <__alt_data_end+0xf8009798>
10009a60:	89000404 	addi	r4,r17,16
10009a64:	b93fbc16 	blt	r23,r4,10009958 <__alt_data_end+0xf8009958>
10009a68:	b0800317 	ldw	r2,12(r22)
10009a6c:	b0c00217 	ldw	r3,8(r22)
10009a70:	81bfff04 	addi	r6,r16,-4
10009a74:	01000904 	movi	r4,36
10009a78:	18800315 	stw	r2,12(r3)
10009a7c:	10c00215 	stw	r3,8(r2)
10009a80:	b4800204 	addi	r18,r22,8
10009a84:	21804336 	bltu	r4,r6,10009b94 <_realloc_r+0x508>
10009a88:	008004c4 	movi	r2,19
10009a8c:	11803f2e 	bgeu	r2,r6,10009b8c <_realloc_r+0x500>
10009a90:	a8800017 	ldw	r2,0(r21)
10009a94:	b0800215 	stw	r2,8(r22)
10009a98:	a8800117 	ldw	r2,4(r21)
10009a9c:	b0800315 	stw	r2,12(r22)
10009aa0:	008006c4 	movi	r2,27
10009aa4:	11803f36 	bltu	r2,r6,10009ba4 <_realloc_r+0x518>
10009aa8:	b0800404 	addi	r2,r22,16
10009aac:	ad400204 	addi	r21,r21,8
10009ab0:	a8c00017 	ldw	r3,0(r21)
10009ab4:	10c00015 	stw	r3,0(r2)
10009ab8:	a8c00117 	ldw	r3,4(r21)
10009abc:	10c00115 	stw	r3,4(r2)
10009ac0:	a8c00217 	ldw	r3,8(r21)
10009ac4:	10c00215 	stw	r3,8(r2)
10009ac8:	b447883a 	add	r3,r22,r17
10009acc:	bc45c83a 	sub	r2,r23,r17
10009ad0:	e0c00215 	stw	r3,8(fp)
10009ad4:	10800054 	ori	r2,r2,1
10009ad8:	18800115 	stw	r2,4(r3)
10009adc:	b0800117 	ldw	r2,4(r22)
10009ae0:	a009883a 	mov	r4,r20
10009ae4:	1080004c 	andi	r2,r2,1
10009ae8:	1462b03a 	or	r17,r2,r17
10009aec:	b4400115 	stw	r17,4(r22)
10009af0:	000d7680 	call	1000d768 <__malloc_unlock>
10009af4:	9005883a 	mov	r2,r18
10009af8:	003f4006 	br	100097fc <__alt_data_end+0xf80097fc>
10009afc:	a8c00217 	ldw	r3,8(r21)
10009b00:	90c00215 	stw	r3,8(r18)
10009b04:	a8c00317 	ldw	r3,12(r21)
10009b08:	90c00315 	stw	r3,12(r18)
10009b0c:	30801126 	beq	r6,r2,10009b54 <_realloc_r+0x4c8>
10009b10:	90800404 	addi	r2,r18,16
10009b14:	a8c00404 	addi	r3,r21,16
10009b18:	003f1906 	br	10009780 <__alt_data_end+0xf8009780>
10009b1c:	90ffff17 	ldw	r3,-4(r18)
10009b20:	00bfff04 	movi	r2,-4
10009b24:	a825883a 	mov	r18,r21
10009b28:	1884703a 	and	r2,r3,r2
10009b2c:	80a1883a 	add	r16,r16,r2
10009b30:	003f2406 	br	100097c4 <__alt_data_end+0xf80097c4>
10009b34:	a8800217 	ldw	r2,8(r21)
10009b38:	b0800415 	stw	r2,16(r22)
10009b3c:	a8800317 	ldw	r2,12(r21)
10009b40:	b0800515 	stw	r2,20(r22)
10009b44:	31000a26 	beq	r6,r4,10009b70 <_realloc_r+0x4e4>
10009b48:	b0800604 	addi	r2,r22,24
10009b4c:	ad400404 	addi	r21,r21,16
10009b50:	003fa906 	br	100099f8 <__alt_data_end+0xf80099f8>
10009b54:	a9000417 	ldw	r4,16(r21)
10009b58:	90800604 	addi	r2,r18,24
10009b5c:	a8c00604 	addi	r3,r21,24
10009b60:	91000415 	stw	r4,16(r18)
10009b64:	a9000517 	ldw	r4,20(r21)
10009b68:	91000515 	stw	r4,20(r18)
10009b6c:	003f0406 	br	10009780 <__alt_data_end+0xf8009780>
10009b70:	a8c00417 	ldw	r3,16(r21)
10009b74:	ad400604 	addi	r21,r21,24
10009b78:	b0800804 	addi	r2,r22,32
10009b7c:	b0c00615 	stw	r3,24(r22)
10009b80:	a8ffff17 	ldw	r3,-4(r21)
10009b84:	b0c00715 	stw	r3,28(r22)
10009b88:	003f9b06 	br	100099f8 <__alt_data_end+0xf80099f8>
10009b8c:	9005883a 	mov	r2,r18
10009b90:	003fc706 	br	10009ab0 <__alt_data_end+0xf8009ab0>
10009b94:	a80b883a 	mov	r5,r21
10009b98:	9009883a 	mov	r4,r18
10009b9c:	00094d00 	call	100094d0 <memmove>
10009ba0:	003fc906 	br	10009ac8 <__alt_data_end+0xf8009ac8>
10009ba4:	a8800217 	ldw	r2,8(r21)
10009ba8:	b0800415 	stw	r2,16(r22)
10009bac:	a8800317 	ldw	r2,12(r21)
10009bb0:	b0800515 	stw	r2,20(r22)
10009bb4:	31000726 	beq	r6,r4,10009bd4 <_realloc_r+0x548>
10009bb8:	b0800604 	addi	r2,r22,24
10009bbc:	ad400404 	addi	r21,r21,16
10009bc0:	003fbb06 	br	10009ab0 <__alt_data_end+0xf8009ab0>
10009bc4:	a009883a 	mov	r4,r20
10009bc8:	000d7680 	call	1000d768 <__malloc_unlock>
10009bcc:	0005883a 	mov	r2,zero
10009bd0:	003f0a06 	br	100097fc <__alt_data_end+0xf80097fc>
10009bd4:	a8c00417 	ldw	r3,16(r21)
10009bd8:	ad400604 	addi	r21,r21,24
10009bdc:	b0800804 	addi	r2,r22,32
10009be0:	b0c00615 	stw	r3,24(r22)
10009be4:	a8ffff17 	ldw	r3,-4(r21)
10009be8:	b0c00715 	stw	r3,28(r22)
10009bec:	003fb006 	br	10009ab0 <__alt_data_end+0xf8009ab0>

10009bf0 <__swbuf_r>:
10009bf0:	defffb04 	addi	sp,sp,-20
10009bf4:	dcc00315 	stw	r19,12(sp)
10009bf8:	dc800215 	stw	r18,8(sp)
10009bfc:	dc000015 	stw	r16,0(sp)
10009c00:	dfc00415 	stw	ra,16(sp)
10009c04:	dc400115 	stw	r17,4(sp)
10009c08:	2025883a 	mov	r18,r4
10009c0c:	2827883a 	mov	r19,r5
10009c10:	3021883a 	mov	r16,r6
10009c14:	20000226 	beq	r4,zero,10009c20 <__swbuf_r+0x30>
10009c18:	20800e17 	ldw	r2,56(r4)
10009c1c:	10004226 	beq	r2,zero,10009d28 <__swbuf_r+0x138>
10009c20:	80800617 	ldw	r2,24(r16)
10009c24:	8100030b 	ldhu	r4,12(r16)
10009c28:	80800215 	stw	r2,8(r16)
10009c2c:	2080020c 	andi	r2,r4,8
10009c30:	10003626 	beq	r2,zero,10009d0c <__swbuf_r+0x11c>
10009c34:	80c00417 	ldw	r3,16(r16)
10009c38:	18003426 	beq	r3,zero,10009d0c <__swbuf_r+0x11c>
10009c3c:	2088000c 	andi	r2,r4,8192
10009c40:	9c403fcc 	andi	r17,r19,255
10009c44:	10001a26 	beq	r2,zero,10009cb0 <__swbuf_r+0xc0>
10009c48:	80800017 	ldw	r2,0(r16)
10009c4c:	81000517 	ldw	r4,20(r16)
10009c50:	10c7c83a 	sub	r3,r2,r3
10009c54:	1900200e 	bge	r3,r4,10009cd8 <__swbuf_r+0xe8>
10009c58:	18c00044 	addi	r3,r3,1
10009c5c:	81000217 	ldw	r4,8(r16)
10009c60:	11400044 	addi	r5,r2,1
10009c64:	81400015 	stw	r5,0(r16)
10009c68:	213fffc4 	addi	r4,r4,-1
10009c6c:	81000215 	stw	r4,8(r16)
10009c70:	14c00005 	stb	r19,0(r2)
10009c74:	80800517 	ldw	r2,20(r16)
10009c78:	10c01e26 	beq	r2,r3,10009cf4 <__swbuf_r+0x104>
10009c7c:	8080030b 	ldhu	r2,12(r16)
10009c80:	1080004c 	andi	r2,r2,1
10009c84:	10000226 	beq	r2,zero,10009c90 <__swbuf_r+0xa0>
10009c88:	00800284 	movi	r2,10
10009c8c:	88801926 	beq	r17,r2,10009cf4 <__swbuf_r+0x104>
10009c90:	8805883a 	mov	r2,r17
10009c94:	dfc00417 	ldw	ra,16(sp)
10009c98:	dcc00317 	ldw	r19,12(sp)
10009c9c:	dc800217 	ldw	r18,8(sp)
10009ca0:	dc400117 	ldw	r17,4(sp)
10009ca4:	dc000017 	ldw	r16,0(sp)
10009ca8:	dec00504 	addi	sp,sp,20
10009cac:	f800283a 	ret
10009cb0:	81401917 	ldw	r5,100(r16)
10009cb4:	00b7ffc4 	movi	r2,-8193
10009cb8:	21080014 	ori	r4,r4,8192
10009cbc:	2884703a 	and	r2,r5,r2
10009cc0:	80801915 	stw	r2,100(r16)
10009cc4:	80800017 	ldw	r2,0(r16)
10009cc8:	8100030d 	sth	r4,12(r16)
10009ccc:	81000517 	ldw	r4,20(r16)
10009cd0:	10c7c83a 	sub	r3,r2,r3
10009cd4:	193fe016 	blt	r3,r4,10009c58 <__alt_data_end+0xf8009c58>
10009cd8:	800b883a 	mov	r5,r16
10009cdc:	9009883a 	mov	r4,r18
10009ce0:	00048e40 	call	100048e4 <_fflush_r>
10009ce4:	1000071e 	bne	r2,zero,10009d04 <__swbuf_r+0x114>
10009ce8:	80800017 	ldw	r2,0(r16)
10009cec:	00c00044 	movi	r3,1
10009cf0:	003fda06 	br	10009c5c <__alt_data_end+0xf8009c5c>
10009cf4:	800b883a 	mov	r5,r16
10009cf8:	9009883a 	mov	r4,r18
10009cfc:	00048e40 	call	100048e4 <_fflush_r>
10009d00:	103fe326 	beq	r2,zero,10009c90 <__alt_data_end+0xf8009c90>
10009d04:	00bfffc4 	movi	r2,-1
10009d08:	003fe206 	br	10009c94 <__alt_data_end+0xf8009c94>
10009d0c:	800b883a 	mov	r5,r16
10009d10:	9009883a 	mov	r4,r18
10009d14:	0002cec0 	call	10002cec <__swsetup_r>
10009d18:	103ffa1e 	bne	r2,zero,10009d04 <__alt_data_end+0xf8009d04>
10009d1c:	8100030b 	ldhu	r4,12(r16)
10009d20:	80c00417 	ldw	r3,16(r16)
10009d24:	003fc506 	br	10009c3c <__alt_data_end+0xf8009c3c>
10009d28:	0004cc00 	call	10004cc0 <__sinit>
10009d2c:	003fbc06 	br	10009c20 <__alt_data_end+0xf8009c20>

10009d30 <__swbuf>:
10009d30:	00840074 	movhi	r2,4097
10009d34:	10856b04 	addi	r2,r2,5548
10009d38:	280d883a 	mov	r6,r5
10009d3c:	200b883a 	mov	r5,r4
10009d40:	11000017 	ldw	r4,0(r2)
10009d44:	0009bf01 	jmpi	10009bf0 <__swbuf_r>

10009d48 <_wcrtomb_r>:
10009d48:	defff604 	addi	sp,sp,-40
10009d4c:	00840074 	movhi	r2,4097
10009d50:	dc800815 	stw	r18,32(sp)
10009d54:	dc400715 	stw	r17,28(sp)
10009d58:	dc000615 	stw	r16,24(sp)
10009d5c:	10856f04 	addi	r2,r2,5564
10009d60:	dfc00915 	stw	ra,36(sp)
10009d64:	2021883a 	mov	r16,r4
10009d68:	3823883a 	mov	r17,r7
10009d6c:	14800017 	ldw	r18,0(r2)
10009d70:	28001426 	beq	r5,zero,10009dc4 <_wcrtomb_r+0x7c>
10009d74:	d9400415 	stw	r5,16(sp)
10009d78:	d9800515 	stw	r6,20(sp)
10009d7c:	00053480 	call	10005348 <__locale_charset>
10009d80:	d9800517 	ldw	r6,20(sp)
10009d84:	d9400417 	ldw	r5,16(sp)
10009d88:	100f883a 	mov	r7,r2
10009d8c:	dc400015 	stw	r17,0(sp)
10009d90:	8009883a 	mov	r4,r16
10009d94:	903ee83a 	callr	r18
10009d98:	00ffffc4 	movi	r3,-1
10009d9c:	10c0031e 	bne	r2,r3,10009dac <_wcrtomb_r+0x64>
10009da0:	88000015 	stw	zero,0(r17)
10009da4:	00c02284 	movi	r3,138
10009da8:	80c00015 	stw	r3,0(r16)
10009dac:	dfc00917 	ldw	ra,36(sp)
10009db0:	dc800817 	ldw	r18,32(sp)
10009db4:	dc400717 	ldw	r17,28(sp)
10009db8:	dc000617 	ldw	r16,24(sp)
10009dbc:	dec00a04 	addi	sp,sp,40
10009dc0:	f800283a 	ret
10009dc4:	00053480 	call	10005348 <__locale_charset>
10009dc8:	100f883a 	mov	r7,r2
10009dcc:	dc400015 	stw	r17,0(sp)
10009dd0:	000d883a 	mov	r6,zero
10009dd4:	d9400104 	addi	r5,sp,4
10009dd8:	8009883a 	mov	r4,r16
10009ddc:	903ee83a 	callr	r18
10009de0:	003fed06 	br	10009d98 <__alt_data_end+0xf8009d98>

10009de4 <wcrtomb>:
10009de4:	defff604 	addi	sp,sp,-40
10009de8:	00840074 	movhi	r2,4097
10009dec:	dc800615 	stw	r18,24(sp)
10009df0:	dc400515 	stw	r17,20(sp)
10009df4:	10856b04 	addi	r2,r2,5548
10009df8:	dfc00915 	stw	ra,36(sp)
10009dfc:	dd000815 	stw	r20,32(sp)
10009e00:	dcc00715 	stw	r19,28(sp)
10009e04:	dc000415 	stw	r16,16(sp)
10009e08:	3025883a 	mov	r18,r6
10009e0c:	14400017 	ldw	r17,0(r2)
10009e10:	20001926 	beq	r4,zero,10009e78 <wcrtomb+0x94>
10009e14:	00840074 	movhi	r2,4097
10009e18:	10856f04 	addi	r2,r2,5564
10009e1c:	15000017 	ldw	r20,0(r2)
10009e20:	2021883a 	mov	r16,r4
10009e24:	2827883a 	mov	r19,r5
10009e28:	00053480 	call	10005348 <__locale_charset>
10009e2c:	100f883a 	mov	r7,r2
10009e30:	dc800015 	stw	r18,0(sp)
10009e34:	980d883a 	mov	r6,r19
10009e38:	800b883a 	mov	r5,r16
10009e3c:	8809883a 	mov	r4,r17
10009e40:	a03ee83a 	callr	r20
10009e44:	00ffffc4 	movi	r3,-1
10009e48:	10c0031e 	bne	r2,r3,10009e58 <wcrtomb+0x74>
10009e4c:	90000015 	stw	zero,0(r18)
10009e50:	00c02284 	movi	r3,138
10009e54:	88c00015 	stw	r3,0(r17)
10009e58:	dfc00917 	ldw	ra,36(sp)
10009e5c:	dd000817 	ldw	r20,32(sp)
10009e60:	dcc00717 	ldw	r19,28(sp)
10009e64:	dc800617 	ldw	r18,24(sp)
10009e68:	dc400517 	ldw	r17,20(sp)
10009e6c:	dc000417 	ldw	r16,16(sp)
10009e70:	dec00a04 	addi	sp,sp,40
10009e74:	f800283a 	ret
10009e78:	00840074 	movhi	r2,4097
10009e7c:	10856f04 	addi	r2,r2,5564
10009e80:	14000017 	ldw	r16,0(r2)
10009e84:	00053480 	call	10005348 <__locale_charset>
10009e88:	100f883a 	mov	r7,r2
10009e8c:	dc800015 	stw	r18,0(sp)
10009e90:	000d883a 	mov	r6,zero
10009e94:	d9400104 	addi	r5,sp,4
10009e98:	8809883a 	mov	r4,r17
10009e9c:	803ee83a 	callr	r16
10009ea0:	003fe806 	br	10009e44 <__alt_data_end+0xf8009e44>

10009ea4 <__ascii_wctomb>:
10009ea4:	28000526 	beq	r5,zero,10009ebc <__ascii_wctomb+0x18>
10009ea8:	00803fc4 	movi	r2,255
10009eac:	11800536 	bltu	r2,r6,10009ec4 <__ascii_wctomb+0x20>
10009eb0:	29800005 	stb	r6,0(r5)
10009eb4:	00800044 	movi	r2,1
10009eb8:	f800283a 	ret
10009ebc:	0005883a 	mov	r2,zero
10009ec0:	f800283a 	ret
10009ec4:	00802284 	movi	r2,138
10009ec8:	20800015 	stw	r2,0(r4)
10009ecc:	00bfffc4 	movi	r2,-1
10009ed0:	f800283a 	ret

10009ed4 <_wctomb_r>:
10009ed4:	00840074 	movhi	r2,4097
10009ed8:	defff904 	addi	sp,sp,-28
10009edc:	10856f04 	addi	r2,r2,5564
10009ee0:	dfc00615 	stw	ra,24(sp)
10009ee4:	dc400515 	stw	r17,20(sp)
10009ee8:	dc000415 	stw	r16,16(sp)
10009eec:	3823883a 	mov	r17,r7
10009ef0:	14000017 	ldw	r16,0(r2)
10009ef4:	d9000115 	stw	r4,4(sp)
10009ef8:	d9400215 	stw	r5,8(sp)
10009efc:	d9800315 	stw	r6,12(sp)
10009f00:	00053480 	call	10005348 <__locale_charset>
10009f04:	d9800317 	ldw	r6,12(sp)
10009f08:	d9400217 	ldw	r5,8(sp)
10009f0c:	d9000117 	ldw	r4,4(sp)
10009f10:	100f883a 	mov	r7,r2
10009f14:	dc400015 	stw	r17,0(sp)
10009f18:	803ee83a 	callr	r16
10009f1c:	dfc00617 	ldw	ra,24(sp)
10009f20:	dc400517 	ldw	r17,20(sp)
10009f24:	dc000417 	ldw	r16,16(sp)
10009f28:	dec00704 	addi	sp,sp,28
10009f2c:	f800283a 	ret

10009f30 <__udivdi3>:
10009f30:	defff504 	addi	sp,sp,-44
10009f34:	dcc00415 	stw	r19,16(sp)
10009f38:	dc000115 	stw	r16,4(sp)
10009f3c:	dfc00a15 	stw	ra,40(sp)
10009f40:	df000915 	stw	fp,36(sp)
10009f44:	ddc00815 	stw	r23,32(sp)
10009f48:	dd800715 	stw	r22,28(sp)
10009f4c:	dd400615 	stw	r21,24(sp)
10009f50:	dd000515 	stw	r20,20(sp)
10009f54:	dc800315 	stw	r18,12(sp)
10009f58:	dc400215 	stw	r17,8(sp)
10009f5c:	2027883a 	mov	r19,r4
10009f60:	2821883a 	mov	r16,r5
10009f64:	3800411e 	bne	r7,zero,1000a06c <__udivdi3+0x13c>
10009f68:	3023883a 	mov	r17,r6
10009f6c:	2025883a 	mov	r18,r4
10009f70:	2980522e 	bgeu	r5,r6,1000a0bc <__udivdi3+0x18c>
10009f74:	00bfffd4 	movui	r2,65535
10009f78:	282d883a 	mov	r22,r5
10009f7c:	1180a836 	bltu	r2,r6,1000a220 <__udivdi3+0x2f0>
10009f80:	00803fc4 	movi	r2,255
10009f84:	1185803a 	cmpltu	r2,r2,r6
10009f88:	100490fa 	slli	r2,r2,3
10009f8c:	3086d83a 	srl	r3,r6,r2
10009f90:	01040074 	movhi	r4,4097
10009f94:	213e7404 	addi	r4,r4,-1584
10009f98:	20c7883a 	add	r3,r4,r3
10009f9c:	18c00003 	ldbu	r3,0(r3)
10009fa0:	1885883a 	add	r2,r3,r2
10009fa4:	00c00804 	movi	r3,32
10009fa8:	1887c83a 	sub	r3,r3,r2
10009fac:	18000526 	beq	r3,zero,10009fc4 <__udivdi3+0x94>
10009fb0:	80e0983a 	sll	r16,r16,r3
10009fb4:	9884d83a 	srl	r2,r19,r2
10009fb8:	30e2983a 	sll	r17,r6,r3
10009fbc:	98e4983a 	sll	r18,r19,r3
10009fc0:	142cb03a 	or	r22,r2,r16
10009fc4:	882ad43a 	srli	r21,r17,16
10009fc8:	b009883a 	mov	r4,r22
10009fcc:	8d3fffcc 	andi	r20,r17,65535
10009fd0:	a80b883a 	mov	r5,r21
10009fd4:	00009580 	call	10000958 <__umodsi3>
10009fd8:	b009883a 	mov	r4,r22
10009fdc:	a80b883a 	mov	r5,r21
10009fe0:	1027883a 	mov	r19,r2
10009fe4:	00008f40 	call	100008f4 <__udivsi3>
10009fe8:	102d883a 	mov	r22,r2
10009fec:	9826943a 	slli	r19,r19,16
10009ff0:	9004d43a 	srli	r2,r18,16
10009ff4:	a5a1383a 	mul	r16,r20,r22
10009ff8:	14c4b03a 	or	r2,r2,r19
10009ffc:	1400052e 	bgeu	r2,r16,1000a014 <__udivdi3+0xe4>
1000a000:	1445883a 	add	r2,r2,r17
1000a004:	b0ffffc4 	addi	r3,r22,-1
1000a008:	14400136 	bltu	r2,r17,1000a010 <__udivdi3+0xe0>
1000a00c:	14012336 	bltu	r2,r16,1000a49c <__udivdi3+0x56c>
1000a010:	182d883a 	mov	r22,r3
1000a014:	1421c83a 	sub	r16,r2,r16
1000a018:	a80b883a 	mov	r5,r21
1000a01c:	8009883a 	mov	r4,r16
1000a020:	00009580 	call	10000958 <__umodsi3>
1000a024:	1027883a 	mov	r19,r2
1000a028:	a80b883a 	mov	r5,r21
1000a02c:	8009883a 	mov	r4,r16
1000a030:	00008f40 	call	100008f4 <__udivsi3>
1000a034:	9826943a 	slli	r19,r19,16
1000a038:	a0a9383a 	mul	r20,r20,r2
1000a03c:	94bfffcc 	andi	r18,r18,65535
1000a040:	94e4b03a 	or	r18,r18,r19
1000a044:	9500052e 	bgeu	r18,r20,1000a05c <__udivdi3+0x12c>
1000a048:	8ca5883a 	add	r18,r17,r18
1000a04c:	10ffffc4 	addi	r3,r2,-1
1000a050:	9440f136 	bltu	r18,r17,1000a418 <__udivdi3+0x4e8>
1000a054:	9500f02e 	bgeu	r18,r20,1000a418 <__udivdi3+0x4e8>
1000a058:	10bfff84 	addi	r2,r2,-2
1000a05c:	b00c943a 	slli	r6,r22,16
1000a060:	0007883a 	mov	r3,zero
1000a064:	3084b03a 	or	r2,r6,r2
1000a068:	00005906 	br	1000a1d0 <__udivdi3+0x2a0>
1000a06c:	29c05636 	bltu	r5,r7,1000a1c8 <__udivdi3+0x298>
1000a070:	00bfffd4 	movui	r2,65535
1000a074:	11c0622e 	bgeu	r2,r7,1000a200 <__udivdi3+0x2d0>
1000a078:	00804034 	movhi	r2,256
1000a07c:	10bfffc4 	addi	r2,r2,-1
1000a080:	11c0ee36 	bltu	r2,r7,1000a43c <__udivdi3+0x50c>
1000a084:	00800404 	movi	r2,16
1000a088:	3886d83a 	srl	r3,r7,r2
1000a08c:	01040074 	movhi	r4,4097
1000a090:	213e7404 	addi	r4,r4,-1584
1000a094:	20c7883a 	add	r3,r4,r3
1000a098:	18c00003 	ldbu	r3,0(r3)
1000a09c:	05400804 	movi	r21,32
1000a0a0:	1885883a 	add	r2,r3,r2
1000a0a4:	a8abc83a 	sub	r21,r21,r2
1000a0a8:	a800621e 	bne	r21,zero,1000a234 <__udivdi3+0x304>
1000a0ac:	3c00e936 	bltu	r7,r16,1000a454 <__udivdi3+0x524>
1000a0b0:	9985403a 	cmpgeu	r2,r19,r6
1000a0b4:	0007883a 	mov	r3,zero
1000a0b8:	00004506 	br	1000a1d0 <__udivdi3+0x2a0>
1000a0bc:	3000041e 	bne	r6,zero,1000a0d0 <__udivdi3+0x1a0>
1000a0c0:	000b883a 	mov	r5,zero
1000a0c4:	01000044 	movi	r4,1
1000a0c8:	00008f40 	call	100008f4 <__udivsi3>
1000a0cc:	1023883a 	mov	r17,r2
1000a0d0:	00bfffd4 	movui	r2,65535
1000a0d4:	14404e2e 	bgeu	r2,r17,1000a210 <__udivdi3+0x2e0>
1000a0d8:	00804034 	movhi	r2,256
1000a0dc:	10bfffc4 	addi	r2,r2,-1
1000a0e0:	1440d836 	bltu	r2,r17,1000a444 <__udivdi3+0x514>
1000a0e4:	00800404 	movi	r2,16
1000a0e8:	8886d83a 	srl	r3,r17,r2
1000a0ec:	01040074 	movhi	r4,4097
1000a0f0:	213e7404 	addi	r4,r4,-1584
1000a0f4:	20c7883a 	add	r3,r4,r3
1000a0f8:	18c00003 	ldbu	r3,0(r3)
1000a0fc:	1885883a 	add	r2,r3,r2
1000a100:	00c00804 	movi	r3,32
1000a104:	1887c83a 	sub	r3,r3,r2
1000a108:	18008f1e 	bne	r3,zero,1000a348 <__udivdi3+0x418>
1000a10c:	882ad43a 	srli	r21,r17,16
1000a110:	8461c83a 	sub	r16,r16,r17
1000a114:	8d3fffcc 	andi	r20,r17,65535
1000a118:	00c00044 	movi	r3,1
1000a11c:	8009883a 	mov	r4,r16
1000a120:	a80b883a 	mov	r5,r21
1000a124:	d8c00015 	stw	r3,0(sp)
1000a128:	00009580 	call	10000958 <__umodsi3>
1000a12c:	8009883a 	mov	r4,r16
1000a130:	a80b883a 	mov	r5,r21
1000a134:	1027883a 	mov	r19,r2
1000a138:	00008f40 	call	100008f4 <__udivsi3>
1000a13c:	9826943a 	slli	r19,r19,16
1000a140:	9008d43a 	srli	r4,r18,16
1000a144:	1521383a 	mul	r16,r2,r20
1000a148:	102d883a 	mov	r22,r2
1000a14c:	24c8b03a 	or	r4,r4,r19
1000a150:	d8c00017 	ldw	r3,0(sp)
1000a154:	2400052e 	bgeu	r4,r16,1000a16c <__udivdi3+0x23c>
1000a158:	2449883a 	add	r4,r4,r17
1000a15c:	b0bfffc4 	addi	r2,r22,-1
1000a160:	24400136 	bltu	r4,r17,1000a168 <__udivdi3+0x238>
1000a164:	2400ca36 	bltu	r4,r16,1000a490 <__udivdi3+0x560>
1000a168:	102d883a 	mov	r22,r2
1000a16c:	2421c83a 	sub	r16,r4,r16
1000a170:	a80b883a 	mov	r5,r21
1000a174:	8009883a 	mov	r4,r16
1000a178:	d8c00015 	stw	r3,0(sp)
1000a17c:	00009580 	call	10000958 <__umodsi3>
1000a180:	1027883a 	mov	r19,r2
1000a184:	a80b883a 	mov	r5,r21
1000a188:	8009883a 	mov	r4,r16
1000a18c:	00008f40 	call	100008f4 <__udivsi3>
1000a190:	9826943a 	slli	r19,r19,16
1000a194:	1529383a 	mul	r20,r2,r20
1000a198:	94bfffcc 	andi	r18,r18,65535
1000a19c:	94e4b03a 	or	r18,r18,r19
1000a1a0:	d8c00017 	ldw	r3,0(sp)
1000a1a4:	9500052e 	bgeu	r18,r20,1000a1bc <__udivdi3+0x28c>
1000a1a8:	8ca5883a 	add	r18,r17,r18
1000a1ac:	113fffc4 	addi	r4,r2,-1
1000a1b0:	94409736 	bltu	r18,r17,1000a410 <__udivdi3+0x4e0>
1000a1b4:	9500962e 	bgeu	r18,r20,1000a410 <__udivdi3+0x4e0>
1000a1b8:	10bfff84 	addi	r2,r2,-2
1000a1bc:	b00c943a 	slli	r6,r22,16
1000a1c0:	3084b03a 	or	r2,r6,r2
1000a1c4:	00000206 	br	1000a1d0 <__udivdi3+0x2a0>
1000a1c8:	0007883a 	mov	r3,zero
1000a1cc:	0005883a 	mov	r2,zero
1000a1d0:	dfc00a17 	ldw	ra,40(sp)
1000a1d4:	df000917 	ldw	fp,36(sp)
1000a1d8:	ddc00817 	ldw	r23,32(sp)
1000a1dc:	dd800717 	ldw	r22,28(sp)
1000a1e0:	dd400617 	ldw	r21,24(sp)
1000a1e4:	dd000517 	ldw	r20,20(sp)
1000a1e8:	dcc00417 	ldw	r19,16(sp)
1000a1ec:	dc800317 	ldw	r18,12(sp)
1000a1f0:	dc400217 	ldw	r17,8(sp)
1000a1f4:	dc000117 	ldw	r16,4(sp)
1000a1f8:	dec00b04 	addi	sp,sp,44
1000a1fc:	f800283a 	ret
1000a200:	00803fc4 	movi	r2,255
1000a204:	11c5803a 	cmpltu	r2,r2,r7
1000a208:	100490fa 	slli	r2,r2,3
1000a20c:	003f9e06 	br	1000a088 <__alt_data_end+0xf800a088>
1000a210:	00803fc4 	movi	r2,255
1000a214:	1445803a 	cmpltu	r2,r2,r17
1000a218:	100490fa 	slli	r2,r2,3
1000a21c:	003fb206 	br	1000a0e8 <__alt_data_end+0xf800a0e8>
1000a220:	00804034 	movhi	r2,256
1000a224:	10bfffc4 	addi	r2,r2,-1
1000a228:	11808836 	bltu	r2,r6,1000a44c <__udivdi3+0x51c>
1000a22c:	00800404 	movi	r2,16
1000a230:	003f5606 	br	10009f8c <__alt_data_end+0xf8009f8c>
1000a234:	30aed83a 	srl	r23,r6,r2
1000a238:	3d4e983a 	sll	r7,r7,r21
1000a23c:	80acd83a 	srl	r22,r16,r2
1000a240:	9884d83a 	srl	r2,r19,r2
1000a244:	3deeb03a 	or	r23,r7,r23
1000a248:	b824d43a 	srli	r18,r23,16
1000a24c:	8560983a 	sll	r16,r16,r21
1000a250:	b009883a 	mov	r4,r22
1000a254:	900b883a 	mov	r5,r18
1000a258:	3568983a 	sll	r20,r6,r21
1000a25c:	1420b03a 	or	r16,r2,r16
1000a260:	00009580 	call	10000958 <__umodsi3>
1000a264:	b009883a 	mov	r4,r22
1000a268:	900b883a 	mov	r5,r18
1000a26c:	1023883a 	mov	r17,r2
1000a270:	00008f40 	call	100008f4 <__udivsi3>
1000a274:	8808943a 	slli	r4,r17,16
1000a278:	bf3fffcc 	andi	fp,r23,65535
1000a27c:	8006d43a 	srli	r3,r16,16
1000a280:	e0a3383a 	mul	r17,fp,r2
1000a284:	100d883a 	mov	r6,r2
1000a288:	1906b03a 	or	r3,r3,r4
1000a28c:	1c40042e 	bgeu	r3,r17,1000a2a0 <__udivdi3+0x370>
1000a290:	1dc7883a 	add	r3,r3,r23
1000a294:	10bfffc4 	addi	r2,r2,-1
1000a298:	1dc0752e 	bgeu	r3,r23,1000a470 <__udivdi3+0x540>
1000a29c:	100d883a 	mov	r6,r2
1000a2a0:	1c63c83a 	sub	r17,r3,r17
1000a2a4:	900b883a 	mov	r5,r18
1000a2a8:	8809883a 	mov	r4,r17
1000a2ac:	d9800015 	stw	r6,0(sp)
1000a2b0:	00009580 	call	10000958 <__umodsi3>
1000a2b4:	102d883a 	mov	r22,r2
1000a2b8:	8809883a 	mov	r4,r17
1000a2bc:	900b883a 	mov	r5,r18
1000a2c0:	00008f40 	call	100008f4 <__udivsi3>
1000a2c4:	b02c943a 	slli	r22,r22,16
1000a2c8:	e089383a 	mul	r4,fp,r2
1000a2cc:	843fffcc 	andi	r16,r16,65535
1000a2d0:	85a0b03a 	or	r16,r16,r22
1000a2d4:	d9800017 	ldw	r6,0(sp)
1000a2d8:	8100042e 	bgeu	r16,r4,1000a2ec <__udivdi3+0x3bc>
1000a2dc:	85e1883a 	add	r16,r16,r23
1000a2e0:	10ffffc4 	addi	r3,r2,-1
1000a2e4:	85c05e2e 	bgeu	r16,r23,1000a460 <__udivdi3+0x530>
1000a2e8:	1805883a 	mov	r2,r3
1000a2ec:	300c943a 	slli	r6,r6,16
1000a2f0:	a17fffcc 	andi	r5,r20,65535
1000a2f4:	a028d43a 	srli	r20,r20,16
1000a2f8:	3084b03a 	or	r2,r6,r2
1000a2fc:	10ffffcc 	andi	r3,r2,65535
1000a300:	100cd43a 	srli	r6,r2,16
1000a304:	194f383a 	mul	r7,r3,r5
1000a308:	1d07383a 	mul	r3,r3,r20
1000a30c:	314b383a 	mul	r5,r6,r5
1000a310:	3810d43a 	srli	r8,r7,16
1000a314:	8121c83a 	sub	r16,r16,r4
1000a318:	1947883a 	add	r3,r3,r5
1000a31c:	40c7883a 	add	r3,r8,r3
1000a320:	350d383a 	mul	r6,r6,r20
1000a324:	1940022e 	bgeu	r3,r5,1000a330 <__udivdi3+0x400>
1000a328:	01000074 	movhi	r4,1
1000a32c:	310d883a 	add	r6,r6,r4
1000a330:	1828d43a 	srli	r20,r3,16
1000a334:	a18d883a 	add	r6,r20,r6
1000a338:	81803e36 	bltu	r16,r6,1000a434 <__udivdi3+0x504>
1000a33c:	81803826 	beq	r16,r6,1000a420 <__udivdi3+0x4f0>
1000a340:	0007883a 	mov	r3,zero
1000a344:	003fa206 	br	1000a1d0 <__alt_data_end+0xf800a1d0>
1000a348:	88e2983a 	sll	r17,r17,r3
1000a34c:	80a8d83a 	srl	r20,r16,r2
1000a350:	80e0983a 	sll	r16,r16,r3
1000a354:	882ad43a 	srli	r21,r17,16
1000a358:	9884d83a 	srl	r2,r19,r2
1000a35c:	a009883a 	mov	r4,r20
1000a360:	a80b883a 	mov	r5,r21
1000a364:	142eb03a 	or	r23,r2,r16
1000a368:	98e4983a 	sll	r18,r19,r3
1000a36c:	00009580 	call	10000958 <__umodsi3>
1000a370:	a009883a 	mov	r4,r20
1000a374:	a80b883a 	mov	r5,r21
1000a378:	1021883a 	mov	r16,r2
1000a37c:	00008f40 	call	100008f4 <__udivsi3>
1000a380:	1039883a 	mov	fp,r2
1000a384:	8d3fffcc 	andi	r20,r17,65535
1000a388:	8020943a 	slli	r16,r16,16
1000a38c:	b804d43a 	srli	r2,r23,16
1000a390:	a72d383a 	mul	r22,r20,fp
1000a394:	1404b03a 	or	r2,r2,r16
1000a398:	1580062e 	bgeu	r2,r22,1000a3b4 <__udivdi3+0x484>
1000a39c:	1445883a 	add	r2,r2,r17
1000a3a0:	e0ffffc4 	addi	r3,fp,-1
1000a3a4:	14403836 	bltu	r2,r17,1000a488 <__udivdi3+0x558>
1000a3a8:	1580372e 	bgeu	r2,r22,1000a488 <__udivdi3+0x558>
1000a3ac:	e73fff84 	addi	fp,fp,-2
1000a3b0:	1445883a 	add	r2,r2,r17
1000a3b4:	15adc83a 	sub	r22,r2,r22
1000a3b8:	a80b883a 	mov	r5,r21
1000a3bc:	b009883a 	mov	r4,r22
1000a3c0:	00009580 	call	10000958 <__umodsi3>
1000a3c4:	1027883a 	mov	r19,r2
1000a3c8:	b009883a 	mov	r4,r22
1000a3cc:	a80b883a 	mov	r5,r21
1000a3d0:	00008f40 	call	100008f4 <__udivsi3>
1000a3d4:	9826943a 	slli	r19,r19,16
1000a3d8:	a0a1383a 	mul	r16,r20,r2
1000a3dc:	b93fffcc 	andi	r4,r23,65535
1000a3e0:	24c8b03a 	or	r4,r4,r19
1000a3e4:	2400062e 	bgeu	r4,r16,1000a400 <__udivdi3+0x4d0>
1000a3e8:	2449883a 	add	r4,r4,r17
1000a3ec:	10ffffc4 	addi	r3,r2,-1
1000a3f0:	24402336 	bltu	r4,r17,1000a480 <__udivdi3+0x550>
1000a3f4:	2400222e 	bgeu	r4,r16,1000a480 <__udivdi3+0x550>
1000a3f8:	10bfff84 	addi	r2,r2,-2
1000a3fc:	2449883a 	add	r4,r4,r17
1000a400:	e038943a 	slli	fp,fp,16
1000a404:	2421c83a 	sub	r16,r4,r16
1000a408:	e086b03a 	or	r3,fp,r2
1000a40c:	003f4306 	br	1000a11c <__alt_data_end+0xf800a11c>
1000a410:	2005883a 	mov	r2,r4
1000a414:	003f6906 	br	1000a1bc <__alt_data_end+0xf800a1bc>
1000a418:	1805883a 	mov	r2,r3
1000a41c:	003f0f06 	br	1000a05c <__alt_data_end+0xf800a05c>
1000a420:	1806943a 	slli	r3,r3,16
1000a424:	9d66983a 	sll	r19,r19,r21
1000a428:	39ffffcc 	andi	r7,r7,65535
1000a42c:	19c7883a 	add	r3,r3,r7
1000a430:	98ffc32e 	bgeu	r19,r3,1000a340 <__alt_data_end+0xf800a340>
1000a434:	10bfffc4 	addi	r2,r2,-1
1000a438:	003fc106 	br	1000a340 <__alt_data_end+0xf800a340>
1000a43c:	00800604 	movi	r2,24
1000a440:	003f1106 	br	1000a088 <__alt_data_end+0xf800a088>
1000a444:	00800604 	movi	r2,24
1000a448:	003f2706 	br	1000a0e8 <__alt_data_end+0xf800a0e8>
1000a44c:	00800604 	movi	r2,24
1000a450:	003ece06 	br	10009f8c <__alt_data_end+0xf8009f8c>
1000a454:	0007883a 	mov	r3,zero
1000a458:	00800044 	movi	r2,1
1000a45c:	003f5c06 	br	1000a1d0 <__alt_data_end+0xf800a1d0>
1000a460:	813fa12e 	bgeu	r16,r4,1000a2e8 <__alt_data_end+0xf800a2e8>
1000a464:	10bfff84 	addi	r2,r2,-2
1000a468:	85e1883a 	add	r16,r16,r23
1000a46c:	003f9f06 	br	1000a2ec <__alt_data_end+0xf800a2ec>
1000a470:	1c7f8a2e 	bgeu	r3,r17,1000a29c <__alt_data_end+0xf800a29c>
1000a474:	31bfff84 	addi	r6,r6,-2
1000a478:	1dc7883a 	add	r3,r3,r23
1000a47c:	003f8806 	br	1000a2a0 <__alt_data_end+0xf800a2a0>
1000a480:	1805883a 	mov	r2,r3
1000a484:	003fde06 	br	1000a400 <__alt_data_end+0xf800a400>
1000a488:	1839883a 	mov	fp,r3
1000a48c:	003fc906 	br	1000a3b4 <__alt_data_end+0xf800a3b4>
1000a490:	b5bfff84 	addi	r22,r22,-2
1000a494:	2449883a 	add	r4,r4,r17
1000a498:	003f3406 	br	1000a16c <__alt_data_end+0xf800a16c>
1000a49c:	b5bfff84 	addi	r22,r22,-2
1000a4a0:	1445883a 	add	r2,r2,r17
1000a4a4:	003edb06 	br	1000a014 <__alt_data_end+0xf800a014>

1000a4a8 <__umoddi3>:
1000a4a8:	defff404 	addi	sp,sp,-48
1000a4ac:	df000a15 	stw	fp,40(sp)
1000a4b0:	dc400315 	stw	r17,12(sp)
1000a4b4:	dc000215 	stw	r16,8(sp)
1000a4b8:	dfc00b15 	stw	ra,44(sp)
1000a4bc:	ddc00915 	stw	r23,36(sp)
1000a4c0:	dd800815 	stw	r22,32(sp)
1000a4c4:	dd400715 	stw	r21,28(sp)
1000a4c8:	dd000615 	stw	r20,24(sp)
1000a4cc:	dcc00515 	stw	r19,20(sp)
1000a4d0:	dc800415 	stw	r18,16(sp)
1000a4d4:	2021883a 	mov	r16,r4
1000a4d8:	2823883a 	mov	r17,r5
1000a4dc:	2839883a 	mov	fp,r5
1000a4e0:	38003c1e 	bne	r7,zero,1000a5d4 <__umoddi3+0x12c>
1000a4e4:	3027883a 	mov	r19,r6
1000a4e8:	2029883a 	mov	r20,r4
1000a4ec:	2980512e 	bgeu	r5,r6,1000a634 <__umoddi3+0x18c>
1000a4f0:	00bfffd4 	movui	r2,65535
1000a4f4:	11809a36 	bltu	r2,r6,1000a760 <__umoddi3+0x2b8>
1000a4f8:	01003fc4 	movi	r4,255
1000a4fc:	2189803a 	cmpltu	r4,r4,r6
1000a500:	200890fa 	slli	r4,r4,3
1000a504:	3104d83a 	srl	r2,r6,r4
1000a508:	00c40074 	movhi	r3,4097
1000a50c:	18fe7404 	addi	r3,r3,-1584
1000a510:	1885883a 	add	r2,r3,r2
1000a514:	10c00003 	ldbu	r3,0(r2)
1000a518:	00800804 	movi	r2,32
1000a51c:	1909883a 	add	r4,r3,r4
1000a520:	1125c83a 	sub	r18,r2,r4
1000a524:	90000526 	beq	r18,zero,1000a53c <__umoddi3+0x94>
1000a528:	8ca2983a 	sll	r17,r17,r18
1000a52c:	8108d83a 	srl	r4,r16,r4
1000a530:	34a6983a 	sll	r19,r6,r18
1000a534:	84a8983a 	sll	r20,r16,r18
1000a538:	2478b03a 	or	fp,r4,r17
1000a53c:	982ed43a 	srli	r23,r19,16
1000a540:	e009883a 	mov	r4,fp
1000a544:	9dbfffcc 	andi	r22,r19,65535
1000a548:	b80b883a 	mov	r5,r23
1000a54c:	00009580 	call	10000958 <__umodsi3>
1000a550:	e009883a 	mov	r4,fp
1000a554:	b80b883a 	mov	r5,r23
1000a558:	102b883a 	mov	r21,r2
1000a55c:	00008f40 	call	100008f4 <__udivsi3>
1000a560:	a806943a 	slli	r3,r21,16
1000a564:	a008d43a 	srli	r4,r20,16
1000a568:	b085383a 	mul	r2,r22,r2
1000a56c:	20c8b03a 	or	r4,r4,r3
1000a570:	2080032e 	bgeu	r4,r2,1000a580 <__umoddi3+0xd8>
1000a574:	24c9883a 	add	r4,r4,r19
1000a578:	24c00136 	bltu	r4,r19,1000a580 <__umoddi3+0xd8>
1000a57c:	20811036 	bltu	r4,r2,1000a9c0 <__umoddi3+0x518>
1000a580:	20abc83a 	sub	r21,r4,r2
1000a584:	b80b883a 	mov	r5,r23
1000a588:	a809883a 	mov	r4,r21
1000a58c:	00009580 	call	10000958 <__umodsi3>
1000a590:	1023883a 	mov	r17,r2
1000a594:	b80b883a 	mov	r5,r23
1000a598:	a809883a 	mov	r4,r21
1000a59c:	00008f40 	call	100008f4 <__udivsi3>
1000a5a0:	8822943a 	slli	r17,r17,16
1000a5a4:	b085383a 	mul	r2,r22,r2
1000a5a8:	a0ffffcc 	andi	r3,r20,65535
1000a5ac:	1c46b03a 	or	r3,r3,r17
1000a5b0:	1880042e 	bgeu	r3,r2,1000a5c4 <__umoddi3+0x11c>
1000a5b4:	1cc7883a 	add	r3,r3,r19
1000a5b8:	1cc00236 	bltu	r3,r19,1000a5c4 <__umoddi3+0x11c>
1000a5bc:	1880012e 	bgeu	r3,r2,1000a5c4 <__umoddi3+0x11c>
1000a5c0:	1cc7883a 	add	r3,r3,r19
1000a5c4:	1885c83a 	sub	r2,r3,r2
1000a5c8:	1484d83a 	srl	r2,r2,r18
1000a5cc:	0007883a 	mov	r3,zero
1000a5d0:	00004f06 	br	1000a710 <__umoddi3+0x268>
1000a5d4:	29c04c36 	bltu	r5,r7,1000a708 <__umoddi3+0x260>
1000a5d8:	00bfffd4 	movui	r2,65535
1000a5dc:	11c0582e 	bgeu	r2,r7,1000a740 <__umoddi3+0x298>
1000a5e0:	00804034 	movhi	r2,256
1000a5e4:	10bfffc4 	addi	r2,r2,-1
1000a5e8:	11c0e736 	bltu	r2,r7,1000a988 <__umoddi3+0x4e0>
1000a5ec:	01000404 	movi	r4,16
1000a5f0:	3904d83a 	srl	r2,r7,r4
1000a5f4:	00c40074 	movhi	r3,4097
1000a5f8:	18fe7404 	addi	r3,r3,-1584
1000a5fc:	1885883a 	add	r2,r3,r2
1000a600:	14c00003 	ldbu	r19,0(r2)
1000a604:	00c00804 	movi	r3,32
1000a608:	9927883a 	add	r19,r19,r4
1000a60c:	1ce9c83a 	sub	r20,r3,r19
1000a610:	a000581e 	bne	r20,zero,1000a774 <__umoddi3+0x2cc>
1000a614:	3c400136 	bltu	r7,r17,1000a61c <__umoddi3+0x174>
1000a618:	8180eb36 	bltu	r16,r6,1000a9c8 <__umoddi3+0x520>
1000a61c:	8185c83a 	sub	r2,r16,r6
1000a620:	89e3c83a 	sub	r17,r17,r7
1000a624:	8089803a 	cmpltu	r4,r16,r2
1000a628:	8939c83a 	sub	fp,r17,r4
1000a62c:	e007883a 	mov	r3,fp
1000a630:	00003706 	br	1000a710 <__umoddi3+0x268>
1000a634:	3000041e 	bne	r6,zero,1000a648 <__umoddi3+0x1a0>
1000a638:	000b883a 	mov	r5,zero
1000a63c:	01000044 	movi	r4,1
1000a640:	00008f40 	call	100008f4 <__udivsi3>
1000a644:	1027883a 	mov	r19,r2
1000a648:	00bfffd4 	movui	r2,65535
1000a64c:	14c0402e 	bgeu	r2,r19,1000a750 <__umoddi3+0x2a8>
1000a650:	00804034 	movhi	r2,256
1000a654:	10bfffc4 	addi	r2,r2,-1
1000a658:	14c0cd36 	bltu	r2,r19,1000a990 <__umoddi3+0x4e8>
1000a65c:	00800404 	movi	r2,16
1000a660:	9886d83a 	srl	r3,r19,r2
1000a664:	01040074 	movhi	r4,4097
1000a668:	213e7404 	addi	r4,r4,-1584
1000a66c:	20c7883a 	add	r3,r4,r3
1000a670:	18c00003 	ldbu	r3,0(r3)
1000a674:	1887883a 	add	r3,r3,r2
1000a678:	00800804 	movi	r2,32
1000a67c:	10e5c83a 	sub	r18,r2,r3
1000a680:	9000901e 	bne	r18,zero,1000a8c4 <__umoddi3+0x41c>
1000a684:	982cd43a 	srli	r22,r19,16
1000a688:	8ce3c83a 	sub	r17,r17,r19
1000a68c:	9d7fffcc 	andi	r21,r19,65535
1000a690:	b00b883a 	mov	r5,r22
1000a694:	8809883a 	mov	r4,r17
1000a698:	00009580 	call	10000958 <__umodsi3>
1000a69c:	8809883a 	mov	r4,r17
1000a6a0:	b00b883a 	mov	r5,r22
1000a6a4:	1021883a 	mov	r16,r2
1000a6a8:	00008f40 	call	100008f4 <__udivsi3>
1000a6ac:	8006943a 	slli	r3,r16,16
1000a6b0:	a008d43a 	srli	r4,r20,16
1000a6b4:	1545383a 	mul	r2,r2,r21
1000a6b8:	20c8b03a 	or	r4,r4,r3
1000a6bc:	2080042e 	bgeu	r4,r2,1000a6d0 <__umoddi3+0x228>
1000a6c0:	24c9883a 	add	r4,r4,r19
1000a6c4:	24c00236 	bltu	r4,r19,1000a6d0 <__umoddi3+0x228>
1000a6c8:	2080012e 	bgeu	r4,r2,1000a6d0 <__umoddi3+0x228>
1000a6cc:	24c9883a 	add	r4,r4,r19
1000a6d0:	20a1c83a 	sub	r16,r4,r2
1000a6d4:	b00b883a 	mov	r5,r22
1000a6d8:	8009883a 	mov	r4,r16
1000a6dc:	00009580 	call	10000958 <__umodsi3>
1000a6e0:	1023883a 	mov	r17,r2
1000a6e4:	b00b883a 	mov	r5,r22
1000a6e8:	8009883a 	mov	r4,r16
1000a6ec:	00008f40 	call	100008f4 <__udivsi3>
1000a6f0:	8822943a 	slli	r17,r17,16
1000a6f4:	1545383a 	mul	r2,r2,r21
1000a6f8:	a53fffcc 	andi	r20,r20,65535
1000a6fc:	a446b03a 	or	r3,r20,r17
1000a700:	18bfb02e 	bgeu	r3,r2,1000a5c4 <__alt_data_end+0xf800a5c4>
1000a704:	003fab06 	br	1000a5b4 <__alt_data_end+0xf800a5b4>
1000a708:	2005883a 	mov	r2,r4
1000a70c:	2807883a 	mov	r3,r5
1000a710:	dfc00b17 	ldw	ra,44(sp)
1000a714:	df000a17 	ldw	fp,40(sp)
1000a718:	ddc00917 	ldw	r23,36(sp)
1000a71c:	dd800817 	ldw	r22,32(sp)
1000a720:	dd400717 	ldw	r21,28(sp)
1000a724:	dd000617 	ldw	r20,24(sp)
1000a728:	dcc00517 	ldw	r19,20(sp)
1000a72c:	dc800417 	ldw	r18,16(sp)
1000a730:	dc400317 	ldw	r17,12(sp)
1000a734:	dc000217 	ldw	r16,8(sp)
1000a738:	dec00c04 	addi	sp,sp,48
1000a73c:	f800283a 	ret
1000a740:	04c03fc4 	movi	r19,255
1000a744:	99c9803a 	cmpltu	r4,r19,r7
1000a748:	200890fa 	slli	r4,r4,3
1000a74c:	003fa806 	br	1000a5f0 <__alt_data_end+0xf800a5f0>
1000a750:	00803fc4 	movi	r2,255
1000a754:	14c5803a 	cmpltu	r2,r2,r19
1000a758:	100490fa 	slli	r2,r2,3
1000a75c:	003fc006 	br	1000a660 <__alt_data_end+0xf800a660>
1000a760:	00804034 	movhi	r2,256
1000a764:	10bfffc4 	addi	r2,r2,-1
1000a768:	11808b36 	bltu	r2,r6,1000a998 <__umoddi3+0x4f0>
1000a76c:	01000404 	movi	r4,16
1000a770:	003f6406 	br	1000a504 <__alt_data_end+0xf800a504>
1000a774:	34c4d83a 	srl	r2,r6,r19
1000a778:	3d0e983a 	sll	r7,r7,r20
1000a77c:	8cf8d83a 	srl	fp,r17,r19
1000a780:	8d10983a 	sll	r8,r17,r20
1000a784:	38aab03a 	or	r21,r7,r2
1000a788:	a82cd43a 	srli	r22,r21,16
1000a78c:	84e2d83a 	srl	r17,r16,r19
1000a790:	e009883a 	mov	r4,fp
1000a794:	b00b883a 	mov	r5,r22
1000a798:	8a22b03a 	or	r17,r17,r8
1000a79c:	3524983a 	sll	r18,r6,r20
1000a7a0:	00009580 	call	10000958 <__umodsi3>
1000a7a4:	e009883a 	mov	r4,fp
1000a7a8:	b00b883a 	mov	r5,r22
1000a7ac:	102f883a 	mov	r23,r2
1000a7b0:	00008f40 	call	100008f4 <__udivsi3>
1000a7b4:	100d883a 	mov	r6,r2
1000a7b8:	b808943a 	slli	r4,r23,16
1000a7bc:	aa3fffcc 	andi	r8,r21,65535
1000a7c0:	8804d43a 	srli	r2,r17,16
1000a7c4:	41af383a 	mul	r23,r8,r6
1000a7c8:	8520983a 	sll	r16,r16,r20
1000a7cc:	1104b03a 	or	r2,r2,r4
1000a7d0:	15c0042e 	bgeu	r2,r23,1000a7e4 <__umoddi3+0x33c>
1000a7d4:	1545883a 	add	r2,r2,r21
1000a7d8:	30ffffc4 	addi	r3,r6,-1
1000a7dc:	1540742e 	bgeu	r2,r21,1000a9b0 <__umoddi3+0x508>
1000a7e0:	180d883a 	mov	r6,r3
1000a7e4:	15efc83a 	sub	r23,r2,r23
1000a7e8:	b00b883a 	mov	r5,r22
1000a7ec:	b809883a 	mov	r4,r23
1000a7f0:	d9800115 	stw	r6,4(sp)
1000a7f4:	da000015 	stw	r8,0(sp)
1000a7f8:	00009580 	call	10000958 <__umodsi3>
1000a7fc:	b00b883a 	mov	r5,r22
1000a800:	b809883a 	mov	r4,r23
1000a804:	1039883a 	mov	fp,r2
1000a808:	00008f40 	call	100008f4 <__udivsi3>
1000a80c:	da000017 	ldw	r8,0(sp)
1000a810:	e038943a 	slli	fp,fp,16
1000a814:	100b883a 	mov	r5,r2
1000a818:	4089383a 	mul	r4,r8,r2
1000a81c:	8a3fffcc 	andi	r8,r17,65535
1000a820:	4710b03a 	or	r8,r8,fp
1000a824:	d9800117 	ldw	r6,4(sp)
1000a828:	4100042e 	bgeu	r8,r4,1000a83c <__umoddi3+0x394>
1000a82c:	4551883a 	add	r8,r8,r21
1000a830:	10bfffc4 	addi	r2,r2,-1
1000a834:	45405a2e 	bgeu	r8,r21,1000a9a0 <__umoddi3+0x4f8>
1000a838:	100b883a 	mov	r5,r2
1000a83c:	300c943a 	slli	r6,r6,16
1000a840:	91ffffcc 	andi	r7,r18,65535
1000a844:	9004d43a 	srli	r2,r18,16
1000a848:	314cb03a 	or	r6,r6,r5
1000a84c:	317fffcc 	andi	r5,r6,65535
1000a850:	300cd43a 	srli	r6,r6,16
1000a854:	29d3383a 	mul	r9,r5,r7
1000a858:	288b383a 	mul	r5,r5,r2
1000a85c:	31cf383a 	mul	r7,r6,r7
1000a860:	4806d43a 	srli	r3,r9,16
1000a864:	4111c83a 	sub	r8,r8,r4
1000a868:	29cb883a 	add	r5,r5,r7
1000a86c:	194b883a 	add	r5,r3,r5
1000a870:	3085383a 	mul	r2,r6,r2
1000a874:	29c0022e 	bgeu	r5,r7,1000a880 <__umoddi3+0x3d8>
1000a878:	00c00074 	movhi	r3,1
1000a87c:	10c5883a 	add	r2,r2,r3
1000a880:	2808d43a 	srli	r4,r5,16
1000a884:	280a943a 	slli	r5,r5,16
1000a888:	4a7fffcc 	andi	r9,r9,65535
1000a88c:	2085883a 	add	r2,r4,r2
1000a890:	2a4b883a 	add	r5,r5,r9
1000a894:	40803636 	bltu	r8,r2,1000a970 <__umoddi3+0x4c8>
1000a898:	40804d26 	beq	r8,r2,1000a9d0 <__umoddi3+0x528>
1000a89c:	4089c83a 	sub	r4,r8,r2
1000a8a0:	280f883a 	mov	r7,r5
1000a8a4:	81cfc83a 	sub	r7,r16,r7
1000a8a8:	81c7803a 	cmpltu	r3,r16,r7
1000a8ac:	20c7c83a 	sub	r3,r4,r3
1000a8b0:	1cc4983a 	sll	r2,r3,r19
1000a8b4:	3d0ed83a 	srl	r7,r7,r20
1000a8b8:	1d06d83a 	srl	r3,r3,r20
1000a8bc:	11c4b03a 	or	r2,r2,r7
1000a8c0:	003f9306 	br	1000a710 <__alt_data_end+0xf800a710>
1000a8c4:	9ca6983a 	sll	r19,r19,r18
1000a8c8:	88e8d83a 	srl	r20,r17,r3
1000a8cc:	80c4d83a 	srl	r2,r16,r3
1000a8d0:	982cd43a 	srli	r22,r19,16
1000a8d4:	8ca2983a 	sll	r17,r17,r18
1000a8d8:	a009883a 	mov	r4,r20
1000a8dc:	b00b883a 	mov	r5,r22
1000a8e0:	1478b03a 	or	fp,r2,r17
1000a8e4:	00009580 	call	10000958 <__umodsi3>
1000a8e8:	a009883a 	mov	r4,r20
1000a8ec:	b00b883a 	mov	r5,r22
1000a8f0:	1023883a 	mov	r17,r2
1000a8f4:	00008f40 	call	100008f4 <__udivsi3>
1000a8f8:	9d7fffcc 	andi	r21,r19,65535
1000a8fc:	880a943a 	slli	r5,r17,16
1000a900:	e008d43a 	srli	r4,fp,16
1000a904:	a885383a 	mul	r2,r21,r2
1000a908:	84a8983a 	sll	r20,r16,r18
1000a90c:	2148b03a 	or	r4,r4,r5
1000a910:	2080042e 	bgeu	r4,r2,1000a924 <__umoddi3+0x47c>
1000a914:	24c9883a 	add	r4,r4,r19
1000a918:	24c00236 	bltu	r4,r19,1000a924 <__umoddi3+0x47c>
1000a91c:	2080012e 	bgeu	r4,r2,1000a924 <__umoddi3+0x47c>
1000a920:	24c9883a 	add	r4,r4,r19
1000a924:	20a3c83a 	sub	r17,r4,r2
1000a928:	b00b883a 	mov	r5,r22
1000a92c:	8809883a 	mov	r4,r17
1000a930:	00009580 	call	10000958 <__umodsi3>
1000a934:	102f883a 	mov	r23,r2
1000a938:	8809883a 	mov	r4,r17
1000a93c:	b00b883a 	mov	r5,r22
1000a940:	00008f40 	call	100008f4 <__udivsi3>
1000a944:	b82e943a 	slli	r23,r23,16
1000a948:	a885383a 	mul	r2,r21,r2
1000a94c:	e13fffcc 	andi	r4,fp,65535
1000a950:	25c8b03a 	or	r4,r4,r23
1000a954:	2080042e 	bgeu	r4,r2,1000a968 <__umoddi3+0x4c0>
1000a958:	24c9883a 	add	r4,r4,r19
1000a95c:	24c00236 	bltu	r4,r19,1000a968 <__umoddi3+0x4c0>
1000a960:	2080012e 	bgeu	r4,r2,1000a968 <__umoddi3+0x4c0>
1000a964:	24c9883a 	add	r4,r4,r19
1000a968:	20a3c83a 	sub	r17,r4,r2
1000a96c:	003f4806 	br	1000a690 <__alt_data_end+0xf800a690>
1000a970:	2c8fc83a 	sub	r7,r5,r18
1000a974:	1545c83a 	sub	r2,r2,r21
1000a978:	29cb803a 	cmpltu	r5,r5,r7
1000a97c:	1145c83a 	sub	r2,r2,r5
1000a980:	4089c83a 	sub	r4,r8,r2
1000a984:	003fc706 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000a988:	01000604 	movi	r4,24
1000a98c:	003f1806 	br	1000a5f0 <__alt_data_end+0xf800a5f0>
1000a990:	00800604 	movi	r2,24
1000a994:	003f3206 	br	1000a660 <__alt_data_end+0xf800a660>
1000a998:	01000604 	movi	r4,24
1000a99c:	003ed906 	br	1000a504 <__alt_data_end+0xf800a504>
1000a9a0:	413fa52e 	bgeu	r8,r4,1000a838 <__alt_data_end+0xf800a838>
1000a9a4:	297fff84 	addi	r5,r5,-2
1000a9a8:	4551883a 	add	r8,r8,r21
1000a9ac:	003fa306 	br	1000a83c <__alt_data_end+0xf800a83c>
1000a9b0:	15ff8b2e 	bgeu	r2,r23,1000a7e0 <__alt_data_end+0xf800a7e0>
1000a9b4:	31bfff84 	addi	r6,r6,-2
1000a9b8:	1545883a 	add	r2,r2,r21
1000a9bc:	003f8906 	br	1000a7e4 <__alt_data_end+0xf800a7e4>
1000a9c0:	24c9883a 	add	r4,r4,r19
1000a9c4:	003eee06 	br	1000a580 <__alt_data_end+0xf800a580>
1000a9c8:	8005883a 	mov	r2,r16
1000a9cc:	003f1706 	br	1000a62c <__alt_data_end+0xf800a62c>
1000a9d0:	817fe736 	bltu	r16,r5,1000a970 <__alt_data_end+0xf800a970>
1000a9d4:	280f883a 	mov	r7,r5
1000a9d8:	0009883a 	mov	r4,zero
1000a9dc:	003fb106 	br	1000a8a4 <__alt_data_end+0xf800a8a4>

1000a9e0 <__adddf3>:
1000a9e0:	02c00434 	movhi	r11,16
1000a9e4:	5affffc4 	addi	r11,r11,-1
1000a9e8:	2806d7fa 	srli	r3,r5,31
1000a9ec:	2ad4703a 	and	r10,r5,r11
1000a9f0:	3ad2703a 	and	r9,r7,r11
1000a9f4:	3804d53a 	srli	r2,r7,20
1000a9f8:	3018d77a 	srli	r12,r6,29
1000a9fc:	280ad53a 	srli	r5,r5,20
1000aa00:	501490fa 	slli	r10,r10,3
1000aa04:	2010d77a 	srli	r8,r4,29
1000aa08:	481290fa 	slli	r9,r9,3
1000aa0c:	380ed7fa 	srli	r7,r7,31
1000aa10:	defffb04 	addi	sp,sp,-20
1000aa14:	dc800215 	stw	r18,8(sp)
1000aa18:	dc400115 	stw	r17,4(sp)
1000aa1c:	dc000015 	stw	r16,0(sp)
1000aa20:	dfc00415 	stw	ra,16(sp)
1000aa24:	dcc00315 	stw	r19,12(sp)
1000aa28:	1c803fcc 	andi	r18,r3,255
1000aa2c:	2c01ffcc 	andi	r16,r5,2047
1000aa30:	5210b03a 	or	r8,r10,r8
1000aa34:	202290fa 	slli	r17,r4,3
1000aa38:	1081ffcc 	andi	r2,r2,2047
1000aa3c:	4b12b03a 	or	r9,r9,r12
1000aa40:	300c90fa 	slli	r6,r6,3
1000aa44:	91c07526 	beq	r18,r7,1000ac1c <__adddf3+0x23c>
1000aa48:	8087c83a 	sub	r3,r16,r2
1000aa4c:	00c0ab0e 	bge	zero,r3,1000acfc <__adddf3+0x31c>
1000aa50:	10002a1e 	bne	r2,zero,1000aafc <__adddf3+0x11c>
1000aa54:	4984b03a 	or	r2,r9,r6
1000aa58:	1000961e 	bne	r2,zero,1000acb4 <__adddf3+0x2d4>
1000aa5c:	888001cc 	andi	r2,r17,7
1000aa60:	10000726 	beq	r2,zero,1000aa80 <__adddf3+0xa0>
1000aa64:	888003cc 	andi	r2,r17,15
1000aa68:	00c00104 	movi	r3,4
1000aa6c:	10c00426 	beq	r2,r3,1000aa80 <__adddf3+0xa0>
1000aa70:	88c7883a 	add	r3,r17,r3
1000aa74:	1c63803a 	cmpltu	r17,r3,r17
1000aa78:	4451883a 	add	r8,r8,r17
1000aa7c:	1823883a 	mov	r17,r3
1000aa80:	4080202c 	andhi	r2,r8,128
1000aa84:	10005926 	beq	r2,zero,1000abec <__adddf3+0x20c>
1000aa88:	84000044 	addi	r16,r16,1
1000aa8c:	0081ffc4 	movi	r2,2047
1000aa90:	8080ba26 	beq	r16,r2,1000ad7c <__adddf3+0x39c>
1000aa94:	00bfe034 	movhi	r2,65408
1000aa98:	10bfffc4 	addi	r2,r2,-1
1000aa9c:	4090703a 	and	r8,r8,r2
1000aaa0:	4004977a 	slli	r2,r8,29
1000aaa4:	4010927a 	slli	r8,r8,9
1000aaa8:	8822d0fa 	srli	r17,r17,3
1000aaac:	8401ffcc 	andi	r16,r16,2047
1000aab0:	4010d33a 	srli	r8,r8,12
1000aab4:	9007883a 	mov	r3,r18
1000aab8:	1444b03a 	or	r2,r2,r17
1000aabc:	8401ffcc 	andi	r16,r16,2047
1000aac0:	8020953a 	slli	r16,r16,20
1000aac4:	18c03fcc 	andi	r3,r3,255
1000aac8:	01000434 	movhi	r4,16
1000aacc:	213fffc4 	addi	r4,r4,-1
1000aad0:	180697fa 	slli	r3,r3,31
1000aad4:	4110703a 	and	r8,r8,r4
1000aad8:	4410b03a 	or	r8,r8,r16
1000aadc:	40c6b03a 	or	r3,r8,r3
1000aae0:	dfc00417 	ldw	ra,16(sp)
1000aae4:	dcc00317 	ldw	r19,12(sp)
1000aae8:	dc800217 	ldw	r18,8(sp)
1000aaec:	dc400117 	ldw	r17,4(sp)
1000aaf0:	dc000017 	ldw	r16,0(sp)
1000aaf4:	dec00504 	addi	sp,sp,20
1000aaf8:	f800283a 	ret
1000aafc:	0081ffc4 	movi	r2,2047
1000ab00:	80bfd626 	beq	r16,r2,1000aa5c <__alt_data_end+0xf800aa5c>
1000ab04:	4a402034 	orhi	r9,r9,128
1000ab08:	00800e04 	movi	r2,56
1000ab0c:	10c09f16 	blt	r2,r3,1000ad8c <__adddf3+0x3ac>
1000ab10:	008007c4 	movi	r2,31
1000ab14:	10c0c216 	blt	r2,r3,1000ae20 <__adddf3+0x440>
1000ab18:	00800804 	movi	r2,32
1000ab1c:	10c5c83a 	sub	r2,r2,r3
1000ab20:	488a983a 	sll	r5,r9,r2
1000ab24:	30c8d83a 	srl	r4,r6,r3
1000ab28:	3084983a 	sll	r2,r6,r2
1000ab2c:	48c6d83a 	srl	r3,r9,r3
1000ab30:	290cb03a 	or	r6,r5,r4
1000ab34:	1004c03a 	cmpne	r2,r2,zero
1000ab38:	308cb03a 	or	r6,r6,r2
1000ab3c:	898dc83a 	sub	r6,r17,r6
1000ab40:	89a3803a 	cmpltu	r17,r17,r6
1000ab44:	40d1c83a 	sub	r8,r8,r3
1000ab48:	4451c83a 	sub	r8,r8,r17
1000ab4c:	3023883a 	mov	r17,r6
1000ab50:	4080202c 	andhi	r2,r8,128
1000ab54:	10002326 	beq	r2,zero,1000abe4 <__adddf3+0x204>
1000ab58:	04c02034 	movhi	r19,128
1000ab5c:	9cffffc4 	addi	r19,r19,-1
1000ab60:	44e6703a 	and	r19,r8,r19
1000ab64:	98007626 	beq	r19,zero,1000ad40 <__adddf3+0x360>
1000ab68:	9809883a 	mov	r4,r19
1000ab6c:	000cfe40 	call	1000cfe4 <__clzsi2>
1000ab70:	10fffe04 	addi	r3,r2,-8
1000ab74:	010007c4 	movi	r4,31
1000ab78:	20c07716 	blt	r4,r3,1000ad58 <__adddf3+0x378>
1000ab7c:	00800804 	movi	r2,32
1000ab80:	10c5c83a 	sub	r2,r2,r3
1000ab84:	8884d83a 	srl	r2,r17,r2
1000ab88:	98d0983a 	sll	r8,r19,r3
1000ab8c:	88e2983a 	sll	r17,r17,r3
1000ab90:	1204b03a 	or	r2,r2,r8
1000ab94:	1c007416 	blt	r3,r16,1000ad68 <__adddf3+0x388>
1000ab98:	1c21c83a 	sub	r16,r3,r16
1000ab9c:	82000044 	addi	r8,r16,1
1000aba0:	00c007c4 	movi	r3,31
1000aba4:	1a009116 	blt	r3,r8,1000adec <__adddf3+0x40c>
1000aba8:	00c00804 	movi	r3,32
1000abac:	1a07c83a 	sub	r3,r3,r8
1000abb0:	8a08d83a 	srl	r4,r17,r8
1000abb4:	88e2983a 	sll	r17,r17,r3
1000abb8:	10c6983a 	sll	r3,r2,r3
1000abbc:	1210d83a 	srl	r8,r2,r8
1000abc0:	8804c03a 	cmpne	r2,r17,zero
1000abc4:	1906b03a 	or	r3,r3,r4
1000abc8:	18a2b03a 	or	r17,r3,r2
1000abcc:	0021883a 	mov	r16,zero
1000abd0:	003fa206 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000abd4:	1890b03a 	or	r8,r3,r2
1000abd8:	40017d26 	beq	r8,zero,1000b1d0 <__adddf3+0x7f0>
1000abdc:	1011883a 	mov	r8,r2
1000abe0:	1823883a 	mov	r17,r3
1000abe4:	888001cc 	andi	r2,r17,7
1000abe8:	103f9e1e 	bne	r2,zero,1000aa64 <__alt_data_end+0xf800aa64>
1000abec:	4004977a 	slli	r2,r8,29
1000abf0:	8822d0fa 	srli	r17,r17,3
1000abf4:	4010d0fa 	srli	r8,r8,3
1000abf8:	9007883a 	mov	r3,r18
1000abfc:	1444b03a 	or	r2,r2,r17
1000ac00:	0101ffc4 	movi	r4,2047
1000ac04:	81002426 	beq	r16,r4,1000ac98 <__adddf3+0x2b8>
1000ac08:	8120703a 	and	r16,r16,r4
1000ac0c:	01000434 	movhi	r4,16
1000ac10:	213fffc4 	addi	r4,r4,-1
1000ac14:	4110703a 	and	r8,r8,r4
1000ac18:	003fa806 	br	1000aabc <__alt_data_end+0xf800aabc>
1000ac1c:	8089c83a 	sub	r4,r16,r2
1000ac20:	01005e0e 	bge	zero,r4,1000ad9c <__adddf3+0x3bc>
1000ac24:	10002b26 	beq	r2,zero,1000acd4 <__adddf3+0x2f4>
1000ac28:	0081ffc4 	movi	r2,2047
1000ac2c:	80bf8b26 	beq	r16,r2,1000aa5c <__alt_data_end+0xf800aa5c>
1000ac30:	4a402034 	orhi	r9,r9,128
1000ac34:	00800e04 	movi	r2,56
1000ac38:	1100a40e 	bge	r2,r4,1000aecc <__adddf3+0x4ec>
1000ac3c:	498cb03a 	or	r6,r9,r6
1000ac40:	300ac03a 	cmpne	r5,r6,zero
1000ac44:	0013883a 	mov	r9,zero
1000ac48:	2c4b883a 	add	r5,r5,r17
1000ac4c:	2c63803a 	cmpltu	r17,r5,r17
1000ac50:	4a11883a 	add	r8,r9,r8
1000ac54:	8a11883a 	add	r8,r17,r8
1000ac58:	2823883a 	mov	r17,r5
1000ac5c:	4080202c 	andhi	r2,r8,128
1000ac60:	103fe026 	beq	r2,zero,1000abe4 <__alt_data_end+0xf800abe4>
1000ac64:	84000044 	addi	r16,r16,1
1000ac68:	0081ffc4 	movi	r2,2047
1000ac6c:	8080d226 	beq	r16,r2,1000afb8 <__adddf3+0x5d8>
1000ac70:	00bfe034 	movhi	r2,65408
1000ac74:	10bfffc4 	addi	r2,r2,-1
1000ac78:	4090703a 	and	r8,r8,r2
1000ac7c:	880ad07a 	srli	r5,r17,1
1000ac80:	400897fa 	slli	r4,r8,31
1000ac84:	88c0004c 	andi	r3,r17,1
1000ac88:	28e2b03a 	or	r17,r5,r3
1000ac8c:	4010d07a 	srli	r8,r8,1
1000ac90:	2462b03a 	or	r17,r4,r17
1000ac94:	003f7106 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000ac98:	4088b03a 	or	r4,r8,r2
1000ac9c:	20014526 	beq	r4,zero,1000b1b4 <__adddf3+0x7d4>
1000aca0:	01000434 	movhi	r4,16
1000aca4:	42000234 	orhi	r8,r8,8
1000aca8:	213fffc4 	addi	r4,r4,-1
1000acac:	4110703a 	and	r8,r8,r4
1000acb0:	003f8206 	br	1000aabc <__alt_data_end+0xf800aabc>
1000acb4:	18ffffc4 	addi	r3,r3,-1
1000acb8:	1800491e 	bne	r3,zero,1000ade0 <__adddf3+0x400>
1000acbc:	898bc83a 	sub	r5,r17,r6
1000acc0:	8963803a 	cmpltu	r17,r17,r5
1000acc4:	4251c83a 	sub	r8,r8,r9
1000acc8:	4451c83a 	sub	r8,r8,r17
1000accc:	2823883a 	mov	r17,r5
1000acd0:	003f9f06 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000acd4:	4984b03a 	or	r2,r9,r6
1000acd8:	103f6026 	beq	r2,zero,1000aa5c <__alt_data_end+0xf800aa5c>
1000acdc:	213fffc4 	addi	r4,r4,-1
1000ace0:	2000931e 	bne	r4,zero,1000af30 <__adddf3+0x550>
1000ace4:	898d883a 	add	r6,r17,r6
1000ace8:	3463803a 	cmpltu	r17,r6,r17
1000acec:	4251883a 	add	r8,r8,r9
1000acf0:	8a11883a 	add	r8,r17,r8
1000acf4:	3023883a 	mov	r17,r6
1000acf8:	003fd806 	br	1000ac5c <__alt_data_end+0xf800ac5c>
1000acfc:	1800541e 	bne	r3,zero,1000ae50 <__adddf3+0x470>
1000ad00:	80800044 	addi	r2,r16,1
1000ad04:	1081ffcc 	andi	r2,r2,2047
1000ad08:	00c00044 	movi	r3,1
1000ad0c:	1880a00e 	bge	r3,r2,1000af90 <__adddf3+0x5b0>
1000ad10:	8989c83a 	sub	r4,r17,r6
1000ad14:	8905803a 	cmpltu	r2,r17,r4
1000ad18:	4267c83a 	sub	r19,r8,r9
1000ad1c:	98a7c83a 	sub	r19,r19,r2
1000ad20:	9880202c 	andhi	r2,r19,128
1000ad24:	10006326 	beq	r2,zero,1000aeb4 <__adddf3+0x4d4>
1000ad28:	3463c83a 	sub	r17,r6,r17
1000ad2c:	4a07c83a 	sub	r3,r9,r8
1000ad30:	344d803a 	cmpltu	r6,r6,r17
1000ad34:	19a7c83a 	sub	r19,r3,r6
1000ad38:	3825883a 	mov	r18,r7
1000ad3c:	983f8a1e 	bne	r19,zero,1000ab68 <__alt_data_end+0xf800ab68>
1000ad40:	8809883a 	mov	r4,r17
1000ad44:	000cfe40 	call	1000cfe4 <__clzsi2>
1000ad48:	10800804 	addi	r2,r2,32
1000ad4c:	10fffe04 	addi	r3,r2,-8
1000ad50:	010007c4 	movi	r4,31
1000ad54:	20ff890e 	bge	r4,r3,1000ab7c <__alt_data_end+0xf800ab7c>
1000ad58:	10bff604 	addi	r2,r2,-40
1000ad5c:	8884983a 	sll	r2,r17,r2
1000ad60:	0023883a 	mov	r17,zero
1000ad64:	1c3f8c0e 	bge	r3,r16,1000ab98 <__alt_data_end+0xf800ab98>
1000ad68:	023fe034 	movhi	r8,65408
1000ad6c:	423fffc4 	addi	r8,r8,-1
1000ad70:	80e1c83a 	sub	r16,r16,r3
1000ad74:	1210703a 	and	r8,r2,r8
1000ad78:	003f3806 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000ad7c:	9007883a 	mov	r3,r18
1000ad80:	0011883a 	mov	r8,zero
1000ad84:	0005883a 	mov	r2,zero
1000ad88:	003f4c06 	br	1000aabc <__alt_data_end+0xf800aabc>
1000ad8c:	498cb03a 	or	r6,r9,r6
1000ad90:	300cc03a 	cmpne	r6,r6,zero
1000ad94:	0007883a 	mov	r3,zero
1000ad98:	003f6806 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000ad9c:	20009c1e 	bne	r4,zero,1000b010 <__adddf3+0x630>
1000ada0:	80800044 	addi	r2,r16,1
1000ada4:	1141ffcc 	andi	r5,r2,2047
1000ada8:	01000044 	movi	r4,1
1000adac:	2140670e 	bge	r4,r5,1000af4c <__adddf3+0x56c>
1000adb0:	0101ffc4 	movi	r4,2047
1000adb4:	11007f26 	beq	r2,r4,1000afb4 <__adddf3+0x5d4>
1000adb8:	898d883a 	add	r6,r17,r6
1000adbc:	4247883a 	add	r3,r8,r9
1000adc0:	3451803a 	cmpltu	r8,r6,r17
1000adc4:	40d1883a 	add	r8,r8,r3
1000adc8:	402297fa 	slli	r17,r8,31
1000adcc:	300cd07a 	srli	r6,r6,1
1000add0:	4010d07a 	srli	r8,r8,1
1000add4:	1021883a 	mov	r16,r2
1000add8:	89a2b03a 	or	r17,r17,r6
1000addc:	003f1f06 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000ade0:	0081ffc4 	movi	r2,2047
1000ade4:	80bf481e 	bne	r16,r2,1000ab08 <__alt_data_end+0xf800ab08>
1000ade8:	003f1c06 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000adec:	843ff844 	addi	r16,r16,-31
1000adf0:	01000804 	movi	r4,32
1000adf4:	1406d83a 	srl	r3,r2,r16
1000adf8:	41005026 	beq	r8,r4,1000af3c <__adddf3+0x55c>
1000adfc:	01001004 	movi	r4,64
1000ae00:	2211c83a 	sub	r8,r4,r8
1000ae04:	1204983a 	sll	r2,r2,r8
1000ae08:	88a2b03a 	or	r17,r17,r2
1000ae0c:	8822c03a 	cmpne	r17,r17,zero
1000ae10:	1c62b03a 	or	r17,r3,r17
1000ae14:	0011883a 	mov	r8,zero
1000ae18:	0021883a 	mov	r16,zero
1000ae1c:	003f7106 	br	1000abe4 <__alt_data_end+0xf800abe4>
1000ae20:	193ff804 	addi	r4,r3,-32
1000ae24:	00800804 	movi	r2,32
1000ae28:	4908d83a 	srl	r4,r9,r4
1000ae2c:	18804526 	beq	r3,r2,1000af44 <__adddf3+0x564>
1000ae30:	00801004 	movi	r2,64
1000ae34:	10c5c83a 	sub	r2,r2,r3
1000ae38:	4886983a 	sll	r3,r9,r2
1000ae3c:	198cb03a 	or	r6,r3,r6
1000ae40:	300cc03a 	cmpne	r6,r6,zero
1000ae44:	218cb03a 	or	r6,r4,r6
1000ae48:	0007883a 	mov	r3,zero
1000ae4c:	003f3b06 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000ae50:	80002a26 	beq	r16,zero,1000aefc <__adddf3+0x51c>
1000ae54:	0101ffc4 	movi	r4,2047
1000ae58:	11006826 	beq	r2,r4,1000affc <__adddf3+0x61c>
1000ae5c:	00c7c83a 	sub	r3,zero,r3
1000ae60:	42002034 	orhi	r8,r8,128
1000ae64:	01000e04 	movi	r4,56
1000ae68:	20c07c16 	blt	r4,r3,1000b05c <__adddf3+0x67c>
1000ae6c:	010007c4 	movi	r4,31
1000ae70:	20c0da16 	blt	r4,r3,1000b1dc <__adddf3+0x7fc>
1000ae74:	01000804 	movi	r4,32
1000ae78:	20c9c83a 	sub	r4,r4,r3
1000ae7c:	4114983a 	sll	r10,r8,r4
1000ae80:	88cad83a 	srl	r5,r17,r3
1000ae84:	8908983a 	sll	r4,r17,r4
1000ae88:	40c6d83a 	srl	r3,r8,r3
1000ae8c:	5162b03a 	or	r17,r10,r5
1000ae90:	2008c03a 	cmpne	r4,r4,zero
1000ae94:	8922b03a 	or	r17,r17,r4
1000ae98:	3463c83a 	sub	r17,r6,r17
1000ae9c:	48c7c83a 	sub	r3,r9,r3
1000aea0:	344d803a 	cmpltu	r6,r6,r17
1000aea4:	1991c83a 	sub	r8,r3,r6
1000aea8:	1021883a 	mov	r16,r2
1000aeac:	3825883a 	mov	r18,r7
1000aeb0:	003f2706 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000aeb4:	24d0b03a 	or	r8,r4,r19
1000aeb8:	40001b1e 	bne	r8,zero,1000af28 <__adddf3+0x548>
1000aebc:	0005883a 	mov	r2,zero
1000aec0:	0007883a 	mov	r3,zero
1000aec4:	0021883a 	mov	r16,zero
1000aec8:	003f4d06 	br	1000ac00 <__alt_data_end+0xf800ac00>
1000aecc:	008007c4 	movi	r2,31
1000aed0:	11003c16 	blt	r2,r4,1000afc4 <__adddf3+0x5e4>
1000aed4:	00800804 	movi	r2,32
1000aed8:	1105c83a 	sub	r2,r2,r4
1000aedc:	488e983a 	sll	r7,r9,r2
1000aee0:	310ad83a 	srl	r5,r6,r4
1000aee4:	3084983a 	sll	r2,r6,r2
1000aee8:	4912d83a 	srl	r9,r9,r4
1000aeec:	394ab03a 	or	r5,r7,r5
1000aef0:	1004c03a 	cmpne	r2,r2,zero
1000aef4:	288ab03a 	or	r5,r5,r2
1000aef8:	003f5306 	br	1000ac48 <__alt_data_end+0xf800ac48>
1000aefc:	4448b03a 	or	r4,r8,r17
1000af00:	20003e26 	beq	r4,zero,1000affc <__adddf3+0x61c>
1000af04:	00c6303a 	nor	r3,zero,r3
1000af08:	18003a1e 	bne	r3,zero,1000aff4 <__adddf3+0x614>
1000af0c:	3463c83a 	sub	r17,r6,r17
1000af10:	4a07c83a 	sub	r3,r9,r8
1000af14:	344d803a 	cmpltu	r6,r6,r17
1000af18:	1991c83a 	sub	r8,r3,r6
1000af1c:	1021883a 	mov	r16,r2
1000af20:	3825883a 	mov	r18,r7
1000af24:	003f0a06 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000af28:	2023883a 	mov	r17,r4
1000af2c:	003f0d06 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000af30:	0081ffc4 	movi	r2,2047
1000af34:	80bf3f1e 	bne	r16,r2,1000ac34 <__alt_data_end+0xf800ac34>
1000af38:	003ec806 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000af3c:	0005883a 	mov	r2,zero
1000af40:	003fb106 	br	1000ae08 <__alt_data_end+0xf800ae08>
1000af44:	0007883a 	mov	r3,zero
1000af48:	003fbc06 	br	1000ae3c <__alt_data_end+0xf800ae3c>
1000af4c:	4444b03a 	or	r2,r8,r17
1000af50:	8000871e 	bne	r16,zero,1000b170 <__adddf3+0x790>
1000af54:	1000ba26 	beq	r2,zero,1000b240 <__adddf3+0x860>
1000af58:	4984b03a 	or	r2,r9,r6
1000af5c:	103ebf26 	beq	r2,zero,1000aa5c <__alt_data_end+0xf800aa5c>
1000af60:	8985883a 	add	r2,r17,r6
1000af64:	4247883a 	add	r3,r8,r9
1000af68:	1451803a 	cmpltu	r8,r2,r17
1000af6c:	40d1883a 	add	r8,r8,r3
1000af70:	40c0202c 	andhi	r3,r8,128
1000af74:	1023883a 	mov	r17,r2
1000af78:	183f1a26 	beq	r3,zero,1000abe4 <__alt_data_end+0xf800abe4>
1000af7c:	00bfe034 	movhi	r2,65408
1000af80:	10bfffc4 	addi	r2,r2,-1
1000af84:	2021883a 	mov	r16,r4
1000af88:	4090703a 	and	r8,r8,r2
1000af8c:	003eb306 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000af90:	4444b03a 	or	r2,r8,r17
1000af94:	8000291e 	bne	r16,zero,1000b03c <__adddf3+0x65c>
1000af98:	10004b1e 	bne	r2,zero,1000b0c8 <__adddf3+0x6e8>
1000af9c:	4990b03a 	or	r8,r9,r6
1000afa0:	40008b26 	beq	r8,zero,1000b1d0 <__adddf3+0x7f0>
1000afa4:	4811883a 	mov	r8,r9
1000afa8:	3023883a 	mov	r17,r6
1000afac:	3825883a 	mov	r18,r7
1000afb0:	003eaa06 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000afb4:	1021883a 	mov	r16,r2
1000afb8:	0011883a 	mov	r8,zero
1000afbc:	0005883a 	mov	r2,zero
1000afc0:	003f0f06 	br	1000ac00 <__alt_data_end+0xf800ac00>
1000afc4:	217ff804 	addi	r5,r4,-32
1000afc8:	00800804 	movi	r2,32
1000afcc:	494ad83a 	srl	r5,r9,r5
1000afd0:	20807d26 	beq	r4,r2,1000b1c8 <__adddf3+0x7e8>
1000afd4:	00801004 	movi	r2,64
1000afd8:	1109c83a 	sub	r4,r2,r4
1000afdc:	4912983a 	sll	r9,r9,r4
1000afe0:	498cb03a 	or	r6,r9,r6
1000afe4:	300cc03a 	cmpne	r6,r6,zero
1000afe8:	298ab03a 	or	r5,r5,r6
1000afec:	0013883a 	mov	r9,zero
1000aff0:	003f1506 	br	1000ac48 <__alt_data_end+0xf800ac48>
1000aff4:	0101ffc4 	movi	r4,2047
1000aff8:	113f9a1e 	bne	r2,r4,1000ae64 <__alt_data_end+0xf800ae64>
1000affc:	4811883a 	mov	r8,r9
1000b000:	3023883a 	mov	r17,r6
1000b004:	1021883a 	mov	r16,r2
1000b008:	3825883a 	mov	r18,r7
1000b00c:	003e9306 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000b010:	8000161e 	bne	r16,zero,1000b06c <__adddf3+0x68c>
1000b014:	444ab03a 	or	r5,r8,r17
1000b018:	28005126 	beq	r5,zero,1000b160 <__adddf3+0x780>
1000b01c:	0108303a 	nor	r4,zero,r4
1000b020:	20004d1e 	bne	r4,zero,1000b158 <__adddf3+0x778>
1000b024:	89a3883a 	add	r17,r17,r6
1000b028:	4253883a 	add	r9,r8,r9
1000b02c:	898d803a 	cmpltu	r6,r17,r6
1000b030:	3251883a 	add	r8,r6,r9
1000b034:	1021883a 	mov	r16,r2
1000b038:	003f0806 	br	1000ac5c <__alt_data_end+0xf800ac5c>
1000b03c:	1000301e 	bne	r2,zero,1000b100 <__adddf3+0x720>
1000b040:	4984b03a 	or	r2,r9,r6
1000b044:	10007126 	beq	r2,zero,1000b20c <__adddf3+0x82c>
1000b048:	4811883a 	mov	r8,r9
1000b04c:	3023883a 	mov	r17,r6
1000b050:	3825883a 	mov	r18,r7
1000b054:	0401ffc4 	movi	r16,2047
1000b058:	003e8006 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000b05c:	4462b03a 	or	r17,r8,r17
1000b060:	8822c03a 	cmpne	r17,r17,zero
1000b064:	0007883a 	mov	r3,zero
1000b068:	003f8b06 	br	1000ae98 <__alt_data_end+0xf800ae98>
1000b06c:	0141ffc4 	movi	r5,2047
1000b070:	11403b26 	beq	r2,r5,1000b160 <__adddf3+0x780>
1000b074:	0109c83a 	sub	r4,zero,r4
1000b078:	42002034 	orhi	r8,r8,128
1000b07c:	01400e04 	movi	r5,56
1000b080:	29006716 	blt	r5,r4,1000b220 <__adddf3+0x840>
1000b084:	014007c4 	movi	r5,31
1000b088:	29007016 	blt	r5,r4,1000b24c <__adddf3+0x86c>
1000b08c:	01400804 	movi	r5,32
1000b090:	290bc83a 	sub	r5,r5,r4
1000b094:	4154983a 	sll	r10,r8,r5
1000b098:	890ed83a 	srl	r7,r17,r4
1000b09c:	894a983a 	sll	r5,r17,r5
1000b0a0:	4108d83a 	srl	r4,r8,r4
1000b0a4:	51e2b03a 	or	r17,r10,r7
1000b0a8:	280ac03a 	cmpne	r5,r5,zero
1000b0ac:	8962b03a 	or	r17,r17,r5
1000b0b0:	89a3883a 	add	r17,r17,r6
1000b0b4:	2253883a 	add	r9,r4,r9
1000b0b8:	898d803a 	cmpltu	r6,r17,r6
1000b0bc:	3251883a 	add	r8,r6,r9
1000b0c0:	1021883a 	mov	r16,r2
1000b0c4:	003ee506 	br	1000ac5c <__alt_data_end+0xf800ac5c>
1000b0c8:	4984b03a 	or	r2,r9,r6
1000b0cc:	103e6326 	beq	r2,zero,1000aa5c <__alt_data_end+0xf800aa5c>
1000b0d0:	8987c83a 	sub	r3,r17,r6
1000b0d4:	88c9803a 	cmpltu	r4,r17,r3
1000b0d8:	4245c83a 	sub	r2,r8,r9
1000b0dc:	1105c83a 	sub	r2,r2,r4
1000b0e0:	1100202c 	andhi	r4,r2,128
1000b0e4:	203ebb26 	beq	r4,zero,1000abd4 <__alt_data_end+0xf800abd4>
1000b0e8:	3463c83a 	sub	r17,r6,r17
1000b0ec:	4a07c83a 	sub	r3,r9,r8
1000b0f0:	344d803a 	cmpltu	r6,r6,r17
1000b0f4:	1991c83a 	sub	r8,r3,r6
1000b0f8:	3825883a 	mov	r18,r7
1000b0fc:	003e5706 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000b100:	4984b03a 	or	r2,r9,r6
1000b104:	10002e26 	beq	r2,zero,1000b1c0 <__adddf3+0x7e0>
1000b108:	4004d0fa 	srli	r2,r8,3
1000b10c:	8822d0fa 	srli	r17,r17,3
1000b110:	4010977a 	slli	r8,r8,29
1000b114:	10c0022c 	andhi	r3,r2,8
1000b118:	4462b03a 	or	r17,r8,r17
1000b11c:	18000826 	beq	r3,zero,1000b140 <__adddf3+0x760>
1000b120:	4808d0fa 	srli	r4,r9,3
1000b124:	20c0022c 	andhi	r3,r4,8
1000b128:	1800051e 	bne	r3,zero,1000b140 <__adddf3+0x760>
1000b12c:	300cd0fa 	srli	r6,r6,3
1000b130:	4806977a 	slli	r3,r9,29
1000b134:	2005883a 	mov	r2,r4
1000b138:	3825883a 	mov	r18,r7
1000b13c:	19a2b03a 	or	r17,r3,r6
1000b140:	8810d77a 	srli	r8,r17,29
1000b144:	100490fa 	slli	r2,r2,3
1000b148:	882290fa 	slli	r17,r17,3
1000b14c:	0401ffc4 	movi	r16,2047
1000b150:	4090b03a 	or	r8,r8,r2
1000b154:	003e4106 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000b158:	0141ffc4 	movi	r5,2047
1000b15c:	117fc71e 	bne	r2,r5,1000b07c <__alt_data_end+0xf800b07c>
1000b160:	4811883a 	mov	r8,r9
1000b164:	3023883a 	mov	r17,r6
1000b168:	1021883a 	mov	r16,r2
1000b16c:	003e3b06 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000b170:	10002f26 	beq	r2,zero,1000b230 <__adddf3+0x850>
1000b174:	4984b03a 	or	r2,r9,r6
1000b178:	10001126 	beq	r2,zero,1000b1c0 <__adddf3+0x7e0>
1000b17c:	4004d0fa 	srli	r2,r8,3
1000b180:	8822d0fa 	srli	r17,r17,3
1000b184:	4010977a 	slli	r8,r8,29
1000b188:	10c0022c 	andhi	r3,r2,8
1000b18c:	4462b03a 	or	r17,r8,r17
1000b190:	183feb26 	beq	r3,zero,1000b140 <__alt_data_end+0xf800b140>
1000b194:	4808d0fa 	srli	r4,r9,3
1000b198:	20c0022c 	andhi	r3,r4,8
1000b19c:	183fe81e 	bne	r3,zero,1000b140 <__alt_data_end+0xf800b140>
1000b1a0:	300cd0fa 	srli	r6,r6,3
1000b1a4:	4806977a 	slli	r3,r9,29
1000b1a8:	2005883a 	mov	r2,r4
1000b1ac:	19a2b03a 	or	r17,r3,r6
1000b1b0:	003fe306 	br	1000b140 <__alt_data_end+0xf800b140>
1000b1b4:	0011883a 	mov	r8,zero
1000b1b8:	0005883a 	mov	r2,zero
1000b1bc:	003e3f06 	br	1000aabc <__alt_data_end+0xf800aabc>
1000b1c0:	0401ffc4 	movi	r16,2047
1000b1c4:	003e2506 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000b1c8:	0013883a 	mov	r9,zero
1000b1cc:	003f8406 	br	1000afe0 <__alt_data_end+0xf800afe0>
1000b1d0:	0005883a 	mov	r2,zero
1000b1d4:	0007883a 	mov	r3,zero
1000b1d8:	003e8906 	br	1000ac00 <__alt_data_end+0xf800ac00>
1000b1dc:	197ff804 	addi	r5,r3,-32
1000b1e0:	01000804 	movi	r4,32
1000b1e4:	414ad83a 	srl	r5,r8,r5
1000b1e8:	19002426 	beq	r3,r4,1000b27c <__adddf3+0x89c>
1000b1ec:	01001004 	movi	r4,64
1000b1f0:	20c7c83a 	sub	r3,r4,r3
1000b1f4:	40c6983a 	sll	r3,r8,r3
1000b1f8:	1c46b03a 	or	r3,r3,r17
1000b1fc:	1806c03a 	cmpne	r3,r3,zero
1000b200:	28e2b03a 	or	r17,r5,r3
1000b204:	0007883a 	mov	r3,zero
1000b208:	003f2306 	br	1000ae98 <__alt_data_end+0xf800ae98>
1000b20c:	0007883a 	mov	r3,zero
1000b210:	5811883a 	mov	r8,r11
1000b214:	00bfffc4 	movi	r2,-1
1000b218:	0401ffc4 	movi	r16,2047
1000b21c:	003e7806 	br	1000ac00 <__alt_data_end+0xf800ac00>
1000b220:	4462b03a 	or	r17,r8,r17
1000b224:	8822c03a 	cmpne	r17,r17,zero
1000b228:	0009883a 	mov	r4,zero
1000b22c:	003fa006 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000b230:	4811883a 	mov	r8,r9
1000b234:	3023883a 	mov	r17,r6
1000b238:	0401ffc4 	movi	r16,2047
1000b23c:	003e0706 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000b240:	4811883a 	mov	r8,r9
1000b244:	3023883a 	mov	r17,r6
1000b248:	003e0406 	br	1000aa5c <__alt_data_end+0xf800aa5c>
1000b24c:	21fff804 	addi	r7,r4,-32
1000b250:	01400804 	movi	r5,32
1000b254:	41ced83a 	srl	r7,r8,r7
1000b258:	21400a26 	beq	r4,r5,1000b284 <__adddf3+0x8a4>
1000b25c:	01401004 	movi	r5,64
1000b260:	2909c83a 	sub	r4,r5,r4
1000b264:	4108983a 	sll	r4,r8,r4
1000b268:	2448b03a 	or	r4,r4,r17
1000b26c:	2008c03a 	cmpne	r4,r4,zero
1000b270:	3922b03a 	or	r17,r7,r4
1000b274:	0009883a 	mov	r4,zero
1000b278:	003f8d06 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000b27c:	0007883a 	mov	r3,zero
1000b280:	003fdd06 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b284:	0009883a 	mov	r4,zero
1000b288:	003ff706 	br	1000b268 <__alt_data_end+0xf800b268>

1000b28c <__divdf3>:
1000b28c:	defff204 	addi	sp,sp,-56
1000b290:	dd400915 	stw	r21,36(sp)
1000b294:	282ad53a 	srli	r21,r5,20
1000b298:	dd000815 	stw	r20,32(sp)
1000b29c:	2828d7fa 	srli	r20,r5,31
1000b2a0:	dc000415 	stw	r16,16(sp)
1000b2a4:	04000434 	movhi	r16,16
1000b2a8:	df000c15 	stw	fp,48(sp)
1000b2ac:	843fffc4 	addi	r16,r16,-1
1000b2b0:	dfc00d15 	stw	ra,52(sp)
1000b2b4:	ddc00b15 	stw	r23,44(sp)
1000b2b8:	dd800a15 	stw	r22,40(sp)
1000b2bc:	dcc00715 	stw	r19,28(sp)
1000b2c0:	dc800615 	stw	r18,24(sp)
1000b2c4:	dc400515 	stw	r17,20(sp)
1000b2c8:	ad41ffcc 	andi	r21,r21,2047
1000b2cc:	2c20703a 	and	r16,r5,r16
1000b2d0:	a7003fcc 	andi	fp,r20,255
1000b2d4:	a8006126 	beq	r21,zero,1000b45c <__divdf3+0x1d0>
1000b2d8:	0081ffc4 	movi	r2,2047
1000b2dc:	2025883a 	mov	r18,r4
1000b2e0:	a8803726 	beq	r21,r2,1000b3c0 <__divdf3+0x134>
1000b2e4:	80800434 	orhi	r2,r16,16
1000b2e8:	100490fa 	slli	r2,r2,3
1000b2ec:	2020d77a 	srli	r16,r4,29
1000b2f0:	202490fa 	slli	r18,r4,3
1000b2f4:	ad7f0044 	addi	r21,r21,-1023
1000b2f8:	80a0b03a 	or	r16,r16,r2
1000b2fc:	0027883a 	mov	r19,zero
1000b300:	0013883a 	mov	r9,zero
1000b304:	3804d53a 	srli	r2,r7,20
1000b308:	382cd7fa 	srli	r22,r7,31
1000b30c:	04400434 	movhi	r17,16
1000b310:	8c7fffc4 	addi	r17,r17,-1
1000b314:	1081ffcc 	andi	r2,r2,2047
1000b318:	3011883a 	mov	r8,r6
1000b31c:	3c62703a 	and	r17,r7,r17
1000b320:	b5c03fcc 	andi	r23,r22,255
1000b324:	10006c26 	beq	r2,zero,1000b4d8 <__divdf3+0x24c>
1000b328:	00c1ffc4 	movi	r3,2047
1000b32c:	10c06426 	beq	r2,r3,1000b4c0 <__divdf3+0x234>
1000b330:	88c00434 	orhi	r3,r17,16
1000b334:	180690fa 	slli	r3,r3,3
1000b338:	3022d77a 	srli	r17,r6,29
1000b33c:	301090fa 	slli	r8,r6,3
1000b340:	10bf0044 	addi	r2,r2,-1023
1000b344:	88e2b03a 	or	r17,r17,r3
1000b348:	000f883a 	mov	r7,zero
1000b34c:	a58cf03a 	xor	r6,r20,r22
1000b350:	3cc8b03a 	or	r4,r7,r19
1000b354:	a8abc83a 	sub	r21,r21,r2
1000b358:	008003c4 	movi	r2,15
1000b35c:	3007883a 	mov	r3,r6
1000b360:	34c03fcc 	andi	r19,r6,255
1000b364:	11009036 	bltu	r2,r4,1000b5a8 <__divdf3+0x31c>
1000b368:	200890ba 	slli	r4,r4,2
1000b36c:	00840074 	movhi	r2,4097
1000b370:	10ace004 	addi	r2,r2,-19584
1000b374:	2089883a 	add	r4,r4,r2
1000b378:	20800017 	ldw	r2,0(r4)
1000b37c:	1000683a 	jmp	r2
1000b380:	1000b5a8 	cmpgeui	zero,r2,726
1000b384:	1000b3f8 	rdprs	zero,r2,719
1000b388:	1000b598 	cmpnei	zero,r2,726
1000b38c:	1000b3ec 	andhi	zero,r2,719
1000b390:	1000b598 	cmpnei	zero,r2,726
1000b394:	1000b56c 	andhi	zero,r2,725
1000b398:	1000b598 	cmpnei	zero,r2,726
1000b39c:	1000b3ec 	andhi	zero,r2,719
1000b3a0:	1000b3f8 	rdprs	zero,r2,719
1000b3a4:	1000b3f8 	rdprs	zero,r2,719
1000b3a8:	1000b56c 	andhi	zero,r2,725
1000b3ac:	1000b3ec 	andhi	zero,r2,719
1000b3b0:	1000b3dc 	xori	zero,r2,719
1000b3b4:	1000b3dc 	xori	zero,r2,719
1000b3b8:	1000b3dc 	xori	zero,r2,719
1000b3bc:	1000b88c 	andi	zero,r2,738
1000b3c0:	2404b03a 	or	r2,r4,r16
1000b3c4:	1000661e 	bne	r2,zero,1000b560 <__divdf3+0x2d4>
1000b3c8:	04c00204 	movi	r19,8
1000b3cc:	0021883a 	mov	r16,zero
1000b3d0:	0025883a 	mov	r18,zero
1000b3d4:	02400084 	movi	r9,2
1000b3d8:	003fca06 	br	1000b304 <__alt_data_end+0xf800b304>
1000b3dc:	8023883a 	mov	r17,r16
1000b3e0:	9011883a 	mov	r8,r18
1000b3e4:	e02f883a 	mov	r23,fp
1000b3e8:	480f883a 	mov	r7,r9
1000b3ec:	00800084 	movi	r2,2
1000b3f0:	3881311e 	bne	r7,r2,1000b8b8 <__divdf3+0x62c>
1000b3f4:	b827883a 	mov	r19,r23
1000b3f8:	98c0004c 	andi	r3,r19,1
1000b3fc:	0081ffc4 	movi	r2,2047
1000b400:	000b883a 	mov	r5,zero
1000b404:	0025883a 	mov	r18,zero
1000b408:	1004953a 	slli	r2,r2,20
1000b40c:	18c03fcc 	andi	r3,r3,255
1000b410:	04400434 	movhi	r17,16
1000b414:	8c7fffc4 	addi	r17,r17,-1
1000b418:	180697fa 	slli	r3,r3,31
1000b41c:	2c4a703a 	and	r5,r5,r17
1000b420:	288ab03a 	or	r5,r5,r2
1000b424:	28c6b03a 	or	r3,r5,r3
1000b428:	9005883a 	mov	r2,r18
1000b42c:	dfc00d17 	ldw	ra,52(sp)
1000b430:	df000c17 	ldw	fp,48(sp)
1000b434:	ddc00b17 	ldw	r23,44(sp)
1000b438:	dd800a17 	ldw	r22,40(sp)
1000b43c:	dd400917 	ldw	r21,36(sp)
1000b440:	dd000817 	ldw	r20,32(sp)
1000b444:	dcc00717 	ldw	r19,28(sp)
1000b448:	dc800617 	ldw	r18,24(sp)
1000b44c:	dc400517 	ldw	r17,20(sp)
1000b450:	dc000417 	ldw	r16,16(sp)
1000b454:	dec00e04 	addi	sp,sp,56
1000b458:	f800283a 	ret
1000b45c:	2404b03a 	or	r2,r4,r16
1000b460:	2027883a 	mov	r19,r4
1000b464:	10003926 	beq	r2,zero,1000b54c <__divdf3+0x2c0>
1000b468:	80012e26 	beq	r16,zero,1000b924 <__divdf3+0x698>
1000b46c:	8009883a 	mov	r4,r16
1000b470:	d9800315 	stw	r6,12(sp)
1000b474:	d9c00215 	stw	r7,8(sp)
1000b478:	000cfe40 	call	1000cfe4 <__clzsi2>
1000b47c:	d9800317 	ldw	r6,12(sp)
1000b480:	d9c00217 	ldw	r7,8(sp)
1000b484:	113ffd44 	addi	r4,r2,-11
1000b488:	00c00704 	movi	r3,28
1000b48c:	19012116 	blt	r3,r4,1000b914 <__divdf3+0x688>
1000b490:	00c00744 	movi	r3,29
1000b494:	147ffe04 	addi	r17,r2,-8
1000b498:	1907c83a 	sub	r3,r3,r4
1000b49c:	8460983a 	sll	r16,r16,r17
1000b4a0:	98c6d83a 	srl	r3,r19,r3
1000b4a4:	9c64983a 	sll	r18,r19,r17
1000b4a8:	1c20b03a 	or	r16,r3,r16
1000b4ac:	1080fcc4 	addi	r2,r2,1011
1000b4b0:	00abc83a 	sub	r21,zero,r2
1000b4b4:	0027883a 	mov	r19,zero
1000b4b8:	0013883a 	mov	r9,zero
1000b4bc:	003f9106 	br	1000b304 <__alt_data_end+0xf800b304>
1000b4c0:	3446b03a 	or	r3,r6,r17
1000b4c4:	18001f1e 	bne	r3,zero,1000b544 <__divdf3+0x2b8>
1000b4c8:	0023883a 	mov	r17,zero
1000b4cc:	0011883a 	mov	r8,zero
1000b4d0:	01c00084 	movi	r7,2
1000b4d4:	003f9d06 	br	1000b34c <__alt_data_end+0xf800b34c>
1000b4d8:	3446b03a 	or	r3,r6,r17
1000b4dc:	18001526 	beq	r3,zero,1000b534 <__divdf3+0x2a8>
1000b4e0:	88011b26 	beq	r17,zero,1000b950 <__divdf3+0x6c4>
1000b4e4:	8809883a 	mov	r4,r17
1000b4e8:	d9800315 	stw	r6,12(sp)
1000b4ec:	da400115 	stw	r9,4(sp)
1000b4f0:	000cfe40 	call	1000cfe4 <__clzsi2>
1000b4f4:	d9800317 	ldw	r6,12(sp)
1000b4f8:	da400117 	ldw	r9,4(sp)
1000b4fc:	113ffd44 	addi	r4,r2,-11
1000b500:	00c00704 	movi	r3,28
1000b504:	19010e16 	blt	r3,r4,1000b940 <__divdf3+0x6b4>
1000b508:	00c00744 	movi	r3,29
1000b50c:	123ffe04 	addi	r8,r2,-8
1000b510:	1907c83a 	sub	r3,r3,r4
1000b514:	8a22983a 	sll	r17,r17,r8
1000b518:	30c6d83a 	srl	r3,r6,r3
1000b51c:	3210983a 	sll	r8,r6,r8
1000b520:	1c62b03a 	or	r17,r3,r17
1000b524:	1080fcc4 	addi	r2,r2,1011
1000b528:	0085c83a 	sub	r2,zero,r2
1000b52c:	000f883a 	mov	r7,zero
1000b530:	003f8606 	br	1000b34c <__alt_data_end+0xf800b34c>
1000b534:	0023883a 	mov	r17,zero
1000b538:	0011883a 	mov	r8,zero
1000b53c:	01c00044 	movi	r7,1
1000b540:	003f8206 	br	1000b34c <__alt_data_end+0xf800b34c>
1000b544:	01c000c4 	movi	r7,3
1000b548:	003f8006 	br	1000b34c <__alt_data_end+0xf800b34c>
1000b54c:	04c00104 	movi	r19,4
1000b550:	0021883a 	mov	r16,zero
1000b554:	0025883a 	mov	r18,zero
1000b558:	02400044 	movi	r9,1
1000b55c:	003f6906 	br	1000b304 <__alt_data_end+0xf800b304>
1000b560:	04c00304 	movi	r19,12
1000b564:	024000c4 	movi	r9,3
1000b568:	003f6606 	br	1000b304 <__alt_data_end+0xf800b304>
1000b56c:	01400434 	movhi	r5,16
1000b570:	0007883a 	mov	r3,zero
1000b574:	297fffc4 	addi	r5,r5,-1
1000b578:	04bfffc4 	movi	r18,-1
1000b57c:	0081ffc4 	movi	r2,2047
1000b580:	003fa106 	br	1000b408 <__alt_data_end+0xf800b408>
1000b584:	00c00044 	movi	r3,1
1000b588:	1887c83a 	sub	r3,r3,r2
1000b58c:	01000e04 	movi	r4,56
1000b590:	20c1210e 	bge	r4,r3,1000ba18 <__divdf3+0x78c>
1000b594:	98c0004c 	andi	r3,r19,1
1000b598:	0005883a 	mov	r2,zero
1000b59c:	000b883a 	mov	r5,zero
1000b5a0:	0025883a 	mov	r18,zero
1000b5a4:	003f9806 	br	1000b408 <__alt_data_end+0xf800b408>
1000b5a8:	8c00fd36 	bltu	r17,r16,1000b9a0 <__divdf3+0x714>
1000b5ac:	8440fb26 	beq	r16,r17,1000b99c <__divdf3+0x710>
1000b5b0:	8007883a 	mov	r3,r16
1000b5b4:	ad7fffc4 	addi	r21,r21,-1
1000b5b8:	0021883a 	mov	r16,zero
1000b5bc:	4004d63a 	srli	r2,r8,24
1000b5c0:	8822923a 	slli	r17,r17,8
1000b5c4:	1809883a 	mov	r4,r3
1000b5c8:	402c923a 	slli	r22,r8,8
1000b5cc:	88b8b03a 	or	fp,r17,r2
1000b5d0:	e028d43a 	srli	r20,fp,16
1000b5d4:	d8c00015 	stw	r3,0(sp)
1000b5d8:	e5ffffcc 	andi	r23,fp,65535
1000b5dc:	a00b883a 	mov	r5,r20
1000b5e0:	00008f40 	call	100008f4 <__udivsi3>
1000b5e4:	d8c00017 	ldw	r3,0(sp)
1000b5e8:	a00b883a 	mov	r5,r20
1000b5ec:	d8800315 	stw	r2,12(sp)
1000b5f0:	1809883a 	mov	r4,r3
1000b5f4:	00009580 	call	10000958 <__umodsi3>
1000b5f8:	d9800317 	ldw	r6,12(sp)
1000b5fc:	1006943a 	slli	r3,r2,16
1000b600:	9004d43a 	srli	r2,r18,16
1000b604:	b9a3383a 	mul	r17,r23,r6
1000b608:	10c4b03a 	or	r2,r2,r3
1000b60c:	1440062e 	bgeu	r2,r17,1000b628 <__divdf3+0x39c>
1000b610:	1705883a 	add	r2,r2,fp
1000b614:	30ffffc4 	addi	r3,r6,-1
1000b618:	1700ee36 	bltu	r2,fp,1000b9d4 <__divdf3+0x748>
1000b61c:	1440ed2e 	bgeu	r2,r17,1000b9d4 <__divdf3+0x748>
1000b620:	31bfff84 	addi	r6,r6,-2
1000b624:	1705883a 	add	r2,r2,fp
1000b628:	1463c83a 	sub	r17,r2,r17
1000b62c:	a00b883a 	mov	r5,r20
1000b630:	8809883a 	mov	r4,r17
1000b634:	d9800315 	stw	r6,12(sp)
1000b638:	00008f40 	call	100008f4 <__udivsi3>
1000b63c:	a00b883a 	mov	r5,r20
1000b640:	8809883a 	mov	r4,r17
1000b644:	d8800215 	stw	r2,8(sp)
1000b648:	00009580 	call	10000958 <__umodsi3>
1000b64c:	d9c00217 	ldw	r7,8(sp)
1000b650:	1004943a 	slli	r2,r2,16
1000b654:	94bfffcc 	andi	r18,r18,65535
1000b658:	b9d1383a 	mul	r8,r23,r7
1000b65c:	90a4b03a 	or	r18,r18,r2
1000b660:	d9800317 	ldw	r6,12(sp)
1000b664:	9200062e 	bgeu	r18,r8,1000b680 <__divdf3+0x3f4>
1000b668:	9725883a 	add	r18,r18,fp
1000b66c:	38bfffc4 	addi	r2,r7,-1
1000b670:	9700d636 	bltu	r18,fp,1000b9cc <__divdf3+0x740>
1000b674:	9200d52e 	bgeu	r18,r8,1000b9cc <__divdf3+0x740>
1000b678:	39ffff84 	addi	r7,r7,-2
1000b67c:	9725883a 	add	r18,r18,fp
1000b680:	3004943a 	slli	r2,r6,16
1000b684:	b012d43a 	srli	r9,r22,16
1000b688:	b1bfffcc 	andi	r6,r22,65535
1000b68c:	11e2b03a 	or	r17,r2,r7
1000b690:	8806d43a 	srli	r3,r17,16
1000b694:	893fffcc 	andi	r4,r17,65535
1000b698:	218b383a 	mul	r5,r4,r6
1000b69c:	30c5383a 	mul	r2,r6,r3
1000b6a0:	2249383a 	mul	r4,r4,r9
1000b6a4:	280ed43a 	srli	r7,r5,16
1000b6a8:	9225c83a 	sub	r18,r18,r8
1000b6ac:	2089883a 	add	r4,r4,r2
1000b6b0:	3909883a 	add	r4,r7,r4
1000b6b4:	1a47383a 	mul	r3,r3,r9
1000b6b8:	2080022e 	bgeu	r4,r2,1000b6c4 <__divdf3+0x438>
1000b6bc:	00800074 	movhi	r2,1
1000b6c0:	1887883a 	add	r3,r3,r2
1000b6c4:	2004d43a 	srli	r2,r4,16
1000b6c8:	2008943a 	slli	r4,r4,16
1000b6cc:	297fffcc 	andi	r5,r5,65535
1000b6d0:	10c7883a 	add	r3,r2,r3
1000b6d4:	2149883a 	add	r4,r4,r5
1000b6d8:	90c0a536 	bltu	r18,r3,1000b970 <__divdf3+0x6e4>
1000b6dc:	90c0bf26 	beq	r18,r3,1000b9dc <__divdf3+0x750>
1000b6e0:	90c7c83a 	sub	r3,r18,r3
1000b6e4:	810fc83a 	sub	r7,r16,r4
1000b6e8:	81e5803a 	cmpltu	r18,r16,r7
1000b6ec:	1ca5c83a 	sub	r18,r3,r18
1000b6f0:	e480c126 	beq	fp,r18,1000b9f8 <__divdf3+0x76c>
1000b6f4:	a00b883a 	mov	r5,r20
1000b6f8:	9009883a 	mov	r4,r18
1000b6fc:	d9800315 	stw	r6,12(sp)
1000b700:	d9c00215 	stw	r7,8(sp)
1000b704:	da400115 	stw	r9,4(sp)
1000b708:	00008f40 	call	100008f4 <__udivsi3>
1000b70c:	a00b883a 	mov	r5,r20
1000b710:	9009883a 	mov	r4,r18
1000b714:	d8800015 	stw	r2,0(sp)
1000b718:	00009580 	call	10000958 <__umodsi3>
1000b71c:	d9c00217 	ldw	r7,8(sp)
1000b720:	da000017 	ldw	r8,0(sp)
1000b724:	1006943a 	slli	r3,r2,16
1000b728:	3804d43a 	srli	r2,r7,16
1000b72c:	ba21383a 	mul	r16,r23,r8
1000b730:	d9800317 	ldw	r6,12(sp)
1000b734:	10c4b03a 	or	r2,r2,r3
1000b738:	da400117 	ldw	r9,4(sp)
1000b73c:	1400062e 	bgeu	r2,r16,1000b758 <__divdf3+0x4cc>
1000b740:	1705883a 	add	r2,r2,fp
1000b744:	40ffffc4 	addi	r3,r8,-1
1000b748:	1700ad36 	bltu	r2,fp,1000ba00 <__divdf3+0x774>
1000b74c:	1400ac2e 	bgeu	r2,r16,1000ba00 <__divdf3+0x774>
1000b750:	423fff84 	addi	r8,r8,-2
1000b754:	1705883a 	add	r2,r2,fp
1000b758:	1421c83a 	sub	r16,r2,r16
1000b75c:	a00b883a 	mov	r5,r20
1000b760:	8009883a 	mov	r4,r16
1000b764:	d9800315 	stw	r6,12(sp)
1000b768:	d9c00215 	stw	r7,8(sp)
1000b76c:	da000015 	stw	r8,0(sp)
1000b770:	da400115 	stw	r9,4(sp)
1000b774:	00008f40 	call	100008f4 <__udivsi3>
1000b778:	8009883a 	mov	r4,r16
1000b77c:	a00b883a 	mov	r5,r20
1000b780:	1025883a 	mov	r18,r2
1000b784:	00009580 	call	10000958 <__umodsi3>
1000b788:	d9c00217 	ldw	r7,8(sp)
1000b78c:	1004943a 	slli	r2,r2,16
1000b790:	bcaf383a 	mul	r23,r23,r18
1000b794:	393fffcc 	andi	r4,r7,65535
1000b798:	2088b03a 	or	r4,r4,r2
1000b79c:	d9800317 	ldw	r6,12(sp)
1000b7a0:	da000017 	ldw	r8,0(sp)
1000b7a4:	da400117 	ldw	r9,4(sp)
1000b7a8:	25c0062e 	bgeu	r4,r23,1000b7c4 <__divdf3+0x538>
1000b7ac:	2709883a 	add	r4,r4,fp
1000b7b0:	90bfffc4 	addi	r2,r18,-1
1000b7b4:	27009436 	bltu	r4,fp,1000ba08 <__divdf3+0x77c>
1000b7b8:	25c0932e 	bgeu	r4,r23,1000ba08 <__divdf3+0x77c>
1000b7bc:	94bfff84 	addi	r18,r18,-2
1000b7c0:	2709883a 	add	r4,r4,fp
1000b7c4:	4004943a 	slli	r2,r8,16
1000b7c8:	25efc83a 	sub	r23,r4,r23
1000b7cc:	1490b03a 	or	r8,r2,r18
1000b7d0:	4008d43a 	srli	r4,r8,16
1000b7d4:	40ffffcc 	andi	r3,r8,65535
1000b7d8:	30c5383a 	mul	r2,r6,r3
1000b7dc:	1a47383a 	mul	r3,r3,r9
1000b7e0:	310d383a 	mul	r6,r6,r4
1000b7e4:	100ad43a 	srli	r5,r2,16
1000b7e8:	4913383a 	mul	r9,r9,r4
1000b7ec:	1987883a 	add	r3,r3,r6
1000b7f0:	28c7883a 	add	r3,r5,r3
1000b7f4:	1980022e 	bgeu	r3,r6,1000b800 <__divdf3+0x574>
1000b7f8:	01000074 	movhi	r4,1
1000b7fc:	4913883a 	add	r9,r9,r4
1000b800:	1808d43a 	srli	r4,r3,16
1000b804:	1806943a 	slli	r3,r3,16
1000b808:	10bfffcc 	andi	r2,r2,65535
1000b80c:	2253883a 	add	r9,r4,r9
1000b810:	1887883a 	add	r3,r3,r2
1000b814:	ba403836 	bltu	r23,r9,1000b8f8 <__divdf3+0x66c>
1000b818:	ba403626 	beq	r23,r9,1000b8f4 <__divdf3+0x668>
1000b81c:	42000054 	ori	r8,r8,1
1000b820:	a880ffc4 	addi	r2,r21,1023
1000b824:	00bf570e 	bge	zero,r2,1000b584 <__alt_data_end+0xf800b584>
1000b828:	40c001cc 	andi	r3,r8,7
1000b82c:	18000726 	beq	r3,zero,1000b84c <__divdf3+0x5c0>
1000b830:	40c003cc 	andi	r3,r8,15
1000b834:	01000104 	movi	r4,4
1000b838:	19000426 	beq	r3,r4,1000b84c <__divdf3+0x5c0>
1000b83c:	4107883a 	add	r3,r8,r4
1000b840:	1a11803a 	cmpltu	r8,r3,r8
1000b844:	8a23883a 	add	r17,r17,r8
1000b848:	1811883a 	mov	r8,r3
1000b84c:	88c0402c 	andhi	r3,r17,256
1000b850:	18000426 	beq	r3,zero,1000b864 <__divdf3+0x5d8>
1000b854:	00ffc034 	movhi	r3,65280
1000b858:	18ffffc4 	addi	r3,r3,-1
1000b85c:	a8810004 	addi	r2,r21,1024
1000b860:	88e2703a 	and	r17,r17,r3
1000b864:	00c1ff84 	movi	r3,2046
1000b868:	18bee316 	blt	r3,r2,1000b3f8 <__alt_data_end+0xf800b3f8>
1000b86c:	8824977a 	slli	r18,r17,29
1000b870:	4010d0fa 	srli	r8,r8,3
1000b874:	8822927a 	slli	r17,r17,9
1000b878:	1081ffcc 	andi	r2,r2,2047
1000b87c:	9224b03a 	or	r18,r18,r8
1000b880:	880ad33a 	srli	r5,r17,12
1000b884:	98c0004c 	andi	r3,r19,1
1000b888:	003edf06 	br	1000b408 <__alt_data_end+0xf800b408>
1000b88c:	8080022c 	andhi	r2,r16,8
1000b890:	10001226 	beq	r2,zero,1000b8dc <__divdf3+0x650>
1000b894:	8880022c 	andhi	r2,r17,8
1000b898:	1000101e 	bne	r2,zero,1000b8dc <__divdf3+0x650>
1000b89c:	00800434 	movhi	r2,16
1000b8a0:	89400234 	orhi	r5,r17,8
1000b8a4:	10bfffc4 	addi	r2,r2,-1
1000b8a8:	b007883a 	mov	r3,r22
1000b8ac:	288a703a 	and	r5,r5,r2
1000b8b0:	4025883a 	mov	r18,r8
1000b8b4:	003f3106 	br	1000b57c <__alt_data_end+0xf800b57c>
1000b8b8:	008000c4 	movi	r2,3
1000b8bc:	3880a626 	beq	r7,r2,1000bb58 <__divdf3+0x8cc>
1000b8c0:	00800044 	movi	r2,1
1000b8c4:	3880521e 	bne	r7,r2,1000ba10 <__divdf3+0x784>
1000b8c8:	b807883a 	mov	r3,r23
1000b8cc:	0005883a 	mov	r2,zero
1000b8d0:	000b883a 	mov	r5,zero
1000b8d4:	0025883a 	mov	r18,zero
1000b8d8:	003ecb06 	br	1000b408 <__alt_data_end+0xf800b408>
1000b8dc:	00800434 	movhi	r2,16
1000b8e0:	81400234 	orhi	r5,r16,8
1000b8e4:	10bfffc4 	addi	r2,r2,-1
1000b8e8:	a007883a 	mov	r3,r20
1000b8ec:	288a703a 	and	r5,r5,r2
1000b8f0:	003f2206 	br	1000b57c <__alt_data_end+0xf800b57c>
1000b8f4:	183fca26 	beq	r3,zero,1000b820 <__alt_data_end+0xf800b820>
1000b8f8:	e5ef883a 	add	r23,fp,r23
1000b8fc:	40bfffc4 	addi	r2,r8,-1
1000b900:	bf00392e 	bgeu	r23,fp,1000b9e8 <__divdf3+0x75c>
1000b904:	1011883a 	mov	r8,r2
1000b908:	ba7fc41e 	bne	r23,r9,1000b81c <__alt_data_end+0xf800b81c>
1000b90c:	b0ffc31e 	bne	r22,r3,1000b81c <__alt_data_end+0xf800b81c>
1000b910:	003fc306 	br	1000b820 <__alt_data_end+0xf800b820>
1000b914:	143ff604 	addi	r16,r2,-40
1000b918:	9c20983a 	sll	r16,r19,r16
1000b91c:	0025883a 	mov	r18,zero
1000b920:	003ee206 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b924:	d9800315 	stw	r6,12(sp)
1000b928:	d9c00215 	stw	r7,8(sp)
1000b92c:	000cfe40 	call	1000cfe4 <__clzsi2>
1000b930:	10800804 	addi	r2,r2,32
1000b934:	d9c00217 	ldw	r7,8(sp)
1000b938:	d9800317 	ldw	r6,12(sp)
1000b93c:	003ed106 	br	1000b484 <__alt_data_end+0xf800b484>
1000b940:	147ff604 	addi	r17,r2,-40
1000b944:	3462983a 	sll	r17,r6,r17
1000b948:	0011883a 	mov	r8,zero
1000b94c:	003ef506 	br	1000b524 <__alt_data_end+0xf800b524>
1000b950:	3009883a 	mov	r4,r6
1000b954:	d9800315 	stw	r6,12(sp)
1000b958:	da400115 	stw	r9,4(sp)
1000b95c:	000cfe40 	call	1000cfe4 <__clzsi2>
1000b960:	10800804 	addi	r2,r2,32
1000b964:	da400117 	ldw	r9,4(sp)
1000b968:	d9800317 	ldw	r6,12(sp)
1000b96c:	003ee306 	br	1000b4fc <__alt_data_end+0xf800b4fc>
1000b970:	85a1883a 	add	r16,r16,r22
1000b974:	8585803a 	cmpltu	r2,r16,r22
1000b978:	1705883a 	add	r2,r2,fp
1000b97c:	14a5883a 	add	r18,r2,r18
1000b980:	88bfffc4 	addi	r2,r17,-1
1000b984:	e4800c2e 	bgeu	fp,r18,1000b9b8 <__divdf3+0x72c>
1000b988:	90c03e36 	bltu	r18,r3,1000ba84 <__divdf3+0x7f8>
1000b98c:	1c806926 	beq	r3,r18,1000bb34 <__divdf3+0x8a8>
1000b990:	90c7c83a 	sub	r3,r18,r3
1000b994:	1023883a 	mov	r17,r2
1000b998:	003f5206 	br	1000b6e4 <__alt_data_end+0xf800b6e4>
1000b99c:	923f0436 	bltu	r18,r8,1000b5b0 <__alt_data_end+0xf800b5b0>
1000b9a0:	800897fa 	slli	r4,r16,31
1000b9a4:	9004d07a 	srli	r2,r18,1
1000b9a8:	8006d07a 	srli	r3,r16,1
1000b9ac:	902097fa 	slli	r16,r18,31
1000b9b0:	20a4b03a 	or	r18,r4,r2
1000b9b4:	003f0106 	br	1000b5bc <__alt_data_end+0xf800b5bc>
1000b9b8:	e4bff51e 	bne	fp,r18,1000b990 <__alt_data_end+0xf800b990>
1000b9bc:	85bff22e 	bgeu	r16,r22,1000b988 <__alt_data_end+0xf800b988>
1000b9c0:	e0c7c83a 	sub	r3,fp,r3
1000b9c4:	1023883a 	mov	r17,r2
1000b9c8:	003f4606 	br	1000b6e4 <__alt_data_end+0xf800b6e4>
1000b9cc:	100f883a 	mov	r7,r2
1000b9d0:	003f2b06 	br	1000b680 <__alt_data_end+0xf800b680>
1000b9d4:	180d883a 	mov	r6,r3
1000b9d8:	003f1306 	br	1000b628 <__alt_data_end+0xf800b628>
1000b9dc:	813fe436 	bltu	r16,r4,1000b970 <__alt_data_end+0xf800b970>
1000b9e0:	0007883a 	mov	r3,zero
1000b9e4:	003f3f06 	br	1000b6e4 <__alt_data_end+0xf800b6e4>
1000b9e8:	ba402c36 	bltu	r23,r9,1000ba9c <__divdf3+0x810>
1000b9ec:	4dc05426 	beq	r9,r23,1000bb40 <__divdf3+0x8b4>
1000b9f0:	1011883a 	mov	r8,r2
1000b9f4:	003f8906 	br	1000b81c <__alt_data_end+0xf800b81c>
1000b9f8:	023fffc4 	movi	r8,-1
1000b9fc:	003f8806 	br	1000b820 <__alt_data_end+0xf800b820>
1000ba00:	1811883a 	mov	r8,r3
1000ba04:	003f5406 	br	1000b758 <__alt_data_end+0xf800b758>
1000ba08:	1025883a 	mov	r18,r2
1000ba0c:	003f6d06 	br	1000b7c4 <__alt_data_end+0xf800b7c4>
1000ba10:	b827883a 	mov	r19,r23
1000ba14:	003f8206 	br	1000b820 <__alt_data_end+0xf800b820>
1000ba18:	010007c4 	movi	r4,31
1000ba1c:	20c02616 	blt	r4,r3,1000bab8 <__divdf3+0x82c>
1000ba20:	00800804 	movi	r2,32
1000ba24:	10c5c83a 	sub	r2,r2,r3
1000ba28:	888a983a 	sll	r5,r17,r2
1000ba2c:	40c8d83a 	srl	r4,r8,r3
1000ba30:	4084983a 	sll	r2,r8,r2
1000ba34:	88e2d83a 	srl	r17,r17,r3
1000ba38:	2906b03a 	or	r3,r5,r4
1000ba3c:	1004c03a 	cmpne	r2,r2,zero
1000ba40:	1886b03a 	or	r3,r3,r2
1000ba44:	188001cc 	andi	r2,r3,7
1000ba48:	10000726 	beq	r2,zero,1000ba68 <__divdf3+0x7dc>
1000ba4c:	188003cc 	andi	r2,r3,15
1000ba50:	01000104 	movi	r4,4
1000ba54:	11000426 	beq	r2,r4,1000ba68 <__divdf3+0x7dc>
1000ba58:	1805883a 	mov	r2,r3
1000ba5c:	10c00104 	addi	r3,r2,4
1000ba60:	1885803a 	cmpltu	r2,r3,r2
1000ba64:	88a3883a 	add	r17,r17,r2
1000ba68:	8880202c 	andhi	r2,r17,128
1000ba6c:	10002726 	beq	r2,zero,1000bb0c <__divdf3+0x880>
1000ba70:	98c0004c 	andi	r3,r19,1
1000ba74:	00800044 	movi	r2,1
1000ba78:	000b883a 	mov	r5,zero
1000ba7c:	0025883a 	mov	r18,zero
1000ba80:	003e6106 	br	1000b408 <__alt_data_end+0xf800b408>
1000ba84:	85a1883a 	add	r16,r16,r22
1000ba88:	8585803a 	cmpltu	r2,r16,r22
1000ba8c:	1705883a 	add	r2,r2,fp
1000ba90:	14a5883a 	add	r18,r2,r18
1000ba94:	8c7fff84 	addi	r17,r17,-2
1000ba98:	003f1106 	br	1000b6e0 <__alt_data_end+0xf800b6e0>
1000ba9c:	b589883a 	add	r4,r22,r22
1000baa0:	25ad803a 	cmpltu	r22,r4,r22
1000baa4:	b739883a 	add	fp,r22,fp
1000baa8:	40bfff84 	addi	r2,r8,-2
1000baac:	bf2f883a 	add	r23,r23,fp
1000bab0:	202d883a 	mov	r22,r4
1000bab4:	003f9306 	br	1000b904 <__alt_data_end+0xf800b904>
1000bab8:	013ff844 	movi	r4,-31
1000babc:	2085c83a 	sub	r2,r4,r2
1000bac0:	8888d83a 	srl	r4,r17,r2
1000bac4:	00800804 	movi	r2,32
1000bac8:	18802126 	beq	r3,r2,1000bb50 <__divdf3+0x8c4>
1000bacc:	00801004 	movi	r2,64
1000bad0:	10c5c83a 	sub	r2,r2,r3
1000bad4:	8884983a 	sll	r2,r17,r2
1000bad8:	1204b03a 	or	r2,r2,r8
1000badc:	1004c03a 	cmpne	r2,r2,zero
1000bae0:	2084b03a 	or	r2,r4,r2
1000bae4:	144001cc 	andi	r17,r2,7
1000bae8:	88000d1e 	bne	r17,zero,1000bb20 <__divdf3+0x894>
1000baec:	000b883a 	mov	r5,zero
1000baf0:	1024d0fa 	srli	r18,r2,3
1000baf4:	98c0004c 	andi	r3,r19,1
1000baf8:	0005883a 	mov	r2,zero
1000bafc:	9464b03a 	or	r18,r18,r17
1000bb00:	003e4106 	br	1000b408 <__alt_data_end+0xf800b408>
1000bb04:	1007883a 	mov	r3,r2
1000bb08:	0023883a 	mov	r17,zero
1000bb0c:	880a927a 	slli	r5,r17,9
1000bb10:	1805883a 	mov	r2,r3
1000bb14:	8822977a 	slli	r17,r17,29
1000bb18:	280ad33a 	srli	r5,r5,12
1000bb1c:	003ff406 	br	1000baf0 <__alt_data_end+0xf800baf0>
1000bb20:	10c003cc 	andi	r3,r2,15
1000bb24:	01000104 	movi	r4,4
1000bb28:	193ff626 	beq	r3,r4,1000bb04 <__alt_data_end+0xf800bb04>
1000bb2c:	0023883a 	mov	r17,zero
1000bb30:	003fca06 	br	1000ba5c <__alt_data_end+0xf800ba5c>
1000bb34:	813fd336 	bltu	r16,r4,1000ba84 <__alt_data_end+0xf800ba84>
1000bb38:	1023883a 	mov	r17,r2
1000bb3c:	003fa806 	br	1000b9e0 <__alt_data_end+0xf800b9e0>
1000bb40:	b0ffd636 	bltu	r22,r3,1000ba9c <__alt_data_end+0xf800ba9c>
1000bb44:	1011883a 	mov	r8,r2
1000bb48:	b0ff341e 	bne	r22,r3,1000b81c <__alt_data_end+0xf800b81c>
1000bb4c:	003f3406 	br	1000b820 <__alt_data_end+0xf800b820>
1000bb50:	0005883a 	mov	r2,zero
1000bb54:	003fe006 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000bb58:	00800434 	movhi	r2,16
1000bb5c:	89400234 	orhi	r5,r17,8
1000bb60:	10bfffc4 	addi	r2,r2,-1
1000bb64:	b807883a 	mov	r3,r23
1000bb68:	288a703a 	and	r5,r5,r2
1000bb6c:	4025883a 	mov	r18,r8
1000bb70:	003e8206 	br	1000b57c <__alt_data_end+0xf800b57c>

1000bb74 <__eqdf2>:
1000bb74:	2804d53a 	srli	r2,r5,20
1000bb78:	3806d53a 	srli	r3,r7,20
1000bb7c:	02000434 	movhi	r8,16
1000bb80:	423fffc4 	addi	r8,r8,-1
1000bb84:	1081ffcc 	andi	r2,r2,2047
1000bb88:	0281ffc4 	movi	r10,2047
1000bb8c:	2a12703a 	and	r9,r5,r8
1000bb90:	18c1ffcc 	andi	r3,r3,2047
1000bb94:	3a10703a 	and	r8,r7,r8
1000bb98:	280ad7fa 	srli	r5,r5,31
1000bb9c:	380ed7fa 	srli	r7,r7,31
1000bba0:	12801026 	beq	r2,r10,1000bbe4 <__eqdf2+0x70>
1000bba4:	0281ffc4 	movi	r10,2047
1000bba8:	1a800a26 	beq	r3,r10,1000bbd4 <__eqdf2+0x60>
1000bbac:	10c00226 	beq	r2,r3,1000bbb8 <__eqdf2+0x44>
1000bbb0:	00800044 	movi	r2,1
1000bbb4:	f800283a 	ret
1000bbb8:	4a3ffd1e 	bne	r9,r8,1000bbb0 <__alt_data_end+0xf800bbb0>
1000bbbc:	21bffc1e 	bne	r4,r6,1000bbb0 <__alt_data_end+0xf800bbb0>
1000bbc0:	29c00c26 	beq	r5,r7,1000bbf4 <__eqdf2+0x80>
1000bbc4:	103ffa1e 	bne	r2,zero,1000bbb0 <__alt_data_end+0xf800bbb0>
1000bbc8:	2244b03a 	or	r2,r4,r9
1000bbcc:	1004c03a 	cmpne	r2,r2,zero
1000bbd0:	f800283a 	ret
1000bbd4:	3214b03a 	or	r10,r6,r8
1000bbd8:	503ff426 	beq	r10,zero,1000bbac <__alt_data_end+0xf800bbac>
1000bbdc:	00800044 	movi	r2,1
1000bbe0:	f800283a 	ret
1000bbe4:	2254b03a 	or	r10,r4,r9
1000bbe8:	503fee26 	beq	r10,zero,1000bba4 <__alt_data_end+0xf800bba4>
1000bbec:	00800044 	movi	r2,1
1000bbf0:	f800283a 	ret
1000bbf4:	0005883a 	mov	r2,zero
1000bbf8:	f800283a 	ret

1000bbfc <__gedf2>:
1000bbfc:	2804d53a 	srli	r2,r5,20
1000bc00:	3806d53a 	srli	r3,r7,20
1000bc04:	02000434 	movhi	r8,16
1000bc08:	423fffc4 	addi	r8,r8,-1
1000bc0c:	1081ffcc 	andi	r2,r2,2047
1000bc10:	0241ffc4 	movi	r9,2047
1000bc14:	2a14703a 	and	r10,r5,r8
1000bc18:	18c1ffcc 	andi	r3,r3,2047
1000bc1c:	3a10703a 	and	r8,r7,r8
1000bc20:	280ad7fa 	srli	r5,r5,31
1000bc24:	380ed7fa 	srli	r7,r7,31
1000bc28:	12401d26 	beq	r2,r9,1000bca0 <__gedf2+0xa4>
1000bc2c:	0241ffc4 	movi	r9,2047
1000bc30:	1a401226 	beq	r3,r9,1000bc7c <__gedf2+0x80>
1000bc34:	1000081e 	bne	r2,zero,1000bc58 <__gedf2+0x5c>
1000bc38:	2296b03a 	or	r11,r4,r10
1000bc3c:	5813003a 	cmpeq	r9,r11,zero
1000bc40:	1800091e 	bne	r3,zero,1000bc68 <__gedf2+0x6c>
1000bc44:	3218b03a 	or	r12,r6,r8
1000bc48:	6000071e 	bne	r12,zero,1000bc68 <__gedf2+0x6c>
1000bc4c:	0005883a 	mov	r2,zero
1000bc50:	5800101e 	bne	r11,zero,1000bc94 <__gedf2+0x98>
1000bc54:	f800283a 	ret
1000bc58:	18000c1e 	bne	r3,zero,1000bc8c <__gedf2+0x90>
1000bc5c:	3212b03a 	or	r9,r6,r8
1000bc60:	48000c26 	beq	r9,zero,1000bc94 <__gedf2+0x98>
1000bc64:	0013883a 	mov	r9,zero
1000bc68:	39c03fcc 	andi	r7,r7,255
1000bc6c:	48000826 	beq	r9,zero,1000bc90 <__gedf2+0x94>
1000bc70:	38000926 	beq	r7,zero,1000bc98 <__gedf2+0x9c>
1000bc74:	00800044 	movi	r2,1
1000bc78:	f800283a 	ret
1000bc7c:	3212b03a 	or	r9,r6,r8
1000bc80:	483fec26 	beq	r9,zero,1000bc34 <__alt_data_end+0xf800bc34>
1000bc84:	00bfff84 	movi	r2,-2
1000bc88:	f800283a 	ret
1000bc8c:	39c03fcc 	andi	r7,r7,255
1000bc90:	29c00626 	beq	r5,r7,1000bcac <__gedf2+0xb0>
1000bc94:	283ff726 	beq	r5,zero,1000bc74 <__alt_data_end+0xf800bc74>
1000bc98:	00bfffc4 	movi	r2,-1
1000bc9c:	f800283a 	ret
1000bca0:	2292b03a 	or	r9,r4,r10
1000bca4:	483fe126 	beq	r9,zero,1000bc2c <__alt_data_end+0xf800bc2c>
1000bca8:	003ff606 	br	1000bc84 <__alt_data_end+0xf800bc84>
1000bcac:	18bff916 	blt	r3,r2,1000bc94 <__alt_data_end+0xf800bc94>
1000bcb0:	10c00316 	blt	r2,r3,1000bcc0 <__gedf2+0xc4>
1000bcb4:	42bff736 	bltu	r8,r10,1000bc94 <__alt_data_end+0xf800bc94>
1000bcb8:	52000326 	beq	r10,r8,1000bcc8 <__gedf2+0xcc>
1000bcbc:	5200042e 	bgeu	r10,r8,1000bcd0 <__gedf2+0xd4>
1000bcc0:	283fec1e 	bne	r5,zero,1000bc74 <__alt_data_end+0xf800bc74>
1000bcc4:	003ff406 	br	1000bc98 <__alt_data_end+0xf800bc98>
1000bcc8:	313ff236 	bltu	r6,r4,1000bc94 <__alt_data_end+0xf800bc94>
1000bccc:	21bffc36 	bltu	r4,r6,1000bcc0 <__alt_data_end+0xf800bcc0>
1000bcd0:	0005883a 	mov	r2,zero
1000bcd4:	f800283a 	ret

1000bcd8 <__ledf2>:
1000bcd8:	2804d53a 	srli	r2,r5,20
1000bcdc:	3810d53a 	srli	r8,r7,20
1000bce0:	00c00434 	movhi	r3,16
1000bce4:	18ffffc4 	addi	r3,r3,-1
1000bce8:	1081ffcc 	andi	r2,r2,2047
1000bcec:	0241ffc4 	movi	r9,2047
1000bcf0:	28d4703a 	and	r10,r5,r3
1000bcf4:	4201ffcc 	andi	r8,r8,2047
1000bcf8:	38c6703a 	and	r3,r7,r3
1000bcfc:	280ad7fa 	srli	r5,r5,31
1000bd00:	380ed7fa 	srli	r7,r7,31
1000bd04:	12401f26 	beq	r2,r9,1000bd84 <__ledf2+0xac>
1000bd08:	0241ffc4 	movi	r9,2047
1000bd0c:	42401426 	beq	r8,r9,1000bd60 <__ledf2+0x88>
1000bd10:	1000091e 	bne	r2,zero,1000bd38 <__ledf2+0x60>
1000bd14:	2296b03a 	or	r11,r4,r10
1000bd18:	5813003a 	cmpeq	r9,r11,zero
1000bd1c:	29403fcc 	andi	r5,r5,255
1000bd20:	40000a1e 	bne	r8,zero,1000bd4c <__ledf2+0x74>
1000bd24:	30d8b03a 	or	r12,r6,r3
1000bd28:	6000081e 	bne	r12,zero,1000bd4c <__ledf2+0x74>
1000bd2c:	0005883a 	mov	r2,zero
1000bd30:	5800111e 	bne	r11,zero,1000bd78 <__ledf2+0xa0>
1000bd34:	f800283a 	ret
1000bd38:	29403fcc 	andi	r5,r5,255
1000bd3c:	40000c1e 	bne	r8,zero,1000bd70 <__ledf2+0x98>
1000bd40:	30d2b03a 	or	r9,r6,r3
1000bd44:	48000c26 	beq	r9,zero,1000bd78 <__ledf2+0xa0>
1000bd48:	0013883a 	mov	r9,zero
1000bd4c:	39c03fcc 	andi	r7,r7,255
1000bd50:	48000826 	beq	r9,zero,1000bd74 <__ledf2+0x9c>
1000bd54:	38001126 	beq	r7,zero,1000bd9c <__ledf2+0xc4>
1000bd58:	00800044 	movi	r2,1
1000bd5c:	f800283a 	ret
1000bd60:	30d2b03a 	or	r9,r6,r3
1000bd64:	483fea26 	beq	r9,zero,1000bd10 <__alt_data_end+0xf800bd10>
1000bd68:	00800084 	movi	r2,2
1000bd6c:	f800283a 	ret
1000bd70:	39c03fcc 	andi	r7,r7,255
1000bd74:	39400726 	beq	r7,r5,1000bd94 <__ledf2+0xbc>
1000bd78:	2800081e 	bne	r5,zero,1000bd9c <__ledf2+0xc4>
1000bd7c:	00800044 	movi	r2,1
1000bd80:	f800283a 	ret
1000bd84:	2292b03a 	or	r9,r4,r10
1000bd88:	483fdf26 	beq	r9,zero,1000bd08 <__alt_data_end+0xf800bd08>
1000bd8c:	00800084 	movi	r2,2
1000bd90:	f800283a 	ret
1000bd94:	4080030e 	bge	r8,r2,1000bda4 <__ledf2+0xcc>
1000bd98:	383fef26 	beq	r7,zero,1000bd58 <__alt_data_end+0xf800bd58>
1000bd9c:	00bfffc4 	movi	r2,-1
1000bda0:	f800283a 	ret
1000bda4:	123feb16 	blt	r2,r8,1000bd54 <__alt_data_end+0xf800bd54>
1000bda8:	1abff336 	bltu	r3,r10,1000bd78 <__alt_data_end+0xf800bd78>
1000bdac:	50c00326 	beq	r10,r3,1000bdbc <__ledf2+0xe4>
1000bdb0:	50c0042e 	bgeu	r10,r3,1000bdc4 <__ledf2+0xec>
1000bdb4:	283fe81e 	bne	r5,zero,1000bd58 <__alt_data_end+0xf800bd58>
1000bdb8:	003ff806 	br	1000bd9c <__alt_data_end+0xf800bd9c>
1000bdbc:	313fee36 	bltu	r6,r4,1000bd78 <__alt_data_end+0xf800bd78>
1000bdc0:	21bffc36 	bltu	r4,r6,1000bdb4 <__alt_data_end+0xf800bdb4>
1000bdc4:	0005883a 	mov	r2,zero
1000bdc8:	f800283a 	ret

1000bdcc <__muldf3>:
1000bdcc:	defff304 	addi	sp,sp,-52
1000bdd0:	2804d53a 	srli	r2,r5,20
1000bdd4:	dd800915 	stw	r22,36(sp)
1000bdd8:	282cd7fa 	srli	r22,r5,31
1000bddc:	dc000315 	stw	r16,12(sp)
1000bde0:	04000434 	movhi	r16,16
1000bde4:	dd400815 	stw	r21,32(sp)
1000bde8:	dc800515 	stw	r18,20(sp)
1000bdec:	843fffc4 	addi	r16,r16,-1
1000bdf0:	dfc00c15 	stw	ra,48(sp)
1000bdf4:	df000b15 	stw	fp,44(sp)
1000bdf8:	ddc00a15 	stw	r23,40(sp)
1000bdfc:	dd000715 	stw	r20,28(sp)
1000be00:	dcc00615 	stw	r19,24(sp)
1000be04:	dc400415 	stw	r17,16(sp)
1000be08:	1481ffcc 	andi	r18,r2,2047
1000be0c:	2c20703a 	and	r16,r5,r16
1000be10:	b02b883a 	mov	r21,r22
1000be14:	b2403fcc 	andi	r9,r22,255
1000be18:	90006026 	beq	r18,zero,1000bf9c <__muldf3+0x1d0>
1000be1c:	0081ffc4 	movi	r2,2047
1000be20:	2029883a 	mov	r20,r4
1000be24:	90803626 	beq	r18,r2,1000bf00 <__muldf3+0x134>
1000be28:	80800434 	orhi	r2,r16,16
1000be2c:	100490fa 	slli	r2,r2,3
1000be30:	2020d77a 	srli	r16,r4,29
1000be34:	202890fa 	slli	r20,r4,3
1000be38:	94bf0044 	addi	r18,r18,-1023
1000be3c:	80a0b03a 	or	r16,r16,r2
1000be40:	0027883a 	mov	r19,zero
1000be44:	0039883a 	mov	fp,zero
1000be48:	3804d53a 	srli	r2,r7,20
1000be4c:	382ed7fa 	srli	r23,r7,31
1000be50:	04400434 	movhi	r17,16
1000be54:	8c7fffc4 	addi	r17,r17,-1
1000be58:	1081ffcc 	andi	r2,r2,2047
1000be5c:	3011883a 	mov	r8,r6
1000be60:	3c62703a 	and	r17,r7,r17
1000be64:	ba803fcc 	andi	r10,r23,255
1000be68:	10006d26 	beq	r2,zero,1000c020 <__muldf3+0x254>
1000be6c:	00c1ffc4 	movi	r3,2047
1000be70:	10c06526 	beq	r2,r3,1000c008 <__muldf3+0x23c>
1000be74:	88c00434 	orhi	r3,r17,16
1000be78:	180690fa 	slli	r3,r3,3
1000be7c:	3022d77a 	srli	r17,r6,29
1000be80:	301090fa 	slli	r8,r6,3
1000be84:	10bf0044 	addi	r2,r2,-1023
1000be88:	88e2b03a 	or	r17,r17,r3
1000be8c:	000b883a 	mov	r5,zero
1000be90:	9085883a 	add	r2,r18,r2
1000be94:	2cc8b03a 	or	r4,r5,r19
1000be98:	00c003c4 	movi	r3,15
1000be9c:	bdacf03a 	xor	r22,r23,r22
1000bea0:	12c00044 	addi	r11,r2,1
1000bea4:	19009936 	bltu	r3,r4,1000c10c <__muldf3+0x340>
1000bea8:	200890ba 	slli	r4,r4,2
1000beac:	00c40074 	movhi	r3,4097
1000beb0:	18efb004 	addi	r3,r3,-16704
1000beb4:	20c9883a 	add	r4,r4,r3
1000beb8:	20c00017 	ldw	r3,0(r4)
1000bebc:	1800683a 	jmp	r3
1000bec0:	1000c10c 	andi	zero,r2,772
1000bec4:	1000bf20 	cmpeqi	zero,r2,764
1000bec8:	1000bf20 	cmpeqi	zero,r2,764
1000becc:	1000bf1c 	xori	zero,r2,764
1000bed0:	1000c0e8 	cmpgeui	zero,r2,771
1000bed4:	1000c0e8 	cmpgeui	zero,r2,771
1000bed8:	1000c0d0 	cmplti	zero,r2,771
1000bedc:	1000bf1c 	xori	zero,r2,764
1000bee0:	1000c0e8 	cmpgeui	zero,r2,771
1000bee4:	1000c0d0 	cmplti	zero,r2,771
1000bee8:	1000c0e8 	cmpgeui	zero,r2,771
1000beec:	1000bf1c 	xori	zero,r2,764
1000bef0:	1000c0f8 	rdprs	zero,r2,771
1000bef4:	1000c0f8 	rdprs	zero,r2,771
1000bef8:	1000c0f8 	rdprs	zero,r2,771
1000befc:	1000c314 	ori	zero,r2,780
1000bf00:	2404b03a 	or	r2,r4,r16
1000bf04:	10006f1e 	bne	r2,zero,1000c0c4 <__muldf3+0x2f8>
1000bf08:	04c00204 	movi	r19,8
1000bf0c:	0021883a 	mov	r16,zero
1000bf10:	0029883a 	mov	r20,zero
1000bf14:	07000084 	movi	fp,2
1000bf18:	003fcb06 	br	1000be48 <__alt_data_end+0xf800be48>
1000bf1c:	502d883a 	mov	r22,r10
1000bf20:	00800084 	movi	r2,2
1000bf24:	28805726 	beq	r5,r2,1000c084 <__muldf3+0x2b8>
1000bf28:	008000c4 	movi	r2,3
1000bf2c:	28816626 	beq	r5,r2,1000c4c8 <__muldf3+0x6fc>
1000bf30:	00800044 	movi	r2,1
1000bf34:	2881411e 	bne	r5,r2,1000c43c <__muldf3+0x670>
1000bf38:	b02b883a 	mov	r21,r22
1000bf3c:	0005883a 	mov	r2,zero
1000bf40:	000b883a 	mov	r5,zero
1000bf44:	0029883a 	mov	r20,zero
1000bf48:	1004953a 	slli	r2,r2,20
1000bf4c:	a8c03fcc 	andi	r3,r21,255
1000bf50:	04400434 	movhi	r17,16
1000bf54:	8c7fffc4 	addi	r17,r17,-1
1000bf58:	180697fa 	slli	r3,r3,31
1000bf5c:	2c4a703a 	and	r5,r5,r17
1000bf60:	288ab03a 	or	r5,r5,r2
1000bf64:	28c6b03a 	or	r3,r5,r3
1000bf68:	a005883a 	mov	r2,r20
1000bf6c:	dfc00c17 	ldw	ra,48(sp)
1000bf70:	df000b17 	ldw	fp,44(sp)
1000bf74:	ddc00a17 	ldw	r23,40(sp)
1000bf78:	dd800917 	ldw	r22,36(sp)
1000bf7c:	dd400817 	ldw	r21,32(sp)
1000bf80:	dd000717 	ldw	r20,28(sp)
1000bf84:	dcc00617 	ldw	r19,24(sp)
1000bf88:	dc800517 	ldw	r18,20(sp)
1000bf8c:	dc400417 	ldw	r17,16(sp)
1000bf90:	dc000317 	ldw	r16,12(sp)
1000bf94:	dec00d04 	addi	sp,sp,52
1000bf98:	f800283a 	ret
1000bf9c:	2404b03a 	or	r2,r4,r16
1000bfa0:	2027883a 	mov	r19,r4
1000bfa4:	10004226 	beq	r2,zero,1000c0b0 <__muldf3+0x2e4>
1000bfa8:	8000fc26 	beq	r16,zero,1000c39c <__muldf3+0x5d0>
1000bfac:	8009883a 	mov	r4,r16
1000bfb0:	d9800215 	stw	r6,8(sp)
1000bfb4:	d9c00015 	stw	r7,0(sp)
1000bfb8:	da400115 	stw	r9,4(sp)
1000bfbc:	000cfe40 	call	1000cfe4 <__clzsi2>
1000bfc0:	d9800217 	ldw	r6,8(sp)
1000bfc4:	d9c00017 	ldw	r7,0(sp)
1000bfc8:	da400117 	ldw	r9,4(sp)
1000bfcc:	113ffd44 	addi	r4,r2,-11
1000bfd0:	00c00704 	movi	r3,28
1000bfd4:	1900ed16 	blt	r3,r4,1000c38c <__muldf3+0x5c0>
1000bfd8:	00c00744 	movi	r3,29
1000bfdc:	147ffe04 	addi	r17,r2,-8
1000bfe0:	1907c83a 	sub	r3,r3,r4
1000bfe4:	8460983a 	sll	r16,r16,r17
1000bfe8:	98c6d83a 	srl	r3,r19,r3
1000bfec:	9c68983a 	sll	r20,r19,r17
1000bff0:	1c20b03a 	or	r16,r3,r16
1000bff4:	1080fcc4 	addi	r2,r2,1011
1000bff8:	00a5c83a 	sub	r18,zero,r2
1000bffc:	0027883a 	mov	r19,zero
1000c000:	0039883a 	mov	fp,zero
1000c004:	003f9006 	br	1000be48 <__alt_data_end+0xf800be48>
1000c008:	3446b03a 	or	r3,r6,r17
1000c00c:	1800261e 	bne	r3,zero,1000c0a8 <__muldf3+0x2dc>
1000c010:	0023883a 	mov	r17,zero
1000c014:	0011883a 	mov	r8,zero
1000c018:	01400084 	movi	r5,2
1000c01c:	003f9c06 	br	1000be90 <__alt_data_end+0xf800be90>
1000c020:	3446b03a 	or	r3,r6,r17
1000c024:	18001c26 	beq	r3,zero,1000c098 <__muldf3+0x2cc>
1000c028:	8800ce26 	beq	r17,zero,1000c364 <__muldf3+0x598>
1000c02c:	8809883a 	mov	r4,r17
1000c030:	d9800215 	stw	r6,8(sp)
1000c034:	da400115 	stw	r9,4(sp)
1000c038:	da800015 	stw	r10,0(sp)
1000c03c:	000cfe40 	call	1000cfe4 <__clzsi2>
1000c040:	d9800217 	ldw	r6,8(sp)
1000c044:	da400117 	ldw	r9,4(sp)
1000c048:	da800017 	ldw	r10,0(sp)
1000c04c:	113ffd44 	addi	r4,r2,-11
1000c050:	00c00704 	movi	r3,28
1000c054:	1900bf16 	blt	r3,r4,1000c354 <__muldf3+0x588>
1000c058:	00c00744 	movi	r3,29
1000c05c:	123ffe04 	addi	r8,r2,-8
1000c060:	1907c83a 	sub	r3,r3,r4
1000c064:	8a22983a 	sll	r17,r17,r8
1000c068:	30c6d83a 	srl	r3,r6,r3
1000c06c:	3210983a 	sll	r8,r6,r8
1000c070:	1c62b03a 	or	r17,r3,r17
1000c074:	1080fcc4 	addi	r2,r2,1011
1000c078:	0085c83a 	sub	r2,zero,r2
1000c07c:	000b883a 	mov	r5,zero
1000c080:	003f8306 	br	1000be90 <__alt_data_end+0xf800be90>
1000c084:	b02b883a 	mov	r21,r22
1000c088:	0081ffc4 	movi	r2,2047
1000c08c:	000b883a 	mov	r5,zero
1000c090:	0029883a 	mov	r20,zero
1000c094:	003fac06 	br	1000bf48 <__alt_data_end+0xf800bf48>
1000c098:	0023883a 	mov	r17,zero
1000c09c:	0011883a 	mov	r8,zero
1000c0a0:	01400044 	movi	r5,1
1000c0a4:	003f7a06 	br	1000be90 <__alt_data_end+0xf800be90>
1000c0a8:	014000c4 	movi	r5,3
1000c0ac:	003f7806 	br	1000be90 <__alt_data_end+0xf800be90>
1000c0b0:	04c00104 	movi	r19,4
1000c0b4:	0021883a 	mov	r16,zero
1000c0b8:	0029883a 	mov	r20,zero
1000c0bc:	07000044 	movi	fp,1
1000c0c0:	003f6106 	br	1000be48 <__alt_data_end+0xf800be48>
1000c0c4:	04c00304 	movi	r19,12
1000c0c8:	070000c4 	movi	fp,3
1000c0cc:	003f5e06 	br	1000be48 <__alt_data_end+0xf800be48>
1000c0d0:	01400434 	movhi	r5,16
1000c0d4:	002b883a 	mov	r21,zero
1000c0d8:	297fffc4 	addi	r5,r5,-1
1000c0dc:	053fffc4 	movi	r20,-1
1000c0e0:	0081ffc4 	movi	r2,2047
1000c0e4:	003f9806 	br	1000bf48 <__alt_data_end+0xf800bf48>
1000c0e8:	8023883a 	mov	r17,r16
1000c0ec:	a011883a 	mov	r8,r20
1000c0f0:	e00b883a 	mov	r5,fp
1000c0f4:	003f8a06 	br	1000bf20 <__alt_data_end+0xf800bf20>
1000c0f8:	8023883a 	mov	r17,r16
1000c0fc:	a011883a 	mov	r8,r20
1000c100:	482d883a 	mov	r22,r9
1000c104:	e00b883a 	mov	r5,fp
1000c108:	003f8506 	br	1000bf20 <__alt_data_end+0xf800bf20>
1000c10c:	a00ad43a 	srli	r5,r20,16
1000c110:	401ad43a 	srli	r13,r8,16
1000c114:	a53fffcc 	andi	r20,r20,65535
1000c118:	423fffcc 	andi	r8,r8,65535
1000c11c:	4519383a 	mul	r12,r8,r20
1000c120:	4147383a 	mul	r3,r8,r5
1000c124:	6d09383a 	mul	r4,r13,r20
1000c128:	600cd43a 	srli	r6,r12,16
1000c12c:	2b5d383a 	mul	r14,r5,r13
1000c130:	20c9883a 	add	r4,r4,r3
1000c134:	310d883a 	add	r6,r6,r4
1000c138:	30c0022e 	bgeu	r6,r3,1000c144 <__muldf3+0x378>
1000c13c:	00c00074 	movhi	r3,1
1000c140:	70dd883a 	add	r14,r14,r3
1000c144:	8826d43a 	srli	r19,r17,16
1000c148:	8bffffcc 	andi	r15,r17,65535
1000c14c:	7d23383a 	mul	r17,r15,r20
1000c150:	7949383a 	mul	r4,r15,r5
1000c154:	9d29383a 	mul	r20,r19,r20
1000c158:	8814d43a 	srli	r10,r17,16
1000c15c:	3012943a 	slli	r9,r6,16
1000c160:	a129883a 	add	r20,r20,r4
1000c164:	633fffcc 	andi	r12,r12,65535
1000c168:	5515883a 	add	r10,r10,r20
1000c16c:	3006d43a 	srli	r3,r6,16
1000c170:	4b13883a 	add	r9,r9,r12
1000c174:	2ccb383a 	mul	r5,r5,r19
1000c178:	5100022e 	bgeu	r10,r4,1000c184 <__muldf3+0x3b8>
1000c17c:	01000074 	movhi	r4,1
1000c180:	290b883a 	add	r5,r5,r4
1000c184:	802ad43a 	srli	r21,r16,16
1000c188:	843fffcc 	andi	r16,r16,65535
1000c18c:	440d383a 	mul	r6,r8,r16
1000c190:	4565383a 	mul	r18,r8,r21
1000c194:	8349383a 	mul	r4,r16,r13
1000c198:	500e943a 	slli	r7,r10,16
1000c19c:	3010d43a 	srli	r8,r6,16
1000c1a0:	5028d43a 	srli	r20,r10,16
1000c1a4:	2489883a 	add	r4,r4,r18
1000c1a8:	8abfffcc 	andi	r10,r17,65535
1000c1ac:	3a95883a 	add	r10,r7,r10
1000c1b0:	4119883a 	add	r12,r8,r4
1000c1b4:	a169883a 	add	r20,r20,r5
1000c1b8:	1a87883a 	add	r3,r3,r10
1000c1bc:	6d5b383a 	mul	r13,r13,r21
1000c1c0:	6480022e 	bgeu	r12,r18,1000c1cc <__muldf3+0x400>
1000c1c4:	01000074 	movhi	r4,1
1000c1c8:	691b883a 	add	r13,r13,r4
1000c1cc:	7c25383a 	mul	r18,r15,r16
1000c1d0:	7d4b383a 	mul	r5,r15,r21
1000c1d4:	84cf383a 	mul	r7,r16,r19
1000c1d8:	901ed43a 	srli	r15,r18,16
1000c1dc:	6008d43a 	srli	r4,r12,16
1000c1e0:	6010943a 	slli	r8,r12,16
1000c1e4:	394f883a 	add	r7,r7,r5
1000c1e8:	333fffcc 	andi	r12,r6,65535
1000c1ec:	79df883a 	add	r15,r15,r7
1000c1f0:	235b883a 	add	r13,r4,r13
1000c1f4:	9d63383a 	mul	r17,r19,r21
1000c1f8:	4309883a 	add	r4,r8,r12
1000c1fc:	7940022e 	bgeu	r15,r5,1000c208 <__muldf3+0x43c>
1000c200:	01400074 	movhi	r5,1
1000c204:	8963883a 	add	r17,r17,r5
1000c208:	780a943a 	slli	r5,r15,16
1000c20c:	91bfffcc 	andi	r6,r18,65535
1000c210:	70c7883a 	add	r3,r14,r3
1000c214:	298d883a 	add	r6,r5,r6
1000c218:	1a8f803a 	cmpltu	r7,r3,r10
1000c21c:	350b883a 	add	r5,r6,r20
1000c220:	20c7883a 	add	r3,r4,r3
1000c224:	3955883a 	add	r10,r7,r5
1000c228:	1909803a 	cmpltu	r4,r3,r4
1000c22c:	6a91883a 	add	r8,r13,r10
1000c230:	780cd43a 	srli	r6,r15,16
1000c234:	2219883a 	add	r12,r4,r8
1000c238:	2d0b803a 	cmpltu	r5,r5,r20
1000c23c:	51cf803a 	cmpltu	r7,r10,r7
1000c240:	29ceb03a 	or	r7,r5,r7
1000c244:	4351803a 	cmpltu	r8,r8,r13
1000c248:	610b803a 	cmpltu	r5,r12,r4
1000c24c:	4148b03a 	or	r4,r8,r5
1000c250:	398f883a 	add	r7,r7,r6
1000c254:	3909883a 	add	r4,r7,r4
1000c258:	1810927a 	slli	r8,r3,9
1000c25c:	2449883a 	add	r4,r4,r17
1000c260:	2008927a 	slli	r4,r4,9
1000c264:	6022d5fa 	srli	r17,r12,23
1000c268:	1806d5fa 	srli	r3,r3,23
1000c26c:	4252b03a 	or	r9,r8,r9
1000c270:	600a927a 	slli	r5,r12,9
1000c274:	4810c03a 	cmpne	r8,r9,zero
1000c278:	2462b03a 	or	r17,r4,r17
1000c27c:	40c6b03a 	or	r3,r8,r3
1000c280:	8900402c 	andhi	r4,r17,256
1000c284:	1950b03a 	or	r8,r3,r5
1000c288:	20000726 	beq	r4,zero,1000c2a8 <__muldf3+0x4dc>
1000c28c:	4006d07a 	srli	r3,r8,1
1000c290:	880497fa 	slli	r2,r17,31
1000c294:	4200004c 	andi	r8,r8,1
1000c298:	8822d07a 	srli	r17,r17,1
1000c29c:	1a10b03a 	or	r8,r3,r8
1000c2a0:	1210b03a 	or	r8,r2,r8
1000c2a4:	5805883a 	mov	r2,r11
1000c2a8:	1140ffc4 	addi	r5,r2,1023
1000c2ac:	0140440e 	bge	zero,r5,1000c3c0 <__muldf3+0x5f4>
1000c2b0:	40c001cc 	andi	r3,r8,7
1000c2b4:	18000726 	beq	r3,zero,1000c2d4 <__muldf3+0x508>
1000c2b8:	40c003cc 	andi	r3,r8,15
1000c2bc:	01000104 	movi	r4,4
1000c2c0:	19000426 	beq	r3,r4,1000c2d4 <__muldf3+0x508>
1000c2c4:	4107883a 	add	r3,r8,r4
1000c2c8:	1a11803a 	cmpltu	r8,r3,r8
1000c2cc:	8a23883a 	add	r17,r17,r8
1000c2d0:	1811883a 	mov	r8,r3
1000c2d4:	88c0402c 	andhi	r3,r17,256
1000c2d8:	18000426 	beq	r3,zero,1000c2ec <__muldf3+0x520>
1000c2dc:	11410004 	addi	r5,r2,1024
1000c2e0:	00bfc034 	movhi	r2,65280
1000c2e4:	10bfffc4 	addi	r2,r2,-1
1000c2e8:	88a2703a 	and	r17,r17,r2
1000c2ec:	0081ff84 	movi	r2,2046
1000c2f0:	117f6416 	blt	r2,r5,1000c084 <__alt_data_end+0xf800c084>
1000c2f4:	8828977a 	slli	r20,r17,29
1000c2f8:	4010d0fa 	srli	r8,r8,3
1000c2fc:	8822927a 	slli	r17,r17,9
1000c300:	2881ffcc 	andi	r2,r5,2047
1000c304:	a228b03a 	or	r20,r20,r8
1000c308:	880ad33a 	srli	r5,r17,12
1000c30c:	b02b883a 	mov	r21,r22
1000c310:	003f0d06 	br	1000bf48 <__alt_data_end+0xf800bf48>
1000c314:	8080022c 	andhi	r2,r16,8
1000c318:	10000926 	beq	r2,zero,1000c340 <__muldf3+0x574>
1000c31c:	8880022c 	andhi	r2,r17,8
1000c320:	1000071e 	bne	r2,zero,1000c340 <__muldf3+0x574>
1000c324:	00800434 	movhi	r2,16
1000c328:	89400234 	orhi	r5,r17,8
1000c32c:	10bfffc4 	addi	r2,r2,-1
1000c330:	b82b883a 	mov	r21,r23
1000c334:	288a703a 	and	r5,r5,r2
1000c338:	4029883a 	mov	r20,r8
1000c33c:	003f6806 	br	1000c0e0 <__alt_data_end+0xf800c0e0>
1000c340:	00800434 	movhi	r2,16
1000c344:	81400234 	orhi	r5,r16,8
1000c348:	10bfffc4 	addi	r2,r2,-1
1000c34c:	288a703a 	and	r5,r5,r2
1000c350:	003f6306 	br	1000c0e0 <__alt_data_end+0xf800c0e0>
1000c354:	147ff604 	addi	r17,r2,-40
1000c358:	3462983a 	sll	r17,r6,r17
1000c35c:	0011883a 	mov	r8,zero
1000c360:	003f4406 	br	1000c074 <__alt_data_end+0xf800c074>
1000c364:	3009883a 	mov	r4,r6
1000c368:	d9800215 	stw	r6,8(sp)
1000c36c:	da400115 	stw	r9,4(sp)
1000c370:	da800015 	stw	r10,0(sp)
1000c374:	000cfe40 	call	1000cfe4 <__clzsi2>
1000c378:	10800804 	addi	r2,r2,32
1000c37c:	da800017 	ldw	r10,0(sp)
1000c380:	da400117 	ldw	r9,4(sp)
1000c384:	d9800217 	ldw	r6,8(sp)
1000c388:	003f3006 	br	1000c04c <__alt_data_end+0xf800c04c>
1000c38c:	143ff604 	addi	r16,r2,-40
1000c390:	9c20983a 	sll	r16,r19,r16
1000c394:	0029883a 	mov	r20,zero
1000c398:	003f1606 	br	1000bff4 <__alt_data_end+0xf800bff4>
1000c39c:	d9800215 	stw	r6,8(sp)
1000c3a0:	d9c00015 	stw	r7,0(sp)
1000c3a4:	da400115 	stw	r9,4(sp)
1000c3a8:	000cfe40 	call	1000cfe4 <__clzsi2>
1000c3ac:	10800804 	addi	r2,r2,32
1000c3b0:	da400117 	ldw	r9,4(sp)
1000c3b4:	d9c00017 	ldw	r7,0(sp)
1000c3b8:	d9800217 	ldw	r6,8(sp)
1000c3bc:	003f0306 	br	1000bfcc <__alt_data_end+0xf800bfcc>
1000c3c0:	00c00044 	movi	r3,1
1000c3c4:	1947c83a 	sub	r3,r3,r5
1000c3c8:	00800e04 	movi	r2,56
1000c3cc:	10feda16 	blt	r2,r3,1000bf38 <__alt_data_end+0xf800bf38>
1000c3d0:	008007c4 	movi	r2,31
1000c3d4:	10c01b16 	blt	r2,r3,1000c444 <__muldf3+0x678>
1000c3d8:	00800804 	movi	r2,32
1000c3dc:	10c5c83a 	sub	r2,r2,r3
1000c3e0:	888a983a 	sll	r5,r17,r2
1000c3e4:	40c8d83a 	srl	r4,r8,r3
1000c3e8:	4084983a 	sll	r2,r8,r2
1000c3ec:	88e2d83a 	srl	r17,r17,r3
1000c3f0:	2906b03a 	or	r3,r5,r4
1000c3f4:	1004c03a 	cmpne	r2,r2,zero
1000c3f8:	1886b03a 	or	r3,r3,r2
1000c3fc:	188001cc 	andi	r2,r3,7
1000c400:	10000726 	beq	r2,zero,1000c420 <__muldf3+0x654>
1000c404:	188003cc 	andi	r2,r3,15
1000c408:	01000104 	movi	r4,4
1000c40c:	11000426 	beq	r2,r4,1000c420 <__muldf3+0x654>
1000c410:	1805883a 	mov	r2,r3
1000c414:	10c00104 	addi	r3,r2,4
1000c418:	1885803a 	cmpltu	r2,r3,r2
1000c41c:	88a3883a 	add	r17,r17,r2
1000c420:	8880202c 	andhi	r2,r17,128
1000c424:	10001c26 	beq	r2,zero,1000c498 <__muldf3+0x6cc>
1000c428:	b02b883a 	mov	r21,r22
1000c42c:	00800044 	movi	r2,1
1000c430:	000b883a 	mov	r5,zero
1000c434:	0029883a 	mov	r20,zero
1000c438:	003ec306 	br	1000bf48 <__alt_data_end+0xf800bf48>
1000c43c:	5805883a 	mov	r2,r11
1000c440:	003f9906 	br	1000c2a8 <__alt_data_end+0xf800c2a8>
1000c444:	00bff844 	movi	r2,-31
1000c448:	1145c83a 	sub	r2,r2,r5
1000c44c:	8888d83a 	srl	r4,r17,r2
1000c450:	00800804 	movi	r2,32
1000c454:	18801a26 	beq	r3,r2,1000c4c0 <__muldf3+0x6f4>
1000c458:	00801004 	movi	r2,64
1000c45c:	10c5c83a 	sub	r2,r2,r3
1000c460:	8884983a 	sll	r2,r17,r2
1000c464:	1204b03a 	or	r2,r2,r8
1000c468:	1004c03a 	cmpne	r2,r2,zero
1000c46c:	2084b03a 	or	r2,r4,r2
1000c470:	144001cc 	andi	r17,r2,7
1000c474:	88000d1e 	bne	r17,zero,1000c4ac <__muldf3+0x6e0>
1000c478:	000b883a 	mov	r5,zero
1000c47c:	1028d0fa 	srli	r20,r2,3
1000c480:	b02b883a 	mov	r21,r22
1000c484:	0005883a 	mov	r2,zero
1000c488:	a468b03a 	or	r20,r20,r17
1000c48c:	003eae06 	br	1000bf48 <__alt_data_end+0xf800bf48>
1000c490:	1007883a 	mov	r3,r2
1000c494:	0023883a 	mov	r17,zero
1000c498:	880a927a 	slli	r5,r17,9
1000c49c:	1805883a 	mov	r2,r3
1000c4a0:	8822977a 	slli	r17,r17,29
1000c4a4:	280ad33a 	srli	r5,r5,12
1000c4a8:	003ff406 	br	1000c47c <__alt_data_end+0xf800c47c>
1000c4ac:	10c003cc 	andi	r3,r2,15
1000c4b0:	01000104 	movi	r4,4
1000c4b4:	193ff626 	beq	r3,r4,1000c490 <__alt_data_end+0xf800c490>
1000c4b8:	0023883a 	mov	r17,zero
1000c4bc:	003fd506 	br	1000c414 <__alt_data_end+0xf800c414>
1000c4c0:	0005883a 	mov	r2,zero
1000c4c4:	003fe706 	br	1000c464 <__alt_data_end+0xf800c464>
1000c4c8:	00800434 	movhi	r2,16
1000c4cc:	89400234 	orhi	r5,r17,8
1000c4d0:	10bfffc4 	addi	r2,r2,-1
1000c4d4:	b02b883a 	mov	r21,r22
1000c4d8:	288a703a 	and	r5,r5,r2
1000c4dc:	4029883a 	mov	r20,r8
1000c4e0:	003eff06 	br	1000c0e0 <__alt_data_end+0xf800c0e0>

1000c4e4 <__subdf3>:
1000c4e4:	02000434 	movhi	r8,16
1000c4e8:	423fffc4 	addi	r8,r8,-1
1000c4ec:	defffb04 	addi	sp,sp,-20
1000c4f0:	2a14703a 	and	r10,r5,r8
1000c4f4:	3812d53a 	srli	r9,r7,20
1000c4f8:	3a10703a 	and	r8,r7,r8
1000c4fc:	2006d77a 	srli	r3,r4,29
1000c500:	3004d77a 	srli	r2,r6,29
1000c504:	dc000015 	stw	r16,0(sp)
1000c508:	501490fa 	slli	r10,r10,3
1000c50c:	2820d53a 	srli	r16,r5,20
1000c510:	401090fa 	slli	r8,r8,3
1000c514:	dc800215 	stw	r18,8(sp)
1000c518:	dc400115 	stw	r17,4(sp)
1000c51c:	dfc00415 	stw	ra,16(sp)
1000c520:	202290fa 	slli	r17,r4,3
1000c524:	dcc00315 	stw	r19,12(sp)
1000c528:	4a41ffcc 	andi	r9,r9,2047
1000c52c:	0101ffc4 	movi	r4,2047
1000c530:	2824d7fa 	srli	r18,r5,31
1000c534:	8401ffcc 	andi	r16,r16,2047
1000c538:	50c6b03a 	or	r3,r10,r3
1000c53c:	380ed7fa 	srli	r7,r7,31
1000c540:	408ab03a 	or	r5,r8,r2
1000c544:	300c90fa 	slli	r6,r6,3
1000c548:	49009626 	beq	r9,r4,1000c7a4 <__subdf3+0x2c0>
1000c54c:	39c0005c 	xori	r7,r7,1
1000c550:	8245c83a 	sub	r2,r16,r9
1000c554:	3c807426 	beq	r7,r18,1000c728 <__subdf3+0x244>
1000c558:	0080af0e 	bge	zero,r2,1000c818 <__subdf3+0x334>
1000c55c:	48002a1e 	bne	r9,zero,1000c608 <__subdf3+0x124>
1000c560:	2988b03a 	or	r4,r5,r6
1000c564:	20009a1e 	bne	r4,zero,1000c7d0 <__subdf3+0x2ec>
1000c568:	888001cc 	andi	r2,r17,7
1000c56c:	10000726 	beq	r2,zero,1000c58c <__subdf3+0xa8>
1000c570:	888003cc 	andi	r2,r17,15
1000c574:	01000104 	movi	r4,4
1000c578:	11000426 	beq	r2,r4,1000c58c <__subdf3+0xa8>
1000c57c:	890b883a 	add	r5,r17,r4
1000c580:	2c63803a 	cmpltu	r17,r5,r17
1000c584:	1c47883a 	add	r3,r3,r17
1000c588:	2823883a 	mov	r17,r5
1000c58c:	1880202c 	andhi	r2,r3,128
1000c590:	10005926 	beq	r2,zero,1000c6f8 <__subdf3+0x214>
1000c594:	84000044 	addi	r16,r16,1
1000c598:	0081ffc4 	movi	r2,2047
1000c59c:	8080be26 	beq	r16,r2,1000c898 <__subdf3+0x3b4>
1000c5a0:	017fe034 	movhi	r5,65408
1000c5a4:	297fffc4 	addi	r5,r5,-1
1000c5a8:	1946703a 	and	r3,r3,r5
1000c5ac:	1804977a 	slli	r2,r3,29
1000c5b0:	1806927a 	slli	r3,r3,9
1000c5b4:	8822d0fa 	srli	r17,r17,3
1000c5b8:	8401ffcc 	andi	r16,r16,2047
1000c5bc:	180ad33a 	srli	r5,r3,12
1000c5c0:	9100004c 	andi	r4,r18,1
1000c5c4:	1444b03a 	or	r2,r2,r17
1000c5c8:	80c1ffcc 	andi	r3,r16,2047
1000c5cc:	1820953a 	slli	r16,r3,20
1000c5d0:	20c03fcc 	andi	r3,r4,255
1000c5d4:	180897fa 	slli	r4,r3,31
1000c5d8:	00c00434 	movhi	r3,16
1000c5dc:	18ffffc4 	addi	r3,r3,-1
1000c5e0:	28c6703a 	and	r3,r5,r3
1000c5e4:	1c06b03a 	or	r3,r3,r16
1000c5e8:	1906b03a 	or	r3,r3,r4
1000c5ec:	dfc00417 	ldw	ra,16(sp)
1000c5f0:	dcc00317 	ldw	r19,12(sp)
1000c5f4:	dc800217 	ldw	r18,8(sp)
1000c5f8:	dc400117 	ldw	r17,4(sp)
1000c5fc:	dc000017 	ldw	r16,0(sp)
1000c600:	dec00504 	addi	sp,sp,20
1000c604:	f800283a 	ret
1000c608:	0101ffc4 	movi	r4,2047
1000c60c:	813fd626 	beq	r16,r4,1000c568 <__alt_data_end+0xf800c568>
1000c610:	29402034 	orhi	r5,r5,128
1000c614:	01000e04 	movi	r4,56
1000c618:	2080a316 	blt	r4,r2,1000c8a8 <__subdf3+0x3c4>
1000c61c:	010007c4 	movi	r4,31
1000c620:	2080c616 	blt	r4,r2,1000c93c <__subdf3+0x458>
1000c624:	01000804 	movi	r4,32
1000c628:	2089c83a 	sub	r4,r4,r2
1000c62c:	2910983a 	sll	r8,r5,r4
1000c630:	308ed83a 	srl	r7,r6,r2
1000c634:	3108983a 	sll	r4,r6,r4
1000c638:	2884d83a 	srl	r2,r5,r2
1000c63c:	41ccb03a 	or	r6,r8,r7
1000c640:	2008c03a 	cmpne	r4,r4,zero
1000c644:	310cb03a 	or	r6,r6,r4
1000c648:	898dc83a 	sub	r6,r17,r6
1000c64c:	89a3803a 	cmpltu	r17,r17,r6
1000c650:	1887c83a 	sub	r3,r3,r2
1000c654:	1c47c83a 	sub	r3,r3,r17
1000c658:	3023883a 	mov	r17,r6
1000c65c:	1880202c 	andhi	r2,r3,128
1000c660:	10002326 	beq	r2,zero,1000c6f0 <__subdf3+0x20c>
1000c664:	04c02034 	movhi	r19,128
1000c668:	9cffffc4 	addi	r19,r19,-1
1000c66c:	1ce6703a 	and	r19,r3,r19
1000c670:	98007a26 	beq	r19,zero,1000c85c <__subdf3+0x378>
1000c674:	9809883a 	mov	r4,r19
1000c678:	000cfe40 	call	1000cfe4 <__clzsi2>
1000c67c:	113ffe04 	addi	r4,r2,-8
1000c680:	00c007c4 	movi	r3,31
1000c684:	19007b16 	blt	r3,r4,1000c874 <__subdf3+0x390>
1000c688:	00800804 	movi	r2,32
1000c68c:	1105c83a 	sub	r2,r2,r4
1000c690:	8884d83a 	srl	r2,r17,r2
1000c694:	9906983a 	sll	r3,r19,r4
1000c698:	8922983a 	sll	r17,r17,r4
1000c69c:	10c4b03a 	or	r2,r2,r3
1000c6a0:	24007816 	blt	r4,r16,1000c884 <__subdf3+0x3a0>
1000c6a4:	2421c83a 	sub	r16,r4,r16
1000c6a8:	80c00044 	addi	r3,r16,1
1000c6ac:	010007c4 	movi	r4,31
1000c6b0:	20c09516 	blt	r4,r3,1000c908 <__subdf3+0x424>
1000c6b4:	01400804 	movi	r5,32
1000c6b8:	28cbc83a 	sub	r5,r5,r3
1000c6bc:	88c8d83a 	srl	r4,r17,r3
1000c6c0:	8962983a 	sll	r17,r17,r5
1000c6c4:	114a983a 	sll	r5,r2,r5
1000c6c8:	10c6d83a 	srl	r3,r2,r3
1000c6cc:	8804c03a 	cmpne	r2,r17,zero
1000c6d0:	290ab03a 	or	r5,r5,r4
1000c6d4:	28a2b03a 	or	r17,r5,r2
1000c6d8:	0021883a 	mov	r16,zero
1000c6dc:	003fa206 	br	1000c568 <__alt_data_end+0xf800c568>
1000c6e0:	2090b03a 	or	r8,r4,r2
1000c6e4:	40018e26 	beq	r8,zero,1000cd20 <__subdf3+0x83c>
1000c6e8:	1007883a 	mov	r3,r2
1000c6ec:	2023883a 	mov	r17,r4
1000c6f0:	888001cc 	andi	r2,r17,7
1000c6f4:	103f9e1e 	bne	r2,zero,1000c570 <__alt_data_end+0xf800c570>
1000c6f8:	1804977a 	slli	r2,r3,29
1000c6fc:	8822d0fa 	srli	r17,r17,3
1000c700:	1810d0fa 	srli	r8,r3,3
1000c704:	9100004c 	andi	r4,r18,1
1000c708:	1444b03a 	or	r2,r2,r17
1000c70c:	00c1ffc4 	movi	r3,2047
1000c710:	80c02826 	beq	r16,r3,1000c7b4 <__subdf3+0x2d0>
1000c714:	01400434 	movhi	r5,16
1000c718:	297fffc4 	addi	r5,r5,-1
1000c71c:	80e0703a 	and	r16,r16,r3
1000c720:	414a703a 	and	r5,r8,r5
1000c724:	003fa806 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c728:	0080630e 	bge	zero,r2,1000c8b8 <__subdf3+0x3d4>
1000c72c:	48003026 	beq	r9,zero,1000c7f0 <__subdf3+0x30c>
1000c730:	0101ffc4 	movi	r4,2047
1000c734:	813f8c26 	beq	r16,r4,1000c568 <__alt_data_end+0xf800c568>
1000c738:	29402034 	orhi	r5,r5,128
1000c73c:	01000e04 	movi	r4,56
1000c740:	2080a90e 	bge	r4,r2,1000c9e8 <__subdf3+0x504>
1000c744:	298cb03a 	or	r6,r5,r6
1000c748:	3012c03a 	cmpne	r9,r6,zero
1000c74c:	0005883a 	mov	r2,zero
1000c750:	4c53883a 	add	r9,r9,r17
1000c754:	4c63803a 	cmpltu	r17,r9,r17
1000c758:	10c7883a 	add	r3,r2,r3
1000c75c:	88c7883a 	add	r3,r17,r3
1000c760:	4823883a 	mov	r17,r9
1000c764:	1880202c 	andhi	r2,r3,128
1000c768:	1000d026 	beq	r2,zero,1000caac <__subdf3+0x5c8>
1000c76c:	84000044 	addi	r16,r16,1
1000c770:	0081ffc4 	movi	r2,2047
1000c774:	8080fe26 	beq	r16,r2,1000cb70 <__subdf3+0x68c>
1000c778:	00bfe034 	movhi	r2,65408
1000c77c:	10bfffc4 	addi	r2,r2,-1
1000c780:	1886703a 	and	r3,r3,r2
1000c784:	880ad07a 	srli	r5,r17,1
1000c788:	180497fa 	slli	r2,r3,31
1000c78c:	8900004c 	andi	r4,r17,1
1000c790:	2922b03a 	or	r17,r5,r4
1000c794:	1806d07a 	srli	r3,r3,1
1000c798:	1462b03a 	or	r17,r2,r17
1000c79c:	3825883a 	mov	r18,r7
1000c7a0:	003f7106 	br	1000c568 <__alt_data_end+0xf800c568>
1000c7a4:	2984b03a 	or	r2,r5,r6
1000c7a8:	103f6826 	beq	r2,zero,1000c54c <__alt_data_end+0xf800c54c>
1000c7ac:	39c03fcc 	andi	r7,r7,255
1000c7b0:	003f6706 	br	1000c550 <__alt_data_end+0xf800c550>
1000c7b4:	4086b03a 	or	r3,r8,r2
1000c7b8:	18015226 	beq	r3,zero,1000cd04 <__subdf3+0x820>
1000c7bc:	00c00434 	movhi	r3,16
1000c7c0:	41400234 	orhi	r5,r8,8
1000c7c4:	18ffffc4 	addi	r3,r3,-1
1000c7c8:	28ca703a 	and	r5,r5,r3
1000c7cc:	003f7e06 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c7d0:	10bfffc4 	addi	r2,r2,-1
1000c7d4:	1000491e 	bne	r2,zero,1000c8fc <__subdf3+0x418>
1000c7d8:	898fc83a 	sub	r7,r17,r6
1000c7dc:	89e3803a 	cmpltu	r17,r17,r7
1000c7e0:	1947c83a 	sub	r3,r3,r5
1000c7e4:	1c47c83a 	sub	r3,r3,r17
1000c7e8:	3823883a 	mov	r17,r7
1000c7ec:	003f9b06 	br	1000c65c <__alt_data_end+0xf800c65c>
1000c7f0:	2988b03a 	or	r4,r5,r6
1000c7f4:	203f5c26 	beq	r4,zero,1000c568 <__alt_data_end+0xf800c568>
1000c7f8:	10bfffc4 	addi	r2,r2,-1
1000c7fc:	1000931e 	bne	r2,zero,1000ca4c <__subdf3+0x568>
1000c800:	898d883a 	add	r6,r17,r6
1000c804:	3463803a 	cmpltu	r17,r6,r17
1000c808:	1947883a 	add	r3,r3,r5
1000c80c:	88c7883a 	add	r3,r17,r3
1000c810:	3023883a 	mov	r17,r6
1000c814:	003fd306 	br	1000c764 <__alt_data_end+0xf800c764>
1000c818:	1000541e 	bne	r2,zero,1000c96c <__subdf3+0x488>
1000c81c:	80800044 	addi	r2,r16,1
1000c820:	1081ffcc 	andi	r2,r2,2047
1000c824:	01000044 	movi	r4,1
1000c828:	2080a20e 	bge	r4,r2,1000cab4 <__subdf3+0x5d0>
1000c82c:	8989c83a 	sub	r4,r17,r6
1000c830:	8905803a 	cmpltu	r2,r17,r4
1000c834:	1967c83a 	sub	r19,r3,r5
1000c838:	98a7c83a 	sub	r19,r19,r2
1000c83c:	9880202c 	andhi	r2,r19,128
1000c840:	10006326 	beq	r2,zero,1000c9d0 <__subdf3+0x4ec>
1000c844:	3463c83a 	sub	r17,r6,r17
1000c848:	28c7c83a 	sub	r3,r5,r3
1000c84c:	344d803a 	cmpltu	r6,r6,r17
1000c850:	19a7c83a 	sub	r19,r3,r6
1000c854:	3825883a 	mov	r18,r7
1000c858:	983f861e 	bne	r19,zero,1000c674 <__alt_data_end+0xf800c674>
1000c85c:	8809883a 	mov	r4,r17
1000c860:	000cfe40 	call	1000cfe4 <__clzsi2>
1000c864:	10800804 	addi	r2,r2,32
1000c868:	113ffe04 	addi	r4,r2,-8
1000c86c:	00c007c4 	movi	r3,31
1000c870:	193f850e 	bge	r3,r4,1000c688 <__alt_data_end+0xf800c688>
1000c874:	10bff604 	addi	r2,r2,-40
1000c878:	8884983a 	sll	r2,r17,r2
1000c87c:	0023883a 	mov	r17,zero
1000c880:	243f880e 	bge	r4,r16,1000c6a4 <__alt_data_end+0xf800c6a4>
1000c884:	00ffe034 	movhi	r3,65408
1000c888:	18ffffc4 	addi	r3,r3,-1
1000c88c:	8121c83a 	sub	r16,r16,r4
1000c890:	10c6703a 	and	r3,r2,r3
1000c894:	003f3406 	br	1000c568 <__alt_data_end+0xf800c568>
1000c898:	9100004c 	andi	r4,r18,1
1000c89c:	000b883a 	mov	r5,zero
1000c8a0:	0005883a 	mov	r2,zero
1000c8a4:	003f4806 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c8a8:	298cb03a 	or	r6,r5,r6
1000c8ac:	300cc03a 	cmpne	r6,r6,zero
1000c8b0:	0005883a 	mov	r2,zero
1000c8b4:	003f6406 	br	1000c648 <__alt_data_end+0xf800c648>
1000c8b8:	10009a1e 	bne	r2,zero,1000cb24 <__subdf3+0x640>
1000c8bc:	82400044 	addi	r9,r16,1
1000c8c0:	4881ffcc 	andi	r2,r9,2047
1000c8c4:	02800044 	movi	r10,1
1000c8c8:	5080670e 	bge	r10,r2,1000ca68 <__subdf3+0x584>
1000c8cc:	0081ffc4 	movi	r2,2047
1000c8d0:	4880af26 	beq	r9,r2,1000cb90 <__subdf3+0x6ac>
1000c8d4:	898d883a 	add	r6,r17,r6
1000c8d8:	1945883a 	add	r2,r3,r5
1000c8dc:	3447803a 	cmpltu	r3,r6,r17
1000c8e0:	1887883a 	add	r3,r3,r2
1000c8e4:	182297fa 	slli	r17,r3,31
1000c8e8:	300cd07a 	srli	r6,r6,1
1000c8ec:	1806d07a 	srli	r3,r3,1
1000c8f0:	4821883a 	mov	r16,r9
1000c8f4:	89a2b03a 	or	r17,r17,r6
1000c8f8:	003f1b06 	br	1000c568 <__alt_data_end+0xf800c568>
1000c8fc:	0101ffc4 	movi	r4,2047
1000c900:	813f441e 	bne	r16,r4,1000c614 <__alt_data_end+0xf800c614>
1000c904:	003f1806 	br	1000c568 <__alt_data_end+0xf800c568>
1000c908:	843ff844 	addi	r16,r16,-31
1000c90c:	01400804 	movi	r5,32
1000c910:	1408d83a 	srl	r4,r2,r16
1000c914:	19405026 	beq	r3,r5,1000ca58 <__subdf3+0x574>
1000c918:	01401004 	movi	r5,64
1000c91c:	28c7c83a 	sub	r3,r5,r3
1000c920:	10c4983a 	sll	r2,r2,r3
1000c924:	88a2b03a 	or	r17,r17,r2
1000c928:	8822c03a 	cmpne	r17,r17,zero
1000c92c:	2462b03a 	or	r17,r4,r17
1000c930:	0007883a 	mov	r3,zero
1000c934:	0021883a 	mov	r16,zero
1000c938:	003f6d06 	br	1000c6f0 <__alt_data_end+0xf800c6f0>
1000c93c:	11fff804 	addi	r7,r2,-32
1000c940:	01000804 	movi	r4,32
1000c944:	29ced83a 	srl	r7,r5,r7
1000c948:	11004526 	beq	r2,r4,1000ca60 <__subdf3+0x57c>
1000c94c:	01001004 	movi	r4,64
1000c950:	2089c83a 	sub	r4,r4,r2
1000c954:	2904983a 	sll	r2,r5,r4
1000c958:	118cb03a 	or	r6,r2,r6
1000c95c:	300cc03a 	cmpne	r6,r6,zero
1000c960:	398cb03a 	or	r6,r7,r6
1000c964:	0005883a 	mov	r2,zero
1000c968:	003f3706 	br	1000c648 <__alt_data_end+0xf800c648>
1000c96c:	80002a26 	beq	r16,zero,1000ca18 <__subdf3+0x534>
1000c970:	0101ffc4 	movi	r4,2047
1000c974:	49006626 	beq	r9,r4,1000cb10 <__subdf3+0x62c>
1000c978:	0085c83a 	sub	r2,zero,r2
1000c97c:	18c02034 	orhi	r3,r3,128
1000c980:	01000e04 	movi	r4,56
1000c984:	20807e16 	blt	r4,r2,1000cb80 <__subdf3+0x69c>
1000c988:	010007c4 	movi	r4,31
1000c98c:	2080e716 	blt	r4,r2,1000cd2c <__subdf3+0x848>
1000c990:	01000804 	movi	r4,32
1000c994:	2089c83a 	sub	r4,r4,r2
1000c998:	1914983a 	sll	r10,r3,r4
1000c99c:	8890d83a 	srl	r8,r17,r2
1000c9a0:	8908983a 	sll	r4,r17,r4
1000c9a4:	1884d83a 	srl	r2,r3,r2
1000c9a8:	5222b03a 	or	r17,r10,r8
1000c9ac:	2006c03a 	cmpne	r3,r4,zero
1000c9b0:	88e2b03a 	or	r17,r17,r3
1000c9b4:	3463c83a 	sub	r17,r6,r17
1000c9b8:	2885c83a 	sub	r2,r5,r2
1000c9bc:	344d803a 	cmpltu	r6,r6,r17
1000c9c0:	1187c83a 	sub	r3,r2,r6
1000c9c4:	4821883a 	mov	r16,r9
1000c9c8:	3825883a 	mov	r18,r7
1000c9cc:	003f2306 	br	1000c65c <__alt_data_end+0xf800c65c>
1000c9d0:	24d0b03a 	or	r8,r4,r19
1000c9d4:	40001b1e 	bne	r8,zero,1000ca44 <__subdf3+0x560>
1000c9d8:	0005883a 	mov	r2,zero
1000c9dc:	0009883a 	mov	r4,zero
1000c9e0:	0021883a 	mov	r16,zero
1000c9e4:	003f4906 	br	1000c70c <__alt_data_end+0xf800c70c>
1000c9e8:	010007c4 	movi	r4,31
1000c9ec:	20803a16 	blt	r4,r2,1000cad8 <__subdf3+0x5f4>
1000c9f0:	01000804 	movi	r4,32
1000c9f4:	2089c83a 	sub	r4,r4,r2
1000c9f8:	2912983a 	sll	r9,r5,r4
1000c9fc:	3090d83a 	srl	r8,r6,r2
1000ca00:	3108983a 	sll	r4,r6,r4
1000ca04:	2884d83a 	srl	r2,r5,r2
1000ca08:	4a12b03a 	or	r9,r9,r8
1000ca0c:	2008c03a 	cmpne	r4,r4,zero
1000ca10:	4912b03a 	or	r9,r9,r4
1000ca14:	003f4e06 	br	1000c750 <__alt_data_end+0xf800c750>
1000ca18:	1c48b03a 	or	r4,r3,r17
1000ca1c:	20003c26 	beq	r4,zero,1000cb10 <__subdf3+0x62c>
1000ca20:	0084303a 	nor	r2,zero,r2
1000ca24:	1000381e 	bne	r2,zero,1000cb08 <__subdf3+0x624>
1000ca28:	3463c83a 	sub	r17,r6,r17
1000ca2c:	28c5c83a 	sub	r2,r5,r3
1000ca30:	344d803a 	cmpltu	r6,r6,r17
1000ca34:	1187c83a 	sub	r3,r2,r6
1000ca38:	4821883a 	mov	r16,r9
1000ca3c:	3825883a 	mov	r18,r7
1000ca40:	003f0606 	br	1000c65c <__alt_data_end+0xf800c65c>
1000ca44:	2023883a 	mov	r17,r4
1000ca48:	003f0906 	br	1000c670 <__alt_data_end+0xf800c670>
1000ca4c:	0101ffc4 	movi	r4,2047
1000ca50:	813f3a1e 	bne	r16,r4,1000c73c <__alt_data_end+0xf800c73c>
1000ca54:	003ec406 	br	1000c568 <__alt_data_end+0xf800c568>
1000ca58:	0005883a 	mov	r2,zero
1000ca5c:	003fb106 	br	1000c924 <__alt_data_end+0xf800c924>
1000ca60:	0005883a 	mov	r2,zero
1000ca64:	003fbc06 	br	1000c958 <__alt_data_end+0xf800c958>
1000ca68:	1c44b03a 	or	r2,r3,r17
1000ca6c:	80008e1e 	bne	r16,zero,1000cca8 <__subdf3+0x7c4>
1000ca70:	1000c826 	beq	r2,zero,1000cd94 <__subdf3+0x8b0>
1000ca74:	2984b03a 	or	r2,r5,r6
1000ca78:	103ebb26 	beq	r2,zero,1000c568 <__alt_data_end+0xf800c568>
1000ca7c:	8989883a 	add	r4,r17,r6
1000ca80:	1945883a 	add	r2,r3,r5
1000ca84:	2447803a 	cmpltu	r3,r4,r17
1000ca88:	1887883a 	add	r3,r3,r2
1000ca8c:	1880202c 	andhi	r2,r3,128
1000ca90:	2023883a 	mov	r17,r4
1000ca94:	103f1626 	beq	r2,zero,1000c6f0 <__alt_data_end+0xf800c6f0>
1000ca98:	00bfe034 	movhi	r2,65408
1000ca9c:	10bfffc4 	addi	r2,r2,-1
1000caa0:	5021883a 	mov	r16,r10
1000caa4:	1886703a 	and	r3,r3,r2
1000caa8:	003eaf06 	br	1000c568 <__alt_data_end+0xf800c568>
1000caac:	3825883a 	mov	r18,r7
1000cab0:	003f0f06 	br	1000c6f0 <__alt_data_end+0xf800c6f0>
1000cab4:	1c44b03a 	or	r2,r3,r17
1000cab8:	8000251e 	bne	r16,zero,1000cb50 <__subdf3+0x66c>
1000cabc:	1000661e 	bne	r2,zero,1000cc58 <__subdf3+0x774>
1000cac0:	2990b03a 	or	r8,r5,r6
1000cac4:	40009626 	beq	r8,zero,1000cd20 <__subdf3+0x83c>
1000cac8:	2807883a 	mov	r3,r5
1000cacc:	3023883a 	mov	r17,r6
1000cad0:	3825883a 	mov	r18,r7
1000cad4:	003ea406 	br	1000c568 <__alt_data_end+0xf800c568>
1000cad8:	127ff804 	addi	r9,r2,-32
1000cadc:	01000804 	movi	r4,32
1000cae0:	2a52d83a 	srl	r9,r5,r9
1000cae4:	11008c26 	beq	r2,r4,1000cd18 <__subdf3+0x834>
1000cae8:	01001004 	movi	r4,64
1000caec:	2085c83a 	sub	r2,r4,r2
1000caf0:	2884983a 	sll	r2,r5,r2
1000caf4:	118cb03a 	or	r6,r2,r6
1000caf8:	300cc03a 	cmpne	r6,r6,zero
1000cafc:	4992b03a 	or	r9,r9,r6
1000cb00:	0005883a 	mov	r2,zero
1000cb04:	003f1206 	br	1000c750 <__alt_data_end+0xf800c750>
1000cb08:	0101ffc4 	movi	r4,2047
1000cb0c:	493f9c1e 	bne	r9,r4,1000c980 <__alt_data_end+0xf800c980>
1000cb10:	2807883a 	mov	r3,r5
1000cb14:	3023883a 	mov	r17,r6
1000cb18:	4821883a 	mov	r16,r9
1000cb1c:	3825883a 	mov	r18,r7
1000cb20:	003e9106 	br	1000c568 <__alt_data_end+0xf800c568>
1000cb24:	80001f1e 	bne	r16,zero,1000cba4 <__subdf3+0x6c0>
1000cb28:	1c48b03a 	or	r4,r3,r17
1000cb2c:	20005a26 	beq	r4,zero,1000cc98 <__subdf3+0x7b4>
1000cb30:	0084303a 	nor	r2,zero,r2
1000cb34:	1000561e 	bne	r2,zero,1000cc90 <__subdf3+0x7ac>
1000cb38:	89a3883a 	add	r17,r17,r6
1000cb3c:	1945883a 	add	r2,r3,r5
1000cb40:	898d803a 	cmpltu	r6,r17,r6
1000cb44:	3087883a 	add	r3,r6,r2
1000cb48:	4821883a 	mov	r16,r9
1000cb4c:	003f0506 	br	1000c764 <__alt_data_end+0xf800c764>
1000cb50:	10002b1e 	bne	r2,zero,1000cc00 <__subdf3+0x71c>
1000cb54:	2984b03a 	or	r2,r5,r6
1000cb58:	10008026 	beq	r2,zero,1000cd5c <__subdf3+0x878>
1000cb5c:	2807883a 	mov	r3,r5
1000cb60:	3023883a 	mov	r17,r6
1000cb64:	3825883a 	mov	r18,r7
1000cb68:	0401ffc4 	movi	r16,2047
1000cb6c:	003e7e06 	br	1000c568 <__alt_data_end+0xf800c568>
1000cb70:	3809883a 	mov	r4,r7
1000cb74:	0011883a 	mov	r8,zero
1000cb78:	0005883a 	mov	r2,zero
1000cb7c:	003ee306 	br	1000c70c <__alt_data_end+0xf800c70c>
1000cb80:	1c62b03a 	or	r17,r3,r17
1000cb84:	8822c03a 	cmpne	r17,r17,zero
1000cb88:	0005883a 	mov	r2,zero
1000cb8c:	003f8906 	br	1000c9b4 <__alt_data_end+0xf800c9b4>
1000cb90:	3809883a 	mov	r4,r7
1000cb94:	4821883a 	mov	r16,r9
1000cb98:	0011883a 	mov	r8,zero
1000cb9c:	0005883a 	mov	r2,zero
1000cba0:	003eda06 	br	1000c70c <__alt_data_end+0xf800c70c>
1000cba4:	0101ffc4 	movi	r4,2047
1000cba8:	49003b26 	beq	r9,r4,1000cc98 <__subdf3+0x7b4>
1000cbac:	0085c83a 	sub	r2,zero,r2
1000cbb0:	18c02034 	orhi	r3,r3,128
1000cbb4:	01000e04 	movi	r4,56
1000cbb8:	20806e16 	blt	r4,r2,1000cd74 <__subdf3+0x890>
1000cbbc:	010007c4 	movi	r4,31
1000cbc0:	20807716 	blt	r4,r2,1000cda0 <__subdf3+0x8bc>
1000cbc4:	01000804 	movi	r4,32
1000cbc8:	2089c83a 	sub	r4,r4,r2
1000cbcc:	1914983a 	sll	r10,r3,r4
1000cbd0:	8890d83a 	srl	r8,r17,r2
1000cbd4:	8908983a 	sll	r4,r17,r4
1000cbd8:	1884d83a 	srl	r2,r3,r2
1000cbdc:	5222b03a 	or	r17,r10,r8
1000cbe0:	2006c03a 	cmpne	r3,r4,zero
1000cbe4:	88e2b03a 	or	r17,r17,r3
1000cbe8:	89a3883a 	add	r17,r17,r6
1000cbec:	1145883a 	add	r2,r2,r5
1000cbf0:	898d803a 	cmpltu	r6,r17,r6
1000cbf4:	3087883a 	add	r3,r6,r2
1000cbf8:	4821883a 	mov	r16,r9
1000cbfc:	003ed906 	br	1000c764 <__alt_data_end+0xf800c764>
1000cc00:	2984b03a 	or	r2,r5,r6
1000cc04:	10004226 	beq	r2,zero,1000cd10 <__subdf3+0x82c>
1000cc08:	1808d0fa 	srli	r4,r3,3
1000cc0c:	8822d0fa 	srli	r17,r17,3
1000cc10:	1806977a 	slli	r3,r3,29
1000cc14:	2080022c 	andhi	r2,r4,8
1000cc18:	1c62b03a 	or	r17,r3,r17
1000cc1c:	10000826 	beq	r2,zero,1000cc40 <__subdf3+0x75c>
1000cc20:	2812d0fa 	srli	r9,r5,3
1000cc24:	4880022c 	andhi	r2,r9,8
1000cc28:	1000051e 	bne	r2,zero,1000cc40 <__subdf3+0x75c>
1000cc2c:	300cd0fa 	srli	r6,r6,3
1000cc30:	2804977a 	slli	r2,r5,29
1000cc34:	4809883a 	mov	r4,r9
1000cc38:	3825883a 	mov	r18,r7
1000cc3c:	11a2b03a 	or	r17,r2,r6
1000cc40:	8806d77a 	srli	r3,r17,29
1000cc44:	200890fa 	slli	r4,r4,3
1000cc48:	882290fa 	slli	r17,r17,3
1000cc4c:	0401ffc4 	movi	r16,2047
1000cc50:	1906b03a 	or	r3,r3,r4
1000cc54:	003e4406 	br	1000c568 <__alt_data_end+0xf800c568>
1000cc58:	2984b03a 	or	r2,r5,r6
1000cc5c:	103e4226 	beq	r2,zero,1000c568 <__alt_data_end+0xf800c568>
1000cc60:	8989c83a 	sub	r4,r17,r6
1000cc64:	8911803a 	cmpltu	r8,r17,r4
1000cc68:	1945c83a 	sub	r2,r3,r5
1000cc6c:	1205c83a 	sub	r2,r2,r8
1000cc70:	1200202c 	andhi	r8,r2,128
1000cc74:	403e9a26 	beq	r8,zero,1000c6e0 <__alt_data_end+0xf800c6e0>
1000cc78:	3463c83a 	sub	r17,r6,r17
1000cc7c:	28c5c83a 	sub	r2,r5,r3
1000cc80:	344d803a 	cmpltu	r6,r6,r17
1000cc84:	1187c83a 	sub	r3,r2,r6
1000cc88:	3825883a 	mov	r18,r7
1000cc8c:	003e3606 	br	1000c568 <__alt_data_end+0xf800c568>
1000cc90:	0101ffc4 	movi	r4,2047
1000cc94:	493fc71e 	bne	r9,r4,1000cbb4 <__alt_data_end+0xf800cbb4>
1000cc98:	2807883a 	mov	r3,r5
1000cc9c:	3023883a 	mov	r17,r6
1000cca0:	4821883a 	mov	r16,r9
1000cca4:	003e3006 	br	1000c568 <__alt_data_end+0xf800c568>
1000cca8:	10003626 	beq	r2,zero,1000cd84 <__subdf3+0x8a0>
1000ccac:	2984b03a 	or	r2,r5,r6
1000ccb0:	10001726 	beq	r2,zero,1000cd10 <__subdf3+0x82c>
1000ccb4:	1808d0fa 	srli	r4,r3,3
1000ccb8:	8822d0fa 	srli	r17,r17,3
1000ccbc:	1806977a 	slli	r3,r3,29
1000ccc0:	2080022c 	andhi	r2,r4,8
1000ccc4:	1c62b03a 	or	r17,r3,r17
1000ccc8:	10000726 	beq	r2,zero,1000cce8 <__subdf3+0x804>
1000cccc:	2812d0fa 	srli	r9,r5,3
1000ccd0:	4880022c 	andhi	r2,r9,8
1000ccd4:	1000041e 	bne	r2,zero,1000cce8 <__subdf3+0x804>
1000ccd8:	300cd0fa 	srli	r6,r6,3
1000ccdc:	2804977a 	slli	r2,r5,29
1000cce0:	4809883a 	mov	r4,r9
1000cce4:	11a2b03a 	or	r17,r2,r6
1000cce8:	8806d77a 	srli	r3,r17,29
1000ccec:	200890fa 	slli	r4,r4,3
1000ccf0:	882290fa 	slli	r17,r17,3
1000ccf4:	3825883a 	mov	r18,r7
1000ccf8:	1906b03a 	or	r3,r3,r4
1000ccfc:	0401ffc4 	movi	r16,2047
1000cd00:	003e1906 	br	1000c568 <__alt_data_end+0xf800c568>
1000cd04:	000b883a 	mov	r5,zero
1000cd08:	0005883a 	mov	r2,zero
1000cd0c:	003e2e06 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000cd10:	0401ffc4 	movi	r16,2047
1000cd14:	003e1406 	br	1000c568 <__alt_data_end+0xf800c568>
1000cd18:	0005883a 	mov	r2,zero
1000cd1c:	003f7506 	br	1000caf4 <__alt_data_end+0xf800caf4>
1000cd20:	0005883a 	mov	r2,zero
1000cd24:	0009883a 	mov	r4,zero
1000cd28:	003e7806 	br	1000c70c <__alt_data_end+0xf800c70c>
1000cd2c:	123ff804 	addi	r8,r2,-32
1000cd30:	01000804 	movi	r4,32
1000cd34:	1a10d83a 	srl	r8,r3,r8
1000cd38:	11002526 	beq	r2,r4,1000cdd0 <__subdf3+0x8ec>
1000cd3c:	01001004 	movi	r4,64
1000cd40:	2085c83a 	sub	r2,r4,r2
1000cd44:	1884983a 	sll	r2,r3,r2
1000cd48:	1444b03a 	or	r2,r2,r17
1000cd4c:	1004c03a 	cmpne	r2,r2,zero
1000cd50:	40a2b03a 	or	r17,r8,r2
1000cd54:	0005883a 	mov	r2,zero
1000cd58:	003f1606 	br	1000c9b4 <__alt_data_end+0xf800c9b4>
1000cd5c:	02000434 	movhi	r8,16
1000cd60:	0009883a 	mov	r4,zero
1000cd64:	423fffc4 	addi	r8,r8,-1
1000cd68:	00bfffc4 	movi	r2,-1
1000cd6c:	0401ffc4 	movi	r16,2047
1000cd70:	003e6606 	br	1000c70c <__alt_data_end+0xf800c70c>
1000cd74:	1c62b03a 	or	r17,r3,r17
1000cd78:	8822c03a 	cmpne	r17,r17,zero
1000cd7c:	0005883a 	mov	r2,zero
1000cd80:	003f9906 	br	1000cbe8 <__alt_data_end+0xf800cbe8>
1000cd84:	2807883a 	mov	r3,r5
1000cd88:	3023883a 	mov	r17,r6
1000cd8c:	0401ffc4 	movi	r16,2047
1000cd90:	003df506 	br	1000c568 <__alt_data_end+0xf800c568>
1000cd94:	2807883a 	mov	r3,r5
1000cd98:	3023883a 	mov	r17,r6
1000cd9c:	003df206 	br	1000c568 <__alt_data_end+0xf800c568>
1000cda0:	123ff804 	addi	r8,r2,-32
1000cda4:	01000804 	movi	r4,32
1000cda8:	1a10d83a 	srl	r8,r3,r8
1000cdac:	11000a26 	beq	r2,r4,1000cdd8 <__subdf3+0x8f4>
1000cdb0:	01001004 	movi	r4,64
1000cdb4:	2085c83a 	sub	r2,r4,r2
1000cdb8:	1884983a 	sll	r2,r3,r2
1000cdbc:	1444b03a 	or	r2,r2,r17
1000cdc0:	1004c03a 	cmpne	r2,r2,zero
1000cdc4:	40a2b03a 	or	r17,r8,r2
1000cdc8:	0005883a 	mov	r2,zero
1000cdcc:	003f8606 	br	1000cbe8 <__alt_data_end+0xf800cbe8>
1000cdd0:	0005883a 	mov	r2,zero
1000cdd4:	003fdc06 	br	1000cd48 <__alt_data_end+0xf800cd48>
1000cdd8:	0005883a 	mov	r2,zero
1000cddc:	003ff706 	br	1000cdbc <__alt_data_end+0xf800cdbc>

1000cde0 <__fixdfsi>:
1000cde0:	280cd53a 	srli	r6,r5,20
1000cde4:	00c00434 	movhi	r3,16
1000cde8:	18ffffc4 	addi	r3,r3,-1
1000cdec:	3181ffcc 	andi	r6,r6,2047
1000cdf0:	01c0ff84 	movi	r7,1022
1000cdf4:	28c6703a 	and	r3,r5,r3
1000cdf8:	280ad7fa 	srli	r5,r5,31
1000cdfc:	3980120e 	bge	r7,r6,1000ce48 <__fixdfsi+0x68>
1000ce00:	00810744 	movi	r2,1053
1000ce04:	11800c16 	blt	r2,r6,1000ce38 <__fixdfsi+0x58>
1000ce08:	00810cc4 	movi	r2,1075
1000ce0c:	1185c83a 	sub	r2,r2,r6
1000ce10:	01c007c4 	movi	r7,31
1000ce14:	18c00434 	orhi	r3,r3,16
1000ce18:	38800d16 	blt	r7,r2,1000ce50 <__fixdfsi+0x70>
1000ce1c:	31befb44 	addi	r6,r6,-1043
1000ce20:	2084d83a 	srl	r2,r4,r2
1000ce24:	1986983a 	sll	r3,r3,r6
1000ce28:	1884b03a 	or	r2,r3,r2
1000ce2c:	28000726 	beq	r5,zero,1000ce4c <__fixdfsi+0x6c>
1000ce30:	0085c83a 	sub	r2,zero,r2
1000ce34:	f800283a 	ret
1000ce38:	00a00034 	movhi	r2,32768
1000ce3c:	10bfffc4 	addi	r2,r2,-1
1000ce40:	2885883a 	add	r2,r5,r2
1000ce44:	f800283a 	ret
1000ce48:	0005883a 	mov	r2,zero
1000ce4c:	f800283a 	ret
1000ce50:	008104c4 	movi	r2,1043
1000ce54:	1185c83a 	sub	r2,r2,r6
1000ce58:	1884d83a 	srl	r2,r3,r2
1000ce5c:	003ff306 	br	1000ce2c <__alt_data_end+0xf800ce2c>

1000ce60 <__floatsidf>:
1000ce60:	defffd04 	addi	sp,sp,-12
1000ce64:	dfc00215 	stw	ra,8(sp)
1000ce68:	dc400115 	stw	r17,4(sp)
1000ce6c:	dc000015 	stw	r16,0(sp)
1000ce70:	20002b26 	beq	r4,zero,1000cf20 <__floatsidf+0xc0>
1000ce74:	2023883a 	mov	r17,r4
1000ce78:	2020d7fa 	srli	r16,r4,31
1000ce7c:	20002d16 	blt	r4,zero,1000cf34 <__floatsidf+0xd4>
1000ce80:	8809883a 	mov	r4,r17
1000ce84:	000cfe40 	call	1000cfe4 <__clzsi2>
1000ce88:	01410784 	movi	r5,1054
1000ce8c:	288bc83a 	sub	r5,r5,r2
1000ce90:	01010cc4 	movi	r4,1075
1000ce94:	2149c83a 	sub	r4,r4,r5
1000ce98:	00c007c4 	movi	r3,31
1000ce9c:	1900160e 	bge	r3,r4,1000cef8 <__floatsidf+0x98>
1000cea0:	00c104c4 	movi	r3,1043
1000cea4:	1947c83a 	sub	r3,r3,r5
1000cea8:	88c6983a 	sll	r3,r17,r3
1000ceac:	00800434 	movhi	r2,16
1000ceb0:	10bfffc4 	addi	r2,r2,-1
1000ceb4:	1886703a 	and	r3,r3,r2
1000ceb8:	2941ffcc 	andi	r5,r5,2047
1000cebc:	800d883a 	mov	r6,r16
1000cec0:	0005883a 	mov	r2,zero
1000cec4:	280a953a 	slli	r5,r5,20
1000cec8:	31803fcc 	andi	r6,r6,255
1000cecc:	01000434 	movhi	r4,16
1000ced0:	300c97fa 	slli	r6,r6,31
1000ced4:	213fffc4 	addi	r4,r4,-1
1000ced8:	1906703a 	and	r3,r3,r4
1000cedc:	1946b03a 	or	r3,r3,r5
1000cee0:	1986b03a 	or	r3,r3,r6
1000cee4:	dfc00217 	ldw	ra,8(sp)
1000cee8:	dc400117 	ldw	r17,4(sp)
1000ceec:	dc000017 	ldw	r16,0(sp)
1000cef0:	dec00304 	addi	sp,sp,12
1000cef4:	f800283a 	ret
1000cef8:	00c002c4 	movi	r3,11
1000cefc:	1887c83a 	sub	r3,r3,r2
1000cf00:	88c6d83a 	srl	r3,r17,r3
1000cf04:	8904983a 	sll	r2,r17,r4
1000cf08:	01000434 	movhi	r4,16
1000cf0c:	213fffc4 	addi	r4,r4,-1
1000cf10:	2941ffcc 	andi	r5,r5,2047
1000cf14:	1906703a 	and	r3,r3,r4
1000cf18:	800d883a 	mov	r6,r16
1000cf1c:	003fe906 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000cf20:	000d883a 	mov	r6,zero
1000cf24:	000b883a 	mov	r5,zero
1000cf28:	0007883a 	mov	r3,zero
1000cf2c:	0005883a 	mov	r2,zero
1000cf30:	003fe406 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000cf34:	0123c83a 	sub	r17,zero,r4
1000cf38:	003fd106 	br	1000ce80 <__alt_data_end+0xf800ce80>

1000cf3c <__floatunsidf>:
1000cf3c:	defffe04 	addi	sp,sp,-8
1000cf40:	dc000015 	stw	r16,0(sp)
1000cf44:	dfc00115 	stw	ra,4(sp)
1000cf48:	2021883a 	mov	r16,r4
1000cf4c:	20002226 	beq	r4,zero,1000cfd8 <__floatunsidf+0x9c>
1000cf50:	000cfe40 	call	1000cfe4 <__clzsi2>
1000cf54:	01010784 	movi	r4,1054
1000cf58:	2089c83a 	sub	r4,r4,r2
1000cf5c:	01810cc4 	movi	r6,1075
1000cf60:	310dc83a 	sub	r6,r6,r4
1000cf64:	00c007c4 	movi	r3,31
1000cf68:	1980120e 	bge	r3,r6,1000cfb4 <__floatunsidf+0x78>
1000cf6c:	00c104c4 	movi	r3,1043
1000cf70:	1907c83a 	sub	r3,r3,r4
1000cf74:	80ca983a 	sll	r5,r16,r3
1000cf78:	00800434 	movhi	r2,16
1000cf7c:	10bfffc4 	addi	r2,r2,-1
1000cf80:	2101ffcc 	andi	r4,r4,2047
1000cf84:	0021883a 	mov	r16,zero
1000cf88:	288a703a 	and	r5,r5,r2
1000cf8c:	2008953a 	slli	r4,r4,20
1000cf90:	00c00434 	movhi	r3,16
1000cf94:	18ffffc4 	addi	r3,r3,-1
1000cf98:	28c6703a 	and	r3,r5,r3
1000cf9c:	8005883a 	mov	r2,r16
1000cfa0:	1906b03a 	or	r3,r3,r4
1000cfa4:	dfc00117 	ldw	ra,4(sp)
1000cfa8:	dc000017 	ldw	r16,0(sp)
1000cfac:	dec00204 	addi	sp,sp,8
1000cfb0:	f800283a 	ret
1000cfb4:	00c002c4 	movi	r3,11
1000cfb8:	188bc83a 	sub	r5,r3,r2
1000cfbc:	814ad83a 	srl	r5,r16,r5
1000cfc0:	00c00434 	movhi	r3,16
1000cfc4:	18ffffc4 	addi	r3,r3,-1
1000cfc8:	81a0983a 	sll	r16,r16,r6
1000cfcc:	2101ffcc 	andi	r4,r4,2047
1000cfd0:	28ca703a 	and	r5,r5,r3
1000cfd4:	003fed06 	br	1000cf8c <__alt_data_end+0xf800cf8c>
1000cfd8:	0009883a 	mov	r4,zero
1000cfdc:	000b883a 	mov	r5,zero
1000cfe0:	003fea06 	br	1000cf8c <__alt_data_end+0xf800cf8c>

1000cfe4 <__clzsi2>:
1000cfe4:	00bfffd4 	movui	r2,65535
1000cfe8:	11000536 	bltu	r2,r4,1000d000 <__clzsi2+0x1c>
1000cfec:	00803fc4 	movi	r2,255
1000cff0:	11000f36 	bltu	r2,r4,1000d030 <__clzsi2+0x4c>
1000cff4:	00800804 	movi	r2,32
1000cff8:	0007883a 	mov	r3,zero
1000cffc:	00000506 	br	1000d014 <__clzsi2+0x30>
1000d000:	00804034 	movhi	r2,256
1000d004:	10bfffc4 	addi	r2,r2,-1
1000d008:	11000c2e 	bgeu	r2,r4,1000d03c <__clzsi2+0x58>
1000d00c:	00800204 	movi	r2,8
1000d010:	00c00604 	movi	r3,24
1000d014:	20c8d83a 	srl	r4,r4,r3
1000d018:	00c40074 	movhi	r3,4097
1000d01c:	18fe7404 	addi	r3,r3,-1584
1000d020:	1909883a 	add	r4,r3,r4
1000d024:	20c00003 	ldbu	r3,0(r4)
1000d028:	10c5c83a 	sub	r2,r2,r3
1000d02c:	f800283a 	ret
1000d030:	00800604 	movi	r2,24
1000d034:	00c00204 	movi	r3,8
1000d038:	003ff606 	br	1000d014 <__alt_data_end+0xf800d014>
1000d03c:	00800404 	movi	r2,16
1000d040:	1007883a 	mov	r3,r2
1000d044:	003ff306 	br	1000d014 <__alt_data_end+0xf800d014>

1000d048 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d048:	defffe04 	addi	sp,sp,-8
1000d04c:	dfc00115 	stw	ra,4(sp)
1000d050:	df000015 	stw	fp,0(sp)
1000d054:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d058:	d0a00b17 	ldw	r2,-32724(gp)
1000d05c:	10000326 	beq	r2,zero,1000d06c <alt_get_errno+0x24>
1000d060:	d0a00b17 	ldw	r2,-32724(gp)
1000d064:	103ee83a 	callr	r2
1000d068:	00000106 	br	1000d070 <alt_get_errno+0x28>
1000d06c:	d0a6d204 	addi	r2,gp,-25784
}
1000d070:	e037883a 	mov	sp,fp
1000d074:	dfc00117 	ldw	ra,4(sp)
1000d078:	df000017 	ldw	fp,0(sp)
1000d07c:	dec00204 	addi	sp,sp,8
1000d080:	f800283a 	ret

1000d084 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d084:	defffb04 	addi	sp,sp,-20
1000d088:	dfc00415 	stw	ra,16(sp)
1000d08c:	df000315 	stw	fp,12(sp)
1000d090:	df000304 	addi	fp,sp,12
1000d094:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d098:	e0bfff17 	ldw	r2,-4(fp)
1000d09c:	10000616 	blt	r2,zero,1000d0b8 <close+0x34>
1000d0a0:	e0bfff17 	ldw	r2,-4(fp)
1000d0a4:	10c00324 	muli	r3,r2,12
1000d0a8:	00840074 	movhi	r2,4097
1000d0ac:	1080f204 	addi	r2,r2,968
1000d0b0:	1885883a 	add	r2,r3,r2
1000d0b4:	00000106 	br	1000d0bc <close+0x38>
1000d0b8:	0005883a 	mov	r2,zero
1000d0bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d0c0:	e0bffd17 	ldw	r2,-12(fp)
1000d0c4:	10001926 	beq	r2,zero,1000d12c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d0c8:	e0bffd17 	ldw	r2,-12(fp)
1000d0cc:	10800017 	ldw	r2,0(r2)
1000d0d0:	10800417 	ldw	r2,16(r2)
1000d0d4:	10000626 	beq	r2,zero,1000d0f0 <close+0x6c>
1000d0d8:	e0bffd17 	ldw	r2,-12(fp)
1000d0dc:	10800017 	ldw	r2,0(r2)
1000d0e0:	10800417 	ldw	r2,16(r2)
1000d0e4:	e13ffd17 	ldw	r4,-12(fp)
1000d0e8:	103ee83a 	callr	r2
1000d0ec:	00000106 	br	1000d0f4 <close+0x70>
1000d0f0:	0005883a 	mov	r2,zero
1000d0f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d0f8:	e13fff17 	ldw	r4,-4(fp)
1000d0fc:	000d8c40 	call	1000d8c4 <alt_release_fd>
    if (rval < 0)
1000d100:	e0bffe17 	ldw	r2,-8(fp)
1000d104:	1000070e 	bge	r2,zero,1000d124 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000d108:	000d0480 	call	1000d048 <alt_get_errno>
1000d10c:	1007883a 	mov	r3,r2
1000d110:	e0bffe17 	ldw	r2,-8(fp)
1000d114:	0085c83a 	sub	r2,zero,r2
1000d118:	18800015 	stw	r2,0(r3)
      return -1;
1000d11c:	00bfffc4 	movi	r2,-1
1000d120:	00000706 	br	1000d140 <close+0xbc>
    }
    return 0;
1000d124:	0005883a 	mov	r2,zero
1000d128:	00000506 	br	1000d140 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d12c:	000d0480 	call	1000d048 <alt_get_errno>
1000d130:	1007883a 	mov	r3,r2
1000d134:	00801444 	movi	r2,81
1000d138:	18800015 	stw	r2,0(r3)
    return -1;
1000d13c:	00bfffc4 	movi	r2,-1
  }
}
1000d140:	e037883a 	mov	sp,fp
1000d144:	dfc00117 	ldw	ra,4(sp)
1000d148:	df000017 	ldw	fp,0(sp)
1000d14c:	dec00204 	addi	sp,sp,8
1000d150:	f800283a 	ret

1000d154 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d154:	defffc04 	addi	sp,sp,-16
1000d158:	df000315 	stw	fp,12(sp)
1000d15c:	df000304 	addi	fp,sp,12
1000d160:	e13ffd15 	stw	r4,-12(fp)
1000d164:	e17ffe15 	stw	r5,-8(fp)
1000d168:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d16c:	e0bfff17 	ldw	r2,-4(fp)
}
1000d170:	e037883a 	mov	sp,fp
1000d174:	df000017 	ldw	fp,0(sp)
1000d178:	dec00104 	addi	sp,sp,4
1000d17c:	f800283a 	ret

1000d180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d180:	defffe04 	addi	sp,sp,-8
1000d184:	dfc00115 	stw	ra,4(sp)
1000d188:	df000015 	stw	fp,0(sp)
1000d18c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d190:	d0a00b17 	ldw	r2,-32724(gp)
1000d194:	10000326 	beq	r2,zero,1000d1a4 <alt_get_errno+0x24>
1000d198:	d0a00b17 	ldw	r2,-32724(gp)
1000d19c:	103ee83a 	callr	r2
1000d1a0:	00000106 	br	1000d1a8 <alt_get_errno+0x28>
1000d1a4:	d0a6d204 	addi	r2,gp,-25784
}
1000d1a8:	e037883a 	mov	sp,fp
1000d1ac:	dfc00117 	ldw	ra,4(sp)
1000d1b0:	df000017 	ldw	fp,0(sp)
1000d1b4:	dec00204 	addi	sp,sp,8
1000d1b8:	f800283a 	ret

1000d1bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d1bc:	defffb04 	addi	sp,sp,-20
1000d1c0:	dfc00415 	stw	ra,16(sp)
1000d1c4:	df000315 	stw	fp,12(sp)
1000d1c8:	df000304 	addi	fp,sp,12
1000d1cc:	e13ffe15 	stw	r4,-8(fp)
1000d1d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d1d4:	e0bffe17 	ldw	r2,-8(fp)
1000d1d8:	10000616 	blt	r2,zero,1000d1f4 <fstat+0x38>
1000d1dc:	e0bffe17 	ldw	r2,-8(fp)
1000d1e0:	10c00324 	muli	r3,r2,12
1000d1e4:	00840074 	movhi	r2,4097
1000d1e8:	1080f204 	addi	r2,r2,968
1000d1ec:	1885883a 	add	r2,r3,r2
1000d1f0:	00000106 	br	1000d1f8 <fstat+0x3c>
1000d1f4:	0005883a 	mov	r2,zero
1000d1f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d1fc:	e0bffd17 	ldw	r2,-12(fp)
1000d200:	10001026 	beq	r2,zero,1000d244 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d204:	e0bffd17 	ldw	r2,-12(fp)
1000d208:	10800017 	ldw	r2,0(r2)
1000d20c:	10800817 	ldw	r2,32(r2)
1000d210:	10000726 	beq	r2,zero,1000d230 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1000d214:	e0bffd17 	ldw	r2,-12(fp)
1000d218:	10800017 	ldw	r2,0(r2)
1000d21c:	10800817 	ldw	r2,32(r2)
1000d220:	e17fff17 	ldw	r5,-4(fp)
1000d224:	e13ffd17 	ldw	r4,-12(fp)
1000d228:	103ee83a 	callr	r2
1000d22c:	00000a06 	br	1000d258 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d230:	e0bfff17 	ldw	r2,-4(fp)
1000d234:	00c80004 	movi	r3,8192
1000d238:	10c00115 	stw	r3,4(r2)
      return 0;
1000d23c:	0005883a 	mov	r2,zero
1000d240:	00000506 	br	1000d258 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d244:	000d1800 	call	1000d180 <alt_get_errno>
1000d248:	1007883a 	mov	r3,r2
1000d24c:	00801444 	movi	r2,81
1000d250:	18800015 	stw	r2,0(r3)
    return -1;
1000d254:	00bfffc4 	movi	r2,-1
  }
}
1000d258:	e037883a 	mov	sp,fp
1000d25c:	dfc00117 	ldw	ra,4(sp)
1000d260:	df000017 	ldw	fp,0(sp)
1000d264:	dec00204 	addi	sp,sp,8
1000d268:	f800283a 	ret

1000d26c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
1000d26c:	defff004 	addi	sp,sp,-64
1000d270:	df000f15 	stw	fp,60(sp)
1000d274:	df000f04 	addi	fp,sp,60
1000d278:	e13ffd15 	stw	r4,-12(fp)
1000d27c:	e17ffe15 	stw	r5,-8(fp)
1000d280:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
1000d284:	00bffa84 	movi	r2,-22
1000d288:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000d28c:	e0bffd17 	ldw	r2,-12(fp)
1000d290:	10800828 	cmpgeui	r2,r2,32
1000d294:	1000501e 	bne	r2,zero,1000d3d8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d298:	0005303a 	rdctl	r2,status
1000d29c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d2a0:	e0fff617 	ldw	r3,-40(fp)
1000d2a4:	00bfff84 	movi	r2,-2
1000d2a8:	1884703a 	and	r2,r3,r2
1000d2ac:	1001703a 	wrctl	status,r2
  
  return context;
1000d2b0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
1000d2b4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
1000d2b8:	00840074 	movhi	r2,4097
1000d2bc:	108c4d04 	addi	r2,r2,12596
1000d2c0:	e0fffd17 	ldw	r3,-12(fp)
1000d2c4:	180690fa 	slli	r3,r3,3
1000d2c8:	10c5883a 	add	r2,r2,r3
1000d2cc:	e0ffff17 	ldw	r3,-4(fp)
1000d2d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
1000d2d4:	00840074 	movhi	r2,4097
1000d2d8:	108c4d04 	addi	r2,r2,12596
1000d2dc:	e0fffd17 	ldw	r3,-12(fp)
1000d2e0:	180690fa 	slli	r3,r3,3
1000d2e4:	10c5883a 	add	r2,r2,r3
1000d2e8:	10800104 	addi	r2,r2,4
1000d2ec:	e0fffe17 	ldw	r3,-8(fp)
1000d2f0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
1000d2f4:	e0bfff17 	ldw	r2,-4(fp)
1000d2f8:	10001926 	beq	r2,zero,1000d360 <alt_irq_register+0xf4>
1000d2fc:	e0bffd17 	ldw	r2,-12(fp)
1000d300:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d304:	0005303a 	rdctl	r2,status
1000d308:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d30c:	e0fff717 	ldw	r3,-36(fp)
1000d310:	00bfff84 	movi	r2,-2
1000d314:	1884703a 	and	r2,r3,r2
1000d318:	1001703a 	wrctl	status,r2
  
  return context;
1000d31c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000d320:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
1000d324:	00c00044 	movi	r3,1
1000d328:	e0bff217 	ldw	r2,-56(fp)
1000d32c:	1884983a 	sll	r2,r3,r2
1000d330:	1007883a 	mov	r3,r2
1000d334:	d0a6d317 	ldw	r2,-25780(gp)
1000d338:	1884b03a 	or	r2,r3,r2
1000d33c:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000d340:	d0a6d317 	ldw	r2,-25780(gp)
1000d344:	100170fa 	wrctl	ienable,r2
1000d348:	e0bff817 	ldw	r2,-32(fp)
1000d34c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d350:	e0bff917 	ldw	r2,-28(fp)
1000d354:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000d358:	0005883a 	mov	r2,zero
1000d35c:	00001906 	br	1000d3c4 <alt_irq_register+0x158>
1000d360:	e0bffd17 	ldw	r2,-12(fp)
1000d364:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d368:	0005303a 	rdctl	r2,status
1000d36c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d370:	e0fffa17 	ldw	r3,-24(fp)
1000d374:	00bfff84 	movi	r2,-2
1000d378:	1884703a 	and	r2,r3,r2
1000d37c:	1001703a 	wrctl	status,r2
  
  return context;
1000d380:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000d384:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
1000d388:	00c00044 	movi	r3,1
1000d38c:	e0bff417 	ldw	r2,-48(fp)
1000d390:	1884983a 	sll	r2,r3,r2
1000d394:	0084303a 	nor	r2,zero,r2
1000d398:	1007883a 	mov	r3,r2
1000d39c:	d0a6d317 	ldw	r2,-25780(gp)
1000d3a0:	1884703a 	and	r2,r3,r2
1000d3a4:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000d3a8:	d0a6d317 	ldw	r2,-25780(gp)
1000d3ac:	100170fa 	wrctl	ienable,r2
1000d3b0:	e0bffb17 	ldw	r2,-20(fp)
1000d3b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d3b8:	e0bffc17 	ldw	r2,-16(fp)
1000d3bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000d3c0:	0005883a 	mov	r2,zero
1000d3c4:	e0bff115 	stw	r2,-60(fp)
1000d3c8:	e0bff317 	ldw	r2,-52(fp)
1000d3cc:	e0bff515 	stw	r2,-44(fp)
1000d3d0:	e0bff517 	ldw	r2,-44(fp)
1000d3d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
1000d3d8:	e0bff117 	ldw	r2,-60(fp)
}
1000d3dc:	e037883a 	mov	sp,fp
1000d3e0:	df000017 	ldw	fp,0(sp)
1000d3e4:	dec00104 	addi	sp,sp,4
1000d3e8:	f800283a 	ret

1000d3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d3ec:	defffe04 	addi	sp,sp,-8
1000d3f0:	dfc00115 	stw	ra,4(sp)
1000d3f4:	df000015 	stw	fp,0(sp)
1000d3f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d3fc:	d0a00b17 	ldw	r2,-32724(gp)
1000d400:	10000326 	beq	r2,zero,1000d410 <alt_get_errno+0x24>
1000d404:	d0a00b17 	ldw	r2,-32724(gp)
1000d408:	103ee83a 	callr	r2
1000d40c:	00000106 	br	1000d414 <alt_get_errno+0x28>
1000d410:	d0a6d204 	addi	r2,gp,-25784
}
1000d414:	e037883a 	mov	sp,fp
1000d418:	dfc00117 	ldw	ra,4(sp)
1000d41c:	df000017 	ldw	fp,0(sp)
1000d420:	dec00204 	addi	sp,sp,8
1000d424:	f800283a 	ret

1000d428 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000d428:	deffed04 	addi	sp,sp,-76
1000d42c:	dfc01215 	stw	ra,72(sp)
1000d430:	df001115 	stw	fp,68(sp)
1000d434:	df001104 	addi	fp,sp,68
1000d438:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d43c:	e0bfff17 	ldw	r2,-4(fp)
1000d440:	10000616 	blt	r2,zero,1000d45c <isatty+0x34>
1000d444:	e0bfff17 	ldw	r2,-4(fp)
1000d448:	10c00324 	muli	r3,r2,12
1000d44c:	00840074 	movhi	r2,4097
1000d450:	1080f204 	addi	r2,r2,968
1000d454:	1885883a 	add	r2,r3,r2
1000d458:	00000106 	br	1000d460 <isatty+0x38>
1000d45c:	0005883a 	mov	r2,zero
1000d460:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000d464:	e0bfef17 	ldw	r2,-68(fp)
1000d468:	10000e26 	beq	r2,zero,1000d4a4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000d46c:	e0bfef17 	ldw	r2,-68(fp)
1000d470:	10800017 	ldw	r2,0(r2)
1000d474:	10800817 	ldw	r2,32(r2)
1000d478:	1000021e 	bne	r2,zero,1000d484 <isatty+0x5c>
    {
      return 1;
1000d47c:	00800044 	movi	r2,1
1000d480:	00000d06 	br	1000d4b8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000d484:	e0bff004 	addi	r2,fp,-64
1000d488:	100b883a 	mov	r5,r2
1000d48c:	e13fff17 	ldw	r4,-4(fp)
1000d490:	000d1bc0 	call	1000d1bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000d494:	e0bff117 	ldw	r2,-60(fp)
1000d498:	10880020 	cmpeqi	r2,r2,8192
1000d49c:	10803fcc 	andi	r2,r2,255
1000d4a0:	00000506 	br	1000d4b8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d4a4:	000d3ec0 	call	1000d3ec <alt_get_errno>
1000d4a8:	1007883a 	mov	r3,r2
1000d4ac:	00801444 	movi	r2,81
1000d4b0:	18800015 	stw	r2,0(r3)
    return 0;
1000d4b4:	0005883a 	mov	r2,zero
  }
}
1000d4b8:	e037883a 	mov	sp,fp
1000d4bc:	dfc00117 	ldw	ra,4(sp)
1000d4c0:	df000017 	ldw	fp,0(sp)
1000d4c4:	dec00204 	addi	sp,sp,8
1000d4c8:	f800283a 	ret

1000d4cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000d4cc:	defffc04 	addi	sp,sp,-16
1000d4d0:	df000315 	stw	fp,12(sp)
1000d4d4:	df000304 	addi	fp,sp,12
1000d4d8:	e13ffd15 	stw	r4,-12(fp)
1000d4dc:	e17ffe15 	stw	r5,-8(fp)
1000d4e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000d4e4:	e0fffe17 	ldw	r3,-8(fp)
1000d4e8:	e0bffd17 	ldw	r2,-12(fp)
1000d4ec:	18800c26 	beq	r3,r2,1000d520 <alt_load_section+0x54>
  {
    while( to != end )
1000d4f0:	00000806 	br	1000d514 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000d4f4:	e0bffe17 	ldw	r2,-8(fp)
1000d4f8:	10c00104 	addi	r3,r2,4
1000d4fc:	e0fffe15 	stw	r3,-8(fp)
1000d500:	e0fffd17 	ldw	r3,-12(fp)
1000d504:	19000104 	addi	r4,r3,4
1000d508:	e13ffd15 	stw	r4,-12(fp)
1000d50c:	18c00017 	ldw	r3,0(r3)
1000d510:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000d514:	e0fffe17 	ldw	r3,-8(fp)
1000d518:	e0bfff17 	ldw	r2,-4(fp)
1000d51c:	18bff51e 	bne	r3,r2,1000d4f4 <__alt_data_end+0xf800d4f4>
    {
      *to++ = *from++;
    }
  }
}
1000d520:	0001883a 	nop
1000d524:	e037883a 	mov	sp,fp
1000d528:	df000017 	ldw	fp,0(sp)
1000d52c:	dec00104 	addi	sp,sp,4
1000d530:	f800283a 	ret

1000d534 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000d534:	defffe04 	addi	sp,sp,-8
1000d538:	dfc00115 	stw	ra,4(sp)
1000d53c:	df000015 	stw	fp,0(sp)
1000d540:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000d544:	01840074 	movhi	r6,4097
1000d548:	31857a04 	addi	r6,r6,5608
1000d54c:	01440074 	movhi	r5,4097
1000d550:	297ebf04 	addi	r5,r5,-1284
1000d554:	01040074 	movhi	r4,4097
1000d558:	21057a04 	addi	r4,r4,5608
1000d55c:	000d4cc0 	call	1000d4cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000d560:	01840034 	movhi	r6,4096
1000d564:	31807004 	addi	r6,r6,448
1000d568:	01440034 	movhi	r5,4096
1000d56c:	29400804 	addi	r5,r5,32
1000d570:	01040034 	movhi	r4,4096
1000d574:	21000804 	addi	r4,r4,32
1000d578:	000d4cc0 	call	1000d4cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000d57c:	01840074 	movhi	r6,4097
1000d580:	31bebf04 	addi	r6,r6,-1284
1000d584:	01440074 	movhi	r5,4097
1000d588:	297df404 	addi	r5,r5,-2096
1000d58c:	01040074 	movhi	r4,4097
1000d590:	213df404 	addi	r4,r4,-2096
1000d594:	000d4cc0 	call	1000d4cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000d598:	000e7580 	call	1000e758 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000d59c:	000e9400 	call	1000e940 <alt_icache_flush_all>
}
1000d5a0:	0001883a 	nop
1000d5a4:	e037883a 	mov	sp,fp
1000d5a8:	dfc00117 	ldw	ra,4(sp)
1000d5ac:	df000017 	ldw	fp,0(sp)
1000d5b0:	dec00204 	addi	sp,sp,8
1000d5b4:	f800283a 	ret

1000d5b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d5b8:	defffe04 	addi	sp,sp,-8
1000d5bc:	dfc00115 	stw	ra,4(sp)
1000d5c0:	df000015 	stw	fp,0(sp)
1000d5c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d5c8:	d0a00b17 	ldw	r2,-32724(gp)
1000d5cc:	10000326 	beq	r2,zero,1000d5dc <alt_get_errno+0x24>
1000d5d0:	d0a00b17 	ldw	r2,-32724(gp)
1000d5d4:	103ee83a 	callr	r2
1000d5d8:	00000106 	br	1000d5e0 <alt_get_errno+0x28>
1000d5dc:	d0a6d204 	addi	r2,gp,-25784
}
1000d5e0:	e037883a 	mov	sp,fp
1000d5e4:	dfc00117 	ldw	ra,4(sp)
1000d5e8:	df000017 	ldw	fp,0(sp)
1000d5ec:	dec00204 	addi	sp,sp,8
1000d5f0:	f800283a 	ret

1000d5f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000d5f4:	defff904 	addi	sp,sp,-28
1000d5f8:	dfc00615 	stw	ra,24(sp)
1000d5fc:	df000515 	stw	fp,20(sp)
1000d600:	df000504 	addi	fp,sp,20
1000d604:	e13ffd15 	stw	r4,-12(fp)
1000d608:	e17ffe15 	stw	r5,-8(fp)
1000d60c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000d610:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d614:	e0bffd17 	ldw	r2,-12(fp)
1000d618:	10000616 	blt	r2,zero,1000d634 <lseek+0x40>
1000d61c:	e0bffd17 	ldw	r2,-12(fp)
1000d620:	10c00324 	muli	r3,r2,12
1000d624:	00840074 	movhi	r2,4097
1000d628:	1080f204 	addi	r2,r2,968
1000d62c:	1885883a 	add	r2,r3,r2
1000d630:	00000106 	br	1000d638 <lseek+0x44>
1000d634:	0005883a 	mov	r2,zero
1000d638:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000d63c:	e0bffc17 	ldw	r2,-16(fp)
1000d640:	10001026 	beq	r2,zero,1000d684 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000d644:	e0bffc17 	ldw	r2,-16(fp)
1000d648:	10800017 	ldw	r2,0(r2)
1000d64c:	10800717 	ldw	r2,28(r2)
1000d650:	10000926 	beq	r2,zero,1000d678 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000d654:	e0bffc17 	ldw	r2,-16(fp)
1000d658:	10800017 	ldw	r2,0(r2)
1000d65c:	10800717 	ldw	r2,28(r2)
1000d660:	e1bfff17 	ldw	r6,-4(fp)
1000d664:	e17ffe17 	ldw	r5,-8(fp)
1000d668:	e13ffc17 	ldw	r4,-16(fp)
1000d66c:	103ee83a 	callr	r2
1000d670:	e0bffb15 	stw	r2,-20(fp)
1000d674:	00000506 	br	1000d68c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000d678:	00bfde84 	movi	r2,-134
1000d67c:	e0bffb15 	stw	r2,-20(fp)
1000d680:	00000206 	br	1000d68c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1000d684:	00bfebc4 	movi	r2,-81
1000d688:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000d68c:	e0bffb17 	ldw	r2,-20(fp)
1000d690:	1000070e 	bge	r2,zero,1000d6b0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000d694:	000d5b80 	call	1000d5b8 <alt_get_errno>
1000d698:	1007883a 	mov	r3,r2
1000d69c:	e0bffb17 	ldw	r2,-20(fp)
1000d6a0:	0085c83a 	sub	r2,zero,r2
1000d6a4:	18800015 	stw	r2,0(r3)
    rc = -1;
1000d6a8:	00bfffc4 	movi	r2,-1
1000d6ac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000d6b0:	e0bffb17 	ldw	r2,-20(fp)
}
1000d6b4:	e037883a 	mov	sp,fp
1000d6b8:	dfc00117 	ldw	ra,4(sp)
1000d6bc:	df000017 	ldw	fp,0(sp)
1000d6c0:	dec00204 	addi	sp,sp,8
1000d6c4:	f800283a 	ret

1000d6c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000d6c8:	defffd04 	addi	sp,sp,-12
1000d6cc:	dfc00215 	stw	ra,8(sp)
1000d6d0:	df000115 	stw	fp,4(sp)
1000d6d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000d6d8:	0009883a 	mov	r4,zero
1000d6dc:	000db400 	call	1000db40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000d6e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000d6e4:	000db780 	call	1000db78 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000d6e8:	01840074 	movhi	r6,4097
1000d6ec:	31beb704 	addi	r6,r6,-1316
1000d6f0:	01440074 	movhi	r5,4097
1000d6f4:	297eb704 	addi	r5,r5,-1316
1000d6f8:	01040074 	movhi	r4,4097
1000d6fc:	213eb704 	addi	r4,r4,-1316
1000d700:	000ecd80 	call	1000ecd8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000d704:	000e8800 	call	1000e880 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000d708:	01040074 	movhi	r4,4097
1000d70c:	213a3804 	addi	r4,r4,-5920
1000d710:	000f43c0 	call	1000f43c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000d714:	d0a6d417 	ldw	r2,-25776(gp)
1000d718:	d0e6d517 	ldw	r3,-25772(gp)
1000d71c:	d126d617 	ldw	r4,-25768(gp)
1000d720:	200d883a 	mov	r6,r4
1000d724:	180b883a 	mov	r5,r3
1000d728:	1009883a 	mov	r4,r2
1000d72c:	00007940 	call	10000794 <main>
1000d730:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000d734:	01000044 	movi	r4,1
1000d738:	000d0840 	call	1000d084 <close>
  exit (result);
1000d73c:	e13fff17 	ldw	r4,-4(fp)
1000d740:	000f4500 	call	1000f450 <exit>

1000d744 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000d744:	defffe04 	addi	sp,sp,-8
1000d748:	df000115 	stw	fp,4(sp)
1000d74c:	df000104 	addi	fp,sp,4
1000d750:	e13fff15 	stw	r4,-4(fp)
}
1000d754:	0001883a 	nop
1000d758:	e037883a 	mov	sp,fp
1000d75c:	df000017 	ldw	fp,0(sp)
1000d760:	dec00104 	addi	sp,sp,4
1000d764:	f800283a 	ret

1000d768 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000d768:	defffe04 	addi	sp,sp,-8
1000d76c:	df000115 	stw	fp,4(sp)
1000d770:	df000104 	addi	fp,sp,4
1000d774:	e13fff15 	stw	r4,-4(fp)
}
1000d778:	0001883a 	nop
1000d77c:	e037883a 	mov	sp,fp
1000d780:	df000017 	ldw	fp,0(sp)
1000d784:	dec00104 	addi	sp,sp,4
1000d788:	f800283a 	ret

1000d78c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d78c:	defffe04 	addi	sp,sp,-8
1000d790:	dfc00115 	stw	ra,4(sp)
1000d794:	df000015 	stw	fp,0(sp)
1000d798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d79c:	d0a00b17 	ldw	r2,-32724(gp)
1000d7a0:	10000326 	beq	r2,zero,1000d7b0 <alt_get_errno+0x24>
1000d7a4:	d0a00b17 	ldw	r2,-32724(gp)
1000d7a8:	103ee83a 	callr	r2
1000d7ac:	00000106 	br	1000d7b4 <alt_get_errno+0x28>
1000d7b0:	d0a6d204 	addi	r2,gp,-25784
}
1000d7b4:	e037883a 	mov	sp,fp
1000d7b8:	dfc00117 	ldw	ra,4(sp)
1000d7bc:	df000017 	ldw	fp,0(sp)
1000d7c0:	dec00204 	addi	sp,sp,8
1000d7c4:	f800283a 	ret

1000d7c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000d7c8:	defff904 	addi	sp,sp,-28
1000d7cc:	dfc00615 	stw	ra,24(sp)
1000d7d0:	df000515 	stw	fp,20(sp)
1000d7d4:	df000504 	addi	fp,sp,20
1000d7d8:	e13ffd15 	stw	r4,-12(fp)
1000d7dc:	e17ffe15 	stw	r5,-8(fp)
1000d7e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d7e4:	e0bffd17 	ldw	r2,-12(fp)
1000d7e8:	10000616 	blt	r2,zero,1000d804 <read+0x3c>
1000d7ec:	e0bffd17 	ldw	r2,-12(fp)
1000d7f0:	10c00324 	muli	r3,r2,12
1000d7f4:	00840074 	movhi	r2,4097
1000d7f8:	1080f204 	addi	r2,r2,968
1000d7fc:	1885883a 	add	r2,r3,r2
1000d800:	00000106 	br	1000d808 <read+0x40>
1000d804:	0005883a 	mov	r2,zero
1000d808:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000d80c:	e0bffb17 	ldw	r2,-20(fp)
1000d810:	10002226 	beq	r2,zero,1000d89c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d814:	e0bffb17 	ldw	r2,-20(fp)
1000d818:	10800217 	ldw	r2,8(r2)
1000d81c:	108000cc 	andi	r2,r2,3
1000d820:	10800060 	cmpeqi	r2,r2,1
1000d824:	1000181e 	bne	r2,zero,1000d888 <read+0xc0>
        (fd->dev->read))
1000d828:	e0bffb17 	ldw	r2,-20(fp)
1000d82c:	10800017 	ldw	r2,0(r2)
1000d830:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d834:	10001426 	beq	r2,zero,1000d888 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000d838:	e0bffb17 	ldw	r2,-20(fp)
1000d83c:	10800017 	ldw	r2,0(r2)
1000d840:	10800517 	ldw	r2,20(r2)
1000d844:	e0ffff17 	ldw	r3,-4(fp)
1000d848:	180d883a 	mov	r6,r3
1000d84c:	e17ffe17 	ldw	r5,-8(fp)
1000d850:	e13ffb17 	ldw	r4,-20(fp)
1000d854:	103ee83a 	callr	r2
1000d858:	e0bffc15 	stw	r2,-16(fp)
1000d85c:	e0bffc17 	ldw	r2,-16(fp)
1000d860:	1000070e 	bge	r2,zero,1000d880 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1000d864:	000d78c0 	call	1000d78c <alt_get_errno>
1000d868:	1007883a 	mov	r3,r2
1000d86c:	e0bffc17 	ldw	r2,-16(fp)
1000d870:	0085c83a 	sub	r2,zero,r2
1000d874:	18800015 	stw	r2,0(r3)
          return -1;
1000d878:	00bfffc4 	movi	r2,-1
1000d87c:	00000c06 	br	1000d8b0 <read+0xe8>
        }
        return rval;
1000d880:	e0bffc17 	ldw	r2,-16(fp)
1000d884:	00000a06 	br	1000d8b0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000d888:	000d78c0 	call	1000d78c <alt_get_errno>
1000d88c:	1007883a 	mov	r3,r2
1000d890:	00800344 	movi	r2,13
1000d894:	18800015 	stw	r2,0(r3)
1000d898:	00000406 	br	1000d8ac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000d89c:	000d78c0 	call	1000d78c <alt_get_errno>
1000d8a0:	1007883a 	mov	r3,r2
1000d8a4:	00801444 	movi	r2,81
1000d8a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000d8ac:	00bfffc4 	movi	r2,-1
}
1000d8b0:	e037883a 	mov	sp,fp
1000d8b4:	dfc00117 	ldw	ra,4(sp)
1000d8b8:	df000017 	ldw	fp,0(sp)
1000d8bc:	dec00204 	addi	sp,sp,8
1000d8c0:	f800283a 	ret

1000d8c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000d8c4:	defffe04 	addi	sp,sp,-8
1000d8c8:	df000115 	stw	fp,4(sp)
1000d8cc:	df000104 	addi	fp,sp,4
1000d8d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000d8d4:	e0bfff17 	ldw	r2,-4(fp)
1000d8d8:	108000d0 	cmplti	r2,r2,3
1000d8dc:	10000d1e 	bne	r2,zero,1000d914 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1000d8e0:	00840074 	movhi	r2,4097
1000d8e4:	1080f204 	addi	r2,r2,968
1000d8e8:	e0ffff17 	ldw	r3,-4(fp)
1000d8ec:	18c00324 	muli	r3,r3,12
1000d8f0:	10c5883a 	add	r2,r2,r3
1000d8f4:	10800204 	addi	r2,r2,8
1000d8f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000d8fc:	00840074 	movhi	r2,4097
1000d900:	1080f204 	addi	r2,r2,968
1000d904:	e0ffff17 	ldw	r3,-4(fp)
1000d908:	18c00324 	muli	r3,r3,12
1000d90c:	10c5883a 	add	r2,r2,r3
1000d910:	10000015 	stw	zero,0(r2)
  }
}
1000d914:	0001883a 	nop
1000d918:	e037883a 	mov	sp,fp
1000d91c:	df000017 	ldw	fp,0(sp)
1000d920:	dec00104 	addi	sp,sp,4
1000d924:	f800283a 	ret

1000d928 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000d928:	defff904 	addi	sp,sp,-28
1000d92c:	df000615 	stw	fp,24(sp)
1000d930:	df000604 	addi	fp,sp,24
1000d934:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d938:	0005303a 	rdctl	r2,status
1000d93c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d940:	e0fffe17 	ldw	r3,-8(fp)
1000d944:	00bfff84 	movi	r2,-2
1000d948:	1884703a 	and	r2,r3,r2
1000d94c:	1001703a 	wrctl	status,r2
  
  return context;
1000d950:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000d954:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000d958:	d0a00d17 	ldw	r2,-32716(gp)
1000d95c:	10c000c4 	addi	r3,r2,3
1000d960:	00bfff04 	movi	r2,-4
1000d964:	1884703a 	and	r2,r3,r2
1000d968:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000d96c:	d0e00d17 	ldw	r3,-32716(gp)
1000d970:	e0bfff17 	ldw	r2,-4(fp)
1000d974:	1887883a 	add	r3,r3,r2
1000d978:	00860034 	movhi	r2,6144
1000d97c:	10800004 	addi	r2,r2,0
1000d980:	10c0062e 	bgeu	r2,r3,1000d99c <sbrk+0x74>
1000d984:	e0bffb17 	ldw	r2,-20(fp)
1000d988:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d98c:	e0bffa17 	ldw	r2,-24(fp)
1000d990:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000d994:	00bfffc4 	movi	r2,-1
1000d998:	00000b06 	br	1000d9c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000d99c:	d0a00d17 	ldw	r2,-32716(gp)
1000d9a0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000d9a4:	d0e00d17 	ldw	r3,-32716(gp)
1000d9a8:	e0bfff17 	ldw	r2,-4(fp)
1000d9ac:	1885883a 	add	r2,r3,r2
1000d9b0:	d0a00d15 	stw	r2,-32716(gp)
1000d9b4:	e0bffb17 	ldw	r2,-20(fp)
1000d9b8:	e0bffc15 	stw	r2,-16(fp)
1000d9bc:	e0bffc17 	ldw	r2,-16(fp)
1000d9c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000d9c4:	e0bffd17 	ldw	r2,-12(fp)
} 
1000d9c8:	e037883a 	mov	sp,fp
1000d9cc:	df000017 	ldw	fp,0(sp)
1000d9d0:	dec00104 	addi	sp,sp,4
1000d9d4:	f800283a 	ret

1000d9d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d9d8:	defffe04 	addi	sp,sp,-8
1000d9dc:	dfc00115 	stw	ra,4(sp)
1000d9e0:	df000015 	stw	fp,0(sp)
1000d9e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d9e8:	d0a00b17 	ldw	r2,-32724(gp)
1000d9ec:	10000326 	beq	r2,zero,1000d9fc <alt_get_errno+0x24>
1000d9f0:	d0a00b17 	ldw	r2,-32724(gp)
1000d9f4:	103ee83a 	callr	r2
1000d9f8:	00000106 	br	1000da00 <alt_get_errno+0x28>
1000d9fc:	d0a6d204 	addi	r2,gp,-25784
}
1000da00:	e037883a 	mov	sp,fp
1000da04:	dfc00117 	ldw	ra,4(sp)
1000da08:	df000017 	ldw	fp,0(sp)
1000da0c:	dec00204 	addi	sp,sp,8
1000da10:	f800283a 	ret

1000da14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000da14:	defff904 	addi	sp,sp,-28
1000da18:	dfc00615 	stw	ra,24(sp)
1000da1c:	df000515 	stw	fp,20(sp)
1000da20:	df000504 	addi	fp,sp,20
1000da24:	e13ffd15 	stw	r4,-12(fp)
1000da28:	e17ffe15 	stw	r5,-8(fp)
1000da2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000da30:	e0bffd17 	ldw	r2,-12(fp)
1000da34:	10000616 	blt	r2,zero,1000da50 <write+0x3c>
1000da38:	e0bffd17 	ldw	r2,-12(fp)
1000da3c:	10c00324 	muli	r3,r2,12
1000da40:	00840074 	movhi	r2,4097
1000da44:	1080f204 	addi	r2,r2,968
1000da48:	1885883a 	add	r2,r3,r2
1000da4c:	00000106 	br	1000da54 <write+0x40>
1000da50:	0005883a 	mov	r2,zero
1000da54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000da58:	e0bffb17 	ldw	r2,-20(fp)
1000da5c:	10002126 	beq	r2,zero,1000dae4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000da60:	e0bffb17 	ldw	r2,-20(fp)
1000da64:	10800217 	ldw	r2,8(r2)
1000da68:	108000cc 	andi	r2,r2,3
1000da6c:	10001826 	beq	r2,zero,1000dad0 <write+0xbc>
1000da70:	e0bffb17 	ldw	r2,-20(fp)
1000da74:	10800017 	ldw	r2,0(r2)
1000da78:	10800617 	ldw	r2,24(r2)
1000da7c:	10001426 	beq	r2,zero,1000dad0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000da80:	e0bffb17 	ldw	r2,-20(fp)
1000da84:	10800017 	ldw	r2,0(r2)
1000da88:	10800617 	ldw	r2,24(r2)
1000da8c:	e0ffff17 	ldw	r3,-4(fp)
1000da90:	180d883a 	mov	r6,r3
1000da94:	e17ffe17 	ldw	r5,-8(fp)
1000da98:	e13ffb17 	ldw	r4,-20(fp)
1000da9c:	103ee83a 	callr	r2
1000daa0:	e0bffc15 	stw	r2,-16(fp)
1000daa4:	e0bffc17 	ldw	r2,-16(fp)
1000daa8:	1000070e 	bge	r2,zero,1000dac8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1000daac:	000d9d80 	call	1000d9d8 <alt_get_errno>
1000dab0:	1007883a 	mov	r3,r2
1000dab4:	e0bffc17 	ldw	r2,-16(fp)
1000dab8:	0085c83a 	sub	r2,zero,r2
1000dabc:	18800015 	stw	r2,0(r3)
        return -1;
1000dac0:	00bfffc4 	movi	r2,-1
1000dac4:	00000c06 	br	1000daf8 <write+0xe4>
      }
      return rval;
1000dac8:	e0bffc17 	ldw	r2,-16(fp)
1000dacc:	00000a06 	br	1000daf8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000dad0:	000d9d80 	call	1000d9d8 <alt_get_errno>
1000dad4:	1007883a 	mov	r3,r2
1000dad8:	00800344 	movi	r2,13
1000dadc:	18800015 	stw	r2,0(r3)
1000dae0:	00000406 	br	1000daf4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000dae4:	000d9d80 	call	1000d9d8 <alt_get_errno>
1000dae8:	1007883a 	mov	r3,r2
1000daec:	00801444 	movi	r2,81
1000daf0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000daf4:	00bfffc4 	movi	r2,-1
}
1000daf8:	e037883a 	mov	sp,fp
1000dafc:	dfc00117 	ldw	ra,4(sp)
1000db00:	df000017 	ldw	fp,0(sp)
1000db04:	dec00204 	addi	sp,sp,8
1000db08:	f800283a 	ret

1000db0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000db0c:	defffd04 	addi	sp,sp,-12
1000db10:	dfc00215 	stw	ra,8(sp)
1000db14:	df000115 	stw	fp,4(sp)
1000db18:	df000104 	addi	fp,sp,4
1000db1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000db20:	d1600804 	addi	r5,gp,-32736
1000db24:	e13fff17 	ldw	r4,-4(fp)
1000db28:	000e7dc0 	call	1000e7dc <alt_dev_llist_insert>
}
1000db2c:	e037883a 	mov	sp,fp
1000db30:	dfc00117 	ldw	ra,4(sp)
1000db34:	df000017 	ldw	fp,0(sp)
1000db38:	dec00204 	addi	sp,sp,8
1000db3c:	f800283a 	ret

1000db40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000db40:	defffd04 	addi	sp,sp,-12
1000db44:	dfc00215 	stw	ra,8(sp)
1000db48:	df000115 	stw	fp,4(sp)
1000db4c:	df000104 	addi	fp,sp,4
1000db50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( PROCESSOR, Processor);
1000db54:	000f14c0 	call	1000f14c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000db58:	00800044 	movi	r2,1
1000db5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000db60:	0001883a 	nop
1000db64:	e037883a 	mov	sp,fp
1000db68:	dfc00117 	ldw	ra,4(sp)
1000db6c:	df000017 	ldw	fp,0(sp)
1000db70:	dec00204 	addi	sp,sp,8
1000db74:	f800283a 	ret

1000db78 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000db78:	defffe04 	addi	sp,sp,-8
1000db7c:	dfc00115 	stw	ra,4(sp)
1000db80:	df000015 	stw	fp,0(sp)
1000db84:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
1000db88:	01800044 	movi	r6,1
1000db8c:	000b883a 	mov	r5,zero
1000db90:	01040074 	movhi	r4,4097
1000db94:	21015c04 	addi	r4,r4,1392
1000db98:	000dd280 	call	1000dd28 <altera_avalon_jtag_uart_init>
1000db9c:	01040074 	movhi	r4,4097
1000dba0:	21015204 	addi	r4,r4,1352
1000dba4:	000db0c0 	call	1000db0c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SYSID);
1000dba8:	0001883a 	nop
}
1000dbac:	0001883a 	nop
1000dbb0:	e037883a 	mov	sp,fp
1000dbb4:	dfc00117 	ldw	ra,4(sp)
1000dbb8:	df000017 	ldw	fp,0(sp)
1000dbbc:	dec00204 	addi	sp,sp,8
1000dbc0:	f800283a 	ret

1000dbc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000dbc4:	defffa04 	addi	sp,sp,-24
1000dbc8:	dfc00515 	stw	ra,20(sp)
1000dbcc:	df000415 	stw	fp,16(sp)
1000dbd0:	df000404 	addi	fp,sp,16
1000dbd4:	e13ffd15 	stw	r4,-12(fp)
1000dbd8:	e17ffe15 	stw	r5,-8(fp)
1000dbdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000dbe0:	e0bffd17 	ldw	r2,-12(fp)
1000dbe4:	10800017 	ldw	r2,0(r2)
1000dbe8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000dbec:	e0bffc17 	ldw	r2,-16(fp)
1000dbf0:	10c00a04 	addi	r3,r2,40
1000dbf4:	e0bffd17 	ldw	r2,-12(fp)
1000dbf8:	10800217 	ldw	r2,8(r2)
1000dbfc:	100f883a 	mov	r7,r2
1000dc00:	e1bfff17 	ldw	r6,-4(fp)
1000dc04:	e17ffe17 	ldw	r5,-8(fp)
1000dc08:	1809883a 	mov	r4,r3
1000dc0c:	000e1ec0 	call	1000e1ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000dc10:	e037883a 	mov	sp,fp
1000dc14:	dfc00117 	ldw	ra,4(sp)
1000dc18:	df000017 	ldw	fp,0(sp)
1000dc1c:	dec00204 	addi	sp,sp,8
1000dc20:	f800283a 	ret

1000dc24 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000dc24:	defffa04 	addi	sp,sp,-24
1000dc28:	dfc00515 	stw	ra,20(sp)
1000dc2c:	df000415 	stw	fp,16(sp)
1000dc30:	df000404 	addi	fp,sp,16
1000dc34:	e13ffd15 	stw	r4,-12(fp)
1000dc38:	e17ffe15 	stw	r5,-8(fp)
1000dc3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000dc40:	e0bffd17 	ldw	r2,-12(fp)
1000dc44:	10800017 	ldw	r2,0(r2)
1000dc48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000dc4c:	e0bffc17 	ldw	r2,-16(fp)
1000dc50:	10c00a04 	addi	r3,r2,40
1000dc54:	e0bffd17 	ldw	r2,-12(fp)
1000dc58:	10800217 	ldw	r2,8(r2)
1000dc5c:	100f883a 	mov	r7,r2
1000dc60:	e1bfff17 	ldw	r6,-4(fp)
1000dc64:	e17ffe17 	ldw	r5,-8(fp)
1000dc68:	1809883a 	mov	r4,r3
1000dc6c:	000e4080 	call	1000e408 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000dc70:	e037883a 	mov	sp,fp
1000dc74:	dfc00117 	ldw	ra,4(sp)
1000dc78:	df000017 	ldw	fp,0(sp)
1000dc7c:	dec00204 	addi	sp,sp,8
1000dc80:	f800283a 	ret

1000dc84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000dc84:	defffc04 	addi	sp,sp,-16
1000dc88:	dfc00315 	stw	ra,12(sp)
1000dc8c:	df000215 	stw	fp,8(sp)
1000dc90:	df000204 	addi	fp,sp,8
1000dc94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000dc98:	e0bfff17 	ldw	r2,-4(fp)
1000dc9c:	10800017 	ldw	r2,0(r2)
1000dca0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000dca4:	e0bffe17 	ldw	r2,-8(fp)
1000dca8:	10c00a04 	addi	r3,r2,40
1000dcac:	e0bfff17 	ldw	r2,-4(fp)
1000dcb0:	10800217 	ldw	r2,8(r2)
1000dcb4:	100b883a 	mov	r5,r2
1000dcb8:	1809883a 	mov	r4,r3
1000dcbc:	000e0940 	call	1000e094 <altera_avalon_jtag_uart_close>
}
1000dcc0:	e037883a 	mov	sp,fp
1000dcc4:	dfc00117 	ldw	ra,4(sp)
1000dcc8:	df000017 	ldw	fp,0(sp)
1000dccc:	dec00204 	addi	sp,sp,8
1000dcd0:	f800283a 	ret

1000dcd4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000dcd4:	defffa04 	addi	sp,sp,-24
1000dcd8:	dfc00515 	stw	ra,20(sp)
1000dcdc:	df000415 	stw	fp,16(sp)
1000dce0:	df000404 	addi	fp,sp,16
1000dce4:	e13ffd15 	stw	r4,-12(fp)
1000dce8:	e17ffe15 	stw	r5,-8(fp)
1000dcec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000dcf0:	e0bffd17 	ldw	r2,-12(fp)
1000dcf4:	10800017 	ldw	r2,0(r2)
1000dcf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000dcfc:	e0bffc17 	ldw	r2,-16(fp)
1000dd00:	10800a04 	addi	r2,r2,40
1000dd04:	e1bfff17 	ldw	r6,-4(fp)
1000dd08:	e17ffe17 	ldw	r5,-8(fp)
1000dd0c:	1009883a 	mov	r4,r2
1000dd10:	000e0fc0 	call	1000e0fc <altera_avalon_jtag_uart_ioctl>
}
1000dd14:	e037883a 	mov	sp,fp
1000dd18:	dfc00117 	ldw	ra,4(sp)
1000dd1c:	df000017 	ldw	fp,0(sp)
1000dd20:	dec00204 	addi	sp,sp,8
1000dd24:	f800283a 	ret

1000dd28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000dd28:	defffa04 	addi	sp,sp,-24
1000dd2c:	dfc00515 	stw	ra,20(sp)
1000dd30:	df000415 	stw	fp,16(sp)
1000dd34:	df000404 	addi	fp,sp,16
1000dd38:	e13ffd15 	stw	r4,-12(fp)
1000dd3c:	e17ffe15 	stw	r5,-8(fp)
1000dd40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000dd44:	e0bffd17 	ldw	r2,-12(fp)
1000dd48:	00c00044 	movi	r3,1
1000dd4c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000dd50:	e0bffd17 	ldw	r2,-12(fp)
1000dd54:	10800017 	ldw	r2,0(r2)
1000dd58:	10800104 	addi	r2,r2,4
1000dd5c:	1007883a 	mov	r3,r2
1000dd60:	e0bffd17 	ldw	r2,-12(fp)
1000dd64:	10800817 	ldw	r2,32(r2)
1000dd68:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000dd6c:	e0bffe17 	ldw	r2,-8(fp)
1000dd70:	e0ffff17 	ldw	r3,-4(fp)
1000dd74:	d8000015 	stw	zero,0(sp)
1000dd78:	e1fffd17 	ldw	r7,-12(fp)
1000dd7c:	01840074 	movhi	r6,4097
1000dd80:	31b77a04 	addi	r6,r6,-8728
1000dd84:	180b883a 	mov	r5,r3
1000dd88:	1009883a 	mov	r4,r2
1000dd8c:	000e9740 	call	1000e974 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000dd90:	e0bffd17 	ldw	r2,-12(fp)
1000dd94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000dd98:	e0bffd17 	ldw	r2,-12(fp)
1000dd9c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000dda0:	d0e6d717 	ldw	r3,-25764(gp)
1000dda4:	e1fffd17 	ldw	r7,-12(fp)
1000dda8:	01840074 	movhi	r6,4097
1000ddac:	31b7fd04 	addi	r6,r6,-8204
1000ddb0:	180b883a 	mov	r5,r3
1000ddb4:	1009883a 	mov	r4,r2
1000ddb8:	000e62c0 	call	1000e62c <alt_alarm_start>
1000ddbc:	1000040e 	bge	r2,zero,1000ddd0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000ddc0:	e0fffd17 	ldw	r3,-12(fp)
1000ddc4:	00a00034 	movhi	r2,32768
1000ddc8:	10bfffc4 	addi	r2,r2,-1
1000ddcc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000ddd0:	0001883a 	nop
1000ddd4:	e037883a 	mov	sp,fp
1000ddd8:	dfc00117 	ldw	ra,4(sp)
1000dddc:	df000017 	ldw	fp,0(sp)
1000dde0:	dec00204 	addi	sp,sp,8
1000dde4:	f800283a 	ret

1000dde8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000dde8:	defff804 	addi	sp,sp,-32
1000ddec:	df000715 	stw	fp,28(sp)
1000ddf0:	df000704 	addi	fp,sp,28
1000ddf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000ddf8:	e0bfff17 	ldw	r2,-4(fp)
1000ddfc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000de00:	e0bffb17 	ldw	r2,-20(fp)
1000de04:	10800017 	ldw	r2,0(r2)
1000de08:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000de0c:	e0bffc17 	ldw	r2,-16(fp)
1000de10:	10800104 	addi	r2,r2,4
1000de14:	10800037 	ldwio	r2,0(r2)
1000de18:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000de1c:	e0bffd17 	ldw	r2,-12(fp)
1000de20:	1080c00c 	andi	r2,r2,768
1000de24:	10006d26 	beq	r2,zero,1000dfdc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000de28:	e0bffd17 	ldw	r2,-12(fp)
1000de2c:	1080400c 	andi	r2,r2,256
1000de30:	10003526 	beq	r2,zero,1000df08 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000de34:	00800074 	movhi	r2,1
1000de38:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000de3c:	e0bffb17 	ldw	r2,-20(fp)
1000de40:	10800a17 	ldw	r2,40(r2)
1000de44:	10800044 	addi	r2,r2,1
1000de48:	1081ffcc 	andi	r2,r2,2047
1000de4c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000de50:	e0bffb17 	ldw	r2,-20(fp)
1000de54:	10c00b17 	ldw	r3,44(r2)
1000de58:	e0bffe17 	ldw	r2,-8(fp)
1000de5c:	18801526 	beq	r3,r2,1000deb4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000de60:	e0bffc17 	ldw	r2,-16(fp)
1000de64:	10800037 	ldwio	r2,0(r2)
1000de68:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000de6c:	e0bff917 	ldw	r2,-28(fp)
1000de70:	10a0000c 	andi	r2,r2,32768
1000de74:	10001126 	beq	r2,zero,1000debc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000de78:	e0bffb17 	ldw	r2,-20(fp)
1000de7c:	10800a17 	ldw	r2,40(r2)
1000de80:	e0fff917 	ldw	r3,-28(fp)
1000de84:	1809883a 	mov	r4,r3
1000de88:	e0fffb17 	ldw	r3,-20(fp)
1000de8c:	1885883a 	add	r2,r3,r2
1000de90:	10800e04 	addi	r2,r2,56
1000de94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000de98:	e0bffb17 	ldw	r2,-20(fp)
1000de9c:	10800a17 	ldw	r2,40(r2)
1000dea0:	10800044 	addi	r2,r2,1
1000dea4:	10c1ffcc 	andi	r3,r2,2047
1000dea8:	e0bffb17 	ldw	r2,-20(fp)
1000deac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000deb0:	003fe206 	br	1000de3c <__alt_data_end+0xf800de3c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000deb4:	0001883a 	nop
1000deb8:	00000106 	br	1000dec0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000debc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000dec0:	e0bff917 	ldw	r2,-28(fp)
1000dec4:	10bfffec 	andhi	r2,r2,65535
1000dec8:	10000f26 	beq	r2,zero,1000df08 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000decc:	e0bffb17 	ldw	r2,-20(fp)
1000ded0:	10c00817 	ldw	r3,32(r2)
1000ded4:	00bfff84 	movi	r2,-2
1000ded8:	1886703a 	and	r3,r3,r2
1000dedc:	e0bffb17 	ldw	r2,-20(fp)
1000dee0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000dee4:	e0bffc17 	ldw	r2,-16(fp)
1000dee8:	10800104 	addi	r2,r2,4
1000deec:	1007883a 	mov	r3,r2
1000def0:	e0bffb17 	ldw	r2,-20(fp)
1000def4:	10800817 	ldw	r2,32(r2)
1000def8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000defc:	e0bffc17 	ldw	r2,-16(fp)
1000df00:	10800104 	addi	r2,r2,4
1000df04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000df08:	e0bffd17 	ldw	r2,-12(fp)
1000df0c:	1080800c 	andi	r2,r2,512
1000df10:	103fbe26 	beq	r2,zero,1000de0c <__alt_data_end+0xf800de0c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000df14:	e0bffd17 	ldw	r2,-12(fp)
1000df18:	1004d43a 	srli	r2,r2,16
1000df1c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000df20:	00001406 	br	1000df74 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000df24:	e0bffc17 	ldw	r2,-16(fp)
1000df28:	e0fffb17 	ldw	r3,-20(fp)
1000df2c:	18c00d17 	ldw	r3,52(r3)
1000df30:	e13ffb17 	ldw	r4,-20(fp)
1000df34:	20c7883a 	add	r3,r4,r3
1000df38:	18c20e04 	addi	r3,r3,2104
1000df3c:	18c00003 	ldbu	r3,0(r3)
1000df40:	18c03fcc 	andi	r3,r3,255
1000df44:	18c0201c 	xori	r3,r3,128
1000df48:	18ffe004 	addi	r3,r3,-128
1000df4c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000df50:	e0bffb17 	ldw	r2,-20(fp)
1000df54:	10800d17 	ldw	r2,52(r2)
1000df58:	10800044 	addi	r2,r2,1
1000df5c:	10c1ffcc 	andi	r3,r2,2047
1000df60:	e0bffb17 	ldw	r2,-20(fp)
1000df64:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000df68:	e0bffa17 	ldw	r2,-24(fp)
1000df6c:	10bfffc4 	addi	r2,r2,-1
1000df70:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000df74:	e0bffa17 	ldw	r2,-24(fp)
1000df78:	10000526 	beq	r2,zero,1000df90 <altera_avalon_jtag_uart_irq+0x1a8>
1000df7c:	e0bffb17 	ldw	r2,-20(fp)
1000df80:	10c00d17 	ldw	r3,52(r2)
1000df84:	e0bffb17 	ldw	r2,-20(fp)
1000df88:	10800c17 	ldw	r2,48(r2)
1000df8c:	18bfe51e 	bne	r3,r2,1000df24 <__alt_data_end+0xf800df24>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000df90:	e0bffa17 	ldw	r2,-24(fp)
1000df94:	103f9d26 	beq	r2,zero,1000de0c <__alt_data_end+0xf800de0c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000df98:	e0bffb17 	ldw	r2,-20(fp)
1000df9c:	10c00817 	ldw	r3,32(r2)
1000dfa0:	00bfff44 	movi	r2,-3
1000dfa4:	1886703a 	and	r3,r3,r2
1000dfa8:	e0bffb17 	ldw	r2,-20(fp)
1000dfac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000dfb0:	e0bffb17 	ldw	r2,-20(fp)
1000dfb4:	10800017 	ldw	r2,0(r2)
1000dfb8:	10800104 	addi	r2,r2,4
1000dfbc:	1007883a 	mov	r3,r2
1000dfc0:	e0bffb17 	ldw	r2,-20(fp)
1000dfc4:	10800817 	ldw	r2,32(r2)
1000dfc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000dfcc:	e0bffc17 	ldw	r2,-16(fp)
1000dfd0:	10800104 	addi	r2,r2,4
1000dfd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000dfd8:	003f8c06 	br	1000de0c <__alt_data_end+0xf800de0c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1000dfdc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1000dfe0:	0001883a 	nop
1000dfe4:	e037883a 	mov	sp,fp
1000dfe8:	df000017 	ldw	fp,0(sp)
1000dfec:	dec00104 	addi	sp,sp,4
1000dff0:	f800283a 	ret

1000dff4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000dff4:	defff804 	addi	sp,sp,-32
1000dff8:	df000715 	stw	fp,28(sp)
1000dffc:	df000704 	addi	fp,sp,28
1000e000:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e004:	e0bffb17 	ldw	r2,-20(fp)
1000e008:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e00c:	e0bff917 	ldw	r2,-28(fp)
1000e010:	10800017 	ldw	r2,0(r2)
1000e014:	10800104 	addi	r2,r2,4
1000e018:	10800037 	ldwio	r2,0(r2)
1000e01c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e020:	e0bffa17 	ldw	r2,-24(fp)
1000e024:	1081000c 	andi	r2,r2,1024
1000e028:	10000b26 	beq	r2,zero,1000e058 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e02c:	e0bff917 	ldw	r2,-28(fp)
1000e030:	10800017 	ldw	r2,0(r2)
1000e034:	10800104 	addi	r2,r2,4
1000e038:	1007883a 	mov	r3,r2
1000e03c:	e0bff917 	ldw	r2,-28(fp)
1000e040:	10800817 	ldw	r2,32(r2)
1000e044:	10810014 	ori	r2,r2,1024
1000e048:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000e04c:	e0bff917 	ldw	r2,-28(fp)
1000e050:	10000915 	stw	zero,36(r2)
1000e054:	00000a06 	br	1000e080 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e058:	e0bff917 	ldw	r2,-28(fp)
1000e05c:	10c00917 	ldw	r3,36(r2)
1000e060:	00a00034 	movhi	r2,32768
1000e064:	10bfff04 	addi	r2,r2,-4
1000e068:	10c00536 	bltu	r2,r3,1000e080 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000e06c:	e0bff917 	ldw	r2,-28(fp)
1000e070:	10800917 	ldw	r2,36(r2)
1000e074:	10c00044 	addi	r3,r2,1
1000e078:	e0bff917 	ldw	r2,-28(fp)
1000e07c:	10c00915 	stw	r3,36(r2)
1000e080:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e084:	e037883a 	mov	sp,fp
1000e088:	df000017 	ldw	fp,0(sp)
1000e08c:	dec00104 	addi	sp,sp,4
1000e090:	f800283a 	ret

1000e094 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e094:	defffd04 	addi	sp,sp,-12
1000e098:	df000215 	stw	fp,8(sp)
1000e09c:	df000204 	addi	fp,sp,8
1000e0a0:	e13ffe15 	stw	r4,-8(fp)
1000e0a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e0a8:	00000506 	br	1000e0c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e0ac:	e0bfff17 	ldw	r2,-4(fp)
1000e0b0:	1090000c 	andi	r2,r2,16384
1000e0b4:	10000226 	beq	r2,zero,1000e0c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e0b8:	00bffd44 	movi	r2,-11
1000e0bc:	00000b06 	br	1000e0ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e0c0:	e0bffe17 	ldw	r2,-8(fp)
1000e0c4:	10c00d17 	ldw	r3,52(r2)
1000e0c8:	e0bffe17 	ldw	r2,-8(fp)
1000e0cc:	10800c17 	ldw	r2,48(r2)
1000e0d0:	18800526 	beq	r3,r2,1000e0e8 <altera_avalon_jtag_uart_close+0x54>
1000e0d4:	e0bffe17 	ldw	r2,-8(fp)
1000e0d8:	10c00917 	ldw	r3,36(r2)
1000e0dc:	e0bffe17 	ldw	r2,-8(fp)
1000e0e0:	10800117 	ldw	r2,4(r2)
1000e0e4:	18bff136 	bltu	r3,r2,1000e0ac <__alt_data_end+0xf800e0ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e0e8:	0005883a 	mov	r2,zero
}
1000e0ec:	e037883a 	mov	sp,fp
1000e0f0:	df000017 	ldw	fp,0(sp)
1000e0f4:	dec00104 	addi	sp,sp,4
1000e0f8:	f800283a 	ret

1000e0fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e0fc:	defffa04 	addi	sp,sp,-24
1000e100:	df000515 	stw	fp,20(sp)
1000e104:	df000504 	addi	fp,sp,20
1000e108:	e13ffd15 	stw	r4,-12(fp)
1000e10c:	e17ffe15 	stw	r5,-8(fp)
1000e110:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e114:	00bff9c4 	movi	r2,-25
1000e118:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e11c:	e0bffe17 	ldw	r2,-8(fp)
1000e120:	10da8060 	cmpeqi	r3,r2,27137
1000e124:	1800031e 	bne	r3,zero,1000e134 <altera_avalon_jtag_uart_ioctl+0x38>
1000e128:	109a80a0 	cmpeqi	r2,r2,27138
1000e12c:	1000181e 	bne	r2,zero,1000e190 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1000e130:	00002906 	br	1000e1d8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e134:	e0bffd17 	ldw	r2,-12(fp)
1000e138:	10c00117 	ldw	r3,4(r2)
1000e13c:	00a00034 	movhi	r2,32768
1000e140:	10bfffc4 	addi	r2,r2,-1
1000e144:	18802126 	beq	r3,r2,1000e1cc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1000e148:	e0bfff17 	ldw	r2,-4(fp)
1000e14c:	10800017 	ldw	r2,0(r2)
1000e150:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e154:	e0bffc17 	ldw	r2,-16(fp)
1000e158:	10800090 	cmplti	r2,r2,2
1000e15c:	1000061e 	bne	r2,zero,1000e178 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e160:	e0fffc17 	ldw	r3,-16(fp)
1000e164:	00a00034 	movhi	r2,32768
1000e168:	10bfffc4 	addi	r2,r2,-1
1000e16c:	18800226 	beq	r3,r2,1000e178 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e170:	e0bffc17 	ldw	r2,-16(fp)
1000e174:	00000206 	br	1000e180 <altera_avalon_jtag_uart_ioctl+0x84>
1000e178:	00a00034 	movhi	r2,32768
1000e17c:	10bfff84 	addi	r2,r2,-2
1000e180:	e0fffd17 	ldw	r3,-12(fp)
1000e184:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e188:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e18c:	00000f06 	br	1000e1cc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e190:	e0bffd17 	ldw	r2,-12(fp)
1000e194:	10c00117 	ldw	r3,4(r2)
1000e198:	00a00034 	movhi	r2,32768
1000e19c:	10bfffc4 	addi	r2,r2,-1
1000e1a0:	18800c26 	beq	r3,r2,1000e1d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e1a4:	e0bffd17 	ldw	r2,-12(fp)
1000e1a8:	10c00917 	ldw	r3,36(r2)
1000e1ac:	e0bffd17 	ldw	r2,-12(fp)
1000e1b0:	10800117 	ldw	r2,4(r2)
1000e1b4:	1885803a 	cmpltu	r2,r3,r2
1000e1b8:	10c03fcc 	andi	r3,r2,255
1000e1bc:	e0bfff17 	ldw	r2,-4(fp)
1000e1c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e1c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e1c8:	00000206 	br	1000e1d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1000e1cc:	0001883a 	nop
1000e1d0:	00000106 	br	1000e1d8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1000e1d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e1d8:	e0bffb17 	ldw	r2,-20(fp)
}
1000e1dc:	e037883a 	mov	sp,fp
1000e1e0:	df000017 	ldw	fp,0(sp)
1000e1e4:	dec00104 	addi	sp,sp,4
1000e1e8:	f800283a 	ret

1000e1ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e1ec:	defff304 	addi	sp,sp,-52
1000e1f0:	dfc00c15 	stw	ra,48(sp)
1000e1f4:	df000b15 	stw	fp,44(sp)
1000e1f8:	df000b04 	addi	fp,sp,44
1000e1fc:	e13ffc15 	stw	r4,-16(fp)
1000e200:	e17ffd15 	stw	r5,-12(fp)
1000e204:	e1bffe15 	stw	r6,-8(fp)
1000e208:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e20c:	e0bffd17 	ldw	r2,-12(fp)
1000e210:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e214:	00004706 	br	1000e334 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e218:	e0bffc17 	ldw	r2,-16(fp)
1000e21c:	10800a17 	ldw	r2,40(r2)
1000e220:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e224:	e0bffc17 	ldw	r2,-16(fp)
1000e228:	10800b17 	ldw	r2,44(r2)
1000e22c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e230:	e0fff717 	ldw	r3,-36(fp)
1000e234:	e0bff817 	ldw	r2,-32(fp)
1000e238:	18800536 	bltu	r3,r2,1000e250 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e23c:	e0fff717 	ldw	r3,-36(fp)
1000e240:	e0bff817 	ldw	r2,-32(fp)
1000e244:	1885c83a 	sub	r2,r3,r2
1000e248:	e0bff615 	stw	r2,-40(fp)
1000e24c:	00000406 	br	1000e260 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e250:	00c20004 	movi	r3,2048
1000e254:	e0bff817 	ldw	r2,-32(fp)
1000e258:	1885c83a 	sub	r2,r3,r2
1000e25c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e260:	e0bff617 	ldw	r2,-40(fp)
1000e264:	10001e26 	beq	r2,zero,1000e2e0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1000e268:	e0fffe17 	ldw	r3,-8(fp)
1000e26c:	e0bff617 	ldw	r2,-40(fp)
1000e270:	1880022e 	bgeu	r3,r2,1000e27c <altera_avalon_jtag_uart_read+0x90>
        n = space;
1000e274:	e0bffe17 	ldw	r2,-8(fp)
1000e278:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e27c:	e0bffc17 	ldw	r2,-16(fp)
1000e280:	10c00e04 	addi	r3,r2,56
1000e284:	e0bff817 	ldw	r2,-32(fp)
1000e288:	1885883a 	add	r2,r3,r2
1000e28c:	e1bff617 	ldw	r6,-40(fp)
1000e290:	100b883a 	mov	r5,r2
1000e294:	e13ff517 	ldw	r4,-44(fp)
1000e298:	0005e540 	call	10005e54 <memcpy>
      ptr   += n;
1000e29c:	e0fff517 	ldw	r3,-44(fp)
1000e2a0:	e0bff617 	ldw	r2,-40(fp)
1000e2a4:	1885883a 	add	r2,r3,r2
1000e2a8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e2ac:	e0fffe17 	ldw	r3,-8(fp)
1000e2b0:	e0bff617 	ldw	r2,-40(fp)
1000e2b4:	1885c83a 	sub	r2,r3,r2
1000e2b8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e2bc:	e0fff817 	ldw	r3,-32(fp)
1000e2c0:	e0bff617 	ldw	r2,-40(fp)
1000e2c4:	1885883a 	add	r2,r3,r2
1000e2c8:	10c1ffcc 	andi	r3,r2,2047
1000e2cc:	e0bffc17 	ldw	r2,-16(fp)
1000e2d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e2d4:	e0bffe17 	ldw	r2,-8(fp)
1000e2d8:	00bfcf16 	blt	zero,r2,1000e218 <__alt_data_end+0xf800e218>
1000e2dc:	00000106 	br	1000e2e4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1000e2e0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1000e2e4:	e0fff517 	ldw	r3,-44(fp)
1000e2e8:	e0bffd17 	ldw	r2,-12(fp)
1000e2ec:	1880141e 	bne	r3,r2,1000e340 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e2f0:	e0bfff17 	ldw	r2,-4(fp)
1000e2f4:	1090000c 	andi	r2,r2,16384
1000e2f8:	1000131e 	bne	r2,zero,1000e348 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000e2fc:	0001883a 	nop
1000e300:	e0bffc17 	ldw	r2,-16(fp)
1000e304:	10c00a17 	ldw	r3,40(r2)
1000e308:	e0bff717 	ldw	r2,-36(fp)
1000e30c:	1880051e 	bne	r3,r2,1000e324 <altera_avalon_jtag_uart_read+0x138>
1000e310:	e0bffc17 	ldw	r2,-16(fp)
1000e314:	10c00917 	ldw	r3,36(r2)
1000e318:	e0bffc17 	ldw	r2,-16(fp)
1000e31c:	10800117 	ldw	r2,4(r2)
1000e320:	18bff736 	bltu	r3,r2,1000e300 <__alt_data_end+0xf800e300>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000e324:	e0bffc17 	ldw	r2,-16(fp)
1000e328:	10c00a17 	ldw	r3,40(r2)
1000e32c:	e0bff717 	ldw	r2,-36(fp)
1000e330:	18800726 	beq	r3,r2,1000e350 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e334:	e0bffe17 	ldw	r2,-8(fp)
1000e338:	00bfb716 	blt	zero,r2,1000e218 <__alt_data_end+0xf800e218>
1000e33c:	00000506 	br	1000e354 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1000e340:	0001883a 	nop
1000e344:	00000306 	br	1000e354 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1000e348:	0001883a 	nop
1000e34c:	00000106 	br	1000e354 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1000e350:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000e354:	e0fff517 	ldw	r3,-44(fp)
1000e358:	e0bffd17 	ldw	r2,-12(fp)
1000e35c:	18801826 	beq	r3,r2,1000e3c0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e360:	0005303a 	rdctl	r2,status
1000e364:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e368:	e0fffb17 	ldw	r3,-20(fp)
1000e36c:	00bfff84 	movi	r2,-2
1000e370:	1884703a 	and	r2,r3,r2
1000e374:	1001703a 	wrctl	status,r2
  
  return context;
1000e378:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000e37c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e380:	e0bffc17 	ldw	r2,-16(fp)
1000e384:	10800817 	ldw	r2,32(r2)
1000e388:	10c00054 	ori	r3,r2,1
1000e38c:	e0bffc17 	ldw	r2,-16(fp)
1000e390:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e394:	e0bffc17 	ldw	r2,-16(fp)
1000e398:	10800017 	ldw	r2,0(r2)
1000e39c:	10800104 	addi	r2,r2,4
1000e3a0:	1007883a 	mov	r3,r2
1000e3a4:	e0bffc17 	ldw	r2,-16(fp)
1000e3a8:	10800817 	ldw	r2,32(r2)
1000e3ac:	18800035 	stwio	r2,0(r3)
1000e3b0:	e0bffa17 	ldw	r2,-24(fp)
1000e3b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e3b8:	e0bff917 	ldw	r2,-28(fp)
1000e3bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000e3c0:	e0fff517 	ldw	r3,-44(fp)
1000e3c4:	e0bffd17 	ldw	r2,-12(fp)
1000e3c8:	18800426 	beq	r3,r2,1000e3dc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1000e3cc:	e0fff517 	ldw	r3,-44(fp)
1000e3d0:	e0bffd17 	ldw	r2,-12(fp)
1000e3d4:	1885c83a 	sub	r2,r3,r2
1000e3d8:	00000606 	br	1000e3f4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1000e3dc:	e0bfff17 	ldw	r2,-4(fp)
1000e3e0:	1090000c 	andi	r2,r2,16384
1000e3e4:	10000226 	beq	r2,zero,1000e3f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1000e3e8:	00bffd44 	movi	r2,-11
1000e3ec:	00000106 	br	1000e3f4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1000e3f0:	00bffec4 	movi	r2,-5
}
1000e3f4:	e037883a 	mov	sp,fp
1000e3f8:	dfc00117 	ldw	ra,4(sp)
1000e3fc:	df000017 	ldw	fp,0(sp)
1000e400:	dec00204 	addi	sp,sp,8
1000e404:	f800283a 	ret

1000e408 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000e408:	defff304 	addi	sp,sp,-52
1000e40c:	dfc00c15 	stw	ra,48(sp)
1000e410:	df000b15 	stw	fp,44(sp)
1000e414:	df000b04 	addi	fp,sp,44
1000e418:	e13ffc15 	stw	r4,-16(fp)
1000e41c:	e17ffd15 	stw	r5,-12(fp)
1000e420:	e1bffe15 	stw	r6,-8(fp)
1000e424:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000e428:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000e42c:	e0bffd17 	ldw	r2,-12(fp)
1000e430:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e434:	00003706 	br	1000e514 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000e438:	e0bffc17 	ldw	r2,-16(fp)
1000e43c:	10800c17 	ldw	r2,48(r2)
1000e440:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1000e444:	e0bffc17 	ldw	r2,-16(fp)
1000e448:	10800d17 	ldw	r2,52(r2)
1000e44c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000e450:	e0fff917 	ldw	r3,-28(fp)
1000e454:	e0bff517 	ldw	r2,-44(fp)
1000e458:	1880062e 	bgeu	r3,r2,1000e474 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000e45c:	e0fff517 	ldw	r3,-44(fp)
1000e460:	e0bff917 	ldw	r2,-28(fp)
1000e464:	1885c83a 	sub	r2,r3,r2
1000e468:	10bfffc4 	addi	r2,r2,-1
1000e46c:	e0bff615 	stw	r2,-40(fp)
1000e470:	00000b06 	br	1000e4a0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000e474:	e0bff517 	ldw	r2,-44(fp)
1000e478:	10000526 	beq	r2,zero,1000e490 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000e47c:	00c20004 	movi	r3,2048
1000e480:	e0bff917 	ldw	r2,-28(fp)
1000e484:	1885c83a 	sub	r2,r3,r2
1000e488:	e0bff615 	stw	r2,-40(fp)
1000e48c:	00000406 	br	1000e4a0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000e490:	00c1ffc4 	movi	r3,2047
1000e494:	e0bff917 	ldw	r2,-28(fp)
1000e498:	1885c83a 	sub	r2,r3,r2
1000e49c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e4a0:	e0bff617 	ldw	r2,-40(fp)
1000e4a4:	10001e26 	beq	r2,zero,1000e520 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1000e4a8:	e0fffe17 	ldw	r3,-8(fp)
1000e4ac:	e0bff617 	ldw	r2,-40(fp)
1000e4b0:	1880022e 	bgeu	r3,r2,1000e4bc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000e4b4:	e0bffe17 	ldw	r2,-8(fp)
1000e4b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000e4bc:	e0bffc17 	ldw	r2,-16(fp)
1000e4c0:	10c20e04 	addi	r3,r2,2104
1000e4c4:	e0bff917 	ldw	r2,-28(fp)
1000e4c8:	1885883a 	add	r2,r3,r2
1000e4cc:	e1bff617 	ldw	r6,-40(fp)
1000e4d0:	e17ffd17 	ldw	r5,-12(fp)
1000e4d4:	1009883a 	mov	r4,r2
1000e4d8:	0005e540 	call	10005e54 <memcpy>
      ptr   += n;
1000e4dc:	e0fffd17 	ldw	r3,-12(fp)
1000e4e0:	e0bff617 	ldw	r2,-40(fp)
1000e4e4:	1885883a 	add	r2,r3,r2
1000e4e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000e4ec:	e0fffe17 	ldw	r3,-8(fp)
1000e4f0:	e0bff617 	ldw	r2,-40(fp)
1000e4f4:	1885c83a 	sub	r2,r3,r2
1000e4f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e4fc:	e0fff917 	ldw	r3,-28(fp)
1000e500:	e0bff617 	ldw	r2,-40(fp)
1000e504:	1885883a 	add	r2,r3,r2
1000e508:	10c1ffcc 	andi	r3,r2,2047
1000e50c:	e0bffc17 	ldw	r2,-16(fp)
1000e510:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e514:	e0bffe17 	ldw	r2,-8(fp)
1000e518:	00bfc716 	blt	zero,r2,1000e438 <__alt_data_end+0xf800e438>
1000e51c:	00000106 	br	1000e524 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1000e520:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e524:	0005303a 	rdctl	r2,status
1000e528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e52c:	e0fffb17 	ldw	r3,-20(fp)
1000e530:	00bfff84 	movi	r2,-2
1000e534:	1884703a 	and	r2,r3,r2
1000e538:	1001703a 	wrctl	status,r2
  
  return context;
1000e53c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000e540:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e544:	e0bffc17 	ldw	r2,-16(fp)
1000e548:	10800817 	ldw	r2,32(r2)
1000e54c:	10c00094 	ori	r3,r2,2
1000e550:	e0bffc17 	ldw	r2,-16(fp)
1000e554:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e558:	e0bffc17 	ldw	r2,-16(fp)
1000e55c:	10800017 	ldw	r2,0(r2)
1000e560:	10800104 	addi	r2,r2,4
1000e564:	1007883a 	mov	r3,r2
1000e568:	e0bffc17 	ldw	r2,-16(fp)
1000e56c:	10800817 	ldw	r2,32(r2)
1000e570:	18800035 	stwio	r2,0(r3)
1000e574:	e0bffa17 	ldw	r2,-24(fp)
1000e578:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e57c:	e0bff817 	ldw	r2,-32(fp)
1000e580:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000e584:	e0bffe17 	ldw	r2,-8(fp)
1000e588:	0080100e 	bge	zero,r2,1000e5cc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1000e58c:	e0bfff17 	ldw	r2,-4(fp)
1000e590:	1090000c 	andi	r2,r2,16384
1000e594:	1000101e 	bne	r2,zero,1000e5d8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000e598:	0001883a 	nop
1000e59c:	e0bffc17 	ldw	r2,-16(fp)
1000e5a0:	10c00d17 	ldw	r3,52(r2)
1000e5a4:	e0bff517 	ldw	r2,-44(fp)
1000e5a8:	1880051e 	bne	r3,r2,1000e5c0 <altera_avalon_jtag_uart_write+0x1b8>
1000e5ac:	e0bffc17 	ldw	r2,-16(fp)
1000e5b0:	10c00917 	ldw	r3,36(r2)
1000e5b4:	e0bffc17 	ldw	r2,-16(fp)
1000e5b8:	10800117 	ldw	r2,4(r2)
1000e5bc:	18bff736 	bltu	r3,r2,1000e59c <__alt_data_end+0xf800e59c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000e5c0:	e0bffc17 	ldw	r2,-16(fp)
1000e5c4:	10800917 	ldw	r2,36(r2)
1000e5c8:	1000051e 	bne	r2,zero,1000e5e0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1000e5cc:	e0bffe17 	ldw	r2,-8(fp)
1000e5d0:	00bfd016 	blt	zero,r2,1000e514 <__alt_data_end+0xf800e514>
1000e5d4:	00000306 	br	1000e5e4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1000e5d8:	0001883a 	nop
1000e5dc:	00000106 	br	1000e5e4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1000e5e0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000e5e4:	e0fffd17 	ldw	r3,-12(fp)
1000e5e8:	e0bff717 	ldw	r2,-36(fp)
1000e5ec:	18800426 	beq	r3,r2,1000e600 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1000e5f0:	e0fffd17 	ldw	r3,-12(fp)
1000e5f4:	e0bff717 	ldw	r2,-36(fp)
1000e5f8:	1885c83a 	sub	r2,r3,r2
1000e5fc:	00000606 	br	1000e618 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1000e600:	e0bfff17 	ldw	r2,-4(fp)
1000e604:	1090000c 	andi	r2,r2,16384
1000e608:	10000226 	beq	r2,zero,1000e614 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1000e60c:	00bffd44 	movi	r2,-11
1000e610:	00000106 	br	1000e618 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000e614:	00bffec4 	movi	r2,-5
}
1000e618:	e037883a 	mov	sp,fp
1000e61c:	dfc00117 	ldw	ra,4(sp)
1000e620:	df000017 	ldw	fp,0(sp)
1000e624:	dec00204 	addi	sp,sp,8
1000e628:	f800283a 	ret

1000e62c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000e62c:	defff504 	addi	sp,sp,-44
1000e630:	df000a15 	stw	fp,40(sp)
1000e634:	df000a04 	addi	fp,sp,40
1000e638:	e13ffc15 	stw	r4,-16(fp)
1000e63c:	e17ffd15 	stw	r5,-12(fp)
1000e640:	e1bffe15 	stw	r6,-8(fp)
1000e644:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000e648:	e03ff615 	stw	zero,-40(fp)
1000e64c:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
1000e650:	10003c26 	beq	r2,zero,1000e744 <alt_alarm_start+0x118>
  {
    if (alarm)
1000e654:	e0bffc17 	ldw	r2,-16(fp)
1000e658:	10003826 	beq	r2,zero,1000e73c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1000e65c:	e0bffc17 	ldw	r2,-16(fp)
1000e660:	e0fffe17 	ldw	r3,-8(fp)
1000e664:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000e668:	e0bffc17 	ldw	r2,-16(fp)
1000e66c:	e0ffff17 	ldw	r3,-4(fp)
1000e670:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e674:	0005303a 	rdctl	r2,status
1000e678:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e67c:	e0fff917 	ldw	r3,-28(fp)
1000e680:	00bfff84 	movi	r2,-2
1000e684:	1884703a 	and	r2,r3,r2
1000e688:	1001703a 	wrctl	status,r2
  
  return context;
1000e68c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1000e690:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000e694:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
1000e698:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000e69c:	e0fffd17 	ldw	r3,-12(fp)
1000e6a0:	e0bff617 	ldw	r2,-40(fp)
1000e6a4:	1885883a 	add	r2,r3,r2
1000e6a8:	10c00044 	addi	r3,r2,1
1000e6ac:	e0bffc17 	ldw	r2,-16(fp)
1000e6b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000e6b4:	e0bffc17 	ldw	r2,-16(fp)
1000e6b8:	10c00217 	ldw	r3,8(r2)
1000e6bc:	e0bff617 	ldw	r2,-40(fp)
1000e6c0:	1880042e 	bgeu	r3,r2,1000e6d4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1000e6c4:	e0bffc17 	ldw	r2,-16(fp)
1000e6c8:	00c00044 	movi	r3,1
1000e6cc:	10c00405 	stb	r3,16(r2)
1000e6d0:	00000206 	br	1000e6dc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1000e6d4:	e0bffc17 	ldw	r2,-16(fp)
1000e6d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000e6dc:	e0bffc17 	ldw	r2,-16(fp)
1000e6e0:	d0e00e04 	addi	r3,gp,-32712
1000e6e4:	e0fffa15 	stw	r3,-24(fp)
1000e6e8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000e6ec:	e0bffb17 	ldw	r2,-20(fp)
1000e6f0:	e0fffa17 	ldw	r3,-24(fp)
1000e6f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000e6f8:	e0bffa17 	ldw	r2,-24(fp)
1000e6fc:	10c00017 	ldw	r3,0(r2)
1000e700:	e0bffb17 	ldw	r2,-20(fp)
1000e704:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000e708:	e0bffa17 	ldw	r2,-24(fp)
1000e70c:	10800017 	ldw	r2,0(r2)
1000e710:	e0fffb17 	ldw	r3,-20(fp)
1000e714:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000e718:	e0bffa17 	ldw	r2,-24(fp)
1000e71c:	e0fffb17 	ldw	r3,-20(fp)
1000e720:	10c00015 	stw	r3,0(r2)
1000e724:	e0bff817 	ldw	r2,-32(fp)
1000e728:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e72c:	e0bff717 	ldw	r2,-36(fp)
1000e730:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000e734:	0005883a 	mov	r2,zero
1000e738:	00000306 	br	1000e748 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1000e73c:	00bffa84 	movi	r2,-22
1000e740:	00000106 	br	1000e748 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1000e744:	00bfde84 	movi	r2,-134
  }
}
1000e748:	e037883a 	mov	sp,fp
1000e74c:	df000017 	ldw	fp,0(sp)
1000e750:	dec00104 	addi	sp,sp,4
1000e754:	f800283a 	ret

1000e758 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000e758:	defffe04 	addi	sp,sp,-8
1000e75c:	df000115 	stw	fp,4(sp)
1000e760:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1000e764:	e03fff15 	stw	zero,-4(fp)
1000e768:	00000506 	br	1000e780 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1000e76c:	e0bfff17 	ldw	r2,-4(fp)
1000e770:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1000e774:	e0bfff17 	ldw	r2,-4(fp)
1000e778:	10800804 	addi	r2,r2,32
1000e77c:	e0bfff15 	stw	r2,-4(fp)
1000e780:	e0bfff17 	ldw	r2,-4(fp)
1000e784:	10820030 	cmpltui	r2,r2,2048
1000e788:	103ff81e 	bne	r2,zero,1000e76c <__alt_data_end+0xf800e76c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000e78c:	0001883a 	nop
1000e790:	e037883a 	mov	sp,fp
1000e794:	df000017 	ldw	fp,0(sp)
1000e798:	dec00104 	addi	sp,sp,4
1000e79c:	f800283a 	ret

1000e7a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e7a0:	defffe04 	addi	sp,sp,-8
1000e7a4:	dfc00115 	stw	ra,4(sp)
1000e7a8:	df000015 	stw	fp,0(sp)
1000e7ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e7b0:	d0a00b17 	ldw	r2,-32724(gp)
1000e7b4:	10000326 	beq	r2,zero,1000e7c4 <alt_get_errno+0x24>
1000e7b8:	d0a00b17 	ldw	r2,-32724(gp)
1000e7bc:	103ee83a 	callr	r2
1000e7c0:	00000106 	br	1000e7c8 <alt_get_errno+0x28>
1000e7c4:	d0a6d204 	addi	r2,gp,-25784
}
1000e7c8:	e037883a 	mov	sp,fp
1000e7cc:	dfc00117 	ldw	ra,4(sp)
1000e7d0:	df000017 	ldw	fp,0(sp)
1000e7d4:	dec00204 	addi	sp,sp,8
1000e7d8:	f800283a 	ret

1000e7dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000e7dc:	defffa04 	addi	sp,sp,-24
1000e7e0:	dfc00515 	stw	ra,20(sp)
1000e7e4:	df000415 	stw	fp,16(sp)
1000e7e8:	df000404 	addi	fp,sp,16
1000e7ec:	e13ffe15 	stw	r4,-8(fp)
1000e7f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000e7f4:	e0bffe17 	ldw	r2,-8(fp)
1000e7f8:	10000326 	beq	r2,zero,1000e808 <alt_dev_llist_insert+0x2c>
1000e7fc:	e0bffe17 	ldw	r2,-8(fp)
1000e800:	10800217 	ldw	r2,8(r2)
1000e804:	1000061e 	bne	r2,zero,1000e820 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000e808:	000e7a00 	call	1000e7a0 <alt_get_errno>
1000e80c:	1007883a 	mov	r3,r2
1000e810:	00800584 	movi	r2,22
1000e814:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000e818:	00bffa84 	movi	r2,-22
1000e81c:	00001306 	br	1000e86c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000e820:	e0bffe17 	ldw	r2,-8(fp)
1000e824:	e0ffff17 	ldw	r3,-4(fp)
1000e828:	e0fffc15 	stw	r3,-16(fp)
1000e82c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000e830:	e0bffd17 	ldw	r2,-12(fp)
1000e834:	e0fffc17 	ldw	r3,-16(fp)
1000e838:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000e83c:	e0bffc17 	ldw	r2,-16(fp)
1000e840:	10c00017 	ldw	r3,0(r2)
1000e844:	e0bffd17 	ldw	r2,-12(fp)
1000e848:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000e84c:	e0bffc17 	ldw	r2,-16(fp)
1000e850:	10800017 	ldw	r2,0(r2)
1000e854:	e0fffd17 	ldw	r3,-12(fp)
1000e858:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000e85c:	e0bffc17 	ldw	r2,-16(fp)
1000e860:	e0fffd17 	ldw	r3,-12(fp)
1000e864:	10c00015 	stw	r3,0(r2)

  return 0;  
1000e868:	0005883a 	mov	r2,zero
}
1000e86c:	e037883a 	mov	sp,fp
1000e870:	dfc00117 	ldw	ra,4(sp)
1000e874:	df000017 	ldw	fp,0(sp)
1000e878:	dec00204 	addi	sp,sp,8
1000e87c:	f800283a 	ret

1000e880 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000e880:	defffd04 	addi	sp,sp,-12
1000e884:	dfc00215 	stw	ra,8(sp)
1000e888:	df000115 	stw	fp,4(sp)
1000e88c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000e890:	00840074 	movhi	r2,4097
1000e894:	10bdf304 	addi	r2,r2,-2100
1000e898:	e0bfff15 	stw	r2,-4(fp)
1000e89c:	00000606 	br	1000e8b8 <_do_ctors+0x38>
        (*ctor) (); 
1000e8a0:	e0bfff17 	ldw	r2,-4(fp)
1000e8a4:	10800017 	ldw	r2,0(r2)
1000e8a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000e8ac:	e0bfff17 	ldw	r2,-4(fp)
1000e8b0:	10bfff04 	addi	r2,r2,-4
1000e8b4:	e0bfff15 	stw	r2,-4(fp)
1000e8b8:	e0ffff17 	ldw	r3,-4(fp)
1000e8bc:	00840074 	movhi	r2,4097
1000e8c0:	10bdf404 	addi	r2,r2,-2096
1000e8c4:	18bff62e 	bgeu	r3,r2,1000e8a0 <__alt_data_end+0xf800e8a0>
        (*ctor) (); 
}
1000e8c8:	0001883a 	nop
1000e8cc:	e037883a 	mov	sp,fp
1000e8d0:	dfc00117 	ldw	ra,4(sp)
1000e8d4:	df000017 	ldw	fp,0(sp)
1000e8d8:	dec00204 	addi	sp,sp,8
1000e8dc:	f800283a 	ret

1000e8e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000e8e0:	defffd04 	addi	sp,sp,-12
1000e8e4:	dfc00215 	stw	ra,8(sp)
1000e8e8:	df000115 	stw	fp,4(sp)
1000e8ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000e8f0:	00840074 	movhi	r2,4097
1000e8f4:	10bdf304 	addi	r2,r2,-2100
1000e8f8:	e0bfff15 	stw	r2,-4(fp)
1000e8fc:	00000606 	br	1000e918 <_do_dtors+0x38>
        (*dtor) (); 
1000e900:	e0bfff17 	ldw	r2,-4(fp)
1000e904:	10800017 	ldw	r2,0(r2)
1000e908:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000e90c:	e0bfff17 	ldw	r2,-4(fp)
1000e910:	10bfff04 	addi	r2,r2,-4
1000e914:	e0bfff15 	stw	r2,-4(fp)
1000e918:	e0ffff17 	ldw	r3,-4(fp)
1000e91c:	00840074 	movhi	r2,4097
1000e920:	10bdf404 	addi	r2,r2,-2096
1000e924:	18bff62e 	bgeu	r3,r2,1000e900 <__alt_data_end+0xf800e900>
        (*dtor) (); 
}
1000e928:	0001883a 	nop
1000e92c:	e037883a 	mov	sp,fp
1000e930:	dfc00117 	ldw	ra,4(sp)
1000e934:	df000017 	ldw	fp,0(sp)
1000e938:	dec00204 	addi	sp,sp,8
1000e93c:	f800283a 	ret

1000e940 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000e940:	defffe04 	addi	sp,sp,-8
1000e944:	dfc00115 	stw	ra,4(sp)
1000e948:	df000015 	stw	fp,0(sp)
1000e94c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1000e950:	01440004 	movi	r5,4096
1000e954:	0009883a 	mov	r4,zero
1000e958:	000f3ac0 	call	1000f3ac <alt_icache_flush>
#endif
}
1000e95c:	0001883a 	nop
1000e960:	e037883a 	mov	sp,fp
1000e964:	dfc00117 	ldw	ra,4(sp)
1000e968:	df000017 	ldw	fp,0(sp)
1000e96c:	dec00204 	addi	sp,sp,8
1000e970:	f800283a 	ret

1000e974 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000e974:	defff904 	addi	sp,sp,-28
1000e978:	dfc00615 	stw	ra,24(sp)
1000e97c:	df000515 	stw	fp,20(sp)
1000e980:	df000504 	addi	fp,sp,20
1000e984:	e13ffc15 	stw	r4,-16(fp)
1000e988:	e17ffd15 	stw	r5,-12(fp)
1000e98c:	e1bffe15 	stw	r6,-8(fp)
1000e990:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000e994:	e0800217 	ldw	r2,8(fp)
1000e998:	d8800015 	stw	r2,0(sp)
1000e99c:	e1ffff17 	ldw	r7,-4(fp)
1000e9a0:	e1bffe17 	ldw	r6,-8(fp)
1000e9a4:	e17ffd17 	ldw	r5,-12(fp)
1000e9a8:	e13ffc17 	ldw	r4,-16(fp)
1000e9ac:	000eb240 	call	1000eb24 <alt_iic_isr_register>
}  
1000e9b0:	e037883a 	mov	sp,fp
1000e9b4:	dfc00117 	ldw	ra,4(sp)
1000e9b8:	df000017 	ldw	fp,0(sp)
1000e9bc:	dec00204 	addi	sp,sp,8
1000e9c0:	f800283a 	ret

1000e9c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000e9c4:	defff904 	addi	sp,sp,-28
1000e9c8:	df000615 	stw	fp,24(sp)
1000e9cc:	df000604 	addi	fp,sp,24
1000e9d0:	e13ffe15 	stw	r4,-8(fp)
1000e9d4:	e17fff15 	stw	r5,-4(fp)
1000e9d8:	e0bfff17 	ldw	r2,-4(fp)
1000e9dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e9e0:	0005303a 	rdctl	r2,status
1000e9e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e9e8:	e0fffb17 	ldw	r3,-20(fp)
1000e9ec:	00bfff84 	movi	r2,-2
1000e9f0:	1884703a 	and	r2,r3,r2
1000e9f4:	1001703a 	wrctl	status,r2
  
  return context;
1000e9f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000e9fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000ea00:	00c00044 	movi	r3,1
1000ea04:	e0bffa17 	ldw	r2,-24(fp)
1000ea08:	1884983a 	sll	r2,r3,r2
1000ea0c:	1007883a 	mov	r3,r2
1000ea10:	d0a6d317 	ldw	r2,-25780(gp)
1000ea14:	1884b03a 	or	r2,r3,r2
1000ea18:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000ea1c:	d0a6d317 	ldw	r2,-25780(gp)
1000ea20:	100170fa 	wrctl	ienable,r2
1000ea24:	e0bffc17 	ldw	r2,-16(fp)
1000ea28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ea2c:	e0bffd17 	ldw	r2,-12(fp)
1000ea30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000ea34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000ea38:	0001883a 	nop
}
1000ea3c:	e037883a 	mov	sp,fp
1000ea40:	df000017 	ldw	fp,0(sp)
1000ea44:	dec00104 	addi	sp,sp,4
1000ea48:	f800283a 	ret

1000ea4c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000ea4c:	defff904 	addi	sp,sp,-28
1000ea50:	df000615 	stw	fp,24(sp)
1000ea54:	df000604 	addi	fp,sp,24
1000ea58:	e13ffe15 	stw	r4,-8(fp)
1000ea5c:	e17fff15 	stw	r5,-4(fp)
1000ea60:	e0bfff17 	ldw	r2,-4(fp)
1000ea64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ea68:	0005303a 	rdctl	r2,status
1000ea6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ea70:	e0fffb17 	ldw	r3,-20(fp)
1000ea74:	00bfff84 	movi	r2,-2
1000ea78:	1884703a 	and	r2,r3,r2
1000ea7c:	1001703a 	wrctl	status,r2
  
  return context;
1000ea80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000ea84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000ea88:	00c00044 	movi	r3,1
1000ea8c:	e0bffa17 	ldw	r2,-24(fp)
1000ea90:	1884983a 	sll	r2,r3,r2
1000ea94:	0084303a 	nor	r2,zero,r2
1000ea98:	1007883a 	mov	r3,r2
1000ea9c:	d0a6d317 	ldw	r2,-25780(gp)
1000eaa0:	1884703a 	and	r2,r3,r2
1000eaa4:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000eaa8:	d0a6d317 	ldw	r2,-25780(gp)
1000eaac:	100170fa 	wrctl	ienable,r2
1000eab0:	e0bffc17 	ldw	r2,-16(fp)
1000eab4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000eab8:	e0bffd17 	ldw	r2,-12(fp)
1000eabc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000eac0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000eac4:	0001883a 	nop
}
1000eac8:	e037883a 	mov	sp,fp
1000eacc:	df000017 	ldw	fp,0(sp)
1000ead0:	dec00104 	addi	sp,sp,4
1000ead4:	f800283a 	ret

1000ead8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000ead8:	defffc04 	addi	sp,sp,-16
1000eadc:	df000315 	stw	fp,12(sp)
1000eae0:	df000304 	addi	fp,sp,12
1000eae4:	e13ffe15 	stw	r4,-8(fp)
1000eae8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000eaec:	000530fa 	rdctl	r2,ienable
1000eaf0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000eaf4:	00c00044 	movi	r3,1
1000eaf8:	e0bfff17 	ldw	r2,-4(fp)
1000eafc:	1884983a 	sll	r2,r3,r2
1000eb00:	1007883a 	mov	r3,r2
1000eb04:	e0bffd17 	ldw	r2,-12(fp)
1000eb08:	1884703a 	and	r2,r3,r2
1000eb0c:	1004c03a 	cmpne	r2,r2,zero
1000eb10:	10803fcc 	andi	r2,r2,255
}
1000eb14:	e037883a 	mov	sp,fp
1000eb18:	df000017 	ldw	fp,0(sp)
1000eb1c:	dec00104 	addi	sp,sp,4
1000eb20:	f800283a 	ret

1000eb24 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000eb24:	defff504 	addi	sp,sp,-44
1000eb28:	dfc00a15 	stw	ra,40(sp)
1000eb2c:	df000915 	stw	fp,36(sp)
1000eb30:	df000904 	addi	fp,sp,36
1000eb34:	e13ffc15 	stw	r4,-16(fp)
1000eb38:	e17ffd15 	stw	r5,-12(fp)
1000eb3c:	e1bffe15 	stw	r6,-8(fp)
1000eb40:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000eb44:	00bffa84 	movi	r2,-22
1000eb48:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000eb4c:	e0bffd17 	ldw	r2,-12(fp)
1000eb50:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000eb54:	e0bff817 	ldw	r2,-32(fp)
1000eb58:	10800808 	cmpgei	r2,r2,32
1000eb5c:	1000271e 	bne	r2,zero,1000ebfc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eb60:	0005303a 	rdctl	r2,status
1000eb64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eb68:	e0fffb17 	ldw	r3,-20(fp)
1000eb6c:	00bfff84 	movi	r2,-2
1000eb70:	1884703a 	and	r2,r3,r2
1000eb74:	1001703a 	wrctl	status,r2
  
  return context;
1000eb78:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000eb7c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1000eb80:	00840074 	movhi	r2,4097
1000eb84:	108c4d04 	addi	r2,r2,12596
1000eb88:	e0fff817 	ldw	r3,-32(fp)
1000eb8c:	180690fa 	slli	r3,r3,3
1000eb90:	10c5883a 	add	r2,r2,r3
1000eb94:	e0fffe17 	ldw	r3,-8(fp)
1000eb98:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000eb9c:	00840074 	movhi	r2,4097
1000eba0:	108c4d04 	addi	r2,r2,12596
1000eba4:	e0fff817 	ldw	r3,-32(fp)
1000eba8:	180690fa 	slli	r3,r3,3
1000ebac:	10c5883a 	add	r2,r2,r3
1000ebb0:	10800104 	addi	r2,r2,4
1000ebb4:	e0ffff17 	ldw	r3,-4(fp)
1000ebb8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000ebbc:	e0bffe17 	ldw	r2,-8(fp)
1000ebc0:	10000526 	beq	r2,zero,1000ebd8 <alt_iic_isr_register+0xb4>
1000ebc4:	e0bff817 	ldw	r2,-32(fp)
1000ebc8:	100b883a 	mov	r5,r2
1000ebcc:	e13ffc17 	ldw	r4,-16(fp)
1000ebd0:	000e9c40 	call	1000e9c4 <alt_ic_irq_enable>
1000ebd4:	00000406 	br	1000ebe8 <alt_iic_isr_register+0xc4>
1000ebd8:	e0bff817 	ldw	r2,-32(fp)
1000ebdc:	100b883a 	mov	r5,r2
1000ebe0:	e13ffc17 	ldw	r4,-16(fp)
1000ebe4:	000ea4c0 	call	1000ea4c <alt_ic_irq_disable>
1000ebe8:	e0bff715 	stw	r2,-36(fp)
1000ebec:	e0bffa17 	ldw	r2,-24(fp)
1000ebf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ebf4:	e0bff917 	ldw	r2,-28(fp)
1000ebf8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000ebfc:	e0bff717 	ldw	r2,-36(fp)
}
1000ec00:	e037883a 	mov	sp,fp
1000ec04:	dfc00117 	ldw	ra,4(sp)
1000ec08:	df000017 	ldw	fp,0(sp)
1000ec0c:	dec00204 	addi	sp,sp,8
1000ec10:	f800283a 	ret

1000ec14 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000ec14:	defff904 	addi	sp,sp,-28
1000ec18:	dfc00615 	stw	ra,24(sp)
1000ec1c:	df000515 	stw	fp,20(sp)
1000ec20:	df000504 	addi	fp,sp,20
1000ec24:	e13ffc15 	stw	r4,-16(fp)
1000ec28:	e17ffd15 	stw	r5,-12(fp)
1000ec2c:	e1bffe15 	stw	r6,-8(fp)
1000ec30:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1000ec34:	e1bfff17 	ldw	r6,-4(fp)
1000ec38:	e17ffe17 	ldw	r5,-8(fp)
1000ec3c:	e13ffd17 	ldw	r4,-12(fp)
1000ec40:	000ee540 	call	1000ee54 <open>
1000ec44:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1000ec48:	e0bffb17 	ldw	r2,-20(fp)
1000ec4c:	10001c16 	blt	r2,zero,1000ecc0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1000ec50:	00840074 	movhi	r2,4097
1000ec54:	1080f204 	addi	r2,r2,968
1000ec58:	e0fffb17 	ldw	r3,-20(fp)
1000ec5c:	18c00324 	muli	r3,r3,12
1000ec60:	10c5883a 	add	r2,r2,r3
1000ec64:	10c00017 	ldw	r3,0(r2)
1000ec68:	e0bffc17 	ldw	r2,-16(fp)
1000ec6c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000ec70:	00840074 	movhi	r2,4097
1000ec74:	1080f204 	addi	r2,r2,968
1000ec78:	e0fffb17 	ldw	r3,-20(fp)
1000ec7c:	18c00324 	muli	r3,r3,12
1000ec80:	10c5883a 	add	r2,r2,r3
1000ec84:	10800104 	addi	r2,r2,4
1000ec88:	10c00017 	ldw	r3,0(r2)
1000ec8c:	e0bffc17 	ldw	r2,-16(fp)
1000ec90:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000ec94:	00840074 	movhi	r2,4097
1000ec98:	1080f204 	addi	r2,r2,968
1000ec9c:	e0fffb17 	ldw	r3,-20(fp)
1000eca0:	18c00324 	muli	r3,r3,12
1000eca4:	10c5883a 	add	r2,r2,r3
1000eca8:	10800204 	addi	r2,r2,8
1000ecac:	10c00017 	ldw	r3,0(r2)
1000ecb0:	e0bffc17 	ldw	r2,-16(fp)
1000ecb4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000ecb8:	e13ffb17 	ldw	r4,-20(fp)
1000ecbc:	000d8c40 	call	1000d8c4 <alt_release_fd>
  }
} 
1000ecc0:	0001883a 	nop
1000ecc4:	e037883a 	mov	sp,fp
1000ecc8:	dfc00117 	ldw	ra,4(sp)
1000eccc:	df000017 	ldw	fp,0(sp)
1000ecd0:	dec00204 	addi	sp,sp,8
1000ecd4:	f800283a 	ret

1000ecd8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000ecd8:	defffb04 	addi	sp,sp,-20
1000ecdc:	dfc00415 	stw	ra,16(sp)
1000ece0:	df000315 	stw	fp,12(sp)
1000ece4:	df000304 	addi	fp,sp,12
1000ece8:	e13ffd15 	stw	r4,-12(fp)
1000ecec:	e17ffe15 	stw	r5,-8(fp)
1000ecf0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000ecf4:	01c07fc4 	movi	r7,511
1000ecf8:	01800044 	movi	r6,1
1000ecfc:	e17ffd17 	ldw	r5,-12(fp)
1000ed00:	01040074 	movhi	r4,4097
1000ed04:	2100f504 	addi	r4,r4,980
1000ed08:	000ec140 	call	1000ec14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000ed0c:	01c07fc4 	movi	r7,511
1000ed10:	000d883a 	mov	r6,zero
1000ed14:	e17ffe17 	ldw	r5,-8(fp)
1000ed18:	01040074 	movhi	r4,4097
1000ed1c:	2100f204 	addi	r4,r4,968
1000ed20:	000ec140 	call	1000ec14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000ed24:	01c07fc4 	movi	r7,511
1000ed28:	01800044 	movi	r6,1
1000ed2c:	e17fff17 	ldw	r5,-4(fp)
1000ed30:	01040074 	movhi	r4,4097
1000ed34:	2100f804 	addi	r4,r4,992
1000ed38:	000ec140 	call	1000ec14 <alt_open_fd>
}  
1000ed3c:	0001883a 	nop
1000ed40:	e037883a 	mov	sp,fp
1000ed44:	dfc00117 	ldw	ra,4(sp)
1000ed48:	df000017 	ldw	fp,0(sp)
1000ed4c:	dec00204 	addi	sp,sp,8
1000ed50:	f800283a 	ret

1000ed54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ed54:	defffe04 	addi	sp,sp,-8
1000ed58:	dfc00115 	stw	ra,4(sp)
1000ed5c:	df000015 	stw	fp,0(sp)
1000ed60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ed64:	d0a00b17 	ldw	r2,-32724(gp)
1000ed68:	10000326 	beq	r2,zero,1000ed78 <alt_get_errno+0x24>
1000ed6c:	d0a00b17 	ldw	r2,-32724(gp)
1000ed70:	103ee83a 	callr	r2
1000ed74:	00000106 	br	1000ed7c <alt_get_errno+0x28>
1000ed78:	d0a6d204 	addi	r2,gp,-25784
}
1000ed7c:	e037883a 	mov	sp,fp
1000ed80:	dfc00117 	ldw	ra,4(sp)
1000ed84:	df000017 	ldw	fp,0(sp)
1000ed88:	dec00204 	addi	sp,sp,8
1000ed8c:	f800283a 	ret

1000ed90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000ed90:	defffd04 	addi	sp,sp,-12
1000ed94:	df000215 	stw	fp,8(sp)
1000ed98:	df000204 	addi	fp,sp,8
1000ed9c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000eda0:	e0bfff17 	ldw	r2,-4(fp)
1000eda4:	10800217 	ldw	r2,8(r2)
1000eda8:	10d00034 	orhi	r3,r2,16384
1000edac:	e0bfff17 	ldw	r2,-4(fp)
1000edb0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000edb4:	e03ffe15 	stw	zero,-8(fp)
1000edb8:	00001d06 	br	1000ee30 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000edbc:	00840074 	movhi	r2,4097
1000edc0:	1080f204 	addi	r2,r2,968
1000edc4:	e0fffe17 	ldw	r3,-8(fp)
1000edc8:	18c00324 	muli	r3,r3,12
1000edcc:	10c5883a 	add	r2,r2,r3
1000edd0:	10c00017 	ldw	r3,0(r2)
1000edd4:	e0bfff17 	ldw	r2,-4(fp)
1000edd8:	10800017 	ldw	r2,0(r2)
1000eddc:	1880111e 	bne	r3,r2,1000ee24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000ede0:	00840074 	movhi	r2,4097
1000ede4:	1080f204 	addi	r2,r2,968
1000ede8:	e0fffe17 	ldw	r3,-8(fp)
1000edec:	18c00324 	muli	r3,r3,12
1000edf0:	10c5883a 	add	r2,r2,r3
1000edf4:	10800204 	addi	r2,r2,8
1000edf8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000edfc:	1000090e 	bge	r2,zero,1000ee24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000ee00:	e0bffe17 	ldw	r2,-8(fp)
1000ee04:	10c00324 	muli	r3,r2,12
1000ee08:	00840074 	movhi	r2,4097
1000ee0c:	1080f204 	addi	r2,r2,968
1000ee10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000ee14:	e0bfff17 	ldw	r2,-4(fp)
1000ee18:	18800226 	beq	r3,r2,1000ee24 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000ee1c:	00bffcc4 	movi	r2,-13
1000ee20:	00000806 	br	1000ee44 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000ee24:	e0bffe17 	ldw	r2,-8(fp)
1000ee28:	10800044 	addi	r2,r2,1
1000ee2c:	e0bffe15 	stw	r2,-8(fp)
1000ee30:	d0a00a17 	ldw	r2,-32728(gp)
1000ee34:	1007883a 	mov	r3,r2
1000ee38:	e0bffe17 	ldw	r2,-8(fp)
1000ee3c:	18bfdf2e 	bgeu	r3,r2,1000edbc <__alt_data_end+0xf800edbc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000ee40:	0005883a 	mov	r2,zero
}
1000ee44:	e037883a 	mov	sp,fp
1000ee48:	df000017 	ldw	fp,0(sp)
1000ee4c:	dec00104 	addi	sp,sp,4
1000ee50:	f800283a 	ret

1000ee54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000ee54:	defff604 	addi	sp,sp,-40
1000ee58:	dfc00915 	stw	ra,36(sp)
1000ee5c:	df000815 	stw	fp,32(sp)
1000ee60:	df000804 	addi	fp,sp,32
1000ee64:	e13ffd15 	stw	r4,-12(fp)
1000ee68:	e17ffe15 	stw	r5,-8(fp)
1000ee6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000ee70:	00bfffc4 	movi	r2,-1
1000ee74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000ee78:	00bffb44 	movi	r2,-19
1000ee7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000ee80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000ee84:	d1600804 	addi	r5,gp,-32736
1000ee88:	e13ffd17 	ldw	r4,-12(fp)
1000ee8c:	000f1700 	call	1000f170 <alt_find_dev>
1000ee90:	e0bff815 	stw	r2,-32(fp)
1000ee94:	e0bff817 	ldw	r2,-32(fp)
1000ee98:	1000051e 	bne	r2,zero,1000eeb0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000ee9c:	e13ffd17 	ldw	r4,-12(fp)
1000eea0:	000f2000 	call	1000f200 <alt_find_file>
1000eea4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000eea8:	00800044 	movi	r2,1
1000eeac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000eeb0:	e0bff817 	ldw	r2,-32(fp)
1000eeb4:	10002926 	beq	r2,zero,1000ef5c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000eeb8:	e13ff817 	ldw	r4,-32(fp)
1000eebc:	000f3080 	call	1000f308 <alt_get_fd>
1000eec0:	e0bff915 	stw	r2,-28(fp)
1000eec4:	e0bff917 	ldw	r2,-28(fp)
1000eec8:	1000030e 	bge	r2,zero,1000eed8 <open+0x84>
    {
      status = index;
1000eecc:	e0bff917 	ldw	r2,-28(fp)
1000eed0:	e0bffa15 	stw	r2,-24(fp)
1000eed4:	00002306 	br	1000ef64 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1000eed8:	e0bff917 	ldw	r2,-28(fp)
1000eedc:	10c00324 	muli	r3,r2,12
1000eee0:	00840074 	movhi	r2,4097
1000eee4:	1080f204 	addi	r2,r2,968
1000eee8:	1885883a 	add	r2,r3,r2
1000eeec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000eef0:	e0fffe17 	ldw	r3,-8(fp)
1000eef4:	00900034 	movhi	r2,16384
1000eef8:	10bfffc4 	addi	r2,r2,-1
1000eefc:	1886703a 	and	r3,r3,r2
1000ef00:	e0bffc17 	ldw	r2,-16(fp)
1000ef04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000ef08:	e0bffb17 	ldw	r2,-20(fp)
1000ef0c:	1000051e 	bne	r2,zero,1000ef24 <open+0xd0>
1000ef10:	e13ffc17 	ldw	r4,-16(fp)
1000ef14:	000ed900 	call	1000ed90 <alt_file_locked>
1000ef18:	e0bffa15 	stw	r2,-24(fp)
1000ef1c:	e0bffa17 	ldw	r2,-24(fp)
1000ef20:	10001016 	blt	r2,zero,1000ef64 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000ef24:	e0bff817 	ldw	r2,-32(fp)
1000ef28:	10800317 	ldw	r2,12(r2)
1000ef2c:	10000826 	beq	r2,zero,1000ef50 <open+0xfc>
1000ef30:	e0bff817 	ldw	r2,-32(fp)
1000ef34:	10800317 	ldw	r2,12(r2)
1000ef38:	e1ffff17 	ldw	r7,-4(fp)
1000ef3c:	e1bffe17 	ldw	r6,-8(fp)
1000ef40:	e17ffd17 	ldw	r5,-12(fp)
1000ef44:	e13ffc17 	ldw	r4,-16(fp)
1000ef48:	103ee83a 	callr	r2
1000ef4c:	00000106 	br	1000ef54 <open+0x100>
1000ef50:	0005883a 	mov	r2,zero
1000ef54:	e0bffa15 	stw	r2,-24(fp)
1000ef58:	00000206 	br	1000ef64 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000ef5c:	00bffb44 	movi	r2,-19
1000ef60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000ef64:	e0bffa17 	ldw	r2,-24(fp)
1000ef68:	1000090e 	bge	r2,zero,1000ef90 <open+0x13c>
  {
    alt_release_fd (index);  
1000ef6c:	e13ff917 	ldw	r4,-28(fp)
1000ef70:	000d8c40 	call	1000d8c4 <alt_release_fd>
    ALT_ERRNO = -status;
1000ef74:	000ed540 	call	1000ed54 <alt_get_errno>
1000ef78:	1007883a 	mov	r3,r2
1000ef7c:	e0bffa17 	ldw	r2,-24(fp)
1000ef80:	0085c83a 	sub	r2,zero,r2
1000ef84:	18800015 	stw	r2,0(r3)
    return -1;
1000ef88:	00bfffc4 	movi	r2,-1
1000ef8c:	00000106 	br	1000ef94 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1000ef90:	e0bff917 	ldw	r2,-28(fp)
}
1000ef94:	e037883a 	mov	sp,fp
1000ef98:	dfc00117 	ldw	ra,4(sp)
1000ef9c:	df000017 	ldw	fp,0(sp)
1000efa0:	dec00204 	addi	sp,sp,8
1000efa4:	f800283a 	ret

1000efa8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000efa8:	defffa04 	addi	sp,sp,-24
1000efac:	df000515 	stw	fp,20(sp)
1000efb0:	df000504 	addi	fp,sp,20
1000efb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000efb8:	0005303a 	rdctl	r2,status
1000efbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000efc0:	e0fffc17 	ldw	r3,-16(fp)
1000efc4:	00bfff84 	movi	r2,-2
1000efc8:	1884703a 	and	r2,r3,r2
1000efcc:	1001703a 	wrctl	status,r2
  
  return context;
1000efd0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000efd4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000efd8:	e0bfff17 	ldw	r2,-4(fp)
1000efdc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000efe0:	e0bffd17 	ldw	r2,-12(fp)
1000efe4:	10800017 	ldw	r2,0(r2)
1000efe8:	e0fffd17 	ldw	r3,-12(fp)
1000efec:	18c00117 	ldw	r3,4(r3)
1000eff0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000eff4:	e0bffd17 	ldw	r2,-12(fp)
1000eff8:	10800117 	ldw	r2,4(r2)
1000effc:	e0fffd17 	ldw	r3,-12(fp)
1000f000:	18c00017 	ldw	r3,0(r3)
1000f004:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f008:	e0bffd17 	ldw	r2,-12(fp)
1000f00c:	e0fffd17 	ldw	r3,-12(fp)
1000f010:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f014:	e0bffd17 	ldw	r2,-12(fp)
1000f018:	e0fffd17 	ldw	r3,-12(fp)
1000f01c:	10c00015 	stw	r3,0(r2)
1000f020:	e0bffb17 	ldw	r2,-20(fp)
1000f024:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f028:	e0bffe17 	ldw	r2,-8(fp)
1000f02c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f030:	0001883a 	nop
1000f034:	e037883a 	mov	sp,fp
1000f038:	df000017 	ldw	fp,0(sp)
1000f03c:	dec00104 	addi	sp,sp,4
1000f040:	f800283a 	ret

1000f044 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f044:	defffb04 	addi	sp,sp,-20
1000f048:	dfc00415 	stw	ra,16(sp)
1000f04c:	df000315 	stw	fp,12(sp)
1000f050:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f054:	d0a00e17 	ldw	r2,-32712(gp)
1000f058:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f05c:	d0a6d817 	ldw	r2,-25760(gp)
1000f060:	10800044 	addi	r2,r2,1
1000f064:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f068:	00002e06 	br	1000f124 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f06c:	e0bffd17 	ldw	r2,-12(fp)
1000f070:	10800017 	ldw	r2,0(r2)
1000f074:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f078:	e0bffd17 	ldw	r2,-12(fp)
1000f07c:	10800403 	ldbu	r2,16(r2)
1000f080:	10803fcc 	andi	r2,r2,255
1000f084:	10000426 	beq	r2,zero,1000f098 <alt_tick+0x54>
1000f088:	d0a6d817 	ldw	r2,-25760(gp)
1000f08c:	1000021e 	bne	r2,zero,1000f098 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f090:	e0bffd17 	ldw	r2,-12(fp)
1000f094:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f098:	e0bffd17 	ldw	r2,-12(fp)
1000f09c:	10800217 	ldw	r2,8(r2)
1000f0a0:	d0e6d817 	ldw	r3,-25760(gp)
1000f0a4:	18801d36 	bltu	r3,r2,1000f11c <alt_tick+0xd8>
1000f0a8:	e0bffd17 	ldw	r2,-12(fp)
1000f0ac:	10800403 	ldbu	r2,16(r2)
1000f0b0:	10803fcc 	andi	r2,r2,255
1000f0b4:	1000191e 	bne	r2,zero,1000f11c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f0b8:	e0bffd17 	ldw	r2,-12(fp)
1000f0bc:	10800317 	ldw	r2,12(r2)
1000f0c0:	e0fffd17 	ldw	r3,-12(fp)
1000f0c4:	18c00517 	ldw	r3,20(r3)
1000f0c8:	1809883a 	mov	r4,r3
1000f0cc:	103ee83a 	callr	r2
1000f0d0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f0d4:	e0bfff17 	ldw	r2,-4(fp)
1000f0d8:	1000031e 	bne	r2,zero,1000f0e8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f0dc:	e13ffd17 	ldw	r4,-12(fp)
1000f0e0:	000efa80 	call	1000efa8 <alt_alarm_stop>
1000f0e4:	00000d06 	br	1000f11c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f0e8:	e0bffd17 	ldw	r2,-12(fp)
1000f0ec:	10c00217 	ldw	r3,8(r2)
1000f0f0:	e0bfff17 	ldw	r2,-4(fp)
1000f0f4:	1887883a 	add	r3,r3,r2
1000f0f8:	e0bffd17 	ldw	r2,-12(fp)
1000f0fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f100:	e0bffd17 	ldw	r2,-12(fp)
1000f104:	10c00217 	ldw	r3,8(r2)
1000f108:	d0a6d817 	ldw	r2,-25760(gp)
1000f10c:	1880032e 	bgeu	r3,r2,1000f11c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f110:	e0bffd17 	ldw	r2,-12(fp)
1000f114:	00c00044 	movi	r3,1
1000f118:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f11c:	e0bffe17 	ldw	r2,-8(fp)
1000f120:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f124:	e0fffd17 	ldw	r3,-12(fp)
1000f128:	d0a00e04 	addi	r2,gp,-32712
1000f12c:	18bfcf1e 	bne	r3,r2,1000f06c <__alt_data_end+0xf800f06c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f130:	0001883a 	nop
}
1000f134:	0001883a 	nop
1000f138:	e037883a 	mov	sp,fp
1000f13c:	dfc00117 	ldw	ra,4(sp)
1000f140:	df000017 	ldw	fp,0(sp)
1000f144:	dec00204 	addi	sp,sp,8
1000f148:	f800283a 	ret

1000f14c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1000f14c:	deffff04 	addi	sp,sp,-4
1000f150:	df000015 	stw	fp,0(sp)
1000f154:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f158:	000170fa 	wrctl	ienable,zero
}
1000f15c:	0001883a 	nop
1000f160:	e037883a 	mov	sp,fp
1000f164:	df000017 	ldw	fp,0(sp)
1000f168:	dec00104 	addi	sp,sp,4
1000f16c:	f800283a 	ret

1000f170 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000f170:	defffa04 	addi	sp,sp,-24
1000f174:	dfc00515 	stw	ra,20(sp)
1000f178:	df000415 	stw	fp,16(sp)
1000f17c:	df000404 	addi	fp,sp,16
1000f180:	e13ffe15 	stw	r4,-8(fp)
1000f184:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000f188:	e0bfff17 	ldw	r2,-4(fp)
1000f18c:	10800017 	ldw	r2,0(r2)
1000f190:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000f194:	e13ffe17 	ldw	r4,-8(fp)
1000f198:	00073a00 	call	100073a0 <strlen>
1000f19c:	10800044 	addi	r2,r2,1
1000f1a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f1a4:	00000d06 	br	1000f1dc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000f1a8:	e0bffc17 	ldw	r2,-16(fp)
1000f1ac:	10800217 	ldw	r2,8(r2)
1000f1b0:	e0fffd17 	ldw	r3,-12(fp)
1000f1b4:	180d883a 	mov	r6,r3
1000f1b8:	e17ffe17 	ldw	r5,-8(fp)
1000f1bc:	1009883a 	mov	r4,r2
1000f1c0:	000f4880 	call	1000f488 <memcmp>
1000f1c4:	1000021e 	bne	r2,zero,1000f1d0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000f1c8:	e0bffc17 	ldw	r2,-16(fp)
1000f1cc:	00000706 	br	1000f1ec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000f1d0:	e0bffc17 	ldw	r2,-16(fp)
1000f1d4:	10800017 	ldw	r2,0(r2)
1000f1d8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f1dc:	e0fffc17 	ldw	r3,-16(fp)
1000f1e0:	e0bfff17 	ldw	r2,-4(fp)
1000f1e4:	18bff01e 	bne	r3,r2,1000f1a8 <__alt_data_end+0xf800f1a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000f1e8:	0005883a 	mov	r2,zero
}
1000f1ec:	e037883a 	mov	sp,fp
1000f1f0:	dfc00117 	ldw	ra,4(sp)
1000f1f4:	df000017 	ldw	fp,0(sp)
1000f1f8:	dec00204 	addi	sp,sp,8
1000f1fc:	f800283a 	ret

1000f200 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f200:	defffb04 	addi	sp,sp,-20
1000f204:	dfc00415 	stw	ra,16(sp)
1000f208:	df000315 	stw	fp,12(sp)
1000f20c:	df000304 	addi	fp,sp,12
1000f210:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f214:	d0a00617 	ldw	r2,-32744(gp)
1000f218:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f21c:	00003106 	br	1000f2e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1000f220:	e0bffd17 	ldw	r2,-12(fp)
1000f224:	10800217 	ldw	r2,8(r2)
1000f228:	1009883a 	mov	r4,r2
1000f22c:	00073a00 	call	100073a0 <strlen>
1000f230:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f234:	e0bffd17 	ldw	r2,-12(fp)
1000f238:	10c00217 	ldw	r3,8(r2)
1000f23c:	e0bffe17 	ldw	r2,-8(fp)
1000f240:	10bfffc4 	addi	r2,r2,-1
1000f244:	1885883a 	add	r2,r3,r2
1000f248:	10800003 	ldbu	r2,0(r2)
1000f24c:	10803fcc 	andi	r2,r2,255
1000f250:	1080201c 	xori	r2,r2,128
1000f254:	10bfe004 	addi	r2,r2,-128
1000f258:	10800bd8 	cmpnei	r2,r2,47
1000f25c:	1000031e 	bne	r2,zero,1000f26c <alt_find_file+0x6c>
    {
      len -= 1;
1000f260:	e0bffe17 	ldw	r2,-8(fp)
1000f264:	10bfffc4 	addi	r2,r2,-1
1000f268:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f26c:	e0bffe17 	ldw	r2,-8(fp)
1000f270:	e0ffff17 	ldw	r3,-4(fp)
1000f274:	1885883a 	add	r2,r3,r2
1000f278:	10800003 	ldbu	r2,0(r2)
1000f27c:	10803fcc 	andi	r2,r2,255
1000f280:	1080201c 	xori	r2,r2,128
1000f284:	10bfe004 	addi	r2,r2,-128
1000f288:	10800be0 	cmpeqi	r2,r2,47
1000f28c:	1000081e 	bne	r2,zero,1000f2b0 <alt_find_file+0xb0>
1000f290:	e0bffe17 	ldw	r2,-8(fp)
1000f294:	e0ffff17 	ldw	r3,-4(fp)
1000f298:	1885883a 	add	r2,r3,r2
1000f29c:	10800003 	ldbu	r2,0(r2)
1000f2a0:	10803fcc 	andi	r2,r2,255
1000f2a4:	1080201c 	xori	r2,r2,128
1000f2a8:	10bfe004 	addi	r2,r2,-128
1000f2ac:	10000a1e 	bne	r2,zero,1000f2d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1000f2b0:	e0bffd17 	ldw	r2,-12(fp)
1000f2b4:	10800217 	ldw	r2,8(r2)
1000f2b8:	e0fffe17 	ldw	r3,-8(fp)
1000f2bc:	180d883a 	mov	r6,r3
1000f2c0:	e17fff17 	ldw	r5,-4(fp)
1000f2c4:	1009883a 	mov	r4,r2
1000f2c8:	000f4880 	call	1000f488 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f2cc:	1000021e 	bne	r2,zero,1000f2d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f2d0:	e0bffd17 	ldw	r2,-12(fp)
1000f2d4:	00000706 	br	1000f2f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1000f2d8:	e0bffd17 	ldw	r2,-12(fp)
1000f2dc:	10800017 	ldw	r2,0(r2)
1000f2e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f2e4:	e0fffd17 	ldw	r3,-12(fp)
1000f2e8:	d0a00604 	addi	r2,gp,-32744
1000f2ec:	18bfcc1e 	bne	r3,r2,1000f220 <__alt_data_end+0xf800f220>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000f2f0:	0005883a 	mov	r2,zero
}
1000f2f4:	e037883a 	mov	sp,fp
1000f2f8:	dfc00117 	ldw	ra,4(sp)
1000f2fc:	df000017 	ldw	fp,0(sp)
1000f300:	dec00204 	addi	sp,sp,8
1000f304:	f800283a 	ret

1000f308 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000f308:	defffc04 	addi	sp,sp,-16
1000f30c:	df000315 	stw	fp,12(sp)
1000f310:	df000304 	addi	fp,sp,12
1000f314:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1000f318:	00bffa04 	movi	r2,-24
1000f31c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f320:	e03ffd15 	stw	zero,-12(fp)
1000f324:	00001906 	br	1000f38c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
1000f328:	00840074 	movhi	r2,4097
1000f32c:	1080f204 	addi	r2,r2,968
1000f330:	e0fffd17 	ldw	r3,-12(fp)
1000f334:	18c00324 	muli	r3,r3,12
1000f338:	10c5883a 	add	r2,r2,r3
1000f33c:	10800017 	ldw	r2,0(r2)
1000f340:	10000f1e 	bne	r2,zero,1000f380 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
1000f344:	00840074 	movhi	r2,4097
1000f348:	1080f204 	addi	r2,r2,968
1000f34c:	e0fffd17 	ldw	r3,-12(fp)
1000f350:	18c00324 	muli	r3,r3,12
1000f354:	10c5883a 	add	r2,r2,r3
1000f358:	e0ffff17 	ldw	r3,-4(fp)
1000f35c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000f360:	d0e00a17 	ldw	r3,-32728(gp)
1000f364:	e0bffd17 	ldw	r2,-12(fp)
1000f368:	1880020e 	bge	r3,r2,1000f374 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
1000f36c:	e0bffd17 	ldw	r2,-12(fp)
1000f370:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
1000f374:	e0bffd17 	ldw	r2,-12(fp)
1000f378:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1000f37c:	00000606 	br	1000f398 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f380:	e0bffd17 	ldw	r2,-12(fp)
1000f384:	10800044 	addi	r2,r2,1
1000f388:	e0bffd15 	stw	r2,-12(fp)
1000f38c:	e0bffd17 	ldw	r2,-12(fp)
1000f390:	10800810 	cmplti	r2,r2,32
1000f394:	103fe41e 	bne	r2,zero,1000f328 <__alt_data_end+0xf800f328>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000f398:	e0bffe17 	ldw	r2,-8(fp)
}
1000f39c:	e037883a 	mov	sp,fp
1000f3a0:	df000017 	ldw	fp,0(sp)
1000f3a4:	dec00104 	addi	sp,sp,4
1000f3a8:	f800283a 	ret

1000f3ac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1000f3ac:	defffb04 	addi	sp,sp,-20
1000f3b0:	df000415 	stw	fp,16(sp)
1000f3b4:	df000404 	addi	fp,sp,16
1000f3b8:	e13ffe15 	stw	r4,-8(fp)
1000f3bc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1000f3c0:	e0bfff17 	ldw	r2,-4(fp)
1000f3c4:	10840070 	cmpltui	r2,r2,4097
1000f3c8:	1000021e 	bne	r2,zero,1000f3d4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
1000f3cc:	00840004 	movi	r2,4096
1000f3d0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
1000f3d4:	e0fffe17 	ldw	r3,-8(fp)
1000f3d8:	e0bfff17 	ldw	r2,-4(fp)
1000f3dc:	1885883a 	add	r2,r3,r2
1000f3e0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1000f3e4:	e0bffe17 	ldw	r2,-8(fp)
1000f3e8:	e0bffc15 	stw	r2,-16(fp)
1000f3ec:	00000506 	br	1000f404 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1000f3f0:	e0bffc17 	ldw	r2,-16(fp)
1000f3f4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1000f3f8:	e0bffc17 	ldw	r2,-16(fp)
1000f3fc:	10800804 	addi	r2,r2,32
1000f400:	e0bffc15 	stw	r2,-16(fp)
1000f404:	e0fffc17 	ldw	r3,-16(fp)
1000f408:	e0bffd17 	ldw	r2,-12(fp)
1000f40c:	18bff836 	bltu	r3,r2,1000f3f0 <__alt_data_end+0xf800f3f0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
1000f410:	e0bffe17 	ldw	r2,-8(fp)
1000f414:	108007cc 	andi	r2,r2,31
1000f418:	10000226 	beq	r2,zero,1000f424 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1000f41c:	e0bffc17 	ldw	r2,-16(fp)
1000f420:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
1000f424:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
1000f428:	0001883a 	nop
1000f42c:	e037883a 	mov	sp,fp
1000f430:	df000017 	ldw	fp,0(sp)
1000f434:	dec00104 	addi	sp,sp,4
1000f438:	f800283a 	ret

1000f43c <atexit>:
1000f43c:	200b883a 	mov	r5,r4
1000f440:	000f883a 	mov	r7,zero
1000f444:	000d883a 	mov	r6,zero
1000f448:	0009883a 	mov	r4,zero
1000f44c:	000f5041 	jmpi	1000f504 <__register_exitproc>

1000f450 <exit>:
1000f450:	defffe04 	addi	sp,sp,-8
1000f454:	000b883a 	mov	r5,zero
1000f458:	dc000015 	stw	r16,0(sp)
1000f45c:	dfc00115 	stw	ra,4(sp)
1000f460:	2021883a 	mov	r16,r4
1000f464:	000f61c0 	call	1000f61c <__call_exitprocs>
1000f468:	00840074 	movhi	r2,4097
1000f46c:	10856a04 	addi	r2,r2,5544
1000f470:	11000017 	ldw	r4,0(r2)
1000f474:	20800f17 	ldw	r2,60(r4)
1000f478:	10000126 	beq	r2,zero,1000f480 <exit+0x30>
1000f47c:	103ee83a 	callr	r2
1000f480:	8009883a 	mov	r4,r16
1000f484:	000f79c0 	call	1000f79c <_exit>

1000f488 <memcmp>:
1000f488:	01c000c4 	movi	r7,3
1000f48c:	3980192e 	bgeu	r7,r6,1000f4f4 <memcmp+0x6c>
1000f490:	2144b03a 	or	r2,r4,r5
1000f494:	11c4703a 	and	r2,r2,r7
1000f498:	10000f26 	beq	r2,zero,1000f4d8 <memcmp+0x50>
1000f49c:	20800003 	ldbu	r2,0(r4)
1000f4a0:	28c00003 	ldbu	r3,0(r5)
1000f4a4:	10c0151e 	bne	r2,r3,1000f4fc <memcmp+0x74>
1000f4a8:	31bfff84 	addi	r6,r6,-2
1000f4ac:	01ffffc4 	movi	r7,-1
1000f4b0:	00000406 	br	1000f4c4 <memcmp+0x3c>
1000f4b4:	20800003 	ldbu	r2,0(r4)
1000f4b8:	28c00003 	ldbu	r3,0(r5)
1000f4bc:	31bfffc4 	addi	r6,r6,-1
1000f4c0:	10c00e1e 	bne	r2,r3,1000f4fc <memcmp+0x74>
1000f4c4:	21000044 	addi	r4,r4,1
1000f4c8:	29400044 	addi	r5,r5,1
1000f4cc:	31fff91e 	bne	r6,r7,1000f4b4 <__alt_data_end+0xf800f4b4>
1000f4d0:	0005883a 	mov	r2,zero
1000f4d4:	f800283a 	ret
1000f4d8:	20c00017 	ldw	r3,0(r4)
1000f4dc:	28800017 	ldw	r2,0(r5)
1000f4e0:	18bfee1e 	bne	r3,r2,1000f49c <__alt_data_end+0xf800f49c>
1000f4e4:	31bfff04 	addi	r6,r6,-4
1000f4e8:	21000104 	addi	r4,r4,4
1000f4ec:	29400104 	addi	r5,r5,4
1000f4f0:	39bff936 	bltu	r7,r6,1000f4d8 <__alt_data_end+0xf800f4d8>
1000f4f4:	303fe91e 	bne	r6,zero,1000f49c <__alt_data_end+0xf800f49c>
1000f4f8:	003ff506 	br	1000f4d0 <__alt_data_end+0xf800f4d0>
1000f4fc:	10c5c83a 	sub	r2,r2,r3
1000f500:	f800283a 	ret

1000f504 <__register_exitproc>:
1000f504:	defffa04 	addi	sp,sp,-24
1000f508:	dc000315 	stw	r16,12(sp)
1000f50c:	04040074 	movhi	r16,4097
1000f510:	84056a04 	addi	r16,r16,5544
1000f514:	80c00017 	ldw	r3,0(r16)
1000f518:	dc400415 	stw	r17,16(sp)
1000f51c:	dfc00515 	stw	ra,20(sp)
1000f520:	18805217 	ldw	r2,328(r3)
1000f524:	2023883a 	mov	r17,r4
1000f528:	10003726 	beq	r2,zero,1000f608 <__register_exitproc+0x104>
1000f52c:	10c00117 	ldw	r3,4(r2)
1000f530:	010007c4 	movi	r4,31
1000f534:	20c00e16 	blt	r4,r3,1000f570 <__register_exitproc+0x6c>
1000f538:	1a000044 	addi	r8,r3,1
1000f53c:	8800221e 	bne	r17,zero,1000f5c8 <__register_exitproc+0xc4>
1000f540:	18c00084 	addi	r3,r3,2
1000f544:	18c7883a 	add	r3,r3,r3
1000f548:	18c7883a 	add	r3,r3,r3
1000f54c:	12000115 	stw	r8,4(r2)
1000f550:	10c7883a 	add	r3,r2,r3
1000f554:	19400015 	stw	r5,0(r3)
1000f558:	0005883a 	mov	r2,zero
1000f55c:	dfc00517 	ldw	ra,20(sp)
1000f560:	dc400417 	ldw	r17,16(sp)
1000f564:	dc000317 	ldw	r16,12(sp)
1000f568:	dec00604 	addi	sp,sp,24
1000f56c:	f800283a 	ret
1000f570:	00800034 	movhi	r2,0
1000f574:	10800004 	addi	r2,r2,0
1000f578:	10002626 	beq	r2,zero,1000f614 <__register_exitproc+0x110>
1000f57c:	01006404 	movi	r4,400
1000f580:	d9400015 	stw	r5,0(sp)
1000f584:	d9800115 	stw	r6,4(sp)
1000f588:	d9c00215 	stw	r7,8(sp)
1000f58c:	00000000 	call	10000000 <__alt_mem_SDRAM>
1000f590:	d9400017 	ldw	r5,0(sp)
1000f594:	d9800117 	ldw	r6,4(sp)
1000f598:	d9c00217 	ldw	r7,8(sp)
1000f59c:	10001d26 	beq	r2,zero,1000f614 <__register_exitproc+0x110>
1000f5a0:	81000017 	ldw	r4,0(r16)
1000f5a4:	10000115 	stw	zero,4(r2)
1000f5a8:	02000044 	movi	r8,1
1000f5ac:	22405217 	ldw	r9,328(r4)
1000f5b0:	0007883a 	mov	r3,zero
1000f5b4:	12400015 	stw	r9,0(r2)
1000f5b8:	20805215 	stw	r2,328(r4)
1000f5bc:	10006215 	stw	zero,392(r2)
1000f5c0:	10006315 	stw	zero,396(r2)
1000f5c4:	883fde26 	beq	r17,zero,1000f540 <__alt_data_end+0xf800f540>
1000f5c8:	18c9883a 	add	r4,r3,r3
1000f5cc:	2109883a 	add	r4,r4,r4
1000f5d0:	1109883a 	add	r4,r2,r4
1000f5d4:	21802215 	stw	r6,136(r4)
1000f5d8:	01800044 	movi	r6,1
1000f5dc:	12406217 	ldw	r9,392(r2)
1000f5e0:	30cc983a 	sll	r6,r6,r3
1000f5e4:	4992b03a 	or	r9,r9,r6
1000f5e8:	12406215 	stw	r9,392(r2)
1000f5ec:	21c04215 	stw	r7,264(r4)
1000f5f0:	01000084 	movi	r4,2
1000f5f4:	893fd21e 	bne	r17,r4,1000f540 <__alt_data_end+0xf800f540>
1000f5f8:	11006317 	ldw	r4,396(r2)
1000f5fc:	218cb03a 	or	r6,r4,r6
1000f600:	11806315 	stw	r6,396(r2)
1000f604:	003fce06 	br	1000f540 <__alt_data_end+0xf800f540>
1000f608:	18805304 	addi	r2,r3,332
1000f60c:	18805215 	stw	r2,328(r3)
1000f610:	003fc606 	br	1000f52c <__alt_data_end+0xf800f52c>
1000f614:	00bfffc4 	movi	r2,-1
1000f618:	003fd006 	br	1000f55c <__alt_data_end+0xf800f55c>

1000f61c <__call_exitprocs>:
1000f61c:	defff504 	addi	sp,sp,-44
1000f620:	df000915 	stw	fp,36(sp)
1000f624:	dd400615 	stw	r21,24(sp)
1000f628:	dc800315 	stw	r18,12(sp)
1000f62c:	dfc00a15 	stw	ra,40(sp)
1000f630:	ddc00815 	stw	r23,32(sp)
1000f634:	dd800715 	stw	r22,28(sp)
1000f638:	dd000515 	stw	r20,20(sp)
1000f63c:	dcc00415 	stw	r19,16(sp)
1000f640:	dc400215 	stw	r17,8(sp)
1000f644:	dc000115 	stw	r16,4(sp)
1000f648:	d9000015 	stw	r4,0(sp)
1000f64c:	2839883a 	mov	fp,r5
1000f650:	04800044 	movi	r18,1
1000f654:	057fffc4 	movi	r21,-1
1000f658:	00840074 	movhi	r2,4097
1000f65c:	10856a04 	addi	r2,r2,5544
1000f660:	12000017 	ldw	r8,0(r2)
1000f664:	45005217 	ldw	r20,328(r8)
1000f668:	44c05204 	addi	r19,r8,328
1000f66c:	a0001c26 	beq	r20,zero,1000f6e0 <__call_exitprocs+0xc4>
1000f670:	a0800117 	ldw	r2,4(r20)
1000f674:	15ffffc4 	addi	r23,r2,-1
1000f678:	b8000d16 	blt	r23,zero,1000f6b0 <__call_exitprocs+0x94>
1000f67c:	14000044 	addi	r16,r2,1
1000f680:	8421883a 	add	r16,r16,r16
1000f684:	8421883a 	add	r16,r16,r16
1000f688:	84402004 	addi	r17,r16,128
1000f68c:	a463883a 	add	r17,r20,r17
1000f690:	a421883a 	add	r16,r20,r16
1000f694:	e0001e26 	beq	fp,zero,1000f710 <__call_exitprocs+0xf4>
1000f698:	80804017 	ldw	r2,256(r16)
1000f69c:	e0801c26 	beq	fp,r2,1000f710 <__call_exitprocs+0xf4>
1000f6a0:	bdffffc4 	addi	r23,r23,-1
1000f6a4:	843fff04 	addi	r16,r16,-4
1000f6a8:	8c7fff04 	addi	r17,r17,-4
1000f6ac:	bd7ff91e 	bne	r23,r21,1000f694 <__alt_data_end+0xf800f694>
1000f6b0:	00800034 	movhi	r2,0
1000f6b4:	10800004 	addi	r2,r2,0
1000f6b8:	10000926 	beq	r2,zero,1000f6e0 <__call_exitprocs+0xc4>
1000f6bc:	a0800117 	ldw	r2,4(r20)
1000f6c0:	1000301e 	bne	r2,zero,1000f784 <__call_exitprocs+0x168>
1000f6c4:	a0800017 	ldw	r2,0(r20)
1000f6c8:	10003226 	beq	r2,zero,1000f794 <__call_exitprocs+0x178>
1000f6cc:	a009883a 	mov	r4,r20
1000f6d0:	98800015 	stw	r2,0(r19)
1000f6d4:	00000000 	call	10000000 <__alt_mem_SDRAM>
1000f6d8:	9d000017 	ldw	r20,0(r19)
1000f6dc:	a03fe41e 	bne	r20,zero,1000f670 <__alt_data_end+0xf800f670>
1000f6e0:	dfc00a17 	ldw	ra,40(sp)
1000f6e4:	df000917 	ldw	fp,36(sp)
1000f6e8:	ddc00817 	ldw	r23,32(sp)
1000f6ec:	dd800717 	ldw	r22,28(sp)
1000f6f0:	dd400617 	ldw	r21,24(sp)
1000f6f4:	dd000517 	ldw	r20,20(sp)
1000f6f8:	dcc00417 	ldw	r19,16(sp)
1000f6fc:	dc800317 	ldw	r18,12(sp)
1000f700:	dc400217 	ldw	r17,8(sp)
1000f704:	dc000117 	ldw	r16,4(sp)
1000f708:	dec00b04 	addi	sp,sp,44
1000f70c:	f800283a 	ret
1000f710:	a0800117 	ldw	r2,4(r20)
1000f714:	80c00017 	ldw	r3,0(r16)
1000f718:	10bfffc4 	addi	r2,r2,-1
1000f71c:	15c01426 	beq	r2,r23,1000f770 <__call_exitprocs+0x154>
1000f720:	80000015 	stw	zero,0(r16)
1000f724:	183fde26 	beq	r3,zero,1000f6a0 <__alt_data_end+0xf800f6a0>
1000f728:	95c8983a 	sll	r4,r18,r23
1000f72c:	a0806217 	ldw	r2,392(r20)
1000f730:	a5800117 	ldw	r22,4(r20)
1000f734:	2084703a 	and	r2,r4,r2
1000f738:	10000b26 	beq	r2,zero,1000f768 <__call_exitprocs+0x14c>
1000f73c:	a0806317 	ldw	r2,396(r20)
1000f740:	2088703a 	and	r4,r4,r2
1000f744:	20000c1e 	bne	r4,zero,1000f778 <__call_exitprocs+0x15c>
1000f748:	89400017 	ldw	r5,0(r17)
1000f74c:	d9000017 	ldw	r4,0(sp)
1000f750:	183ee83a 	callr	r3
1000f754:	a0800117 	ldw	r2,4(r20)
1000f758:	15bfbf1e 	bne	r2,r22,1000f658 <__alt_data_end+0xf800f658>
1000f75c:	98800017 	ldw	r2,0(r19)
1000f760:	153fcf26 	beq	r2,r20,1000f6a0 <__alt_data_end+0xf800f6a0>
1000f764:	003fbc06 	br	1000f658 <__alt_data_end+0xf800f658>
1000f768:	183ee83a 	callr	r3
1000f76c:	003ff906 	br	1000f754 <__alt_data_end+0xf800f754>
1000f770:	a5c00115 	stw	r23,4(r20)
1000f774:	003feb06 	br	1000f724 <__alt_data_end+0xf800f724>
1000f778:	89000017 	ldw	r4,0(r17)
1000f77c:	183ee83a 	callr	r3
1000f780:	003ff406 	br	1000f754 <__alt_data_end+0xf800f754>
1000f784:	a0800017 	ldw	r2,0(r20)
1000f788:	a027883a 	mov	r19,r20
1000f78c:	1029883a 	mov	r20,r2
1000f790:	003fb606 	br	1000f66c <__alt_data_end+0xf800f66c>
1000f794:	0005883a 	mov	r2,zero
1000f798:	003ffb06 	br	1000f788 <__alt_data_end+0xf800f788>

1000f79c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000f79c:	defffd04 	addi	sp,sp,-12
1000f7a0:	df000215 	stw	fp,8(sp)
1000f7a4:	df000204 	addi	fp,sp,8
1000f7a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000f7ac:	0001883a 	nop
1000f7b0:	e0bfff17 	ldw	r2,-4(fp)
1000f7b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000f7b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000f7bc:	10000226 	beq	r2,zero,1000f7c8 <_exit+0x2c>
    ALT_SIM_FAIL();
1000f7c0:	002af070 	cmpltui	zero,zero,43969
1000f7c4:	00000106 	br	1000f7cc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000f7c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000f7cc:	003fff06 	br	1000f7cc <__alt_data_end+0xf800f7cc>
